;; -*- scheme -*-
; object definitions ...
(define-object Info
  (in-module "GApp")
  (c-name "GAppInfo")
  (gtype-id "G_TYPE_APP_INFO")
)

(define-object LaunchContext
  (in-module "GApp")
  (parent "GObject")
  (c-name "GAppLaunchContext")
  (gtype-id "G_TYPE_APP_LAUNCH_CONTEXT")
)

(define-object n
  (in-module "GApplicatio")
  (parent "GObject")
  (c-name "GApplication")
  (gtype-id "G_TYPE_APPLICATION")
)

(define-object CommandLine
  (in-module "GApplication")
  (parent "GObject")
  (c-name "GApplicationCommandLine")
  (gtype-id "G_TYPE_APPLICATION_COMMAND_LINE")
)

(define-object Initable
  (in-module "GAsync")
  (c-name "GAsyncInitable")
  (gtype-id "G_TYPE_ASYNC_INITABLE")
)

(define-object Result
  (in-module "GAsync")
  (c-name "GAsyncResult")
  (gtype-id "G_TYPE_ASYNC_RESULT")
)

(define-object e
  (in-module "GCancellabl")
  (parent "GObject")
  (c-name "GCancellable")
  (gtype-id "G_TYPE_CANCELLABLE")
)

(define-object r
  (in-module "GConverte")
  (c-name "GConverter")
  (gtype-id "G_TYPE_CONVERTER")
)

(define-object Auth
  (in-module "GDBus")
  (parent "GObject")
  (c-name "GDBusAuth")
  (gtype-id "G_TYPE_D_BUS_AUTH")
)

(define-object AuthMechanism
  (in-module "GDBus")
  (parent "GObject")
  (c-name "GDBusAuthMechanism")
  (gtype-id "G_TYPE_D_BUS_AUTH_MECHANISM")
)

(define-object AuthMechanismAnon
  (in-module "GDBus")
  (parent "GDBusAuthMechanism")
  (c-name "GDBusAuthMechanismAnon")
  (gtype-id "G_TYPE_D_BUS_AUTH_MECHANISM_ANON")
)

(define-object AuthMechanismExternal
  (in-module "GDBus")
  (parent "GDBusAuthMechanism")
  (c-name "GDBusAuthMechanismExternal")
  (gtype-id "G_TYPE_D_BUS_AUTH_MECHANISM_EXTERNAL")
)

(define-object AuthMechanismSha1
  (in-module "GDBus")
  (parent "GDBusAuthMechanism")
  (c-name "GDBusAuthMechanismSha1")
  (gtype-id "G_TYPE_D_BUS_AUTH_MECHANISM_SHA1")
)

(define-object Interface
  (in-module "GDBus")
  (c-name "GDBusInterface")
  (gtype-id "G_TYPE_D_BUS_INTERFACE")
)

(define-object InterfaceSkeleton
  (in-module "GDBus")
  (parent "GObject")
  (c-name "GDBusInterfaceSkeleton")
  (gtype-id "G_TYPE_D_BUS_INTERFACE_SKELETON")
)

(define-object Object
  (in-module "GDBus")
  (c-name "GDBusObject")
  (gtype-id "G_TYPE_D_BUS_OBJECT")
)

(define-object ObjectManager
  (in-module "GDBus")
  (c-name "GDBusObjectManager")
  (gtype-id "G_TYPE_D_BUS_OBJECT_MANAGER")
)

(define-object ObjectManagerClient
  (in-module "GDBus")
  (parent "GObject")
  (c-name "GDBusObjectManagerClient")
  (gtype-id "G_TYPE_D_BUS_OBJECT_MANAGER_CLIENT")
)

(define-object ObjectManagerServer
  (in-module "GDBus")
  (parent "GObject")
  (c-name "GDBusObjectManagerServer")
  (gtype-id "G_TYPE_D_BUS_OBJECT_MANAGER_SERVER")
)

(define-object ObjectProxy
  (in-module "GDBus")
  (parent "GObject")
  (c-name "GDBusObjectProxy")
  (gtype-id "G_TYPE_D_BUS_OBJECT_PROXY")
)

(define-object ObjectSkeleton
  (in-module "GDBus")
  (parent "GObject")
  (c-name "GDBusObjectSkeleton")
  (gtype-id "G_TYPE_D_BUS_OBJECT_SKELETON")
)

(define-object Proxy
  (in-module "GDBus")
  (parent "GObject")
  (c-name "GDBusProxy")
  (gtype-id "G_TYPE_D_BUS_PROXY")
)

(define-object AppInfoLookup
  (in-module "GDesktop")
  (c-name "GDesktopAppInfoLookup")
  (gtype-id "G_TYPE_DESKTOP_APP_INFO_LOOKUP")
)

(define-object e
  (in-module "GDriv")
  (c-name "GDrive")
  (gtype-id "G_TYPE_DRIVE")
)

(define-object Icon
  (in-module "GEmblemed")
  (parent "GObject")
  (c-name "GEmblemedIcon")
  (gtype-id "G_TYPE_EMBLEMED_ICON")
)

(define-object e
  (in-module "GFil")
  (c-name "GFile")
  (gtype-id "G_TYPE_FILE")
)

(define-object DescriptorBased
  (in-module "GFile")
  (c-name "GFileDescriptorBased")
  (gtype-id "G_TYPE_FILE_DESCRIPTOR_BASED")
)

(define-object Enumerator
  (in-module "GFile")
  (parent "GObject")
  (c-name "GFileEnumerator")
  (gtype-id "G_TYPE_FILE_ENUMERATOR")
)

(define-object Monitor
  (in-module "GFile")
  (parent "GObject")
  (c-name "GFileMonitor")
  (gtype-id "G_TYPE_FILE_MONITOR")
)

(define-object m
  (in-module "GIOStrea")
  (parent "GObject")
  (c-name "GIOStream")
  (gtype-id "G_TYPE_IO_STREAM")
)

(define-object IOStream
  (in-module "GFile")
  (parent "GIOStream")
  (c-name "GFileIOStream")
  (gtype-id "G_TYPE_FILE_IO_STREAM")
)

(define-object n
  (in-module "GIco")
  (c-name "GIcon")
  (gtype-id "G_TYPE_ICON")
)

(define-object Address
  (in-module "GInet")
  (parent "GObject")
  (c-name "GInetAddress")
  (gtype-id "G_TYPE_INET_ADDRESS")
)

(define-object AddressMask
  (in-module "GInet")
  (parent "GObject")
  (c-name "GInetAddressMask")
  (gtype-id "G_TYPE_INET_ADDRESS_MASK")
)

(define-object e
  (in-module "GInitabl")
  (c-name "GInitable")
  (gtype-id "G_TYPE_INITABLE")
)

(define-object Stream
  (in-module "GInput")
  (parent "GObject")
  (c-name "GInputStream")
  (gtype-id "G_TYPE_INPUT_STREAM")
)

(define-object InputStream
  (in-module "GFilter")
  (parent "GInputStream")
  (c-name "GFilterInputStream")
  (gtype-id "G_TYPE_FILTER_INPUT_STREAM")
)

(define-object InputStream
  (in-module "GBuffered")
  (parent "GFilterInputStream")
  (c-name "GBufferedInputStream")
  (gtype-id "G_TYPE_BUFFERED_INPUT_STREAM")
)

(define-object InputStream
  (in-module "GData")
  (parent "GBufferedInputStream")
  (c-name "GDataInputStream")
  (gtype-id "G_TYPE_DATA_INPUT_STREAM")
)

(define-object InputStream
  (in-module "GConverter")
  (parent "GFilterInputStream")
  (c-name "GConverterInputStream")
  (gtype-id "G_TYPE_CONVERTER_INPUT_STREAM")
)

(define-object InputStream
  (in-module "GFile")
  (parent "GInputStream")
  (c-name "GFileInputStream")
  (gtype-id "G_TYPE_FILE_INPUT_STREAM")
)

(define-object Icon
  (in-module "GLoadable")
  (c-name "GLoadableIcon")
  (gtype-id "G_TYPE_LOADABLE_ICON")
)

(define-object FileIOStream
  (in-module "GLocal")
  (parent "GFileIOStream")
  (c-name "GLocalFileIOStream")
  (gtype-id "G_TYPE_LOCAL_FILE_IO_STREAM")
)

(define-object FileInputStream
  (in-module "GLocal")
  (parent "GFileInputStream")
  (c-name "GLocalFileInputStream")
  (gtype-id "G_TYPE_LOCAL_FILE_INPUT_STREAM")
)

(define-object FileMonitor
  (in-module "GLocal")
  (parent "GFileMonitor")
  (c-name "GLocalFileMonitor")
  (gtype-id "G_TYPE_LOCAL_FILE_MONITOR")
)

(define-object InputStream
  (in-module "GMemory")
  (parent "GInputStream")
  (c-name "GMemoryInputStream")
  (gtype-id "G_TYPE_MEMORY_INPUT_STREAM")
)

(define-object AttributeIter
  (in-module "GMenu")
  (parent "GObject")
  (c-name "GMenuAttributeIter")
  (gtype-id "G_TYPE_MENU_ATTRIBUTE_ITER")
)

(define-object LinkIter
  (in-module "GMenu")
  (parent "GObject")
  (c-name "GMenuLinkIter")
  (gtype-id "G_TYPE_MENU_LINK_ITER")
)

(define-object Model
  (in-module "GMenu")
  (parent "GObject")
  (c-name "GMenuModel")
  (gtype-id "G_TYPE_MENU_MODEL")
)

(define-object t
  (in-module "GMoun")
  (c-name "GMount")
  (gtype-id "G_TYPE_MOUNT")
)

(define-object Operation
  (in-module "GMount")
  (parent "GObject")
  (c-name "GMountOperation")
  (gtype-id "G_TYPE_MOUNT_OPERATION")
)

(define-object Address
  (in-module "GNetwork")
  (parent "GObject")
  (c-name "GNetworkAddress")
  (gtype-id "G_TYPE_NETWORK_ADDRESS")
)

(define-object MonitorBase
  (in-module "GNetwork")
  (parent "GObject")
  (c-name "GNetworkMonitorBase")
  (gtype-id "G_TYPE_NETWORK_MONITOR_BASE")
)

(define-object MonitorNetlink
  (in-module "GNetwork")
  (parent "GNetworkMonitorBase")
  (c-name "GNetworkMonitorNetlink")
  (gtype-id "G_TYPE_NETWORK_MONITOR_NETLINK")
)

(define-object MonitorNM
  (in-module "GNetwork")
  (parent "GNetworkMonitorNetlink")
  (c-name "GNetworkMonitorNM")
  (gtype-id "G_TYPE_NETWORK_MONITOR_NM")
)

(define-object MonitorPortal
  (in-module "GNetwork")
  (parent "GNetworkMonitorBase")
  (c-name "GNetworkMonitorPortal")
  (gtype-id "G_TYPE_NETWORK_MONITOR_PORTAL")
)

(define-object Service
  (in-module "GNetwork")
  (parent "GObject")
  (c-name "GNetworkService")
  (gtype-id "G_TYPE_NETWORK_SERVICE")
)

(define-object Backend
  (in-module "GNotification")
  (parent "GObject")
  (c-name "GNotificationBackend")
  (gtype-id "G_TYPE_NOTIFICATION_BACKEND")
)

(define-object Stream
  (in-module "GOutput")
  (parent "GObject")
  (c-name "GOutputStream")
  (gtype-id "G_TYPE_OUTPUT_STREAM")
)

(define-object OutputStream
  (in-module "GMemory")
  (parent "GOutputStream")
  (c-name "GMemoryOutputStream")
  (gtype-id "G_TYPE_MEMORY_OUTPUT_STREAM")
)

(define-object OutputStream
  (in-module "GFilter")
  (parent "GOutputStream")
  (c-name "GFilterOutputStream")
  (gtype-id "G_TYPE_FILTER_OUTPUT_STREAM")
)

(define-object OutputStream
  (in-module "GBuffered")
  (parent "GFilterOutputStream")
  (c-name "GBufferedOutputStream")
  (gtype-id "G_TYPE_BUFFERED_OUTPUT_STREAM")
)

(define-object OutputStream
  (in-module "GConverter")
  (parent "GFilterOutputStream")
  (c-name "GConverterOutputStream")
  (gtype-id "G_TYPE_CONVERTER_OUTPUT_STREAM")
)

(define-object OutputStream
  (in-module "GData")
  (parent "GFilterOutputStream")
  (c-name "GDataOutputStream")
  (gtype-id "G_TYPE_DATA_OUTPUT_STREAM")
)

(define-object OutputStream
  (in-module "GFile")
  (parent "GOutputStream")
  (c-name "GFileOutputStream")
  (gtype-id "G_TYPE_FILE_OUTPUT_STREAM")
)

(define-object FileOutputStream
  (in-module "GLocal")
  (parent "GFileOutputStream")
  (c-name "GLocalFileOutputStream")
  (gtype-id "G_TYPE_LOCAL_FILE_OUTPUT_STREAM")
)

(define-object n
  (in-module "GPermissio")
  (parent "GObject")
  (c-name "GPermission")
  (gtype-id "G_TYPE_PERMISSION")
)

(define-object r
  (in-module "GResolve")
  (parent "GObject")
  (c-name "GResolver")
  (gtype-id "G_TYPE_RESOLVER")
)

(define-object e
  (in-module "GSeekabl")
  (c-name "GSeekable")
  (gtype-id "G_TYPE_SEEKABLE")
)

(define-object s
  (in-module "GSetting")
  (parent "GObject")
  (c-name "GSettings")
  (gtype-id "G_TYPE_SETTINGS")
)

(define-object Backend
  (in-module "GSettings")
  (parent "GObject")
  (c-name "GSettingsBackend")
  (gtype-id "G_TYPE_SETTINGS_BACKEND")
)

(define-object SettingsBackend
  (in-module "GDelayed")
  (parent "GSettingsBackend")
  (c-name "GDelayedSettingsBackend")
  (gtype-id "G_TYPE_DELAYED_SETTINGS_BACKEND")
)

(define-object ActionGroup
  (in-module "GSimple")
  (parent "GObject")
  (c-name "GSimpleActionGroup")
  (gtype-id "G_TYPE_SIMPLE_ACTION_GROUP")
)

(define-object ProxyResolver
  (in-module "GSimple")
  (parent "GObject")
  (c-name "GSimpleProxyResolver")
  (gtype-id "G_TYPE_SIMPLE_PROXY_RESOLVER")
)

(define-object t
  (in-module "GSocke")
  (parent "GObject")
  (c-name "GSocket")
  (gtype-id "G_TYPE_SOCKET")
)

(define-object Address
  (in-module "GSocket")
  (parent "GObject")
  (c-name "GSocketAddress")
  (gtype-id "G_TYPE_SOCKET_ADDRESS")
)

(define-object SocketAddress
  (in-module "GNative")
  (parent "GSocketAddress")
  (c-name "GNativeSocketAddress")
  (gtype-id "G_TYPE_NATIVE_SOCKET_ADDRESS")
)

(define-object SocketAddress
  (in-module "GInet")
  (parent "GSocketAddress")
  (c-name "GInetSocketAddress")
  (gtype-id "G_TYPE_INET_SOCKET_ADDRESS")
)

(define-object Address
  (in-module "GProxy")
  (parent "GInetSocketAddress")
  (c-name "GProxyAddress")
  (gtype-id "G_TYPE_PROXY_ADDRESS")
)

(define-object AddressEnumerator
  (in-module "GSocket")
  (parent "GObject")
  (c-name "GSocketAddressEnumerator")
  (gtype-id "G_TYPE_SOCKET_ADDRESS_ENUMERATOR")
)

(define-object AddressEnumerator
  (in-module "GProxy")
  (parent "GSocketAddressEnumerator")
  (c-name "GProxyAddressEnumerator")
  (gtype-id "G_TYPE_PROXY_ADDRESS_ENUMERATOR")
)

(define-object Client
  (in-module "GSocket")
  (parent "GObject")
  (c-name "GSocketClient")
  (gtype-id "G_TYPE_SOCKET_CLIENT")
)

(define-object Connectable
  (in-module "GSocket")
  (c-name "GSocketConnectable")
  (gtype-id "G_TYPE_SOCKET_CONNECTABLE")
)

(define-object Connection
  (in-module "GSocket")
  (parent "GIOStream")
  (c-name "GSocketConnection")
  (gtype-id "G_TYPE_SOCKET_CONNECTION")
)

(define-object ControlMessage
  (in-module "GSocket")
  (parent "GObject")
  (c-name "GSocketControlMessage")
  (gtype-id "G_TYPE_SOCKET_CONTROL_MESSAGE")
)

(define-object InputStream
  (in-module "GSocket")
  (parent "GInputStream")
  (c-name "GSocketInputStream")
  (gtype-id "G_TYPE_SOCKET_INPUT_STREAM")
)

(define-object Listener
  (in-module "GSocket")
  (parent "GObject")
  (c-name "GSocketListener")
  (gtype-id "G_TYPE_SOCKET_LISTENER")
)

(define-object OutputStream
  (in-module "GSocket")
  (parent "GOutputStream")
  (c-name "GSocketOutputStream")
  (gtype-id "G_TYPE_SOCKET_OUTPUT_STREAM")
)

(define-object Service
  (in-module "GSocket")
  (parent "GSocketListener")
  (c-name "GSocketService")
  (gtype-id "G_TYPE_SOCKET_SERVICE")
)

(define-object 4aProxy
  (in-module "GSocks")
  (parent "GObject")
  (c-name "GSocks4aProxy")
  (gtype-id "G_TYPE_SOCKS4A_PROXY")
)

(define-object Connection
  (in-module "GTcp")
  (parent "GSocketConnection")
  (c-name "GTcpConnection")
  (gtype-id "G_TYPE_TCP_CONNECTION")
)

(define-object WrapperConnection
  (in-module "GTcp")
  (parent "GTcpConnection")
  (c-name "GTcpWrapperConnection")
  (gtype-id "G_TYPE_TCP_WRAPPER_CONNECTION")
)

(define-object Resolver
  (in-module "GThreaded")
  (parent "GResolver")
  (c-name "GThreadedResolver")
  (gtype-id "G_TYPE_THREADED_RESOLVER")
)

(define-object SocketService
  (in-module "GThreaded")
  (parent "GSocketService")
  (c-name "GThreadedSocketService")
  (gtype-id "G_TYPE_THREADED_SOCKET_SERVICE")
)

(define-object Certificate
  (in-module "GTls")
  (parent "GObject")
  (c-name "GTlsCertificate")
  (gtype-id "G_TYPE_TLS_CERTIFICATE")
)

(define-object Connection
  (in-module "GTls")
  (parent "GIOStream")
  (c-name "GTlsConnection")
  (gtype-id "G_TYPE_TLS_CONNECTION")
)

(define-object Database
  (in-module "GTls")
  (parent "GObject")
  (c-name "GTlsDatabase")
  (gtype-id "G_TYPE_TLS_DATABASE")
)

(define-object Interaction
  (in-module "GTls")
  (parent "GObject")
  (c-name "GTlsInteraction")
  (gtype-id "G_TYPE_TLS_INTERACTION")
)

(define-object Password
  (in-module "GTls")
  (parent "GObject")
  (c-name "GTlsPassword")
  (gtype-id "G_TYPE_TLS_PASSWORD")
)

(define-object Connection
  (in-module "GUnix")
  (parent "GSocketConnection")
  (c-name "GUnixConnection")
  (gtype-id "G_TYPE_UNIX_CONNECTION")
)

(define-object CredentialsMessage
  (in-module "GUnix")
  (parent "GSocketControlMessage")
  (c-name "GUnixCredentialsMessage")
  (gtype-id "G_TYPE_UNIX_CREDENTIALS_MESSAGE")
)

(define-object FDList
  (in-module "GUnix")
  (parent "GObject")
  (c-name "GUnixFDList")
  (gtype-id "G_TYPE_UNIX_FD_LIST")
)

(define-object FDMessage
  (in-module "GUnix")
  (parent "GSocketControlMessage")
  (c-name "GUnixFDMessage")
  (gtype-id "G_TYPE_UNIX_FD_MESSAGE")
)

(define-object InputStream
  (in-module "GUnix")
  (parent "GInputStream")
  (c-name "GUnixInputStream")
  (gtype-id "G_TYPE_UNIX_INPUT_STREAM")
)

(define-object OutputStream
  (in-module "GUnix")
  (parent "GOutputStream")
  (c-name "GUnixOutputStream")
  (gtype-id "G_TYPE_UNIX_OUTPUT_STREAM")
)

(define-object SocketAddress
  (in-module "GUnix")
  (parent "GSocketAddress")
  (c-name "GUnixSocketAddress")
  (gtype-id "G_TYPE_UNIX_SOCKET_ADDRESS")
)

(define-object s
  (in-module "GVf")
  (parent "GObject")
  (c-name "GVfs")
  (gtype-id "G_TYPE_VFS")
)

(define-object e
  (in-module "GVolum")
  (c-name "GVolume")
  (gtype-id "G_TYPE_VOLUME")
)

(define-object Monitor
  (in-module "GVolume")
  (parent "GObject")
  (c-name "GVolumeMonitor")
  (gtype-id "G_TYPE_VOLUME_MONITOR")
)

(define-object VolumeMonitor
  (in-module "GNative")
  (parent "GVolumeMonitor")
  (c-name "GNativeVolumeMonitor")
  (gtype-id "G_TYPE_NATIVE_VOLUME_MONITOR")
)

(define-object 32InputStream
  (in-module "GWin")
  (parent "GInputStream")
  (c-name "GWin32InputStream")
  (gtype-id "G_TYPE_WIN32_INPUT_STREAM")
)

(define-object 32NetworkMonitor
  (in-module "GWin")
  (parent "GNetworkMonitorBase")
  (c-name "GWin32NetworkMonitor")
  (gtype-id "G_TYPE_WIN32_NETWORK_MONITOR")
)

(define-object 32OutputStream
  (in-module "GWin")
  (parent "GOutputStream")
  (c-name "GWin32OutputStream")
  (gtype-id "G_TYPE_WIN32_OUTPUT_STREAM")
)

(define-object 32RegistryKey
  (in-module "GWin")
  (parent "GObject")
  (c-name "GWin32RegistryKey")
  (gtype-id "G_TYPE_WIN32_REGISTRY_KEY")
)

(define-object Documents
  (in-module "GXdp")
  (c-name "GXdpDocuments")
  (gtype-id "G_TYPE_XDP_DOCUMENTS")
)

(define-object DocumentsProxy
  (in-module "GXdp")
  (parent "GDBusProxy")
  (c-name "GXdpDocumentsProxy")
  (gtype-id "G_TYPE_XDP_DOCUMENTS_PROXY")
)

(define-object DocumentsSkeleton
  (in-module "GXdp")
  (parent "GDBusInterfaceSkeleton")
  (c-name "GXdpDocumentsSkeleton")
  (gtype-id "G_TYPE_XDP_DOCUMENTS_SKELETON")
)

(define-object NetworkMonitor
  (in-module "GXdp")
  (c-name "GXdpNetworkMonitor")
  (gtype-id "G_TYPE_XDP_NETWORK_MONITOR")
)

(define-object NetworkMonitorProxy
  (in-module "GXdp")
  (parent "GDBusProxy")
  (c-name "GXdpNetworkMonitorProxy")
  (gtype-id "G_TYPE_XDP_NETWORK_MONITOR_PROXY")
)

(define-object NetworkMonitorSkeleton
  (in-module "GXdp")
  (parent "GDBusInterfaceSkeleton")
  (c-name "GXdpNetworkMonitorSkeleton")
  (gtype-id "G_TYPE_XDP_NETWORK_MONITOR_SKELETON")
)

(define-object OpenURI
  (in-module "GXdp")
  (c-name "GXdpOpenURI")
  (gtype-id "G_TYPE_XDP_OPEN_URI")
)

(define-object OpenURIProxy
  (in-module "GXdp")
  (parent "GDBusProxy")
  (c-name "GXdpOpenURIProxy")
  (gtype-id "G_TYPE_XDP_OPEN_URI_PROXY")
)

(define-object OpenURISkeleton
  (in-module "GXdp")
  (parent "GDBusInterfaceSkeleton")
  (c-name "GXdpOpenURISkeleton")
  (gtype-id "G_TYPE_XDP_OPEN_URI_SKELETON")
)

(define-object ProxyResolver
  (in-module "GXdp")
  (c-name "GXdpProxyResolver")
  (gtype-id "G_TYPE_XDP_PROXY_RESOLVER")
)

(define-object ProxyResolverProxy
  (in-module "GXdp")
  (parent "GDBusProxy")
  (c-name "GXdpProxyResolverProxy")
  (gtype-id "G_TYPE_XDP_PROXY_RESOLVER_PROXY")
)

(define-object ProxyResolverSkeleton
  (in-module "GXdp")
  (parent "GDBusInterfaceSkeleton")
  (c-name "GXdpProxyResolverSkeleton")
  (gtype-id "G_TYPE_XDP_PROXY_RESOLVER_SKELETON")
)

;; Enumerations and flags ...

(define-enum AuthMechanismState
  (in-module "GDBus")
  (c-name "GDBusAuthMechanismState")
  (gtype-id "G_TYPE_D_BUS_AUTH_MECHANISM_STATE")
  (values
    '("invalid" "G_DBUS_AUTH_MECHANISM_STATE_INVALID")
    '("waiting-for-data" "G_DBUS_AUTH_MECHANISM_STATE_WAITING_FOR_DATA")
    '("have-data-to-send" "G_DBUS_AUTH_MECHANISM_STATE_HAVE_DATA_TO_SEND")
    '("rejected" "G_DBUS_AUTH_MECHANISM_STATE_REJECTED")
    '("accepted" "G_DBUS_AUTH_MECHANISM_STATE_ACCEPTED")
  )
)

(define-flags InfoCreateFlags
  (in-module "GApp")
  (c-name "GAppInfoCreateFlags")
  (gtype-id "G_TYPE_APP_INFO_CREATE_FLAGS")
  (values
    '("none" "G_APP_INFO_CREATE_NONE")
    '("needs-terminal" "G_APP_INFO_CREATE_NEEDS_TERMINAL")
    '("supports-uris" "G_APP_INFO_CREATE_SUPPORTS_URIS")
    '("supports-startup-notification" "G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION")
  )
)

(define-flags Flags
  (in-module "GConverter")
  (c-name "GConverterFlags")
  (gtype-id "G_TYPE_CONVERTER_FLAGS")
  (values
    '("no-flags" "G_CONVERTER_NO_FLAGS")
    '("input-at-end" "G_CONVERTER_INPUT_AT_END")
    '("flush" "G_CONVERTER_FLUSH")
  )
)

(define-enum Result
  (in-module "GConverter")
  (c-name "GConverterResult")
  (gtype-id "G_TYPE_CONVERTER_RESULT")
  (values
    '("error" "G_CONVERTER_ERROR")
    '("converted" "G_CONVERTER_CONVERTED")
    '("finished" "G_CONVERTER_FINISHED")
    '("flushed" "G_CONVERTER_FLUSHED")
  )
)

(define-enum StreamByteOrder
  (in-module "GData")
  (c-name "GDataStreamByteOrder")
  (gtype-id "G_TYPE_DATA_STREAM_BYTE_ORDER")
  (values
    '("big-endian" "G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN")
    '("little-endian" "G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN")
    '("host-endian" "G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN")
  )
)

(define-enum StreamNewlineType
  (in-module "GData")
  (c-name "GDataStreamNewlineType")
  (gtype-id "G_TYPE_DATA_STREAM_NEWLINE_TYPE")
  (values
    '("lf" "G_DATA_STREAM_NEWLINE_TYPE_LF")
    '("cr" "G_DATA_STREAM_NEWLINE_TYPE_CR")
    '("cr-lf" "G_DATA_STREAM_NEWLINE_TYPE_CR_LF")
    '("any" "G_DATA_STREAM_NEWLINE_TYPE_ANY")
  )
)

(define-enum AttributeType
  (in-module "GFile")
  (c-name "GFileAttributeType")
  (gtype-id "G_TYPE_FILE_ATTRIBUTE_TYPE")
  (values
    '("invalid" "G_FILE_ATTRIBUTE_TYPE_INVALID")
    '("string" "G_FILE_ATTRIBUTE_TYPE_STRING")
    '("byte-string" "G_FILE_ATTRIBUTE_TYPE_BYTE_STRING")
    '("boolean" "G_FILE_ATTRIBUTE_TYPE_BOOLEAN")
    '("uint32" "G_FILE_ATTRIBUTE_TYPE_UINT32")
    '("int32" "G_FILE_ATTRIBUTE_TYPE_INT32")
    '("uint64" "G_FILE_ATTRIBUTE_TYPE_UINT64")
    '("int64" "G_FILE_ATTRIBUTE_TYPE_INT64")
    '("object" "G_FILE_ATTRIBUTE_TYPE_OBJECT")
    '("stringv" "G_FILE_ATTRIBUTE_TYPE_STRINGV")
  )
)

(define-flags AttributeInfoFlags
  (in-module "GFile")
  (c-name "GFileAttributeInfoFlags")
  (gtype-id "G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS")
  (values
    '("none" "G_FILE_ATTRIBUTE_INFO_NONE")
    '("copy-with-file" "G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE")
    '("copy-when-moved" "G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED")
  )
)

(define-enum AttributeStatus
  (in-module "GFile")
  (c-name "GFileAttributeStatus")
  (gtype-id "G_TYPE_FILE_ATTRIBUTE_STATUS")
  (values
    '("unset" "G_FILE_ATTRIBUTE_STATUS_UNSET")
    '("set" "G_FILE_ATTRIBUTE_STATUS_SET")
    '("error-setting" "G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING")
  )
)

(define-flags QueryInfoFlags
  (in-module "GFile")
  (c-name "GFileQueryInfoFlags")
  (gtype-id "G_TYPE_FILE_QUERY_INFO_FLAGS")
  (values
    '("none" "G_FILE_QUERY_INFO_NONE")
    '("nofollow-symlinks" "G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS")
  )
)

(define-flags CreateFlags
  (in-module "GFile")
  (c-name "GFileCreateFlags")
  (gtype-id "G_TYPE_FILE_CREATE_FLAGS")
  (values
    '("none" "G_FILE_CREATE_NONE")
    '("private" "G_FILE_CREATE_PRIVATE")
    '("replace-destination" "G_FILE_CREATE_REPLACE_DESTINATION")
  )
)

(define-flags MeasureFlags
  (in-module "GFile")
  (c-name "GFileMeasureFlags")
  (gtype-id "G_TYPE_FILE_MEASURE_FLAGS")
  (values
    '("none" "G_FILE_MEASURE_NONE")
    '("report-any-error" "G_FILE_MEASURE_REPORT_ANY_ERROR")
    '("apparent-size" "G_FILE_MEASURE_APPARENT_SIZE")
    '("no-xdev" "G_FILE_MEASURE_NO_XDEV")
  )
)

(define-enum MountFlags
  (in-module "GMount")
  (c-name "GMountMountFlags")
  (gtype-id "G_TYPE_MOUNT_MOUNT_FLAGS")
  (values
    '("none" "G_MOUNT_MOUNT_NONE")
  )
)

(define-flags UnmountFlags
  (in-module "GMount")
  (c-name "GMountUnmountFlags")
  (gtype-id "G_TYPE_MOUNT_UNMOUNT_FLAGS")
  (values
    '("none" "G_MOUNT_UNMOUNT_NONE")
    '("force" "G_MOUNT_UNMOUNT_FORCE")
  )
)

(define-enum StartFlags
  (in-module "GDrive")
  (c-name "GDriveStartFlags")
  (gtype-id "G_TYPE_DRIVE_START_FLAGS")
  (values
    '("none" "G_DRIVE_START_NONE")
  )
)

(define-enum StartStopType
  (in-module "GDrive")
  (c-name "GDriveStartStopType")
  (gtype-id "G_TYPE_DRIVE_START_STOP_TYPE")
  (values
    '("unknown" "G_DRIVE_START_STOP_TYPE_UNKNOWN")
    '("shutdown" "G_DRIVE_START_STOP_TYPE_SHUTDOWN")
    '("network" "G_DRIVE_START_STOP_TYPE_NETWORK")
    '("multidisk" "G_DRIVE_START_STOP_TYPE_MULTIDISK")
    '("password" "G_DRIVE_START_STOP_TYPE_PASSWORD")
  )
)

(define-flags CopyFlags
  (in-module "GFile")
  (c-name "GFileCopyFlags")
  (gtype-id "G_TYPE_FILE_COPY_FLAGS")
  (values
    '("none" "G_FILE_COPY_NONE")
    '("overwrite" "G_FILE_COPY_OVERWRITE")
    '("backup" "G_FILE_COPY_BACKUP")
    '("nofollow-symlinks" "G_FILE_COPY_NOFOLLOW_SYMLINKS")
    '("all-metadata" "G_FILE_COPY_ALL_METADATA")
    '("no-fallback-for-move" "G_FILE_COPY_NO_FALLBACK_FOR_MOVE")
    '("target-default-perms" "G_FILE_COPY_TARGET_DEFAULT_PERMS")
  )
)

(define-flags MonitorFlags
  (in-module "GFile")
  (c-name "GFileMonitorFlags")
  (gtype-id "G_TYPE_FILE_MONITOR_FLAGS")
  (values
    '("none" "G_FILE_MONITOR_NONE")
    '("watch-mounts" "G_FILE_MONITOR_WATCH_MOUNTS")
    '("send-moved" "G_FILE_MONITOR_SEND_MOVED")
    '("watch-hard-links" "G_FILE_MONITOR_WATCH_HARD_LINKS")
    '("watch-moves" "G_FILE_MONITOR_WATCH_MOVES")
  )
)

(define-enum Type
  (in-module "GFile")
  (c-name "GFileType")
  (gtype-id "G_TYPE_FILE_TYPE")
  (values
    '("unknown" "G_FILE_TYPE_UNKNOWN")
    '("regular" "G_FILE_TYPE_REGULAR")
    '("directory" "G_FILE_TYPE_DIRECTORY")
    '("symbolic-link" "G_FILE_TYPE_SYMBOLIC_LINK")
    '("special" "G_FILE_TYPE_SPECIAL")
    '("shortcut" "G_FILE_TYPE_SHORTCUT")
    '("mountable" "G_FILE_TYPE_MOUNTABLE")
  )
)

(define-enum PreviewType
  (in-module "GFilesystem")
  (c-name "GFilesystemPreviewType")
  (gtype-id "G_TYPE_FILESYSTEM_PREVIEW_TYPE")
  (values
    '("if-always" "G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS")
    '("if-local" "G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL")
    '("never" "G_FILESYSTEM_PREVIEW_TYPE_NEVER")
  )
)

(define-enum MonitorEvent
  (in-module "GFile")
  (c-name "GFileMonitorEvent")
  (gtype-id "G_TYPE_FILE_MONITOR_EVENT")
  (values
    '("changed" "G_FILE_MONITOR_EVENT_CHANGED")
    '("changes-done-hint" "G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT")
    '("deleted" "G_FILE_MONITOR_EVENT_DELETED")
    '("created" "G_FILE_MONITOR_EVENT_CREATED")
    '("attribute-changed" "G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED")
    '("pre-unmount" "G_FILE_MONITOR_EVENT_PRE_UNMOUNT")
    '("unmounted" "G_FILE_MONITOR_EVENT_UNMOUNTED")
    '("moved" "G_FILE_MONITOR_EVENT_MOVED")
    '("renamed" "G_FILE_MONITOR_EVENT_RENAMED")
    '("moved-in" "G_FILE_MONITOR_EVENT_MOVED_IN")
    '("moved-out" "G_FILE_MONITOR_EVENT_MOVED_OUT")
  )
)

(define-enum Enum
  (in-module "GIOError")
  (c-name "GIOErrorEnum")
  (gtype-id "G_TYPE_IO_ERROR_ENUM")
  (values
    '("failed" "G_IO_ERROR_FAILED")
    '("not-found" "G_IO_ERROR_NOT_FOUND")
    '("exists" "G_IO_ERROR_EXISTS")
    '("is-directory" "G_IO_ERROR_IS_DIRECTORY")
    '("not-directory" "G_IO_ERROR_NOT_DIRECTORY")
    '("not-empty" "G_IO_ERROR_NOT_EMPTY")
    '("not-regular-file" "G_IO_ERROR_NOT_REGULAR_FILE")
    '("not-symbolic-link" "G_IO_ERROR_NOT_SYMBOLIC_LINK")
    '("not-mountable-file" "G_IO_ERROR_NOT_MOUNTABLE_FILE")
    '("filename-too-long" "G_IO_ERROR_FILENAME_TOO_LONG")
    '("invalid-filename" "G_IO_ERROR_INVALID_FILENAME")
    '("too-many-links" "G_IO_ERROR_TOO_MANY_LINKS")
    '("no-space" "G_IO_ERROR_NO_SPACE")
    '("invalid-argument" "G_IO_ERROR_INVALID_ARGUMENT")
    '("permission-denied" "G_IO_ERROR_PERMISSION_DENIED")
    '("not-supported" "G_IO_ERROR_NOT_SUPPORTED")
    '("not-mounted" "G_IO_ERROR_NOT_MOUNTED")
    '("already-mounted" "G_IO_ERROR_ALREADY_MOUNTED")
    '("closed" "G_IO_ERROR_CLOSED")
    '("cancelled" "G_IO_ERROR_CANCELLED")
    '("pending" "G_IO_ERROR_PENDING")
    '("read-only" "G_IO_ERROR_READ_ONLY")
    '("cant-create-backup" "G_IO_ERROR_CANT_CREATE_BACKUP")
    '("wrong-etag" "G_IO_ERROR_WRONG_ETAG")
    '("timed-out" "G_IO_ERROR_TIMED_OUT")
    '("would-recurse" "G_IO_ERROR_WOULD_RECURSE")
    '("busy" "G_IO_ERROR_BUSY")
    '("would-block" "G_IO_ERROR_WOULD_BLOCK")
    '("host-not-found" "G_IO_ERROR_HOST_NOT_FOUND")
    '("would-merge" "G_IO_ERROR_WOULD_MERGE")
    '("failed-handled" "G_IO_ERROR_FAILED_HANDLED")
    '("too-many-open-files" "G_IO_ERROR_TOO_MANY_OPEN_FILES")
    '("not-initialized" "G_IO_ERROR_NOT_INITIALIZED")
    '("address-in-use" "G_IO_ERROR_ADDRESS_IN_USE")
    '("partial-input" "G_IO_ERROR_PARTIAL_INPUT")
    '("invalid-data" "G_IO_ERROR_INVALID_DATA")
    '("dbus-error" "G_IO_ERROR_DBUS_ERROR")
    '("host-unreachable" "G_IO_ERROR_HOST_UNREACHABLE")
    '("network-unreachable" "G_IO_ERROR_NETWORK_UNREACHABLE")
    '("connection-refused" "G_IO_ERROR_CONNECTION_REFUSED")
    '("proxy-failed" "G_IO_ERROR_PROXY_FAILED")
    '("proxy-auth-failed" "G_IO_ERROR_PROXY_AUTH_FAILED")
    '("proxy-need-auth" "G_IO_ERROR_PROXY_NEED_AUTH")
    '("proxy-not-allowed" "G_IO_ERROR_PROXY_NOT_ALLOWED")
    '("broken-pipe" "G_IO_ERROR_BROKEN_PIPE")
    '("connection-closed" "G_IO_ERROR_CONNECTION_CLOSED")
    '("not-connected" "G_IO_ERROR_NOT_CONNECTED")
    '("message-too-large" "G_IO_ERROR_MESSAGE_TOO_LARGE")
  )
)

(define-flags PasswordFlags
  (in-module "GAsk")
  (c-name "GAskPasswordFlags")
  (gtype-id "G_TYPE_ASK_PASSWORD_FLAGS")
  (values
    '("need-password" "G_ASK_PASSWORD_NEED_PASSWORD")
    '("need-username" "G_ASK_PASSWORD_NEED_USERNAME")
    '("need-domain" "G_ASK_PASSWORD_NEED_DOMAIN")
    '("saving-supported" "G_ASK_PASSWORD_SAVING_SUPPORTED")
    '("anonymous-supported" "G_ASK_PASSWORD_ANONYMOUS_SUPPORTED")
  )
)

(define-enum Save
  (in-module "GPassword")
  (c-name "GPasswordSave")
  (gtype-id "G_TYPE_PASSWORD_SAVE")
  (values
    '("never" "G_PASSWORD_SAVE_NEVER")
    '("for-session" "G_PASSWORD_SAVE_FOR_SESSION")
    '("permanently" "G_PASSWORD_SAVE_PERMANENTLY")
  )
)

(define-enum OperationResult
  (in-module "GMount")
  (c-name "GMountOperationResult")
  (gtype-id "G_TYPE_MOUNT_OPERATION_RESULT")
  (values
    '("handled" "G_MOUNT_OPERATION_HANDLED")
    '("aborted" "G_MOUNT_OPERATION_ABORTED")
    '("unhandled" "G_MOUNT_OPERATION_UNHANDLED")
  )
)

(define-flags StreamSpliceFlags
  (in-module "GOutput")
  (c-name "GOutputStreamSpliceFlags")
  (gtype-id "G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS")
  (values
    '("none" "G_OUTPUT_STREAM_SPLICE_NONE")
    '("close-source" "G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE")
    '("close-target" "G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET")
  )
)

(define-flags SpliceFlags
  (in-module "GIOStream")
  (c-name "GIOStreamSpliceFlags")
  (gtype-id "G_TYPE_IO_STREAM_SPLICE_FLAGS")
  (values
    '("none" "G_IO_STREAM_SPLICE_NONE")
    '("close-stream1" "G_IO_STREAM_SPLICE_CLOSE_STREAM1")
    '("close-stream2" "G_IO_STREAM_SPLICE_CLOSE_STREAM2")
    '("wait-for-both" "G_IO_STREAM_SPLICE_WAIT_FOR_BOTH")
  )
)

(define-enum Origin
  (in-module "GEmblem")
  (c-name "GEmblemOrigin")
  (gtype-id "G_TYPE_EMBLEM_ORIGIN")
  (values
    '("unknown" "G_EMBLEM_ORIGIN_UNKNOWN")
    '("device" "G_EMBLEM_ORIGIN_DEVICE")
    '("livemetadata" "G_EMBLEM_ORIGIN_LIVEMETADATA")
    '("tag" "G_EMBLEM_ORIGIN_TAG")
  )
)

(define-enum Error
  (in-module "GResolver")
  (c-name "GResolverError")
  (gtype-id "G_TYPE_RESOLVER_ERROR")
  (values
    '("not-found" "G_RESOLVER_ERROR_NOT_FOUND")
    '("temporary-failure" "G_RESOLVER_ERROR_TEMPORARY_FAILURE")
    '("internal" "G_RESOLVER_ERROR_INTERNAL")
  )
)

(define-enum RecordType
  (in-module "GResolver")
  (c-name "GResolverRecordType")
  (gtype-id "G_TYPE_RESOLVER_RECORD_TYPE")
  (values
    '("srv" "G_RESOLVER_RECORD_SRV")
    '("mx" "G_RESOLVER_RECORD_MX")
    '("txt" "G_RESOLVER_RECORD_TXT")
    '("soa" "G_RESOLVER_RECORD_SOA")
    '("ns" "G_RESOLVER_RECORD_NS")
  )
)

(define-enum Error
  (in-module "GResource")
  (c-name "GResourceError")
  (gtype-id "G_TYPE_RESOURCE_ERROR")
  (values
    '("not-found" "G_RESOURCE_ERROR_NOT_FOUND")
    '("internal" "G_RESOURCE_ERROR_INTERNAL")
  )
)

(define-flags Flags
  (in-module "GResource")
  (c-name "GResourceFlags")
  (gtype-id "G_TYPE_RESOURCE_FLAGS")
  (values
    '("none" "G_RESOURCE_FLAGS_NONE")
    '("compressed" "G_RESOURCE_FLAGS_COMPRESSED")
  )
)

(define-enum LookupFlags
  (in-module "GResource")
  (c-name "GResourceLookupFlags")
  (gtype-id "G_TYPE_RESOURCE_LOOKUP_FLAGS")
  (values
    '("none" "G_RESOURCE_LOOKUP_FLAGS_NONE")
  )
)

(define-enum Family
  (in-module "GSocket")
  (c-name "GSocketFamily")
  (gtype-id "G_TYPE_SOCKET_FAMILY")
  (values
    '("invalid" "G_SOCKET_FAMILY_INVALID")
    '("unix" "G_SOCKET_FAMILY_UNIX")
    '("ipv4" "G_SOCKET_FAMILY_IPV4")
    '("ipv6" "G_SOCKET_FAMILY_IPV6")
  )
)

(define-enum Type
  (in-module "GSocket")
  (c-name "GSocketType")
  (gtype-id "G_TYPE_SOCKET_TYPE")
  (values
    '("invalid" "G_SOCKET_TYPE_INVALID")
    '("stream" "G_SOCKET_TYPE_STREAM")
    '("datagram" "G_SOCKET_TYPE_DATAGRAM")
    '("seqpacket" "G_SOCKET_TYPE_SEQPACKET")
  )
)

(define-enum MsgFlags
  (in-module "GSocket")
  (c-name "GSocketMsgFlags")
  (gtype-id "G_TYPE_SOCKET_MSG_FLAGS")
  (values
    '("none" "G_SOCKET_MSG_NONE")
    '("oob" "G_SOCKET_MSG_OOB")
    '("peek" "G_SOCKET_MSG_PEEK")
    '("dontroute" "G_SOCKET_MSG_DONTROUTE")
  )
)

(define-enum Protocol
  (in-module "GSocket")
  (c-name "GSocketProtocol")
  (gtype-id "G_TYPE_SOCKET_PROTOCOL")
  (values
    '("unknown" "G_SOCKET_PROTOCOL_UNKNOWN")
    '("default" "G_SOCKET_PROTOCOL_DEFAULT")
    '("tcp" "G_SOCKET_PROTOCOL_TCP")
    '("udp" "G_SOCKET_PROTOCOL_UDP")
    '("sctp" "G_SOCKET_PROTOCOL_SCTP")
  )
)

(define-enum CompressorFormat
  (in-module "GZlib")
  (c-name "GZlibCompressorFormat")
  (gtype-id "G_TYPE_ZLIB_COMPRESSOR_FORMAT")
  (values
    '("zlib" "G_ZLIB_COMPRESSOR_FORMAT_ZLIB")
    '("gzip" "G_ZLIB_COMPRESSOR_FORMAT_GZIP")
    '("raw" "G_ZLIB_COMPRESSOR_FORMAT_RAW")
  )
)

(define-enum SocketAddressType
  (in-module "GUnix")
  (c-name "GUnixSocketAddressType")
  (gtype-id "G_TYPE_UNIX_SOCKET_ADDRESS_TYPE")
  (values
    '("invalid" "G_UNIX_SOCKET_ADDRESS_INVALID")
    '("anonymous" "G_UNIX_SOCKET_ADDRESS_ANONYMOUS")
    '("path" "G_UNIX_SOCKET_ADDRESS_PATH")
    '("abstract" "G_UNIX_SOCKET_ADDRESS_ABSTRACT")
    '("abstract-padded" "G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED")
  )
)

(define-enum Type
  (in-module "GBus")
  (c-name "GBusType")
  (gtype-id "G_TYPE_BUS_TYPE")
  (values
    '("starter" "G_BUS_TYPE_STARTER")
    '("none" "G_BUS_TYPE_NONE")
    '("system" "G_BUS_TYPE_SYSTEM")
    '("session" "G_BUS_TYPE_SESSION")
  )
)

(define-flags NameOwnerFlags
  (in-module "GBus")
  (c-name "GBusNameOwnerFlags")
  (gtype-id "G_TYPE_BUS_NAME_OWNER_FLAGS")
  (values
    '("none" "G_BUS_NAME_OWNER_FLAGS_NONE")
    '("allow-replacement" "G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT")
    '("replace" "G_BUS_NAME_OWNER_FLAGS_REPLACE")
    '("do-not-queue" "G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE")
  )
)

(define-flags NameWatcherFlags
  (in-module "GBus")
  (c-name "GBusNameWatcherFlags")
  (gtype-id "G_TYPE_BUS_NAME_WATCHER_FLAGS")
  (values
    '("none" "G_BUS_NAME_WATCHER_FLAGS_NONE")
    '("auto-start" "G_BUS_NAME_WATCHER_FLAGS_AUTO_START")
  )
)

(define-flags ProxyFlags
  (in-module "GDBus")
  (c-name "GDBusProxyFlags")
  (gtype-id "G_TYPE_D_BUS_PROXY_FLAGS")
  (values
    '("none" "G_DBUS_PROXY_FLAGS_NONE")
    '("do-not-load-properties" "G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES")
    '("do-not-connect-signals" "G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS")
    '("do-not-auto-start" "G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START")
    '("get-invalidated-properties" "G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES")
    '("do-not-auto-start-at-construction" "G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION")
  )
)

(define-enum Error
  (in-module "GDBus")
  (c-name "GDBusError")
  (gtype-id "G_TYPE_D_BUS_ERROR")
  (values
    '("failed" "G_DBUS_ERROR_FAILED")
    '("no-memory" "G_DBUS_ERROR_NO_MEMORY")
    '("service-unknown" "G_DBUS_ERROR_SERVICE_UNKNOWN")
    '("name-has-no-owner" "G_DBUS_ERROR_NAME_HAS_NO_OWNER")
    '("no-reply" "G_DBUS_ERROR_NO_REPLY")
    '("io-error" "G_DBUS_ERROR_IO_ERROR")
    '("bad-address" "G_DBUS_ERROR_BAD_ADDRESS")
    '("not-supported" "G_DBUS_ERROR_NOT_SUPPORTED")
    '("limits-exceeded" "G_DBUS_ERROR_LIMITS_EXCEEDED")
    '("access-denied" "G_DBUS_ERROR_ACCESS_DENIED")
    '("auth-failed" "G_DBUS_ERROR_AUTH_FAILED")
    '("no-server" "G_DBUS_ERROR_NO_SERVER")
    '("timeout" "G_DBUS_ERROR_TIMEOUT")
    '("no-network" "G_DBUS_ERROR_NO_NETWORK")
    '("address-in-use" "G_DBUS_ERROR_ADDRESS_IN_USE")
    '("disconnected" "G_DBUS_ERROR_DISCONNECTED")
    '("invalid-args" "G_DBUS_ERROR_INVALID_ARGS")
    '("file-not-found" "G_DBUS_ERROR_FILE_NOT_FOUND")
    '("file-exists" "G_DBUS_ERROR_FILE_EXISTS")
    '("unknown-method" "G_DBUS_ERROR_UNKNOWN_METHOD")
    '("timed-out" "G_DBUS_ERROR_TIMED_OUT")
    '("match-rule-not-found" "G_DBUS_ERROR_MATCH_RULE_NOT_FOUND")
    '("match-rule-invalid" "G_DBUS_ERROR_MATCH_RULE_INVALID")
    '("spawn-exec-failed" "G_DBUS_ERROR_SPAWN_EXEC_FAILED")
    '("spawn-fork-failed" "G_DBUS_ERROR_SPAWN_FORK_FAILED")
    '("spawn-child-exited" "G_DBUS_ERROR_SPAWN_CHILD_EXITED")
    '("spawn-child-signaled" "G_DBUS_ERROR_SPAWN_CHILD_SIGNALED")
    '("spawn-failed" "G_DBUS_ERROR_SPAWN_FAILED")
    '("spawn-setup-failed" "G_DBUS_ERROR_SPAWN_SETUP_FAILED")
    '("spawn-config-invalid" "G_DBUS_ERROR_SPAWN_CONFIG_INVALID")
    '("spawn-service-invalid" "G_DBUS_ERROR_SPAWN_SERVICE_INVALID")
    '("spawn-service-not-found" "G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND")
    '("spawn-permissions-invalid" "G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID")
    '("spawn-file-invalid" "G_DBUS_ERROR_SPAWN_FILE_INVALID")
    '("spawn-no-memory" "G_DBUS_ERROR_SPAWN_NO_MEMORY")
    '("unix-process-id-unknown" "G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN")
    '("invalid-signature" "G_DBUS_ERROR_INVALID_SIGNATURE")
    '("invalid-file-content" "G_DBUS_ERROR_INVALID_FILE_CONTENT")
    '("selinux-security-context-unknown" "G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN")
    '("adt-audit-data-unknown" "G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN")
    '("object-path-in-use" "G_DBUS_ERROR_OBJECT_PATH_IN_USE")
    '("unknown-object" "G_DBUS_ERROR_UNKNOWN_OBJECT")
    '("unknown-interface" "G_DBUS_ERROR_UNKNOWN_INTERFACE")
    '("unknown-property" "G_DBUS_ERROR_UNKNOWN_PROPERTY")
    '("property-read-only" "G_DBUS_ERROR_PROPERTY_READ_ONLY")
  )
)

(define-flags ConnectionFlags
  (in-module "GDBus")
  (c-name "GDBusConnectionFlags")
  (gtype-id "G_TYPE_D_BUS_CONNECTION_FLAGS")
  (values
    '("none" "G_DBUS_CONNECTION_FLAGS_NONE")
    '("authentication-client" "G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT")
    '("authentication-server" "G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER")
    '("authentication-allow-anonymous" "G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS")
    '("message-bus-connection" "G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION")
    '("delay-message-processing" "G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING")
  )
)

(define-flags CapabilityFlags
  (in-module "GDBus")
  (c-name "GDBusCapabilityFlags")
  (gtype-id "G_TYPE_D_BUS_CAPABILITY_FLAGS")
  (values
    '("none" "G_DBUS_CAPABILITY_FLAGS_NONE")
    '("unix-fd-passing" "G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING")
  )
)

(define-flags CallFlags
  (in-module "GDBus")
  (c-name "GDBusCallFlags")
  (gtype-id "G_TYPE_D_BUS_CALL_FLAGS")
  (values
    '("none" "G_DBUS_CALL_FLAGS_NONE")
    '("no-auto-start" "G_DBUS_CALL_FLAGS_NO_AUTO_START")
    '("allow-interactive-authorization" "G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION")
  )
)

(define-enum MessageType
  (in-module "GDBus")
  (c-name "GDBusMessageType")
  (gtype-id "G_TYPE_D_BUS_MESSAGE_TYPE")
  (values
    '("invalid" "G_DBUS_MESSAGE_TYPE_INVALID")
    '("method-call" "G_DBUS_MESSAGE_TYPE_METHOD_CALL")
    '("method-return" "G_DBUS_MESSAGE_TYPE_METHOD_RETURN")
    '("error" "G_DBUS_MESSAGE_TYPE_ERROR")
    '("signal" "G_DBUS_MESSAGE_TYPE_SIGNAL")
  )
)

(define-flags MessageFlags
  (in-module "GDBus")
  (c-name "GDBusMessageFlags")
  (gtype-id "G_TYPE_D_BUS_MESSAGE_FLAGS")
  (values
    '("none" "G_DBUS_MESSAGE_FLAGS_NONE")
    '("no-reply-expected" "G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED")
    '("no-auto-start" "G_DBUS_MESSAGE_FLAGS_NO_AUTO_START")
    '("allow-interactive-authorization" "G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION")
  )
)

(define-enum MessageHeaderField
  (in-module "GDBus")
  (c-name "GDBusMessageHeaderField")
  (gtype-id "G_TYPE_D_BUS_MESSAGE_HEADER_FIELD")
  (values
    '("invalid" "G_DBUS_MESSAGE_HEADER_FIELD_INVALID")
    '("path" "G_DBUS_MESSAGE_HEADER_FIELD_PATH")
    '("interface" "G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE")
    '("member" "G_DBUS_MESSAGE_HEADER_FIELD_MEMBER")
    '("error-name" "G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME")
    '("reply-serial" "G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL")
    '("destination" "G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION")
    '("sender" "G_DBUS_MESSAGE_HEADER_FIELD_SENDER")
    '("signature" "G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE")
    '("num-unix-fds" "G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS")
  )
)

(define-flags PropertyInfoFlags
  (in-module "GDBus")
  (c-name "GDBusPropertyInfoFlags")
  (gtype-id "G_TYPE_D_BUS_PROPERTY_INFO_FLAGS")
  (values
    '("none" "G_DBUS_PROPERTY_INFO_FLAGS_NONE")
    '("readable" "G_DBUS_PROPERTY_INFO_FLAGS_READABLE")
    '("writable" "G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE")
  )
)

(define-flags SubtreeFlags
  (in-module "GDBus")
  (c-name "GDBusSubtreeFlags")
  (gtype-id "G_TYPE_D_BUS_SUBTREE_FLAGS")
  (values
    '("none" "G_DBUS_SUBTREE_FLAGS_NONE")
    '("dispatch-to-unenumerated-nodes" "G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES")
  )
)

(define-flags ServerFlags
  (in-module "GDBus")
  (c-name "GDBusServerFlags")
  (gtype-id "G_TYPE_D_BUS_SERVER_FLAGS")
  (values
    '("none" "G_DBUS_SERVER_FLAGS_NONE")
    '("run-in-thread" "G_DBUS_SERVER_FLAGS_RUN_IN_THREAD")
    '("authentication-allow-anonymous" "G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS")
  )
)

(define-flags SignalFlags
  (in-module "GDBus")
  (c-name "GDBusSignalFlags")
  (gtype-id "G_TYPE_D_BUS_SIGNAL_FLAGS")
  (values
    '("none" "G_DBUS_SIGNAL_FLAGS_NONE")
    '("no-match-rule" "G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE")
    '("match-arg0-namespace" "G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE")
    '("match-arg0-path" "G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH")
  )
)

(define-flags SendMessageFlags
  (in-module "GDBus")
  (c-name "GDBusSendMessageFlags")
  (gtype-id "G_TYPE_D_BUS_SEND_MESSAGE_FLAGS")
  (values
    '("none" "G_DBUS_SEND_MESSAGE_FLAGS_NONE")
    '("preserve-serial" "G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL")
  )
)

(define-enum Type
  (in-module "GCredentials")
  (c-name "GCredentialsType")
  (gtype-id "G_TYPE_CREDENTIALS_TYPE")
  (values
    '("invalid" "G_CREDENTIALS_TYPE_INVALID")
    '("linux-ucred" "G_CREDENTIALS_TYPE_LINUX_UCRED")
    '("freebsd-cmsgcred" "G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED")
    '("openbsd-sockpeercred" "G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED")
    '("solaris-ucred" "G_CREDENTIALS_TYPE_SOLARIS_UCRED")
    '("netbsd-unpcbid" "G_CREDENTIALS_TYPE_NETBSD_UNPCBID")
  )
)

(define-enum MessageByteOrder
  (in-module "GDBus")
  (c-name "GDBusMessageByteOrder")
  (gtype-id "G_TYPE_D_BUS_MESSAGE_BYTE_ORDER")
  (values
    '("big-endian" "G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN")
    '("little-endian" "G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN")
  )
)

(define-flags Flags
  (in-module "GApplication")
  (c-name "GApplicationFlags")
  (gtype-id "G_TYPE_APPLICATION_FLAGS")
  (values
    '("flags-none" "G_APPLICATION_FLAGS_NONE")
    '("is-service" "G_APPLICATION_IS_SERVICE")
    '("is-launcher" "G_APPLICATION_IS_LAUNCHER")
    '("handles-open" "G_APPLICATION_HANDLES_OPEN")
    '("handles-command-line" "G_APPLICATION_HANDLES_COMMAND_LINE")
    '("send-environment" "G_APPLICATION_SEND_ENVIRONMENT")
    '("non-unique" "G_APPLICATION_NON_UNIQUE")
    '("can-override-app-id" "G_APPLICATION_CAN_OVERRIDE_APP_ID")
  )
)

(define-enum Error
  (in-module "GTls")
  (c-name "GTlsError")
  (gtype-id "G_TYPE_TLS_ERROR")
  (values
    '("unavailable" "G_TLS_ERROR_UNAVAILABLE")
    '("misc" "G_TLS_ERROR_MISC")
    '("bad-certificate" "G_TLS_ERROR_BAD_CERTIFICATE")
    '("not-tls" "G_TLS_ERROR_NOT_TLS")
    '("handshake" "G_TLS_ERROR_HANDSHAKE")
    '("certificate-required" "G_TLS_ERROR_CERTIFICATE_REQUIRED")
    '("eof" "G_TLS_ERROR_EOF")
  )
)

(define-flags CertificateFlags
  (in-module "GTls")
  (c-name "GTlsCertificateFlags")
  (gtype-id "G_TYPE_TLS_CERTIFICATE_FLAGS")
  (values
    '("unknown-ca" "G_TLS_CERTIFICATE_UNKNOWN_CA")
    '("bad-identity" "G_TLS_CERTIFICATE_BAD_IDENTITY")
    '("not-activated" "G_TLS_CERTIFICATE_NOT_ACTIVATED")
    '("expired" "G_TLS_CERTIFICATE_EXPIRED")
    '("revoked" "G_TLS_CERTIFICATE_REVOKED")
    '("insecure" "G_TLS_CERTIFICATE_INSECURE")
    '("generic-error" "G_TLS_CERTIFICATE_GENERIC_ERROR")
    '("validate-all" "G_TLS_CERTIFICATE_VALIDATE_ALL")
  )
)

(define-enum AuthenticationMode
  (in-module "GTls")
  (c-name "GTlsAuthenticationMode")
  (gtype-id "G_TYPE_TLS_AUTHENTICATION_MODE")
  (values
    '("none" "G_TLS_AUTHENTICATION_NONE")
    '("requested" "G_TLS_AUTHENTICATION_REQUESTED")
    '("required" "G_TLS_AUTHENTICATION_REQUIRED")
  )
)

(define-enum RehandshakeMode
  (in-module "GTls")
  (c-name "GTlsRehandshakeMode")
  (gtype-id "G_TYPE_TLS_REHANDSHAKE_MODE")
  (values
    '("never" "G_TLS_REHANDSHAKE_NEVER")
    '("safely" "G_TLS_REHANDSHAKE_SAFELY")
    '("unsafely" "G_TLS_REHANDSHAKE_UNSAFELY")
  )
)

(define-enum InteractionResult
  (in-module "GTls")
  (c-name "GTlsInteractionResult")
  (gtype-id "G_TYPE_TLS_INTERACTION_RESULT")
  (values
    '("unhandled" "G_TLS_INTERACTION_UNHANDLED")
    '("handled" "G_TLS_INTERACTION_HANDLED")
    '("failed" "G_TLS_INTERACTION_FAILED")
  )
)

(define-flags InterfaceSkeletonFlags
  (in-module "GDBus")
  (c-name "GDBusInterfaceSkeletonFlags")
  (gtype-id "G_TYPE_D_BUS_INTERFACE_SKELETON_FLAGS")
  (values
    '("none" "G_DBUS_INTERFACE_SKELETON_FLAGS_NONE")
    '("handle-method-invocations-in-thread" "G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD")
  )
)

(define-flags ObjectManagerClientFlags
  (in-module "GDBus")
  (c-name "GDBusObjectManagerClientFlags")
  (gtype-id "G_TYPE_D_BUS_OBJECT_MANAGER_CLIENT_FLAGS")
  (values
    '("none" "G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE")
    '("do-not-auto-start" "G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START")
  )
)

(define-enum DatabaseVerifyFlags
  (in-module "GTls")
  (c-name "GTlsDatabaseVerifyFlags")
  (gtype-id "G_TYPE_TLS_DATABASE_VERIFY_FLAGS")
  (values
    '("none" "G_TLS_DATABASE_VERIFY_NONE")
  )
)

(define-enum DatabaseLookupFlags
  (in-module "GTls")
  (c-name "GTlsDatabaseLookupFlags")
  (gtype-id "G_TYPE_TLS_DATABASE_LOOKUP_FLAGS")
  (values
    '("none" "G_TLS_DATABASE_LOOKUP_NONE")
    '("keypair" "G_TLS_DATABASE_LOOKUP_KEYPAIR")
  )
)

(define-enum CertificateRequestFlags
  (in-module "GTls")
  (c-name "GTlsCertificateRequestFlags")
  (gtype-id "G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS")
  (values
    '("none" "G_TLS_CERTIFICATE_REQUEST_NONE")
  )
)

(define-enum ScopeFlags
  (in-module "GIOModule")
  (c-name "GIOModuleScopeFlags")
  (gtype-id "G_TYPE_IO_MODULE_SCOPE_FLAGS")
  (values
    '("none" "G_IO_MODULE_SCOPE_NONE")
    '("block-duplicates" "G_IO_MODULE_SCOPE_BLOCK_DUPLICATES")
  )
)

(define-enum ClientEvent
  (in-module "GSocket")
  (c-name "GSocketClientEvent")
  (gtype-id "G_TYPE_SOCKET_CLIENT_EVENT")
  (values
    '("resolving" "G_SOCKET_CLIENT_RESOLVING")
    '("resolved" "G_SOCKET_CLIENT_RESOLVED")
    '("connecting" "G_SOCKET_CLIENT_CONNECTING")
    '("connected" "G_SOCKET_CLIENT_CONNECTED")
    '("proxy-negotiating" "G_SOCKET_CLIENT_PROXY_NEGOTIATING")
    '("proxy-negotiated" "G_SOCKET_CLIENT_PROXY_NEGOTIATED")
    '("tls-handshaking" "G_SOCKET_CLIENT_TLS_HANDSHAKING")
    '("tls-handshaked" "G_SOCKET_CLIENT_TLS_HANDSHAKED")
    '("complete" "G_SOCKET_CLIENT_COMPLETE")
  )
)

(define-enum ListenerEvent
  (in-module "GSocket")
  (c-name "GSocketListenerEvent")
  (gtype-id "G_TYPE_SOCKET_LISTENER_EVENT")
  (values
    '("binding" "G_SOCKET_LISTENER_BINDING")
    '("bound" "G_SOCKET_LISTENER_BOUND")
    '("listening" "G_SOCKET_LISTENER_LISTENING")
    '("listened" "G_SOCKET_LISTENER_LISTENED")
  )
)

(define-enum DBusFlags
  (in-module "GTest")
  (c-name "GTestDBusFlags")
  (gtype-id "G_TYPE_TEST_DBUS_FLAGS")
  (values
    '("none" "G_TEST_DBUS_NONE")
  )
)

(define-flags Flags
  (in-module "GSubprocess")
  (c-name "GSubprocessFlags")
  (gtype-id "G_TYPE_SUBPROCESS_FLAGS")
  (values
    '("none" "G_SUBPROCESS_FLAGS_NONE")
    '("stdin-pipe" "G_SUBPROCESS_FLAGS_STDIN_PIPE")
    '("stdin-inherit" "G_SUBPROCESS_FLAGS_STDIN_INHERIT")
    '("stdout-pipe" "G_SUBPROCESS_FLAGS_STDOUT_PIPE")
    '("stdout-silence" "G_SUBPROCESS_FLAGS_STDOUT_SILENCE")
    '("stderr-pipe" "G_SUBPROCESS_FLAGS_STDERR_PIPE")
    '("stderr-silence" "G_SUBPROCESS_FLAGS_STDERR_SILENCE")
    '("stderr-merge" "G_SUBPROCESS_FLAGS_STDERR_MERGE")
    '("inherit-fds" "G_SUBPROCESS_FLAGS_INHERIT_FDS")
  )
)

(define-enum Priority
  (in-module "GNotification")
  (c-name "GNotificationPriority")
  (gtype-id "G_TYPE_NOTIFICATION_PRIORITY")
  (values
    '("normal" "G_NOTIFICATION_PRIORITY_NORMAL")
    '("low" "G_NOTIFICATION_PRIORITY_LOW")
    '("high" "G_NOTIFICATION_PRIORITY_HIGH")
    '("urgent" "G_NOTIFICATION_PRIORITY_URGENT")
  )
)

(define-enum Connectivity
  (in-module "GNetwork")
  (c-name "GNetworkConnectivity")
  (gtype-id "G_TYPE_NETWORK_CONNECTIVITY")
  (values
    '("local" "G_NETWORK_CONNECTIVITY_LOCAL")
    '("limited" "G_NETWORK_CONNECTIVITY_LIMITED")
    '("portal" "G_NETWORK_CONNECTIVITY_PORTAL")
    '("full" "G_NETWORK_CONNECTIVITY_FULL")
  )
)

(define-flags BindFlags
  (in-module "GSettings")
  (c-name "GSettingsBindFlags")
  (gtype-id "G_TYPE_SETTINGS_BIND_FLAGS")
  (values
    '("default" "G_SETTINGS_BIND_DEFAULT")
    '("get" "G_SETTINGS_BIND_GET")
    '("set" "G_SETTINGS_BIND_SET")
    '("no-sensitivity" "G_SETTINGS_BIND_NO_SENSITIVITY")
    '("get-no-changes" "G_SETTINGS_BIND_GET_NO_CHANGES")
    '("invert-boolean" "G_SETTINGS_BIND_INVERT_BOOLEAN")
  )
)


;; From gactiongroupexporter.h

(define-method export_action_group
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_export_action_group")
  (return-type "guint")
  (parameters
    '("const-gchar*" "object_path")
    '("GActionGroup*" "action_group")
    '("GError**" "error")
  )
)

(define-method unexport_action_group
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_unexport_action_group")
  (return-type "none")
  (parameters
    '("guint" "export_id")
  )
)



;; From gactiongroup.h

(define-function g_action_group_get_type
  (c-name "g_action_group_get_type")
  (return-type "GType")
)

(define-method has_action
  (of-object "GActionGroup")
  (c-name "g_action_group_has_action")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method list_actions
  (of-object "GActionGroup")
  (c-name "g_action_group_list_actions")
  (return-type "gchar**")
)

(define-method get_action_parameter_type
  (of-object "GActionGroup")
  (c-name "g_action_group_get_action_parameter_type")
  (return-type "const-GVariantType*")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method get_action_state_type
  (of-object "GActionGroup")
  (c-name "g_action_group_get_action_state_type")
  (return-type "const-GVariantType*")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method get_action_state_hint
  (of-object "GActionGroup")
  (c-name "g_action_group_get_action_state_hint")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method get_action_enabled
  (of-object "GActionGroup")
  (c-name "g_action_group_get_action_enabled")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method get_action_state
  (of-object "GActionGroup")
  (c-name "g_action_group_get_action_state")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method change_action_state
  (of-object "GActionGroup")
  (c-name "g_action_group_change_action_state")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("GVariant*" "value")
  )
)

(define-method activate_action
  (of-object "GActionGroup")
  (c-name "g_action_group_activate_action")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("GVariant*" "parameter")
  )
)

(define-method action_added
  (of-object "GActionGroup")
  (c-name "g_action_group_action_added")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method action_removed
  (of-object "GActionGroup")
  (c-name "g_action_group_action_removed")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method action_enabled_changed
  (of-object "GActionGroup")
  (c-name "g_action_group_action_enabled_changed")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("gboolean" "enabled")
  )
)

(define-method action_state_changed
  (of-object "GActionGroup")
  (c-name "g_action_group_action_state_changed")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("GVariant*" "state")
  )
)

(define-method query_action
  (of-object "GActionGroup")
  (c-name "g_action_group_query_action")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "action_name")
    '("gboolean*" "enabled")
    '("const-GVariantType**" "parameter_type")
    '("const-GVariantType**" "state_type")
    '("GVariant**" "state_hint")
    '("GVariant**" "state")
  )
)



;; From gaction.h

(define-function g_action_get_type
  (c-name "g_action_get_type")
  (return-type "GType")
)

(define-method get_name
  (of-object "GAction")
  (c-name "g_action_get_name")
  (return-type "const-gchar*")
)

(define-method get_parameter_type
  (of-object "GAction")
  (c-name "g_action_get_parameter_type")
  (return-type "const-GVariantType*")
)

(define-method get_state_type
  (of-object "GAction")
  (c-name "g_action_get_state_type")
  (return-type "const-GVariantType*")
)

(define-method get_state_hint
  (of-object "GAction")
  (c-name "g_action_get_state_hint")
  (return-type "GVariant*")
)

(define-method get_enabled
  (of-object "GAction")
  (c-name "g_action_get_enabled")
  (return-type "gboolean")
)

(define-method get_state
  (of-object "GAction")
  (c-name "g_action_get_state")
  (return-type "GVariant*")
)

(define-method change_state
  (of-object "GAction")
  (c-name "g_action_change_state")
  (return-type "none")
  (parameters
    '("GVariant*" "value")
  )
)

(define-method activate
  (of-object "GAction")
  (c-name "g_action_activate")
  (return-type "none")
  (parameters
    '("GVariant*" "parameter")
  )
)

(define-function g_action_name_is_valid
  (c-name "g_action_name_is_valid")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-function g_action_parse_detailed_name
  (c-name "g_action_parse_detailed_name")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "detailed_name")
    '("gchar**" "action_name")
    '("GVariant**" "target_value")
    '("GError**" "error")
  )
)

(define-function g_action_print_detailed_name
  (c-name "g_action_print_detailed_name")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "action_name")
    '("GVariant*" "target_value")
  )
)



;; From gactionmap.h

(define-function g_action_map_get_type
  (c-name "g_action_map_get_type")
  (return-type "GType")
)

(define-method lookup_action
  (of-object "GActionMap")
  (c-name "g_action_map_lookup_action")
  (return-type "GAction*")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method add_action
  (of-object "GActionMap")
  (c-name "g_action_map_add_action")
  (return-type "none")
  (parameters
    '("GAction*" "action")
  )
)

(define-method remove_action
  (of-object "GActionMap")
  (c-name "g_action_map_remove_action")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method add_action_entries
  (of-object "GActionMap")
  (c-name "g_action_map_add_action_entries")
  (return-type "none")
  (parameters
    '("const-GActionEntry*" "entries")
    '("gint" "n_entries")
    '("gpointer" "user_data")
  )
)



;; From gappinfo.h

(define-function g_app_info_get_type
  (c-name "g_app_info_get_type")
  (return-type "GType")
)

(define-function g_app_info_create_from_commandline
  (c-name "g_app_info_create_from_commandline")
  (return-type "GAppInfo*")
  (parameters
    '("const-char*" "commandline")
    '("const-char*" "application_name")
    '("GAppInfoCreateFlags" "flags")
    '("GError**" "error")
  )
)

(define-method dup
  (of-object "GAppInfo")
  (c-name "g_app_info_dup")
  (return-type "GAppInfo*")
)

(define-method equal
  (of-object "GAppInfo")
  (c-name "g_app_info_equal")
  (return-type "gboolean")
  (parameters
    '("GAppInfo*" "appinfo2")
  )
)

(define-method get_id
  (of-object "GAppInfo")
  (c-name "g_app_info_get_id")
  (return-type "const-char*")
)

(define-method get_name
  (of-object "GAppInfo")
  (c-name "g_app_info_get_name")
  (return-type "const-char*")
)

(define-method get_display_name
  (of-object "GAppInfo")
  (c-name "g_app_info_get_display_name")
  (return-type "const-char*")
)

(define-method get_description
  (of-object "GAppInfo")
  (c-name "g_app_info_get_description")
  (return-type "const-char*")
)

(define-method get_executable
  (of-object "GAppInfo")
  (c-name "g_app_info_get_executable")
  (return-type "const-char*")
)

(define-method get_commandline
  (of-object "GAppInfo")
  (c-name "g_app_info_get_commandline")
  (return-type "const-char*")
)

(define-method get_icon
  (of-object "GAppInfo")
  (c-name "g_app_info_get_icon")
  (return-type "GIcon*")
)

(define-method launch
  (of-object "GAppInfo")
  (c-name "g_app_info_launch")
  (return-type "gboolean")
  (parameters
    '("GList*" "files")
    '("GAppLaunchContext*" "context")
    '("GError**" "error")
  )
)

(define-method supports_uris
  (of-object "GAppInfo")
  (c-name "g_app_info_supports_uris")
  (return-type "gboolean")
)

(define-method supports_files
  (of-object "GAppInfo")
  (c-name "g_app_info_supports_files")
  (return-type "gboolean")
)

(define-method launch_uris
  (of-object "GAppInfo")
  (c-name "g_app_info_launch_uris")
  (return-type "gboolean")
  (parameters
    '("GList*" "uris")
    '("GAppLaunchContext*" "context")
    '("GError**" "error")
  )
)

(define-method should_show
  (of-object "GAppInfo")
  (c-name "g_app_info_should_show")
  (return-type "gboolean")
)

(define-method set_as_default_for_type
  (of-object "GAppInfo")
  (c-name "g_app_info_set_as_default_for_type")
  (return-type "gboolean")
  (parameters
    '("const-char*" "content_type")
    '("GError**" "error")
  )
)

(define-method set_as_default_for_extension
  (of-object "GAppInfo")
  (c-name "g_app_info_set_as_default_for_extension")
  (return-type "gboolean")
  (parameters
    '("const-char*" "extension")
    '("GError**" "error")
  )
)

(define-method add_supports_type
  (of-object "GAppInfo")
  (c-name "g_app_info_add_supports_type")
  (return-type "gboolean")
  (parameters
    '("const-char*" "content_type")
    '("GError**" "error")
  )
)

(define-method can_remove_supports_type
  (of-object "GAppInfo")
  (c-name "g_app_info_can_remove_supports_type")
  (return-type "gboolean")
)

(define-method remove_supports_type
  (of-object "GAppInfo")
  (c-name "g_app_info_remove_supports_type")
  (return-type "gboolean")
  (parameters
    '("const-char*" "content_type")
    '("GError**" "error")
  )
)

(define-method get_supported_types
  (of-object "GAppInfo")
  (c-name "g_app_info_get_supported_types")
  (return-type "const-char**")
)

(define-method can_delete
  (of-object "GAppInfo")
  (c-name "g_app_info_can_delete")
  (return-type "gboolean")
)

(define-method delete
  (of-object "GAppInfo")
  (c-name "g_app_info_delete")
  (return-type "gboolean")
)

(define-method set_as_last_used_for_type
  (of-object "GAppInfo")
  (c-name "g_app_info_set_as_last_used_for_type")
  (return-type "gboolean")
  (parameters
    '("const-char*" "content_type")
    '("GError**" "error")
  )
)

(define-function g_app_info_get_all
  (c-name "g_app_info_get_all")
  (return-type "GList*")
)

(define-function g_app_info_get_all_for_type
  (c-name "g_app_info_get_all_for_type")
  (return-type "GList*")
  (parameters
    '("const-char*" "content_type")
  )
)

(define-function g_app_info_get_recommended_for_type
  (c-name "g_app_info_get_recommended_for_type")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "content_type")
  )
)

(define-function g_app_info_get_fallback_for_type
  (c-name "g_app_info_get_fallback_for_type")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "content_type")
  )
)

(define-function g_app_info_reset_type_associations
  (c-name "g_app_info_reset_type_associations")
  (return-type "none")
  (parameters
    '("const-char*" "content_type")
  )
)

(define-function g_app_info_get_default_for_type
  (c-name "g_app_info_get_default_for_type")
  (return-type "GAppInfo*")
  (parameters
    '("const-char*" "content_type")
    '("gboolean" "must_support_uris")
  )
)

(define-function g_app_info_get_default_for_uri_scheme
  (c-name "g_app_info_get_default_for_uri_scheme")
  (return-type "GAppInfo*")
  (parameters
    '("const-char*" "uri_scheme")
  )
)

(define-function g_app_info_launch_default_for_uri
  (c-name "g_app_info_launch_default_for_uri")
  (return-type "gboolean")
  (parameters
    '("const-char*" "uri")
    '("GAppLaunchContext*" "context")
    '("GError**" "error")
  )
)

(define-function g_app_info_launch_default_for_uri_async
  (c-name "g_app_info_launch_default_for_uri_async")
  (return-type "none")
  (parameters
    '("const-char*" "uri")
    '("GAppLaunchContext*" "context")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_app_info_launch_default_for_uri_finish
  (c-name "g_app_info_launch_default_for_uri_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-function g_app_launch_context_get_type
  (c-name "g_app_launch_context_get_type")
  (return-type "GType")
)

(define-function g_app_launch_context_new
  (c-name "g_app_launch_context_new")
  (is-constructor-of "GAppLaunchContext")
  (return-type "GAppLaunchContext*")
)

(define-method setenv
  (of-object "GAppLaunchContext")
  (c-name "g_app_launch_context_setenv")
  (return-type "none")
  (parameters
    '("const-char*" "variable")
    '("const-char*" "value")
  )
)

(define-method unsetenv
  (of-object "GAppLaunchContext")
  (c-name "g_app_launch_context_unsetenv")
  (return-type "none")
  (parameters
    '("const-char*" "variable")
  )
)

(define-method get_environment
  (of-object "GAppLaunchContext")
  (c-name "g_app_launch_context_get_environment")
  (return-type "char**")
)

(define-method get_display
  (of-object "GAppLaunchContext")
  (c-name "g_app_launch_context_get_display")
  (return-type "char*")
  (parameters
    '("GAppInfo*" "info")
    '("GList*" "files")
  )
)

(define-method get_startup_notify_id
  (of-object "GAppLaunchContext")
  (c-name "g_app_launch_context_get_startup_notify_id")
  (return-type "char*")
  (parameters
    '("GAppInfo*" "info")
    '("GList*" "files")
  )
)

(define-method launch_failed
  (of-object "GAppLaunchContext")
  (c-name "g_app_launch_context_launch_failed")
  (return-type "none")
  (parameters
    '("const-char*" "startup_notify_id")
  )
)

(define-function g_app_info_monitor_get_type
  (c-name "g_app_info_monitor_get_type")
  (return-type "GType")
)

(define-function g_app_info_monitor_get
  (c-name "g_app_info_monitor_get")
  (return-type "GAppInfoMonitor*")
)



;; From gapplicationcommandline.h

(define-function g_application_command_line_get_type
  (c-name "g_application_command_line_get_type")
  (return-type "GType")
)

(define-method get_arguments
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_get_arguments")
  (return-type "gchar**")
  (parameters
    '("int*" "argc")
  )
)

(define-method get_options_dict
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_get_options_dict")
  (return-type "GVariantDict*")
)

(define-method get_stdin
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_get_stdin")
  (return-type "GInputStream*")
)

(define-method get_environ
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_get_environ")
  (return-type "const-gchar*-const*")
)

(define-method getenv
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_getenv")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_cwd
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_get_cwd")
  (return-type "const-gchar*")
)

(define-method get_is_remote
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_get_is_remote")
  (return-type "gboolean")
)

(define-method print
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_print")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-method printerr
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_printerr")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-method get_exit_status
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_get_exit_status")
  (return-type "int")
)

(define-method set_exit_status
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_set_exit_status")
  (return-type "none")
  (parameters
    '("int" "exit_status")
  )
)

(define-method get_platform_data
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_get_platform_data")
  (return-type "GVariant*")
)

(define-method create_file_for_arg
  (of-object "GApplicationCommandLine")
  (c-name "g_application_command_line_create_file_for_arg")
  (return-type "GFile*")
  (parameters
    '("const-gchar*" "arg")
  )
)



;; From gapplication.h

(define-function g_application_get_type
  (c-name "g_application_get_type")
  (return-type "GType")
)

(define-function g_application_id_is_valid
  (c-name "g_application_id_is_valid")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "application_id")
  )
)

(define-function g_application_new
  (c-name "g_application_new")
  (is-constructor-of "GApplication")
  (return-type "GApplication*")
  (parameters
    '("const-gchar*" "application_id")
    '("GApplicationFlags" "flags")
  )
)

(define-method get_application_id
  (of-object "GApplication")
  (c-name "g_application_get_application_id")
  (return-type "const-gchar*")
)

(define-method set_application_id
  (of-object "GApplication")
  (c-name "g_application_set_application_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "application_id")
  )
)

(define-method get_dbus_connection
  (of-object "GApplication")
  (c-name "g_application_get_dbus_connection")
  (return-type "GDBusConnection*")
)

(define-method get_dbus_object_path
  (of-object "GApplication")
  (c-name "g_application_get_dbus_object_path")
  (return-type "const-gchar*")
)

(define-method get_inactivity_timeout
  (of-object "GApplication")
  (c-name "g_application_get_inactivity_timeout")
  (return-type "guint")
)

(define-method set_inactivity_timeout
  (of-object "GApplication")
  (c-name "g_application_set_inactivity_timeout")
  (return-type "none")
  (parameters
    '("guint" "inactivity_timeout")
  )
)

(define-method get_flags
  (of-object "GApplication")
  (c-name "g_application_get_flags")
  (return-type "GApplicationFlags")
)

(define-method set_flags
  (of-object "GApplication")
  (c-name "g_application_set_flags")
  (return-type "none")
  (parameters
    '("GApplicationFlags" "flags")
  )
)

(define-method get_resource_base_path
  (of-object "GApplication")
  (c-name "g_application_get_resource_base_path")
  (return-type "const-gchar*")
)

(define-method set_resource_base_path
  (of-object "GApplication")
  (c-name "g_application_set_resource_base_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "resource_path")
  )
)

(define-method set_action_group
  (of-object "GApplication")
  (c-name "g_application_set_action_group")
  (return-type "none")
  (parameters
    '("GActionGroup*" "action_group")
  )
)

(define-method add_main_option_entries
  (of-object "GApplication")
  (c-name "g_application_add_main_option_entries")
  (return-type "none")
  (parameters
    '("const-GOptionEntry*" "entries")
  )
)

(define-method add_main_option
  (of-object "GApplication")
  (c-name "g_application_add_main_option")
  (return-type "none")
  (parameters
    '("const-char*" "long_name")
    '("char" "short_name")
    '("GOptionFlags" "flags")
    '("GOptionArg" "arg")
    '("const-char*" "description")
    '("const-char*" "arg_description")
  )
)

(define-method add_option_group
  (of-object "GApplication")
  (c-name "g_application_add_option_group")
  (return-type "none")
  (parameters
    '("GOptionGroup*" "group")
  )
)

(define-method set_option_context_parameter_string
  (of-object "GApplication")
  (c-name "g_application_set_option_context_parameter_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "parameter_string")
  )
)

(define-method set_option_context_summary
  (of-object "GApplication")
  (c-name "g_application_set_option_context_summary")
  (return-type "none")
  (parameters
    '("const-gchar*" "summary")
  )
)

(define-method set_option_context_description
  (of-object "GApplication")
  (c-name "g_application_set_option_context_description")
  (return-type "none")
  (parameters
    '("const-gchar*" "description")
  )
)

(define-method get_is_registered
  (of-object "GApplication")
  (c-name "g_application_get_is_registered")
  (return-type "gboolean")
)

(define-method get_is_remote
  (of-object "GApplication")
  (c-name "g_application_get_is_remote")
  (return-type "gboolean")
)

(define-method register
  (of-object "GApplication")
  (c-name "g_application_register")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method hold
  (of-object "GApplication")
  (c-name "g_application_hold")
  (return-type "none")
)

(define-method release
  (of-object "GApplication")
  (c-name "g_application_release")
  (return-type "none")
)

(define-method activate
  (of-object "GApplication")
  (c-name "g_application_activate")
  (return-type "none")
)

(define-method open
  (of-object "GApplication")
  (c-name "g_application_open")
  (return-type "none")
  (parameters
    '("GFile**" "files")
    '("gint" "n_files")
    '("const-gchar*" "hint")
  )
)

(define-method run
  (of-object "GApplication")
  (c-name "g_application_run")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char**" "argv")
  )
)

(define-method quit
  (of-object "GApplication")
  (c-name "g_application_quit")
  (return-type "none")
)

(define-function g_application_get_default
  (c-name "g_application_get_default")
  (return-type "GApplication*")
)

(define-method set_default
  (of-object "GApplication")
  (c-name "g_application_set_default")
  (return-type "none")
)

(define-method mark_busy
  (of-object "GApplication")
  (c-name "g_application_mark_busy")
  (return-type "none")
)

(define-method unmark_busy
  (of-object "GApplication")
  (c-name "g_application_unmark_busy")
  (return-type "none")
)

(define-method get_is_busy
  (of-object "GApplication")
  (c-name "g_application_get_is_busy")
  (return-type "gboolean")
)

(define-method send_notification
  (of-object "GApplication")
  (c-name "g_application_send_notification")
  (return-type "none")
  (parameters
    '("const-gchar*" "id")
    '("GNotification*" "notification")
  )
)

(define-method withdraw_notification
  (of-object "GApplication")
  (c-name "g_application_withdraw_notification")
  (return-type "none")
  (parameters
    '("const-gchar*" "id")
  )
)

(define-method bind_busy_property
  (of-object "GApplication")
  (c-name "g_application_bind_busy_property")
  (return-type "none")
  (parameters
    '("gpointer" "object")
    '("const-gchar*" "property")
  )
)

(define-method unbind_busy_property
  (of-object "GApplication")
  (c-name "g_application_unbind_busy_property")
  (return-type "none")
  (parameters
    '("gpointer" "object")
    '("const-gchar*" "property")
  )
)



;; From gapplicationimpl.h

(define-method destroy
  (of-object "GApplicationImpl")
  (c-name "g_application_impl_destroy")
  (return-type "none")
)

(define-method impl_register
  (of-object "GApplication")
  (c-name "g_application_impl_register")
  (return-type "GApplicationImpl*")
  (parameters
    '("const-gchar*" "appid")
    '("GApplicationFlags" "flags")
    '("GActionGroup*" "exported_actions")
    '("GRemoteActionGroup**" "remote_actions")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method activate
  (of-object "GApplicationImpl")
  (c-name "g_application_impl_activate")
  (return-type "none")
  (parameters
    '("GVariant*" "platform_data")
  )
)

(define-method open
  (of-object "GApplicationImpl")
  (c-name "g_application_impl_open")
  (return-type "none")
  (parameters
    '("GFile**" "files")
    '("gint" "n_files")
    '("const-gchar*" "hint")
    '("GVariant*" "platform_data")
  )
)

(define-method command_line
  (of-object "GApplicationImpl")
  (c-name "g_application_impl_command_line")
  (return-type "int")
  (parameters
    '("const-gchar*-const*" "arguments")
    '("GVariant*" "platform_data")
  )
)

(define-method flush
  (of-object "GApplicationImpl")
  (c-name "g_application_impl_flush")
  (return-type "none")
)

(define-method get_dbus_connection
  (of-object "GApplicationImpl")
  (c-name "g_application_impl_get_dbus_connection")
  (return-type "GDBusConnection*")
)

(define-method get_dbus_object_path
  (of-object "GApplicationImpl")
  (c-name "g_application_impl_get_dbus_object_path")
  (return-type "const-gchar*")
)

(define-method set_busy_state
  (of-object "GApplicationImpl")
  (c-name "g_application_impl_set_busy_state")
  (return-type "none")
  (parameters
    '("gboolean" "busy")
  )
)



;; From gasynchelper.h



;; From gasyncinitable.h

(define-function g_async_initable_get_type
  (c-name "g_async_initable_get_type")
  (return-type "GType")
)

(define-method init_async
  (of-object "GAsyncInitable")
  (c-name "g_async_initable_init_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method init_finish
  (of-object "GAsyncInitable")
  (c-name "g_async_initable_init_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function g_async_initable_new_async
  (c-name "g_async_initable_new_async")
  (return-type "none")
  (parameters
    '("GType" "object_type")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-function g_async_initable_newv_async
  (c-name "g_async_initable_newv_async")
  (return-type "none")
  (parameters
    '("GType" "object_type")
    '("guint" "n_parameters")
    '("GParameter*" "parameters")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_async_initable_new_valist_async
  (c-name "g_async_initable_new_valist_async")
  (return-type "none")
  (parameters
    '("GType" "object_type")
    '("const-gchar*" "first_property_name")
    '("va_list" "var_args")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method new_finish
  (of-object "GAsyncInitable")
  (c-name "g_async_initable_new_finish")
  (return-type "GObject*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)



;; From gasyncresult.h

(define-function g_async_result_get_type
  (c-name "g_async_result_get_type")
  (return-type "GType")
)

(define-method get_user_data
  (of-object "GAsyncResult")
  (c-name "g_async_result_get_user_data")
  (return-type "gpointer")
)

(define-method get_source_object
  (of-object "GAsyncResult")
  (c-name "g_async_result_get_source_object")
  (return-type "GObject*")
)

(define-method legacy_propagate_error
  (of-object "GAsyncResult")
  (c-name "g_async_result_legacy_propagate_error")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method is_tagged
  (of-object "GAsyncResult")
  (c-name "g_async_result_is_tagged")
  (return-type "gboolean")
  (parameters
    '("gpointer" "source_tag")
  )
)



;; From gbufferedinputstream.h

(define-function g_buffered_input_stream_get_type
  (c-name "g_buffered_input_stream_get_type")
  (return-type "GType")
)

(define-function g_buffered_input_stream_new
  (c-name "g_buffered_input_stream_new")
  (is-constructor-of "GBufferedInputStream")
  (return-type "GInputStream*")
  (parameters
    '("GInputStream*" "base_stream")
  )
)

(define-function g_buffered_input_stream_new_sized
  (c-name "g_buffered_input_stream_new_sized")
  (return-type "GInputStream*")
  (parameters
    '("GInputStream*" "base_stream")
    '("gsize" "size")
  )
)

(define-method get_buffer_size
  (of-object "GBufferedInputStream")
  (c-name "g_buffered_input_stream_get_buffer_size")
  (return-type "gsize")
)

(define-method set_buffer_size
  (of-object "GBufferedInputStream")
  (c-name "g_buffered_input_stream_set_buffer_size")
  (return-type "none")
  (parameters
    '("gsize" "size")
  )
)

(define-method get_available
  (of-object "GBufferedInputStream")
  (c-name "g_buffered_input_stream_get_available")
  (return-type "gsize")
)

(define-method peek
  (of-object "GBufferedInputStream")
  (c-name "g_buffered_input_stream_peek")
  (return-type "gsize")
  (parameters
    '("void*" "buffer")
    '("gsize" "offset")
    '("gsize" "count")
  )
)

(define-method peek_buffer
  (of-object "GBufferedInputStream")
  (c-name "g_buffered_input_stream_peek_buffer")
  (return-type "const-void*")
  (parameters
    '("gsize*" "count")
  )
)

(define-method fill
  (of-object "GBufferedInputStream")
  (c-name "g_buffered_input_stream_fill")
  (return-type "gssize")
  (parameters
    '("gssize" "count")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method fill_async
  (of-object "GBufferedInputStream")
  (c-name "g_buffered_input_stream_fill_async")
  (return-type "none")
  (parameters
    '("gssize" "count")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method fill_finish
  (of-object "GBufferedInputStream")
  (c-name "g_buffered_input_stream_fill_finish")
  (return-type "gssize")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method read_byte
  (of-object "GBufferedInputStream")
  (c-name "g_buffered_input_stream_read_byte")
  (return-type "int")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From gbufferedoutputstream.h

(define-function g_buffered_output_stream_get_type
  (c-name "g_buffered_output_stream_get_type")
  (return-type "GType")
)

(define-function g_buffered_output_stream_new
  (c-name "g_buffered_output_stream_new")
  (is-constructor-of "GBufferedOutputStream")
  (return-type "GOutputStream*")
  (parameters
    '("GOutputStream*" "base_stream")
  )
)

(define-function g_buffered_output_stream_new_sized
  (c-name "g_buffered_output_stream_new_sized")
  (return-type "GOutputStream*")
  (parameters
    '("GOutputStream*" "base_stream")
    '("gsize" "size")
  )
)

(define-method get_buffer_size
  (of-object "GBufferedOutputStream")
  (c-name "g_buffered_output_stream_get_buffer_size")
  (return-type "gsize")
)

(define-method set_buffer_size
  (of-object "GBufferedOutputStream")
  (c-name "g_buffered_output_stream_set_buffer_size")
  (return-type "none")
  (parameters
    '("gsize" "size")
  )
)

(define-method get_auto_grow
  (of-object "GBufferedOutputStream")
  (c-name "g_buffered_output_stream_get_auto_grow")
  (return-type "gboolean")
)

(define-method set_auto_grow
  (of-object "GBufferedOutputStream")
  (c-name "g_buffered_output_stream_set_auto_grow")
  (return-type "none")
  (parameters
    '("gboolean" "auto_grow")
  )
)



;; From gbytesicon.h

(define-function g_bytes_icon_get_type
  (c-name "g_bytes_icon_get_type")
  (return-type "GType")
)

(define-method icon_new
  (of-object "GBytes")
  (c-name "g_bytes_icon_new")
  (return-type "GIcon*")
)

(define-method get_bytes
  (of-object "GBytesIcon")
  (c-name "g_bytes_icon_get_bytes")
  (return-type "GBytes*")
)



;; From gcancellable.h

(define-function g_cancellable_get_type
  (c-name "g_cancellable_get_type")
  (return-type "GType")
)

(define-function g_cancellable_new
  (c-name "g_cancellable_new")
  (is-constructor-of "GCancellable")
  (return-type "GCancellable*")
)

(define-method is_cancelled
  (of-object "GCancellable")
  (c-name "g_cancellable_is_cancelled")
  (return-type "gboolean")
)

(define-method set_error_if_cancelled
  (of-object "GCancellable")
  (c-name "g_cancellable_set_error_if_cancelled")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method get_fd
  (of-object "GCancellable")
  (c-name "g_cancellable_get_fd")
  (return-type "int")
)

(define-method make_pollfd
  (of-object "GCancellable")
  (c-name "g_cancellable_make_pollfd")
  (return-type "gboolean")
  (parameters
    '("GPollFD*" "pollfd")
  )
)

(define-method release_fd
  (of-object "GCancellable")
  (c-name "g_cancellable_release_fd")
  (return-type "none")
)

(define-method source_new
  (of-object "GCancellable")
  (c-name "g_cancellable_source_new")
  (return-type "GSource*")
)

(define-function g_cancellable_get_current
  (c-name "g_cancellable_get_current")
  (return-type "GCancellable*")
)

(define-method push_current
  (of-object "GCancellable")
  (c-name "g_cancellable_push_current")
  (return-type "none")
)

(define-method pop_current
  (of-object "GCancellable")
  (c-name "g_cancellable_pop_current")
  (return-type "none")
)

(define-method reset
  (of-object "GCancellable")
  (c-name "g_cancellable_reset")
  (return-type "none")
)

(define-method connect
  (of-object "GCancellable")
  (c-name "g_cancellable_connect")
  (return-type "gulong")
  (parameters
    '("GCallback" "callback")
    '("gpointer" "data")
    '("GDestroyNotify" "data_destroy_func")
  )
)

(define-method disconnect
  (of-object "GCancellable")
  (c-name "g_cancellable_disconnect")
  (return-type "none")
  (parameters
    '("gulong" "handler_id")
  )
)

(define-method cancel
  (of-object "GCancellable")
  (c-name "g_cancellable_cancel")
  (return-type "none")
)



;; From gcharsetconverter.h

(define-function g_charset_converter_get_type
  (c-name "g_charset_converter_get_type")
  (return-type "GType")
)

(define-method set_converter_new
  (of-object "gchar")
  (c-name "g_charset_converter_new")
  (return-type "GCharsetConverter*")
  (parameters
    '("const-gchar*" "from_charset")
    '("GError**" "error")
  )
)

(define-method set_use_fallback
  (of-object "GCharsetConverter")
  (c-name "g_charset_converter_set_use_fallback")
  (return-type "none")
  (parameters
    '("gboolean" "use_fallback")
  )
)

(define-method get_use_fallback
  (of-object "GCharsetConverter")
  (c-name "g_charset_converter_get_use_fallback")
  (return-type "gboolean")
)

(define-method get_num_fallbacks
  (of-object "GCharsetConverter")
  (c-name "g_charset_converter_get_num_fallbacks")
  (return-type "guint")
)



;; From gconstructor_as_data.h



;; From gcontenttype.h

(define-function g_content_type_equals
  (c-name "g_content_type_equals")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "type1")
    '("const-gchar*" "type2")
  )
)

(define-function g_content_type_is_a
  (c-name "g_content_type_is_a")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "type")
    '("const-gchar*" "supertype")
  )
)

(define-function g_content_type_is_mime_type
  (c-name "g_content_type_is_mime_type")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "type")
    '("const-gchar*" "mime_type")
  )
)

(define-function g_content_type_is_unknown
  (c-name "g_content_type_is_unknown")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "type")
  )
)

(define-function g_content_type_get_description
  (c-name "g_content_type_get_description")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "type")
  )
)

(define-function g_content_type_get_mime_type
  (c-name "g_content_type_get_mime_type")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "type")
  )
)

(define-function g_content_type_get_icon
  (c-name "g_content_type_get_icon")
  (return-type "GIcon*")
  (parameters
    '("const-gchar*" "type")
  )
)

(define-function g_content_type_get_symbolic_icon
  (c-name "g_content_type_get_symbolic_icon")
  (return-type "GIcon*")
  (parameters
    '("const-gchar*" "type")
  )
)

(define-function g_content_type_get_generic_icon_name
  (c-name "g_content_type_get_generic_icon_name")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "type")
  )
)

(define-function g_content_type_can_be_executable
  (c-name "g_content_type_can_be_executable")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "type")
  )
)

(define-function g_content_type_from_mime_type
  (c-name "g_content_type_from_mime_type")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "mime_type")
  )
)

(define-function g_content_type_guess
  (c-name "g_content_type_guess")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "filename")
    '("const-guchar*" "data")
    '("gsize" "data_size")
    '("gboolean*" "result_uncertain")
  )
)

(define-function g_content_type_guess_for_tree
  (c-name "g_content_type_guess_for_tree")
  (return-type "gchar**")
  (parameters
    '("GFile*" "root")
  )
)

(define-function g_content_types_get_registered
  (c-name "g_content_types_get_registered")
  (return-type "GList*")
)



;; From gcontextspecificgroup.h

(define-method get
  (of-object "GContextSpecificGroup")
  (c-name "g_context_specific_group_get")
  (return-type "gpointer")
  (parameters
    '("GType" "type")
    '("goffset" "context_offset")
    '("GCallback" "start_func")
  )
)

(define-method remove
  (of-object "GContextSpecificGroup")
  (c-name "g_context_specific_group_remove")
  (return-type "none")
  (parameters
    '("GMainContext*" "context")
    '("gpointer" "instance")
    '("GCallback" "stop_func")
  )
)

(define-method emit
  (of-object "GContextSpecificGroup")
  (c-name "g_context_specific_group_emit")
  (return-type "none")
  (parameters
    '("guint" "signal_id")
  )
)



;; From gconverter.h

(define-function g_converter_get_type
  (c-name "g_converter_get_type")
  (return-type "GType")
)

(define-method convert
  (of-object "GConverter")
  (c-name "g_converter_convert")
  (return-type "GConverterResult")
  (parameters
    '("const-void*" "inbuf")
    '("gsize" "inbuf_size")
    '("void*" "outbuf")
    '("gsize" "outbuf_size")
    '("GConverterFlags" "flags")
    '("gsize*" "bytes_read")
    '("gsize*" "bytes_written")
    '("GError**" "error")
  )
)

(define-method reset
  (of-object "GConverter")
  (c-name "g_converter_reset")
  (return-type "none")
)



;; From gconverterinputstream.h

(define-function g_converter_input_stream_get_type
  (c-name "g_converter_input_stream_get_type")
  (return-type "GType")
)

(define-function g_converter_input_stream_new
  (c-name "g_converter_input_stream_new")
  (is-constructor-of "GConverterInputStream")
  (return-type "GInputStream*")
  (parameters
    '("GInputStream*" "base_stream")
    '("GConverter*" "converter")
  )
)

(define-method get_converter
  (of-object "GConverterInputStream")
  (c-name "g_converter_input_stream_get_converter")
  (return-type "GConverter*")
)



;; From gconverteroutputstream.h

(define-function g_converter_output_stream_get_type
  (c-name "g_converter_output_stream_get_type")
  (return-type "GType")
)

(define-function g_converter_output_stream_new
  (c-name "g_converter_output_stream_new")
  (is-constructor-of "GConverterOutputStream")
  (return-type "GOutputStream*")
  (parameters
    '("GOutputStream*" "base_stream")
    '("GConverter*" "converter")
  )
)

(define-method get_converter
  (of-object "GConverterOutputStream")
  (c-name "g_converter_output_stream_get_converter")
  (return-type "GConverter*")
)



;; From gcredentials.h

(define-function g_credentials_get_type
  (c-name "g_credentials_get_type")
  (return-type "GType")
)

(define-function g_credentials_new
  (c-name "g_credentials_new")
  (is-constructor-of "GCredentials")
  (return-type "GCredentials*")
)

(define-method to_string
  (of-object "GCredentials")
  (c-name "g_credentials_to_string")
  (return-type "gchar*")
)

(define-method get_native
  (of-object "GCredentials")
  (c-name "g_credentials_get_native")
  (return-type "gpointer")
  (parameters
    '("GCredentialsType" "native_type")
  )
)

(define-method set_native
  (of-object "GCredentials")
  (c-name "g_credentials_set_native")
  (return-type "none")
  (parameters
    '("GCredentialsType" "native_type")
    '("gpointer" "native")
  )
)

(define-method is_same_user
  (of-object "GCredentials")
  (c-name "g_credentials_is_same_user")
  (return-type "gboolean")
  (parameters
    '("GCredentials*" "other_credentials")
    '("GError**" "error")
  )
)

(define-method get_unix_pid
  (of-object "GCredentials")
  (c-name "g_credentials_get_unix_pid")
  (return-type "pid_t")
  (parameters
    '("GError**" "error")
  )
)

(define-method get_unix_user
  (of-object "GCredentials")
  (c-name "g_credentials_get_unix_user")
  (return-type "uid_t")
  (parameters
    '("GError**" "error")
  )
)

(define-method set_unix_user
  (of-object "GCredentials")
  (c-name "g_credentials_set_unix_user")
  (return-type "gboolean")
  (parameters
    '("uid_t" "uid")
    '("GError**" "error")
  )
)



;; From gdatagrambased.h

(define-function g_datagram_based_get_type
  (c-name "g_datagram_based_get_type")
  (return-type "GType")
)

(define-method receive_messages
  (of-object "GDatagramBased")
  (c-name "g_datagram_based_receive_messages")
  (return-type "gint")
  (parameters
    '("GInputMessage*" "messages")
    '("guint" "num_messages")
    '("gint" "flags")
    '("gint64" "timeout")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method send_messages
  (of-object "GDatagramBased")
  (c-name "g_datagram_based_send_messages")
  (return-type "gint")
  (parameters
    '("GOutputMessage*" "messages")
    '("guint" "num_messages")
    '("gint" "flags")
    '("gint64" "timeout")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method create_source
  (of-object "GDatagramBased")
  (c-name "g_datagram_based_create_source")
  (return-type "GSource*")
  (parameters
    '("GIOCondition" "condition")
    '("GCancellable*" "cancellable")
  )
)

(define-method condition_check
  (of-object "GDatagramBased")
  (c-name "g_datagram_based_condition_check")
  (return-type "GIOCondition")
  (parameters
    '("GIOCondition" "condition")
  )
)

(define-method condition_wait
  (of-object "GDatagramBased")
  (c-name "g_datagram_based_condition_wait")
  (return-type "gboolean")
  (parameters
    '("GIOCondition" "condition")
    '("gint64" "timeout")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From gdatainputstream.h

(define-function g_data_input_stream_get_type
  (c-name "g_data_input_stream_get_type")
  (return-type "GType")
)

(define-function g_data_input_stream_new
  (c-name "g_data_input_stream_new")
  (is-constructor-of "GDataInputStream")
  (return-type "GDataInputStream*")
  (parameters
    '("GInputStream*" "base_stream")
  )
)

(define-method set_byte_order
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_set_byte_order")
  (return-type "none")
  (parameters
    '("GDataStreamByteOrder" "order")
  )
)

(define-method get_byte_order
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_get_byte_order")
  (return-type "GDataStreamByteOrder")
)

(define-method set_newline_type
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_set_newline_type")
  (return-type "none")
  (parameters
    '("GDataStreamNewlineType" "type")
  )
)

(define-method get_newline_type
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_get_newline_type")
  (return-type "GDataStreamNewlineType")
)

(define-method read_byte
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_byte")
  (return-type "guchar")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_int16
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_int16")
  (return-type "gint16")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_uint16
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_uint16")
  (return-type "guint16")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_int32
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_int32")
  (return-type "gint32")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_uint32
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_uint32")
  (return-type "guint32")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_int64
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_int64")
  (return-type "gint64")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_uint64
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_uint64")
  (return-type "guint64")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_line
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_line")
  (return-type "char*")
  (parameters
    '("gsize*" "length")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_line_utf8
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_line_utf8")
  (return-type "char*")
  (parameters
    '("gsize*" "length")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_line_async
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_line_async")
  (return-type "none")
  (parameters
    '("gint" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method read_line_finish
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_line_finish")
  (return-type "char*")
  (parameters
    '("GAsyncResult*" "result")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method read_line_finish_utf8
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_line_finish_utf8")
  (return-type "char*")
  (parameters
    '("GAsyncResult*" "result")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method read_until
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_until")
  (return-type "char*")
  (parameters
    '("const-gchar*" "stop_chars")
    '("gsize*" "length")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_until_async
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_until_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "stop_chars")
    '("gint" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method read_until_finish
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_until_finish")
  (return-type "char*")
  (parameters
    '("GAsyncResult*" "result")
    '("gsize*" "length")
    '("GError**" "error")
  )
)

(define-method read_upto
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_upto")
  (return-type "char*")
  (parameters
    '("const-gchar*" "stop_chars")
    '("gssize" "stop_chars_len")
    '("gsize*" "length")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_upto_async
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_upto_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "stop_chars")
    '("gssize" "stop_chars_len")
    '("gint" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method read_upto_finish
  (of-object "GDataInputStream")
  (c-name "g_data_input_stream_read_upto_finish")
  (return-type "char*")
  (parameters
    '("GAsyncResult*" "result")
    '("gsize*" "length")
    '("GError**" "error")
  )
)



;; From gdataoutputstream.h

(define-function g_data_output_stream_get_type
  (c-name "g_data_output_stream_get_type")
  (return-type "GType")
)

(define-function g_data_output_stream_new
  (c-name "g_data_output_stream_new")
  (is-constructor-of "GDataOutputStream")
  (return-type "GDataOutputStream*")
  (parameters
    '("GOutputStream*" "base_stream")
  )
)

(define-method set_byte_order
  (of-object "GDataOutputStream")
  (c-name "g_data_output_stream_set_byte_order")
  (return-type "none")
  (parameters
    '("GDataStreamByteOrder" "order")
  )
)

(define-method get_byte_order
  (of-object "GDataOutputStream")
  (c-name "g_data_output_stream_get_byte_order")
  (return-type "GDataStreamByteOrder")
)

(define-method put_byte
  (of-object "GDataOutputStream")
  (c-name "g_data_output_stream_put_byte")
  (return-type "gboolean")
  (parameters
    '("guchar" "data")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method put_int16
  (of-object "GDataOutputStream")
  (c-name "g_data_output_stream_put_int16")
  (return-type "gboolean")
  (parameters
    '("gint16" "data")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method put_uint16
  (of-object "GDataOutputStream")
  (c-name "g_data_output_stream_put_uint16")
  (return-type "gboolean")
  (parameters
    '("guint16" "data")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method put_int32
  (of-object "GDataOutputStream")
  (c-name "g_data_output_stream_put_int32")
  (return-type "gboolean")
  (parameters
    '("gint32" "data")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method put_uint32
  (of-object "GDataOutputStream")
  (c-name "g_data_output_stream_put_uint32")
  (return-type "gboolean")
  (parameters
    '("guint32" "data")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method put_int64
  (of-object "GDataOutputStream")
  (c-name "g_data_output_stream_put_int64")
  (return-type "gboolean")
  (parameters
    '("gint64" "data")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method put_uint64
  (of-object "GDataOutputStream")
  (c-name "g_data_output_stream_put_uint64")
  (return-type "gboolean")
  (parameters
    '("guint64" "data")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method put_string
  (of-object "GDataOutputStream")
  (c-name "g_data_output_stream_put_string")
  (return-type "gboolean")
  (parameters
    '("const-char*" "str")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From gdbusactiongroup.h

(define-function g_dbus_action_group_get_type
  (c-name "g_dbus_action_group_get_type")
  (return-type "GType")
)

(define-function g_dbus_action_group_get
  (c-name "g_dbus_action_group_get")
  (return-type "GDBusActionGroup*")
  (parameters
    '("GDBusConnection*" "connection")
    '("const-gchar*" "bus_name")
    '("const-gchar*" "object_path")
  )
)



;; From gdbusaddress.h

(define-function g_dbus_address_escape_value
  (c-name "g_dbus_address_escape_value")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-function g_dbus_is_address
  (c-name "g_dbus_is_address")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-function g_dbus_is_supported_address
  (c-name "g_dbus_is_supported_address")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
    '("GError**" "error")
  )
)

(define-function g_dbus_address_get_stream
  (c-name "g_dbus_address_get_stream")
  (return-type "none")
  (parameters
    '("const-gchar*" "address")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_dbus_address_get_stream_finish
  (c-name "g_dbus_address_get_stream_finish")
  (return-type "GIOStream*")
  (parameters
    '("GAsyncResult*" "res")
    '("gchar**" "out_guid")
    '("GError**" "error")
  )
)

(define-function g_dbus_address_get_stream_sync
  (c-name "g_dbus_address_get_stream_sync")
  (return-type "GIOStream*")
  (parameters
    '("const-gchar*" "address")
    '("gchar**" "out_guid")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function g_dbus_address_get_for_bus_sync
  (c-name "g_dbus_address_get_for_bus_sync")
  (return-type "gchar*")
  (parameters
    '("GBusType" "bus_type")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From gdbusauth.h



;; From gdbusauthmechanismanon.h



;; From gdbusauthmechanismexternal.h



;; From gdbusauthmechanism.h



;; From gdbusauthmechanismsha1.h



;; From gdbusauthobserver.h

(define-function g_dbus_auth_observer_get_type
  (c-name "g_dbus_auth_observer_get_type")
  (return-type "GType")
)

(define-function g_dbus_auth_observer_new
  (c-name "g_dbus_auth_observer_new")
  (is-constructor-of "GDbusAuthObserver")
  (return-type "GDBusAuthObserver*")
)

(define-method authorize_authenticated_peer
  (of-object "GDBusAuthObserver")
  (c-name "g_dbus_auth_observer_authorize_authenticated_peer")
  (return-type "gboolean")
  (parameters
    '("GIOStream*" "stream")
    '("GCredentials*" "credentials")
  )
)

(define-method allow_mechanism
  (of-object "GDBusAuthObserver")
  (c-name "g_dbus_auth_observer_allow_mechanism")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "mechanism")
  )
)



;; From gdbusconnection.h

(define-function g_dbus_connection_get_type
  (c-name "g_dbus_connection_get_type")
  (return-type "GType")
)

(define-function g_bus_get
  (c-name "g_bus_get")
  (return-type "none")
  (parameters
    '("GBusType" "bus_type")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_bus_get_finish
  (c-name "g_bus_get_finish")
  (return-type "GDBusConnection*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function g_bus_get_sync
  (c-name "g_bus_get_sync")
  (return-type "GDBusConnection*")
  (parameters
    '("GBusType" "bus_type")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function g_dbus_connection_new
  (c-name "g_dbus_connection_new")
  (return-type "none")
  (parameters
    '("GIOStream*" "stream")
    '("const-gchar*" "guid")
    '("GDBusConnectionFlags" "flags")
    '("GDBusAuthObserver*" "observer")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_dbus_connection_new_finish
  (c-name "g_dbus_connection_new_finish")
  (return-type "GDBusConnection*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function g_dbus_connection_new_sync
  (c-name "g_dbus_connection_new_sync")
  (return-type "GDBusConnection*")
  (parameters
    '("GIOStream*" "stream")
    '("const-gchar*" "guid")
    '("GDBusConnectionFlags" "flags")
    '("GDBusAuthObserver*" "observer")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function g_dbus_connection_new_for_address
  (c-name "g_dbus_connection_new_for_address")
  (return-type "none")
  (parameters
    '("const-gchar*" "address")
    '("GDBusConnectionFlags" "flags")
    '("GDBusAuthObserver*" "observer")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_dbus_connection_new_for_address_finish
  (c-name "g_dbus_connection_new_for_address_finish")
  (return-type "GDBusConnection*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function g_dbus_connection_new_for_address_sync
  (c-name "g_dbus_connection_new_for_address_sync")
  (return-type "GDBusConnection*")
  (parameters
    '("const-gchar*" "address")
    '("GDBusConnectionFlags" "flags")
    '("GDBusAuthObserver*" "observer")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method start_message_processing
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_start_message_processing")
  (return-type "none")
)

(define-method is_closed
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_is_closed")
  (return-type "gboolean")
)

(define-method get_stream
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_get_stream")
  (return-type "GIOStream*")
)

(define-method get_guid
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_get_guid")
  (return-type "const-gchar*")
)

(define-method get_unique_name
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_get_unique_name")
  (return-type "const-gchar*")
)

(define-method get_peer_credentials
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_get_peer_credentials")
  (return-type "GCredentials*")
)

(define-method get_last_serial
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_get_last_serial")
  (return-type "guint32")
)

(define-method get_exit_on_close
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_get_exit_on_close")
  (return-type "gboolean")
)

(define-method set_exit_on_close
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_set_exit_on_close")
  (return-type "none")
  (parameters
    '("gboolean" "exit_on_close")
  )
)

(define-method get_capabilities
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_get_capabilities")
  (return-type "GDBusCapabilityFlags")
)

(define-method close
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_close")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method close_finish
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_close_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method close_sync
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_close_sync")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method flush
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_flush")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method flush_finish
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_flush_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method flush_sync
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_flush_sync")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method send_message
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_send_message")
  (return-type "gboolean")
  (parameters
    '("GDBusMessage*" "message")
    '("GDBusSendMessageFlags" "flags")
    '("volatile-guint32*" "out_serial")
    '("GError**" "error")
  )
)

(define-method send_message_with_reply
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_send_message_with_reply")
  (return-type "none")
  (parameters
    '("GDBusMessage*" "message")
    '("GDBusSendMessageFlags" "flags")
    '("gint" "timeout_msec")
    '("volatile-guint32*" "out_serial")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method send_message_with_reply_finish
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_send_message_with_reply_finish")
  (return-type "GDBusMessage*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method send_message_with_reply_sync
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_send_message_with_reply_sync")
  (return-type "GDBusMessage*")
  (parameters
    '("GDBusMessage*" "message")
    '("GDBusSendMessageFlags" "flags")
    '("gint" "timeout_msec")
    '("volatile-guint32*" "out_serial")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method emit_signal
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_emit_signal")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "destination_bus_name")
    '("const-gchar*" "object_path")
    '("const-gchar*" "interface_name")
    '("const-gchar*" "signal_name")
    '("GVariant*" "parameters")
    '("GError**" "error")
  )
)

(define-method call
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_call")
  (return-type "none")
  (parameters
    '("const-gchar*" "bus_name")
    '("const-gchar*" "object_path")
    '("const-gchar*" "interface_name")
    '("const-gchar*" "method_name")
    '("GVariant*" "parameters")
    '("const-GVariantType*" "reply_type")
    '("GDBusCallFlags" "flags")
    '("gint" "timeout_msec")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_finish
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_call_finish")
  (return-type "GVariant*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_sync
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_call_sync")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "bus_name")
    '("const-gchar*" "object_path")
    '("const-gchar*" "interface_name")
    '("const-gchar*" "method_name")
    '("GVariant*" "parameters")
    '("const-GVariantType*" "reply_type")
    '("GDBusCallFlags" "flags")
    '("gint" "timeout_msec")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_with_unix_fd_list
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_call_with_unix_fd_list")
  (return-type "none")
  (parameters
    '("const-gchar*" "bus_name")
    '("const-gchar*" "object_path")
    '("const-gchar*" "interface_name")
    '("const-gchar*" "method_name")
    '("GVariant*" "parameters")
    '("const-GVariantType*" "reply_type")
    '("GDBusCallFlags" "flags")
    '("gint" "timeout_msec")
    '("GUnixFDList*" "fd_list")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_with_unix_fd_list_finish
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_call_with_unix_fd_list_finish")
  (return-type "GVariant*")
  (parameters
    '("GUnixFDList**" "out_fd_list")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_with_unix_fd_list_sync
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_call_with_unix_fd_list_sync")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "bus_name")
    '("const-gchar*" "object_path")
    '("const-gchar*" "interface_name")
    '("const-gchar*" "method_name")
    '("GVariant*" "parameters")
    '("const-GVariantType*" "reply_type")
    '("GDBusCallFlags" "flags")
    '("gint" "timeout_msec")
    '("GUnixFDList*" "fd_list")
    '("GUnixFDList**" "out_fd_list")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method register_object
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_register_object")
  (return-type "guint")
  (parameters
    '("const-gchar*" "object_path")
    '("GDBusInterfaceInfo*" "interface_info")
    '("const-GDBusInterfaceVTable*" "vtable")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_free_func")
    '("GError**" "error")
  )
)

(define-method register_object_with_closures
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_register_object_with_closures")
  (return-type "guint")
  (parameters
    '("const-gchar*" "object_path")
    '("GDBusInterfaceInfo*" "interface_info")
    '("GClosure*" "method_call_closure")
    '("GClosure*" "get_property_closure")
    '("GClosure*" "set_property_closure")
    '("GError**" "error")
  )
)

(define-method unregister_object
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_unregister_object")
  (return-type "gboolean")
  (parameters
    '("guint" "registration_id")
  )
)

(define-method register_subtree
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_register_subtree")
  (return-type "guint")
  (parameters
    '("const-gchar*" "object_path")
    '("const-GDBusSubtreeVTable*" "vtable")
    '("GDBusSubtreeFlags" "flags")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_free_func")
    '("GError**" "error")
  )
)

(define-method unregister_subtree
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_unregister_subtree")
  (return-type "gboolean")
  (parameters
    '("guint" "registration_id")
  )
)

(define-method signal_subscribe
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_signal_subscribe")
  (return-type "guint")
  (parameters
    '("const-gchar*" "sender")
    '("const-gchar*" "interface_name")
    '("const-gchar*" "member")
    '("const-gchar*" "object_path")
    '("const-gchar*" "arg0")
    '("GDBusSignalFlags" "flags")
    '("GDBusSignalCallback" "callback")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_free_func")
  )
)

(define-method signal_unsubscribe
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_signal_unsubscribe")
  (return-type "none")
  (parameters
    '("guint" "subscription_id")
  )
)

(define-method add_filter
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_add_filter")
  (return-type "guint")
  (parameters
    '("GDBusMessageFilterFunction" "filter_function")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_free_func")
  )
)

(define-method remove_filter
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_remove_filter")
  (return-type "none")
  (parameters
    '("guint" "filter_id")
  )
)



;; From gdbus-daemon-generated.h



;; From gdbusdaemon.h



;; From gdbuserror.h

(define-function g_dbus_error_quark
  (c-name "g_dbus_error_quark")
  (return-type "GQuark")
)

(define-function g_dbus_error_is_remote_error
  (c-name "g_dbus_error_is_remote_error")
  (return-type "gboolean")
  (parameters
    '("const-GError*" "error")
  )
)

(define-function g_dbus_error_get_remote_error
  (c-name "g_dbus_error_get_remote_error")
  (return-type "gchar*")
  (parameters
    '("const-GError*" "error")
  )
)

(define-function g_dbus_error_strip_remote_error
  (c-name "g_dbus_error_strip_remote_error")
  (return-type "gboolean")
  (parameters
    '("GError*" "error")
  )
)

(define-function g_dbus_error_register_error
  (c-name "g_dbus_error_register_error")
  (return-type "gboolean")
  (parameters
    '("GQuark" "error_domain")
    '("gint" "error_code")
    '("const-gchar*" "dbus_error_name")
  )
)

(define-function g_dbus_error_unregister_error
  (c-name "g_dbus_error_unregister_error")
  (return-type "gboolean")
  (parameters
    '("GQuark" "error_domain")
    '("gint" "error_code")
    '("const-gchar*" "dbus_error_name")
  )
)

(define-function g_dbus_error_register_error_domain
  (c-name "g_dbus_error_register_error_domain")
  (return-type "none")
  (parameters
    '("const-gchar*" "error_domain_quark_name")
    '("volatile-gsize*" "quark_volatile")
    '("const-GDBusErrorEntry*" "entries")
    '("guint" "num_entries")
  )
)

(define-function g_dbus_error_new_for_dbus_error
  (c-name "g_dbus_error_new_for_dbus_error")
  (return-type "GError*")
  (parameters
    '("const-gchar*" "dbus_error_name")
    '("const-gchar*" "dbus_error_message")
  )
)

(define-function g_dbus_error_set_dbus_error
  (c-name "g_dbus_error_set_dbus_error")
  (return-type "none")
  (parameters
    '("GError**" "error")
    '("const-gchar*" "dbus_error_name")
    '("const-gchar*" "dbus_error_message")
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-function g_dbus_error_set_dbus_error_valist
  (c-name "g_dbus_error_set_dbus_error_valist")
  (return-type "none")
  (parameters
    '("GError**" "error")
    '("const-gchar*" "dbus_error_name")
    '("const-gchar*" "dbus_error_message")
    '("const-gchar*" "format")
    '("va_list" "var_args")
  )
)

(define-function g_dbus_error_encode_gerror
  (c-name "g_dbus_error_encode_gerror")
  (return-type "gchar*")
  (parameters
    '("const-GError*" "error")
  )
)



;; From gdbusinterface.h

(define-function g_dbus_interface_get_type
  (c-name "g_dbus_interface_get_type")
  (return-type "GType")
)

(define-method get_info
  (of-object "GDBusInterface")
  (c-name "g_dbus_interface_get_info")
  (return-type "GDBusInterfaceInfo*")
)

(define-method get_object
  (of-object "GDBusInterface")
  (c-name "g_dbus_interface_get_object")
  (return-type "GDBusObject*")
)

(define-method set_object
  (of-object "GDBusInterface")
  (c-name "g_dbus_interface_set_object")
  (return-type "none")
  (parameters
    '("GDBusObject*" "object")
  )
)

(define-method dup_object
  (of-object "GDBusInterface")
  (c-name "g_dbus_interface_dup_object")
  (return-type "GDBusObject*")
)



;; From gdbusinterfaceskeleton.h

(define-function g_dbus_interface_skeleton_get_type
  (c-name "g_dbus_interface_skeleton_get_type")
  (return-type "GType")
)

(define-method get_flags
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_get_flags")
  (return-type "GDBusInterfaceSkeletonFlags")
)

(define-method set_flags
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_set_flags")
  (return-type "none")
  (parameters
    '("GDBusInterfaceSkeletonFlags" "flags")
  )
)

(define-method get_info
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_get_info")
  (return-type "GDBusInterfaceInfo*")
)

(define-method get_vtable
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_get_vtable")
  (return-type "GDBusInterfaceVTable*")
)

(define-method get_properties
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_get_properties")
  (return-type "GVariant*")
)

(define-method flush
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_flush")
  (return-type "none")
)

(define-method export
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_export")
  (return-type "gboolean")
  (parameters
    '("GDBusConnection*" "connection")
    '("const-gchar*" "object_path")
    '("GError**" "error")
  )
)

(define-method unexport
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_unexport")
  (return-type "none")
)

(define-method unexport_from_connection
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_unexport_from_connection")
  (return-type "none")
  (parameters
    '("GDBusConnection*" "connection")
  )
)

(define-method get_connection
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_get_connection")
  (return-type "GDBusConnection*")
)

(define-method get_connections
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_get_connections")
  (return-type "GList*")
)

(define-method has_connection
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_has_connection")
  (return-type "gboolean")
  (parameters
    '("GDBusConnection*" "connection")
  )
)

(define-method get_object_path
  (of-object "GDBusInterfaceSkeleton")
  (c-name "g_dbus_interface_skeleton_get_object_path")
  (return-type "const-gchar*")
)



;; From gdbusintrospection.h

(define-function g_dbus_annotation_info_lookup
  (c-name "g_dbus_annotation_info_lookup")
  (return-type "const-gchar*")
  (parameters
    '("GDBusAnnotationInfo**" "annotations")
    '("const-gchar*" "name")
  )
)

(define-method lookup_method
  (of-object "GDBusInterfaceInfo")
  (c-name "g_dbus_interface_info_lookup_method")
  (return-type "GDBusMethodInfo*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method lookup_signal
  (of-object "GDBusInterfaceInfo")
  (c-name "g_dbus_interface_info_lookup_signal")
  (return-type "GDBusSignalInfo*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method lookup_property
  (of-object "GDBusInterfaceInfo")
  (c-name "g_dbus_interface_info_lookup_property")
  (return-type "GDBusPropertyInfo*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method cache_build
  (of-object "GDBusInterfaceInfo")
  (c-name "g_dbus_interface_info_cache_build")
  (return-type "none")
)

(define-method cache_release
  (of-object "GDBusInterfaceInfo")
  (c-name "g_dbus_interface_info_cache_release")
  (return-type "none")
)

(define-method generate_xml
  (of-object "GDBusInterfaceInfo")
  (c-name "g_dbus_interface_info_generate_xml")
  (return-type "none")
  (parameters
    '("guint" "indent")
    '("GString*" "string_builder")
  )
)

(define-function g_dbus_node_info_new_for_xml
  (c-name "g_dbus_node_info_new_for_xml")
  (return-type "GDBusNodeInfo*")
  (parameters
    '("const-gchar*" "xml_data")
    '("GError**" "error")
  )
)

(define-method lookup_interface
  (of-object "GDBusNodeInfo")
  (c-name "g_dbus_node_info_lookup_interface")
  (return-type "GDBusInterfaceInfo*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method generate_xml
  (of-object "GDBusNodeInfo")
  (c-name "g_dbus_node_info_generate_xml")
  (return-type "none")
  (parameters
    '("guint" "indent")
    '("GString*" "string_builder")
  )
)

(define-method ref
  (of-object "GDBusNodeInfo")
  (c-name "g_dbus_node_info_ref")
  (return-type "GDBusNodeInfo*")
)

(define-method ref
  (of-object "GDBusInterfaceInfo")
  (c-name "g_dbus_interface_info_ref")
  (return-type "GDBusInterfaceInfo*")
)

(define-method ref
  (of-object "GDBusMethodInfo")
  (c-name "g_dbus_method_info_ref")
  (return-type "GDBusMethodInfo*")
)

(define-method ref
  (of-object "GDBusSignalInfo")
  (c-name "g_dbus_signal_info_ref")
  (return-type "GDBusSignalInfo*")
)

(define-method ref
  (of-object "GDBusPropertyInfo")
  (c-name "g_dbus_property_info_ref")
  (return-type "GDBusPropertyInfo*")
)

(define-method ref
  (of-object "GDBusArgInfo")
  (c-name "g_dbus_arg_info_ref")
  (return-type "GDBusArgInfo*")
)

(define-method ref
  (of-object "GDBusAnnotationInfo")
  (c-name "g_dbus_annotation_info_ref")
  (return-type "GDBusAnnotationInfo*")
)

(define-method unref
  (of-object "GDBusNodeInfo")
  (c-name "g_dbus_node_info_unref")
  (return-type "none")
)

(define-method unref
  (of-object "GDBusInterfaceInfo")
  (c-name "g_dbus_interface_info_unref")
  (return-type "none")
)

(define-method unref
  (of-object "GDBusMethodInfo")
  (c-name "g_dbus_method_info_unref")
  (return-type "none")
)

(define-method unref
  (of-object "GDBusSignalInfo")
  (c-name "g_dbus_signal_info_unref")
  (return-type "none")
)

(define-method unref
  (of-object "GDBusPropertyInfo")
  (c-name "g_dbus_property_info_unref")
  (return-type "none")
)

(define-method unref
  (of-object "GDBusArgInfo")
  (c-name "g_dbus_arg_info_unref")
  (return-type "none")
)

(define-method unref
  (of-object "GDBusAnnotationInfo")
  (c-name "g_dbus_annotation_info_unref")
  (return-type "none")
)

(define-function g_dbus_node_info_get_type
  (c-name "g_dbus_node_info_get_type")
  (return-type "GType")
)

(define-function g_dbus_interface_info_get_type
  (c-name "g_dbus_interface_info_get_type")
  (return-type "GType")
)

(define-function g_dbus_method_info_get_type
  (c-name "g_dbus_method_info_get_type")
  (return-type "GType")
)

(define-function g_dbus_signal_info_get_type
  (c-name "g_dbus_signal_info_get_type")
  (return-type "GType")
)

(define-function g_dbus_property_info_get_type
  (c-name "g_dbus_property_info_get_type")
  (return-type "GType")
)

(define-function g_dbus_arg_info_get_type
  (c-name "g_dbus_arg_info_get_type")
  (return-type "GType")
)

(define-function g_dbus_annotation_info_get_type
  (c-name "g_dbus_annotation_info_get_type")
  (return-type "GType")
)



;; From gdbusmenumodel.h

(define-function g_dbus_menu_model_get_type
  (c-name "g_dbus_menu_model_get_type")
  (return-type "GType")
)

(define-function g_dbus_menu_model_get
  (c-name "g_dbus_menu_model_get")
  (return-type "GDBusMenuModel*")
  (parameters
    '("GDBusConnection*" "connection")
    '("const-gchar*" "bus_name")
    '("const-gchar*" "object_path")
  )
)



;; From gdbusmessage.h

(define-function g_dbus_message_get_type
  (c-name "g_dbus_message_get_type")
  (return-type "GType")
)

(define-function g_dbus_message_new
  (c-name "g_dbus_message_new")
  (is-constructor-of "GDbusMessage")
  (return-type "GDBusMessage*")
)

(define-function g_dbus_message_new_signal
  (c-name "g_dbus_message_new_signal")
  (return-type "GDBusMessage*")
  (parameters
    '("const-gchar*" "path")
    '("const-gchar*" "interface_")
    '("const-gchar*" "signal")
  )
)

(define-function g_dbus_message_new_method_call
  (c-name "g_dbus_message_new_method_call")
  (return-type "GDBusMessage*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "path")
    '("const-gchar*" "interface_")
    '("const-gchar*" "method")
  )
)

(define-method new_method_reply
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_new_method_reply")
  (return-type "GDBusMessage*")
)

(define-method new_method_error
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_new_method_error")
  (return-type "GDBusMessage*")
  (parameters
    '("const-gchar*" "error_name")
    '("const-gchar*" "error_message_format")
  )
  (varargs #t)
)

(define-method new_method_error_valist
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_new_method_error_valist")
  (return-type "GDBusMessage*")
  (parameters
    '("const-gchar*" "error_name")
    '("const-gchar*" "error_message_format")
    '("va_list" "var_args")
  )
)

(define-method new_method_error_literal
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_new_method_error_literal")
  (return-type "GDBusMessage*")
  (parameters
    '("const-gchar*" "error_name")
    '("const-gchar*" "error_message")
  )
)

(define-method print
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_print")
  (return-type "gchar*")
  (parameters
    '("guint" "indent")
  )
)

(define-method get_locked
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_locked")
  (return-type "gboolean")
)

(define-method lock
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_lock")
  (return-type "none")
)

(define-method copy
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_copy")
  (return-type "GDBusMessage*")
  (parameters
    '("GError**" "error")
  )
)

(define-method get_byte_order
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_byte_order")
  (return-type "GDBusMessageByteOrder")
)

(define-method set_byte_order
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_byte_order")
  (return-type "none")
  (parameters
    '("GDBusMessageByteOrder" "byte_order")
  )
)

(define-method get_message_type
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_message_type")
  (return-type "GDBusMessageType")
)

(define-method set_message_type
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_message_type")
  (return-type "none")
  (parameters
    '("GDBusMessageType" "type")
  )
)

(define-method get_flags
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_flags")
  (return-type "GDBusMessageFlags")
)

(define-method set_flags
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_flags")
  (return-type "none")
  (parameters
    '("GDBusMessageFlags" "flags")
  )
)

(define-method get_serial
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_serial")
  (return-type "guint32")
)

(define-method set_serial
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_serial")
  (return-type "none")
  (parameters
    '("guint32" "serial")
  )
)

(define-method get_header
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_header")
  (return-type "GVariant*")
  (parameters
    '("GDBusMessageHeaderField" "header_field")
  )
)

(define-method set_header
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_header")
  (return-type "none")
  (parameters
    '("GDBusMessageHeaderField" "header_field")
    '("GVariant*" "value")
  )
)

(define-method get_header_fields
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_header_fields")
  (return-type "guchar*")
)

(define-method get_body
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_body")
  (return-type "GVariant*")
)

(define-method set_body
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_body")
  (return-type "none")
  (parameters
    '("GVariant*" "body")
  )
)

(define-method get_unix_fd_list
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_unix_fd_list")
  (return-type "GUnixFDList*")
)

(define-method set_unix_fd_list
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_unix_fd_list")
  (return-type "none")
  (parameters
    '("GUnixFDList*" "fd_list")
  )
)

(define-method get_reply_serial
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_reply_serial")
  (return-type "guint32")
)

(define-method set_reply_serial
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_reply_serial")
  (return-type "none")
  (parameters
    '("guint32" "value")
  )
)

(define-method get_interface
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_interface")
  (return-type "const-gchar*")
)

(define-method set_interface
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_interface")
  (return-type "none")
  (parameters
    '("const-gchar*" "value")
  )
)

(define-method get_member
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_member")
  (return-type "const-gchar*")
)

(define-method set_member
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_member")
  (return-type "none")
  (parameters
    '("const-gchar*" "value")
  )
)

(define-method get_path
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_path")
  (return-type "const-gchar*")
)

(define-method set_path
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "value")
  )
)

(define-method get_sender
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_sender")
  (return-type "const-gchar*")
)

(define-method set_sender
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_sender")
  (return-type "none")
  (parameters
    '("const-gchar*" "value")
  )
)

(define-method get_destination
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_destination")
  (return-type "const-gchar*")
)

(define-method set_destination
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_destination")
  (return-type "none")
  (parameters
    '("const-gchar*" "value")
  )
)

(define-method get_error_name
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_error_name")
  (return-type "const-gchar*")
)

(define-method set_error_name
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_error_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "value")
  )
)

(define-method get_signature
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_signature")
  (return-type "const-gchar*")
)

(define-method set_signature
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_signature")
  (return-type "none")
  (parameters
    '("const-gchar*" "value")
  )
)

(define-method get_num_unix_fds
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_num_unix_fds")
  (return-type "guint32")
)

(define-method set_num_unix_fds
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_set_num_unix_fds")
  (return-type "none")
  (parameters
    '("guint32" "value")
  )
)

(define-method get_arg0
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_get_arg0")
  (return-type "const-gchar*")
)

(define-function g_dbus_message_new_from_blob
  (c-name "g_dbus_message_new_from_blob")
  (return-type "GDBusMessage*")
  (parameters
    '("guchar*" "blob")
    '("gsize" "blob_len")
    '("GDBusCapabilityFlags" "capabilities")
    '("GError**" "error")
  )
)

(define-function g_dbus_message_bytes_needed
  (c-name "g_dbus_message_bytes_needed")
  (return-type "gssize")
  (parameters
    '("guchar*" "blob")
    '("gsize" "blob_len")
    '("GError**" "error")
  )
)

(define-method to_blob
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_to_blob")
  (return-type "guchar*")
  (parameters
    '("gsize*" "out_size")
    '("GDBusCapabilityFlags" "capabilities")
    '("GError**" "error")
  )
)

(define-method to_gerror
  (of-object "GDBusMessage")
  (c-name "g_dbus_message_to_gerror")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)



;; From gdbusmethodinvocation.h

(define-function g_dbus_method_invocation_get_type
  (c-name "g_dbus_method_invocation_get_type")
  (return-type "GType")
)

(define-method get_sender
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_get_sender")
  (return-type "const-gchar*")
)

(define-method get_object_path
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_get_object_path")
  (return-type "const-gchar*")
)

(define-method get_interface_name
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_get_interface_name")
  (return-type "const-gchar*")
)

(define-method get_method_name
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_get_method_name")
  (return-type "const-gchar*")
)

(define-method get_method_info
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_get_method_info")
  (return-type "const-GDBusMethodInfo*")
)

(define-method get_property_info
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_get_property_info")
  (return-type "const-GDBusPropertyInfo*")
)

(define-method get_connection
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_get_connection")
  (return-type "GDBusConnection*")
)

(define-method get_message
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_get_message")
  (return-type "GDBusMessage*")
)

(define-method get_parameters
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_get_parameters")
  (return-type "GVariant*")
)

(define-method get_user_data
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_get_user_data")
  (return-type "gpointer")
)

(define-method return_value
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_return_value")
  (return-type "none")
  (parameters
    '("GVariant*" "parameters")
  )
)

(define-method return_value_with_unix_fd_list
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_return_value_with_unix_fd_list")
  (return-type "none")
  (parameters
    '("GVariant*" "parameters")
    '("GUnixFDList*" "fd_list")
  )
)

(define-method return_error
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_return_error")
  (return-type "none")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-method return_error_valist
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_return_error_valist")
  (return-type "none")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("const-gchar*" "format")
    '("va_list" "var_args")
  )
)

(define-method return_error_literal
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_return_error_literal")
  (return-type "none")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("const-gchar*" "message")
  )
)

(define-method return_gerror
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_return_gerror")
  (return-type "none")
  (parameters
    '("const-GError*" "error")
  )
)

(define-method take_error
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_take_error")
  (return-type "none")
  (parameters
    '("GError*" "error")
  )
)

(define-method return_dbus_error
  (of-object "GDBusMethodInvocation")
  (c-name "g_dbus_method_invocation_return_dbus_error")
  (return-type "none")
  (parameters
    '("const-gchar*" "error_name")
    '("const-gchar*" "error_message")
  )
)



;; From gdbusnameowning.h

(define-function g_bus_own_name
  (c-name "g_bus_own_name")
  (return-type "guint")
  (parameters
    '("GBusType" "bus_type")
    '("const-gchar*" "name")
    '("GBusNameOwnerFlags" "flags")
    '("GBusAcquiredCallback" "bus_acquired_handler")
    '("GBusNameAcquiredCallback" "name_acquired_handler")
    '("GBusNameLostCallback" "name_lost_handler")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_free_func")
  )
)

(define-function g_bus_own_name_on_connection
  (c-name "g_bus_own_name_on_connection")
  (return-type "guint")
  (parameters
    '("GDBusConnection*" "connection")
    '("const-gchar*" "name")
    '("GBusNameOwnerFlags" "flags")
    '("GBusNameAcquiredCallback" "name_acquired_handler")
    '("GBusNameLostCallback" "name_lost_handler")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_free_func")
  )
)

(define-function g_bus_own_name_with_closures
  (c-name "g_bus_own_name_with_closures")
  (return-type "guint")
  (parameters
    '("GBusType" "bus_type")
    '("const-gchar*" "name")
    '("GBusNameOwnerFlags" "flags")
    '("GClosure*" "bus_acquired_closure")
    '("GClosure*" "name_acquired_closure")
    '("GClosure*" "name_lost_closure")
  )
)

(define-function g_bus_own_name_on_connection_with_closures
  (c-name "g_bus_own_name_on_connection_with_closures")
  (return-type "guint")
  (parameters
    '("GDBusConnection*" "connection")
    '("const-gchar*" "name")
    '("GBusNameOwnerFlags" "flags")
    '("GClosure*" "name_acquired_closure")
    '("GClosure*" "name_lost_closure")
  )
)

(define-function g_bus_unown_name
  (c-name "g_bus_unown_name")
  (return-type "none")
  (parameters
    '("guint" "owner_id")
  )
)



;; From gdbusnamewatching.h

(define-function g_bus_watch_name
  (c-name "g_bus_watch_name")
  (return-type "guint")
  (parameters
    '("GBusType" "bus_type")
    '("const-gchar*" "name")
    '("GBusNameWatcherFlags" "flags")
    '("GBusNameAppearedCallback" "name_appeared_handler")
    '("GBusNameVanishedCallback" "name_vanished_handler")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_free_func")
  )
)

(define-function g_bus_watch_name_on_connection
  (c-name "g_bus_watch_name_on_connection")
  (return-type "guint")
  (parameters
    '("GDBusConnection*" "connection")
    '("const-gchar*" "name")
    '("GBusNameWatcherFlags" "flags")
    '("GBusNameAppearedCallback" "name_appeared_handler")
    '("GBusNameVanishedCallback" "name_vanished_handler")
    '("gpointer" "user_data")
    '("GDestroyNotify" "user_data_free_func")
  )
)

(define-function g_bus_watch_name_with_closures
  (c-name "g_bus_watch_name_with_closures")
  (return-type "guint")
  (parameters
    '("GBusType" "bus_type")
    '("const-gchar*" "name")
    '("GBusNameWatcherFlags" "flags")
    '("GClosure*" "name_appeared_closure")
    '("GClosure*" "name_vanished_closure")
  )
)

(define-function g_bus_watch_name_on_connection_with_closures
  (c-name "g_bus_watch_name_on_connection_with_closures")
  (return-type "guint")
  (parameters
    '("GDBusConnection*" "connection")
    '("const-gchar*" "name")
    '("GBusNameWatcherFlags" "flags")
    '("GClosure*" "name_appeared_closure")
    '("GClosure*" "name_vanished_closure")
  )
)

(define-function g_bus_unwatch_name
  (c-name "g_bus_unwatch_name")
  (return-type "none")
  (parameters
    '("guint" "watcher_id")
  )
)



;; From gdbusobject.h

(define-function g_dbus_object_get_type
  (c-name "g_dbus_object_get_type")
  (return-type "GType")
)

(define-method get_object_path
  (of-object "GDBusObject")
  (c-name "g_dbus_object_get_object_path")
  (return-type "const-gchar*")
)

(define-method get_interfaces
  (of-object "GDBusObject")
  (c-name "g_dbus_object_get_interfaces")
  (return-type "GList*")
)

(define-method get_interface
  (of-object "GDBusObject")
  (c-name "g_dbus_object_get_interface")
  (return-type "GDBusInterface*")
  (parameters
    '("const-gchar*" "interface_name")
  )
)



;; From gdbusobjectmanagerclient.h

(define-function g_dbus_object_manager_client_get_type
  (c-name "g_dbus_object_manager_client_get_type")
  (return-type "GType")
)

(define-function g_dbus_object_manager_client_new
  (c-name "g_dbus_object_manager_client_new")
  (return-type "none")
  (parameters
    '("GDBusConnection*" "connection")
    '("GDBusObjectManagerClientFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GDBusProxyTypeFunc" "get_proxy_type_func")
    '("gpointer" "get_proxy_type_user_data")
    '("GDestroyNotify" "get_proxy_type_destroy_notify")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_dbus_object_manager_client_new_finish
  (c-name "g_dbus_object_manager_client_new_finish")
  (return-type "GDBusObjectManager*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function g_dbus_object_manager_client_new_sync
  (c-name "g_dbus_object_manager_client_new_sync")
  (return-type "GDBusObjectManager*")
  (parameters
    '("GDBusConnection*" "connection")
    '("GDBusObjectManagerClientFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GDBusProxyTypeFunc" "get_proxy_type_func")
    '("gpointer" "get_proxy_type_user_data")
    '("GDestroyNotify" "get_proxy_type_destroy_notify")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function g_dbus_object_manager_client_new_for_bus
  (c-name "g_dbus_object_manager_client_new_for_bus")
  (return-type "none")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusObjectManagerClientFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GDBusProxyTypeFunc" "get_proxy_type_func")
    '("gpointer" "get_proxy_type_user_data")
    '("GDestroyNotify" "get_proxy_type_destroy_notify")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_dbus_object_manager_client_new_for_bus_finish
  (c-name "g_dbus_object_manager_client_new_for_bus_finish")
  (return-type "GDBusObjectManager*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function g_dbus_object_manager_client_new_for_bus_sync
  (c-name "g_dbus_object_manager_client_new_for_bus_sync")
  (return-type "GDBusObjectManager*")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusObjectManagerClientFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GDBusProxyTypeFunc" "get_proxy_type_func")
    '("gpointer" "get_proxy_type_user_data")
    '("GDestroyNotify" "get_proxy_type_destroy_notify")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method get_connection
  (of-object "GDBusObjectManagerClient")
  (c-name "g_dbus_object_manager_client_get_connection")
  (return-type "GDBusConnection*")
)

(define-method get_flags
  (of-object "GDBusObjectManagerClient")
  (c-name "g_dbus_object_manager_client_get_flags")
  (return-type "GDBusObjectManagerClientFlags")
)

(define-method get_name
  (of-object "GDBusObjectManagerClient")
  (c-name "g_dbus_object_manager_client_get_name")
  (return-type "const-gchar*")
)

(define-method get_name_owner
  (of-object "GDBusObjectManagerClient")
  (c-name "g_dbus_object_manager_client_get_name_owner")
  (return-type "gchar*")
)



;; From gdbusobjectmanager.h

(define-function g_dbus_object_manager_get_type
  (c-name "g_dbus_object_manager_get_type")
  (return-type "GType")
)

(define-method get_object_path
  (of-object "GDBusObjectManager")
  (c-name "g_dbus_object_manager_get_object_path")
  (return-type "const-gchar*")
)

(define-method get_objects
  (of-object "GDBusObjectManager")
  (c-name "g_dbus_object_manager_get_objects")
  (return-type "GList*")
)

(define-method get_object
  (of-object "GDBusObjectManager")
  (c-name "g_dbus_object_manager_get_object")
  (return-type "GDBusObject*")
  (parameters
    '("const-gchar*" "object_path")
  )
)

(define-method get_interface
  (of-object "GDBusObjectManager")
  (c-name "g_dbus_object_manager_get_interface")
  (return-type "GDBusInterface*")
  (parameters
    '("const-gchar*" "object_path")
    '("const-gchar*" "interface_name")
  )
)



;; From gdbusobjectmanagerserver.h

(define-function g_dbus_object_manager_server_get_type
  (c-name "g_dbus_object_manager_server_get_type")
  (return-type "GType")
)

(define-function g_dbus_object_manager_server_new
  (c-name "g_dbus_object_manager_server_new")
  (is-constructor-of "GDbusObjectManagerServer")
  (return-type "GDBusObjectManagerServer*")
  (parameters
    '("const-gchar*" "object_path")
  )
)

(define-method get_connection
  (of-object "GDBusObjectManagerServer")
  (c-name "g_dbus_object_manager_server_get_connection")
  (return-type "GDBusConnection*")
)

(define-method set_connection
  (of-object "GDBusObjectManagerServer")
  (c-name "g_dbus_object_manager_server_set_connection")
  (return-type "none")
  (parameters
    '("GDBusConnection*" "connection")
  )
)

(define-method export
  (of-object "GDBusObjectManagerServer")
  (c-name "g_dbus_object_manager_server_export")
  (return-type "none")
  (parameters
    '("GDBusObjectSkeleton*" "object")
  )
)

(define-method export_uniquely
  (of-object "GDBusObjectManagerServer")
  (c-name "g_dbus_object_manager_server_export_uniquely")
  (return-type "none")
  (parameters
    '("GDBusObjectSkeleton*" "object")
  )
)

(define-method is_exported
  (of-object "GDBusObjectManagerServer")
  (c-name "g_dbus_object_manager_server_is_exported")
  (return-type "gboolean")
  (parameters
    '("GDBusObjectSkeleton*" "object")
  )
)

(define-method unexport
  (of-object "GDBusObjectManagerServer")
  (c-name "g_dbus_object_manager_server_unexport")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "object_path")
  )
)



;; From gdbusobjectproxy.h

(define-function g_dbus_object_proxy_get_type
  (c-name "g_dbus_object_proxy_get_type")
  (return-type "GType")
)

(define-function g_dbus_object_proxy_new
  (c-name "g_dbus_object_proxy_new")
  (is-constructor-of "GDbusObjectProxy")
  (return-type "GDBusObjectProxy*")
  (parameters
    '("GDBusConnection*" "connection")
    '("const-gchar*" "object_path")
  )
)

(define-method get_connection
  (of-object "GDBusObjectProxy")
  (c-name "g_dbus_object_proxy_get_connection")
  (return-type "GDBusConnection*")
)



;; From gdbusobjectskeleton.h

(define-function g_dbus_object_skeleton_get_type
  (c-name "g_dbus_object_skeleton_get_type")
  (return-type "GType")
)

(define-function g_dbus_object_skeleton_new
  (c-name "g_dbus_object_skeleton_new")
  (is-constructor-of "GDbusObjectSkeleton")
  (return-type "GDBusObjectSkeleton*")
  (parameters
    '("const-gchar*" "object_path")
  )
)

(define-method flush
  (of-object "GDBusObjectSkeleton")
  (c-name "g_dbus_object_skeleton_flush")
  (return-type "none")
)

(define-method add_interface
  (of-object "GDBusObjectSkeleton")
  (c-name "g_dbus_object_skeleton_add_interface")
  (return-type "none")
  (parameters
    '("GDBusInterfaceSkeleton*" "interface_")
  )
)

(define-method remove_interface
  (of-object "GDBusObjectSkeleton")
  (c-name "g_dbus_object_skeleton_remove_interface")
  (return-type "none")
  (parameters
    '("GDBusInterfaceSkeleton*" "interface_")
  )
)

(define-method remove_interface_by_name
  (of-object "GDBusObjectSkeleton")
  (c-name "g_dbus_object_skeleton_remove_interface_by_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "interface_name")
  )
)

(define-method set_object_path
  (of-object "GDBusObjectSkeleton")
  (c-name "g_dbus_object_skeleton_set_object_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "object_path")
  )
)



;; From gdbusproxy.h

(define-function g_dbus_proxy_get_type
  (c-name "g_dbus_proxy_get_type")
  (return-type "GType")
)

(define-function g_dbus_proxy_new
  (c-name "g_dbus_proxy_new")
  (return-type "none")
  (parameters
    '("GDBusConnection*" "connection")
    '("GDBusProxyFlags" "flags")
    '("GDBusInterfaceInfo*" "info")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("const-gchar*" "interface_name")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_dbus_proxy_new_finish
  (c-name "g_dbus_proxy_new_finish")
  (return-type "GDBusProxy*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function g_dbus_proxy_new_sync
  (c-name "g_dbus_proxy_new_sync")
  (return-type "GDBusProxy*")
  (parameters
    '("GDBusConnection*" "connection")
    '("GDBusProxyFlags" "flags")
    '("GDBusInterfaceInfo*" "info")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("const-gchar*" "interface_name")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function g_dbus_proxy_new_for_bus
  (c-name "g_dbus_proxy_new_for_bus")
  (return-type "none")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusProxyFlags" "flags")
    '("GDBusInterfaceInfo*" "info")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("const-gchar*" "interface_name")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_dbus_proxy_new_for_bus_finish
  (c-name "g_dbus_proxy_new_for_bus_finish")
  (return-type "GDBusProxy*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function g_dbus_proxy_new_for_bus_sync
  (c-name "g_dbus_proxy_new_for_bus_sync")
  (return-type "GDBusProxy*")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusProxyFlags" "flags")
    '("GDBusInterfaceInfo*" "info")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("const-gchar*" "interface_name")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method get_connection
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_get_connection")
  (return-type "GDBusConnection*")
)

(define-method get_flags
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_get_flags")
  (return-type "GDBusProxyFlags")
)

(define-method get_name
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_get_name")
  (return-type "const-gchar*")
)

(define-method get_name_owner
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_get_name_owner")
  (return-type "gchar*")
)

(define-method get_object_path
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_get_object_path")
  (return-type "const-gchar*")
)

(define-method get_interface_name
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_get_interface_name")
  (return-type "const-gchar*")
)

(define-method get_default_timeout
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_get_default_timeout")
  (return-type "gint")
)

(define-method set_default_timeout
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_set_default_timeout")
  (return-type "none")
  (parameters
    '("gint" "timeout_msec")
  )
)

(define-method get_interface_info
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_get_interface_info")
  (return-type "GDBusInterfaceInfo*")
)

(define-method set_interface_info
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_set_interface_info")
  (return-type "none")
  (parameters
    '("GDBusInterfaceInfo*" "info")
  )
)

(define-method get_cached_property
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_get_cached_property")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "property_name")
  )
)

(define-method set_cached_property
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_set_cached_property")
  (return-type "none")
  (parameters
    '("const-gchar*" "property_name")
    '("GVariant*" "value")
  )
)

(define-method get_cached_property_names
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_get_cached_property_names")
  (return-type "gchar**")
)

(define-method call
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_call")
  (return-type "none")
  (parameters
    '("const-gchar*" "method_name")
    '("GVariant*" "parameters")
    '("GDBusCallFlags" "flags")
    '("gint" "timeout_msec")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_finish
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_call_finish")
  (return-type "GVariant*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_sync
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_call_sync")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "method_name")
    '("GVariant*" "parameters")
    '("GDBusCallFlags" "flags")
    '("gint" "timeout_msec")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_with_unix_fd_list
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_call_with_unix_fd_list")
  (return-type "none")
  (parameters
    '("const-gchar*" "method_name")
    '("GVariant*" "parameters")
    '("GDBusCallFlags" "flags")
    '("gint" "timeout_msec")
    '("GUnixFDList*" "fd_list")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_with_unix_fd_list_finish
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_call_with_unix_fd_list_finish")
  (return-type "GVariant*")
  (parameters
    '("GUnixFDList**" "out_fd_list")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_with_unix_fd_list_sync
  (of-object "GDBusProxy")
  (c-name "g_dbus_proxy_call_with_unix_fd_list_sync")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "method_name")
    '("GVariant*" "parameters")
    '("GDBusCallFlags" "flags")
    '("gint" "timeout_msec")
    '("GUnixFDList*" "fd_list")
    '("GUnixFDList**" "out_fd_list")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From gdbusserver.h

(define-function g_dbus_server_get_type
  (c-name "g_dbus_server_get_type")
  (return-type "GType")
)

(define-function g_dbus_server_new_sync
  (c-name "g_dbus_server_new_sync")
  (return-type "GDBusServer*")
  (parameters
    '("const-gchar*" "address")
    '("GDBusServerFlags" "flags")
    '("const-gchar*" "guid")
    '("GDBusAuthObserver*" "observer")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method get_client_address
  (of-object "GDBusServer")
  (c-name "g_dbus_server_get_client_address")
  (return-type "const-gchar*")
)

(define-method get_guid
  (of-object "GDBusServer")
  (c-name "g_dbus_server_get_guid")
  (return-type "const-gchar*")
)

(define-method get_flags
  (of-object "GDBusServer")
  (c-name "g_dbus_server_get_flags")
  (return-type "GDBusServerFlags")
)

(define-method start
  (of-object "GDBusServer")
  (c-name "g_dbus_server_start")
  (return-type "none")
)

(define-method stop
  (of-object "GDBusServer")
  (c-name "g_dbus_server_stop")
  (return-type "none")
)

(define-method is_active
  (of-object "GDBusServer")
  (c-name "g_dbus_server_is_active")
  (return-type "gboolean")
)



;; From gdbusutils.h

(define-function g_dbus_is_guid
  (c-name "g_dbus_is_guid")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-function g_dbus_generate_guid
  (c-name "g_dbus_generate_guid")
  (return-type "gchar*")
)

(define-function g_dbus_is_name
  (c-name "g_dbus_is_name")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-function g_dbus_is_unique_name
  (c-name "g_dbus_is_unique_name")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-function g_dbus_is_member_name
  (c-name "g_dbus_is_member_name")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-function g_dbus_is_interface_name
  (c-name "g_dbus_is_interface_name")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-function g_dbus_gvariant_to_gvalue
  (c-name "g_dbus_gvariant_to_gvalue")
  (return-type "none")
  (parameters
    '("GVariant*" "value")
    '("GValue*" "out_gvalue")
  )
)

(define-function g_dbus_gvalue_to_gvariant
  (c-name "g_dbus_gvalue_to_gvariant")
  (return-type "GVariant*")
  (parameters
    '("const-GValue*" "gvalue")
    '("const-GVariantType*" "type")
  )
)



;; From gdelayedsettingsbackend.h

(define-function g_delayed_settings_backend_get_type
  (c-name "g_delayed_settings_backend_get_type")
  (return-type "GType")
)

(define-function g_delayed_settings_backend_new
  (c-name "g_delayed_settings_backend_new")
  (is-constructor-of "GDelayedSettingsBackend")
  (return-type "GDelayedSettingsBackend*")
  (parameters
    '("GSettingsBackend*" "backend")
    '("gpointer" "owner")
    '("GMainContext*" "owner_context")
  )
)

(define-method revert
  (of-object "GDelayedSettingsBackend")
  (c-name "g_delayed_settings_backend_revert")
  (return-type "none")
)

(define-method apply
  (of-object "GDelayedSettingsBackend")
  (c-name "g_delayed_settings_backend_apply")
  (return-type "none")
)

(define-method get_has_unapplied
  (of-object "GDelayedSettingsBackend")
  (c-name "g_delayed_settings_backend_get_has_unapplied")
  (return-type "gboolean")
)



;; From gdesktopappinfo.h

(define-function g_desktop_app_info_get_type
  (c-name "g_desktop_app_info_get_type")
  (return-type "GType")
)

(define-function g_desktop_app_info_new_from_filename
  (c-name "g_desktop_app_info_new_from_filename")
  (return-type "GDesktopAppInfo*")
  (parameters
    '("const-char*" "filename")
  )
)

(define-function g_desktop_app_info_new_from_keyfile
  (c-name "g_desktop_app_info_new_from_keyfile")
  (return-type "GDesktopAppInfo*")
  (parameters
    '("GKeyFile*" "key_file")
  )
)

(define-method get_filename
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_filename")
  (return-type "const-char*")
)

(define-method get_generic_name
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_generic_name")
  (return-type "const-char*")
)

(define-method get_categories
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_categories")
  (return-type "const-char*")
)

(define-method get_keywords
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_keywords")
  (return-type "const-char*-const*")
)

(define-method get_nodisplay
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_nodisplay")
  (return-type "gboolean")
)

(define-method get_show_in
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_show_in")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "desktop_env")
  )
)

(define-method get_startup_wm_class
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_startup_wm_class")
  (return-type "const-char*")
)

(define-function g_desktop_app_info_new
  (c-name "g_desktop_app_info_new")
  (is-constructor-of "GDesktopAppInfo")
  (return-type "GDesktopAppInfo*")
  (parameters
    '("const-char*" "desktop_id")
  )
)

(define-method get_is_hidden
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_is_hidden")
  (return-type "gboolean")
)

(define-function g_desktop_app_info_set_desktop_env
  (c-name "g_desktop_app_info_set_desktop_env")
  (return-type "none")
  (parameters
    '("const-char*" "desktop_env")
  )
)

(define-method has_key
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_has_key")
  (return-type "gboolean")
  (parameters
    '("const-char*" "key")
  )
)

(define-method get_string
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_string")
  (return-type "char*")
  (parameters
    '("const-char*" "key")
  )
)

(define-method get_locale_string
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_locale_string")
  (return-type "char*")
  (parameters
    '("const-char*" "key")
  )
)

(define-method get_boolean
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_boolean")
  (return-type "gboolean")
  (parameters
    '("const-char*" "key")
  )
)

(define-method list_actions
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_list_actions")
  (return-type "const-gchar*-const*")
)

(define-method launch_action
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_launch_action")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("GAppLaunchContext*" "launch_context")
  )
)

(define-method get_action_name
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_get_action_name")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-function g_desktop_app_info_lookup_get_type
  (c-name "g_desktop_app_info_lookup_get_type")
  (return-type "GType")
)

(define-method get_default_for_uri_scheme
  (of-object "GDesktopAppInfoLookup")
  (c-name "g_desktop_app_info_lookup_get_default_for_uri_scheme")
  (return-type "GAppInfo*")
  (parameters
    '("const-char*" "uri_scheme")
  )
)

(define-method launch_uris_as_manager
  (of-object "GDesktopAppInfo")
  (c-name "g_desktop_app_info_launch_uris_as_manager")
  (return-type "gboolean")
  (parameters
    '("GList*" "uris")
    '("GAppLaunchContext*" "launch_context")
    '("GSpawnFlags" "spawn_flags")
    '("GSpawnChildSetupFunc" "user_setup")
    '("gpointer" "user_setup_data")
    '("GDesktopAppLaunchCallback" "pid_callback")
    '("gpointer" "pid_callback_data")
    '("GError**" "error")
  )
)

(define-function g_desktop_app_info_search
  (c-name "g_desktop_app_info_search")
  (return-type "gchar***")
  (parameters
    '("const-gchar*" "search_string")
  )
)

(define-function g_desktop_app_info_get_implementations
  (c-name "g_desktop_app_info_get_implementations")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "interface")
  )
)



;; From gdocumentportal.h

(define-function g_document_portal_add_document
  (c-name "g_document_portal_add_document")
  (return-type "char*")
  (parameters
    '("GFile*" "file")
    '("GError**" "error")
  )
)

(define-function g_document_portal_add_documents
  (c-name "g_document_portal_add_documents")
  (return-type "GList*")
  (parameters
    '("GList*" "uris")
    '("const-char*" "app_id")
    '("GError**" "error")
  )
)



;; From gdrive.h

(define-function g_drive_get_type
  (c-name "g_drive_get_type")
  (return-type "GType")
)

(define-method get_name
  (of-object "GDrive")
  (c-name "g_drive_get_name")
  (return-type "char*")
)

(define-method get_icon
  (of-object "GDrive")
  (c-name "g_drive_get_icon")
  (return-type "GIcon*")
)

(define-method get_symbolic_icon
  (of-object "GDrive")
  (c-name "g_drive_get_symbolic_icon")
  (return-type "GIcon*")
)

(define-method has_volumes
  (of-object "GDrive")
  (c-name "g_drive_has_volumes")
  (return-type "gboolean")
)

(define-method get_volumes
  (of-object "GDrive")
  (c-name "g_drive_get_volumes")
  (return-type "GList*")
)

(define-method is_removable
  (of-object "GDrive")
  (c-name "g_drive_is_removable")
  (return-type "gboolean")
)

(define-method is_media_removable
  (of-object "GDrive")
  (c-name "g_drive_is_media_removable")
  (return-type "gboolean")
)

(define-method has_media
  (of-object "GDrive")
  (c-name "g_drive_has_media")
  (return-type "gboolean")
)

(define-method is_media_check_automatic
  (of-object "GDrive")
  (c-name "g_drive_is_media_check_automatic")
  (return-type "gboolean")
)

(define-method can_poll_for_media
  (of-object "GDrive")
  (c-name "g_drive_can_poll_for_media")
  (return-type "gboolean")
)

(define-method can_eject
  (of-object "GDrive")
  (c-name "g_drive_can_eject")
  (return-type "gboolean")
)

(define-method eject
  (of-object "GDrive")
  (c-name "g_drive_eject")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method eject_finish
  (of-object "GDrive")
  (c-name "g_drive_eject_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method poll_for_media
  (of-object "GDrive")
  (c-name "g_drive_poll_for_media")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method poll_for_media_finish
  (of-object "GDrive")
  (c-name "g_drive_poll_for_media_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method get_identifier
  (of-object "GDrive")
  (c-name "g_drive_get_identifier")
  (return-type "char*")
  (parameters
    '("const-char*" "kind")
  )
)

(define-method enumerate_identifiers
  (of-object "GDrive")
  (c-name "g_drive_enumerate_identifiers")
  (return-type "char**")
)

(define-method get_start_stop_type
  (of-object "GDrive")
  (c-name "g_drive_get_start_stop_type")
  (return-type "GDriveStartStopType")
)

(define-method can_start
  (of-object "GDrive")
  (c-name "g_drive_can_start")
  (return-type "gboolean")
)

(define-method can_start_degraded
  (of-object "GDrive")
  (c-name "g_drive_can_start_degraded")
  (return-type "gboolean")
)

(define-method start
  (of-object "GDrive")
  (c-name "g_drive_start")
  (return-type "none")
  (parameters
    '("GDriveStartFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method start_finish
  (of-object "GDrive")
  (c-name "g_drive_start_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method can_stop
  (of-object "GDrive")
  (c-name "g_drive_can_stop")
  (return-type "gboolean")
)

(define-method stop
  (of-object "GDrive")
  (c-name "g_drive_stop")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method stop_finish
  (of-object "GDrive")
  (c-name "g_drive_stop_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method eject_with_operation
  (of-object "GDrive")
  (c-name "g_drive_eject_with_operation")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method eject_with_operation_finish
  (of-object "GDrive")
  (c-name "g_drive_eject_with_operation_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method get_sort_key
  (of-object "GDrive")
  (c-name "g_drive_get_sort_key")
  (return-type "const-gchar*")
)



;; From gdtlsclientconnection.h

(define-function g_dtls_client_connection_get_type
  (c-name "g_dtls_client_connection_get_type")
  (return-type "GType")
)

(define-function g_dtls_client_connection_new
  (c-name "g_dtls_client_connection_new")
  (is-constructor-of "GDtlsClientConnection")
  (return-type "GDatagramBased*")
  (parameters
    '("GDatagramBased*" "base_socket")
    '("GSocketConnectable*" "server_identity")
    '("GError**" "error")
  )
)

(define-method get_validation_flags
  (of-object "GDtlsClientConnection")
  (c-name "g_dtls_client_connection_get_validation_flags")
  (return-type "GTlsCertificateFlags")
)

(define-method set_validation_flags
  (of-object "GDtlsClientConnection")
  (c-name "g_dtls_client_connection_set_validation_flags")
  (return-type "none")
  (parameters
    '("GTlsCertificateFlags" "flags")
  )
)

(define-method get_server_identity
  (of-object "GDtlsClientConnection")
  (c-name "g_dtls_client_connection_get_server_identity")
  (return-type "GSocketConnectable*")
)

(define-method set_server_identity
  (of-object "GDtlsClientConnection")
  (c-name "g_dtls_client_connection_set_server_identity")
  (return-type "none")
  (parameters
    '("GSocketConnectable*" "identity")
  )
)

(define-method get_accepted_cas
  (of-object "GDtlsClientConnection")
  (c-name "g_dtls_client_connection_get_accepted_cas")
  (return-type "GList*")
)



;; From gdtlsconnection.h

(define-function g_dtls_connection_get_type
  (c-name "g_dtls_connection_get_type")
  (return-type "GType")
)

(define-method set_database
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_set_database")
  (return-type "none")
  (parameters
    '("GTlsDatabase*" "database")
  )
)

(define-method get_database
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_get_database")
  (return-type "GTlsDatabase*")
)

(define-method set_certificate
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_set_certificate")
  (return-type "none")
  (parameters
    '("GTlsCertificate*" "certificate")
  )
)

(define-method get_certificate
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_get_certificate")
  (return-type "GTlsCertificate*")
)

(define-method set_interaction
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_set_interaction")
  (return-type "none")
  (parameters
    '("GTlsInteraction*" "interaction")
  )
)

(define-method get_interaction
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_get_interaction")
  (return-type "GTlsInteraction*")
)

(define-method get_peer_certificate
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_get_peer_certificate")
  (return-type "GTlsCertificate*")
)

(define-method get_peer_certificate_errors
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_get_peer_certificate_errors")
  (return-type "GTlsCertificateFlags")
)

(define-method set_require_close_notify
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_set_require_close_notify")
  (return-type "none")
  (parameters
    '("gboolean" "require_close_notify")
  )
)

(define-method get_require_close_notify
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_get_require_close_notify")
  (return-type "gboolean")
)

(define-method set_rehandshake_mode
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_set_rehandshake_mode")
  (return-type "none")
  (parameters
    '("GTlsRehandshakeMode" "mode")
  )
)

(define-method get_rehandshake_mode
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_get_rehandshake_mode")
  (return-type "GTlsRehandshakeMode")
)

(define-method handshake
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_handshake")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method handshake_async
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_handshake_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method handshake_finish
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_handshake_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method shutdown
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_shutdown")
  (return-type "gboolean")
  (parameters
    '("gboolean" "shutdown_read")
    '("gboolean" "shutdown_write")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method shutdown_async
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_shutdown_async")
  (return-type "none")
  (parameters
    '("gboolean" "shutdown_read")
    '("gboolean" "shutdown_write")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method shutdown_finish
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_shutdown_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method close
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_close")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method close_async
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_close_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method close_finish
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_close_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method emit_accept_certificate
  (of-object "GDtlsConnection")
  (c-name "g_dtls_connection_emit_accept_certificate")
  (return-type "gboolean")
  (parameters
    '("GTlsCertificate*" "peer_cert")
    '("GTlsCertificateFlags" "errors")
  )
)



;; From gdtlsserverconnection.h

(define-function g_dtls_server_connection_get_type
  (c-name "g_dtls_server_connection_get_type")
  (return-type "GType")
)

(define-function g_dtls_server_connection_new
  (c-name "g_dtls_server_connection_new")
  (is-constructor-of "GDtlsServerConnection")
  (return-type "GDatagramBased*")
  (parameters
    '("GDatagramBased*" "base_socket")
    '("GTlsCertificate*" "certificate")
    '("GError**" "error")
  )
)



;; From gdummyfile.h



;; From gdummyproxyresolver.h



;; From gdummytlsbackend.h



;; From gemblemedicon.h

(define-function g_emblemed_icon_get_type
  (c-name "g_emblemed_icon_get_type")
  (return-type "GType")
)

(define-function g_emblemed_icon_new
  (c-name "g_emblemed_icon_new")
  (is-constructor-of "GEmblemedIcon")
  (return-type "GIcon*")
  (parameters
    '("GIcon*" "icon")
    '("GEmblem*" "emblem")
  )
)

(define-method get_icon
  (of-object "GEmblemedIcon")
  (c-name "g_emblemed_icon_get_icon")
  (return-type "GIcon*")
)

(define-method get_emblems
  (of-object "GEmblemedIcon")
  (c-name "g_emblemed_icon_get_emblems")
  (return-type "GList*")
)

(define-method add_emblem
  (of-object "GEmblemedIcon")
  (c-name "g_emblemed_icon_add_emblem")
  (return-type "none")
  (parameters
    '("GEmblem*" "emblem")
  )
)

(define-method clear_emblems
  (of-object "GEmblemedIcon")
  (c-name "g_emblemed_icon_clear_emblems")
  (return-type "none")
)



;; From gemblem.h

(define-function g_emblem_get_type
  (c-name "g_emblem_get_type")
  (return-type "GType")
)

(define-function g_emblem_new
  (c-name "g_emblem_new")
  (is-constructor-of "GEmblem")
  (return-type "GEmblem*")
  (parameters
    '("GIcon*" "icon")
  )
)

(define-function g_emblem_new_with_origin
  (c-name "g_emblem_new_with_origin")
  (return-type "GEmblem*")
  (parameters
    '("GIcon*" "icon")
    '("GEmblemOrigin" "origin")
  )
)

(define-method get_icon
  (of-object "GEmblem")
  (c-name "g_emblem_get_icon")
  (return-type "GIcon*")
)

(define-method get_origin
  (of-object "GEmblem")
  (c-name "g_emblem_get_origin")
  (return-type "GEmblemOrigin")
)



;; From gfileattribute.h

(define-function g_file_attribute_info_list_get_type
  (c-name "g_file_attribute_info_list_get_type")
  (return-type "GType")
)

(define-function g_file_attribute_info_list_new
  (c-name "g_file_attribute_info_list_new")
  (is-constructor-of "GFileAttributeInfoList")
  (return-type "GFileAttributeInfoList*")
)

(define-method ref
  (of-object "GFileAttributeInfoList")
  (c-name "g_file_attribute_info_list_ref")
  (return-type "GFileAttributeInfoList*")
)

(define-method unref
  (of-object "GFileAttributeInfoList")
  (c-name "g_file_attribute_info_list_unref")
  (return-type "none")
)

(define-method dup
  (of-object "GFileAttributeInfoList")
  (c-name "g_file_attribute_info_list_dup")
  (return-type "GFileAttributeInfoList*")
)

(define-method lookup
  (of-object "GFileAttributeInfoList")
  (c-name "g_file_attribute_info_list_lookup")
  (return-type "const-GFileAttributeInfo*")
  (parameters
    '("const-char*" "name")
  )
)

(define-method add
  (of-object "GFileAttributeInfoList")
  (c-name "g_file_attribute_info_list_add")
  (return-type "none")
  (parameters
    '("const-char*" "name")
    '("GFileAttributeType" "type")
    '("GFileAttributeInfoFlags" "flags")
  )
)



;; From gfileattribute-priv.h



;; From gfiledescriptorbased.h

(define-function g_file_descriptor_based_get_type
  (c-name "g_file_descriptor_based_get_type")
  (return-type "GType")
)

(define-method get_fd
  (of-object "GFileDescriptorBased")
  (c-name "g_file_descriptor_based_get_fd")
  (return-type "int")
)



;; From gfileenumerator.h

(define-function g_file_enumerator_get_type
  (c-name "g_file_enumerator_get_type")
  (return-type "GType")
)

(define-method next_file
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_next_file")
  (return-type "GFileInfo*")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method close
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_close")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method next_files_async
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_next_files_async")
  (return-type "none")
  (parameters
    '("int" "num_files")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method next_files_finish
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_next_files_finish")
  (return-type "GList*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method close_async
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_close_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method close_finish
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_close_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method is_closed
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_is_closed")
  (return-type "gboolean")
)

(define-method has_pending
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_has_pending")
  (return-type "gboolean")
)

(define-method set_pending
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_set_pending")
  (return-type "none")
  (parameters
    '("gboolean" "pending")
  )
)

(define-method get_container
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_get_container")
  (return-type "GFile*")
)

(define-method get_child
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_get_child")
  (return-type "GFile*")
  (parameters
    '("GFileInfo*" "info")
  )
)

(define-method iterate
  (of-object "GFileEnumerator")
  (c-name "g_file_enumerator_iterate")
  (return-type "gboolean")
  (parameters
    '("GFileInfo**" "out_info")
    '("GFile**" "out_child")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From gfile.h

(define-function g_file_get_type
  (c-name "g_file_get_type")
  (return-type "GType")
)

(define-function g_file_new_for_path
  (c-name "g_file_new_for_path")
  (return-type "GFile*")
  (parameters
    '("const-char*" "path")
  )
)

(define-function g_file_new_for_uri
  (c-name "g_file_new_for_uri")
  (return-type "GFile*")
  (parameters
    '("const-char*" "uri")
  )
)

(define-function g_file_new_for_commandline_arg
  (c-name "g_file_new_for_commandline_arg")
  (return-type "GFile*")
  (parameters
    '("const-char*" "arg")
  )
)

(define-function g_file_new_for_commandline_arg_and_cwd
  (c-name "g_file_new_for_commandline_arg_and_cwd")
  (return-type "GFile*")
  (parameters
    '("const-gchar*" "arg")
    '("const-gchar*" "cwd")
  )
)

(define-function g_file_new_tmp
  (c-name "g_file_new_tmp")
  (return-type "GFile*")
  (parameters
    '("const-char*" "tmpl")
    '("GFileIOStream**" "iostream")
    '("GError**" "error")
  )
)

(define-function g_file_parse_name
  (c-name "g_file_parse_name")
  (return-type "GFile*")
  (parameters
    '("const-char*" "parse_name")
  )
)

(define-function g_file_new_build_filename
  (c-name "g_file_new_build_filename")
  (return-type "GFile*")
  (parameters
    '("const-gchar*" "first_element")
  )
  (varargs #t)
)

(define-method dup
  (of-object "GFile")
  (c-name "g_file_dup")
  (return-type "GFile*")
)

(define-function g_file_hash
  (c-name "g_file_hash")
  (return-type "guint")
  (parameters
    '("gconstpointer" "file")
  )
)

(define-method equal
  (of-object "GFile")
  (c-name "g_file_equal")
  (return-type "gboolean")
  (parameters
    '("GFile*" "file2")
  )
)

(define-method get_basename
  (of-object "GFile")
  (c-name "g_file_get_basename")
  (return-type "char*")
)

(define-method get_path
  (of-object "GFile")
  (c-name "g_file_get_path")
  (return-type "char*")
)

(define-method peek_path
  (of-object "GFile")
  (c-name "g_file_peek_path")
  (return-type "const-char*")
)

(define-method get_uri
  (of-object "GFile")
  (c-name "g_file_get_uri")
  (return-type "char*")
)

(define-method get_parse_name
  (of-object "GFile")
  (c-name "g_file_get_parse_name")
  (return-type "char*")
)

(define-method get_parent
  (of-object "GFile")
  (c-name "g_file_get_parent")
  (return-type "GFile*")
)

(define-method has_parent
  (of-object "GFile")
  (c-name "g_file_has_parent")
  (return-type "gboolean")
  (parameters
    '("GFile*" "parent")
  )
)

(define-method get_child
  (of-object "GFile")
  (c-name "g_file_get_child")
  (return-type "GFile*")
  (parameters
    '("const-char*" "name")
  )
)

(define-method get_child_for_display_name
  (of-object "GFile")
  (c-name "g_file_get_child_for_display_name")
  (return-type "GFile*")
  (parameters
    '("const-char*" "display_name")
    '("GError**" "error")
  )
)

(define-method has_prefix
  (of-object "GFile")
  (c-name "g_file_has_prefix")
  (return-type "gboolean")
  (parameters
    '("GFile*" "prefix")
  )
)

(define-method get_relative_path
  (of-object "GFile")
  (c-name "g_file_get_relative_path")
  (return-type "char*")
  (parameters
    '("GFile*" "descendant")
  )
)

(define-method resolve_relative_path
  (of-object "GFile")
  (c-name "g_file_resolve_relative_path")
  (return-type "GFile*")
  (parameters
    '("const-char*" "relative_path")
  )
)

(define-method is_native
  (of-object "GFile")
  (c-name "g_file_is_native")
  (return-type "gboolean")
)

(define-method has_uri_scheme
  (of-object "GFile")
  (c-name "g_file_has_uri_scheme")
  (return-type "gboolean")
  (parameters
    '("const-char*" "uri_scheme")
  )
)

(define-method get_uri_scheme
  (of-object "GFile")
  (c-name "g_file_get_uri_scheme")
  (return-type "char*")
)

(define-method read
  (of-object "GFile")
  (c-name "g_file_read")
  (return-type "GFileInputStream*")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_async
  (of-object "GFile")
  (c-name "g_file_read_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method read_finish
  (of-object "GFile")
  (c-name "g_file_read_finish")
  (return-type "GFileInputStream*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method append_to
  (of-object "GFile")
  (c-name "g_file_append_to")
  (return-type "GFileOutputStream*")
  (parameters
    '("GFileCreateFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method create
  (of-object "GFile")
  (c-name "g_file_create")
  (return-type "GFileOutputStream*")
  (parameters
    '("GFileCreateFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method replace
  (of-object "GFile")
  (c-name "g_file_replace")
  (return-type "GFileOutputStream*")
  (parameters
    '("const-char*" "etag")
    '("gboolean" "make_backup")
    '("GFileCreateFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method append_to_async
  (of-object "GFile")
  (c-name "g_file_append_to_async")
  (return-type "none")
  (parameters
    '("GFileCreateFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method append_to_finish
  (of-object "GFile")
  (c-name "g_file_append_to_finish")
  (return-type "GFileOutputStream*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method create_async
  (of-object "GFile")
  (c-name "g_file_create_async")
  (return-type "none")
  (parameters
    '("GFileCreateFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method create_finish
  (of-object "GFile")
  (c-name "g_file_create_finish")
  (return-type "GFileOutputStream*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method replace_async
  (of-object "GFile")
  (c-name "g_file_replace_async")
  (return-type "none")
  (parameters
    '("const-char*" "etag")
    '("gboolean" "make_backup")
    '("GFileCreateFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method replace_finish
  (of-object "GFile")
  (c-name "g_file_replace_finish")
  (return-type "GFileOutputStream*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method open_readwrite
  (of-object "GFile")
  (c-name "g_file_open_readwrite")
  (return-type "GFileIOStream*")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method open_readwrite_async
  (of-object "GFile")
  (c-name "g_file_open_readwrite_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method open_readwrite_finish
  (of-object "GFile")
  (c-name "g_file_open_readwrite_finish")
  (return-type "GFileIOStream*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method create_readwrite
  (of-object "GFile")
  (c-name "g_file_create_readwrite")
  (return-type "GFileIOStream*")
  (parameters
    '("GFileCreateFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method create_readwrite_async
  (of-object "GFile")
  (c-name "g_file_create_readwrite_async")
  (return-type "none")
  (parameters
    '("GFileCreateFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method create_readwrite_finish
  (of-object "GFile")
  (c-name "g_file_create_readwrite_finish")
  (return-type "GFileIOStream*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method replace_readwrite
  (of-object "GFile")
  (c-name "g_file_replace_readwrite")
  (return-type "GFileIOStream*")
  (parameters
    '("const-char*" "etag")
    '("gboolean" "make_backup")
    '("GFileCreateFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method replace_readwrite_async
  (of-object "GFile")
  (c-name "g_file_replace_readwrite_async")
  (return-type "none")
  (parameters
    '("const-char*" "etag")
    '("gboolean" "make_backup")
    '("GFileCreateFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method replace_readwrite_finish
  (of-object "GFile")
  (c-name "g_file_replace_readwrite_finish")
  (return-type "GFileIOStream*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method query_exists
  (of-object "GFile")
  (c-name "g_file_query_exists")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
  )
)

(define-method query_file_type
  (of-object "GFile")
  (c-name "g_file_query_file_type")
  (return-type "GFileType")
  (parameters
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
  )
)

(define-method query_info
  (of-object "GFile")
  (c-name "g_file_query_info")
  (return-type "GFileInfo*")
  (parameters
    '("const-char*" "attributes")
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method query_info_async
  (of-object "GFile")
  (c-name "g_file_query_info_async")
  (return-type "none")
  (parameters
    '("const-char*" "attributes")
    '("GFileQueryInfoFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method query_info_finish
  (of-object "GFile")
  (c-name "g_file_query_info_finish")
  (return-type "GFileInfo*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method query_filesystem_info
  (of-object "GFile")
  (c-name "g_file_query_filesystem_info")
  (return-type "GFileInfo*")
  (parameters
    '("const-char*" "attributes")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method query_filesystem_info_async
  (of-object "GFile")
  (c-name "g_file_query_filesystem_info_async")
  (return-type "none")
  (parameters
    '("const-char*" "attributes")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method query_filesystem_info_finish
  (of-object "GFile")
  (c-name "g_file_query_filesystem_info_finish")
  (return-type "GFileInfo*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method find_enclosing_mount
  (of-object "GFile")
  (c-name "g_file_find_enclosing_mount")
  (return-type "GMount*")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method find_enclosing_mount_async
  (of-object "GFile")
  (c-name "g_file_find_enclosing_mount_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method find_enclosing_mount_finish
  (of-object "GFile")
  (c-name "g_file_find_enclosing_mount_finish")
  (return-type "GMount*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method enumerate_children
  (of-object "GFile")
  (c-name "g_file_enumerate_children")
  (return-type "GFileEnumerator*")
  (parameters
    '("const-char*" "attributes")
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method enumerate_children_async
  (of-object "GFile")
  (c-name "g_file_enumerate_children_async")
  (return-type "none")
  (parameters
    '("const-char*" "attributes")
    '("GFileQueryInfoFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method enumerate_children_finish
  (of-object "GFile")
  (c-name "g_file_enumerate_children_finish")
  (return-type "GFileEnumerator*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method set_display_name
  (of-object "GFile")
  (c-name "g_file_set_display_name")
  (return-type "GFile*")
  (parameters
    '("const-char*" "display_name")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method set_display_name_async
  (of-object "GFile")
  (c-name "g_file_set_display_name_async")
  (return-type "none")
  (parameters
    '("const-char*" "display_name")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method set_display_name_finish
  (of-object "GFile")
  (c-name "g_file_set_display_name_finish")
  (return-type "GFile*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method delete
  (of-object "GFile")
  (c-name "g_file_delete")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method delete_async
  (of-object "GFile")
  (c-name "g_file_delete_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method delete_finish
  (of-object "GFile")
  (c-name "g_file_delete_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method trash
  (of-object "GFile")
  (c-name "g_file_trash")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method trash_async
  (of-object "GFile")
  (c-name "g_file_trash_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method trash_finish
  (of-object "GFile")
  (c-name "g_file_trash_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method copy
  (of-object "GFile")
  (c-name "g_file_copy")
  (return-type "gboolean")
  (parameters
    '("GFile*" "destination")
    '("GFileCopyFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GFileProgressCallback" "progress_callback")
    '("gpointer" "progress_callback_data")
    '("GError**" "error")
  )
)

(define-method copy_async
  (of-object "GFile")
  (c-name "g_file_copy_async")
  (return-type "none")
  (parameters
    '("GFile*" "destination")
    '("GFileCopyFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GFileProgressCallback" "progress_callback")
    '("gpointer" "progress_callback_data")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method copy_finish
  (of-object "GFile")
  (c-name "g_file_copy_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method move
  (of-object "GFile")
  (c-name "g_file_move")
  (return-type "gboolean")
  (parameters
    '("GFile*" "destination")
    '("GFileCopyFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GFileProgressCallback" "progress_callback")
    '("gpointer" "progress_callback_data")
    '("GError**" "error")
  )
)

(define-method make_directory
  (of-object "GFile")
  (c-name "g_file_make_directory")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method make_directory_async
  (of-object "GFile")
  (c-name "g_file_make_directory_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method make_directory_finish
  (of-object "GFile")
  (c-name "g_file_make_directory_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method make_directory_with_parents
  (of-object "GFile")
  (c-name "g_file_make_directory_with_parents")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method make_symbolic_link
  (of-object "GFile")
  (c-name "g_file_make_symbolic_link")
  (return-type "gboolean")
  (parameters
    '("const-char*" "symlink_value")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method query_settable_attributes
  (of-object "GFile")
  (c-name "g_file_query_settable_attributes")
  (return-type "GFileAttributeInfoList*")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method query_writable_namespaces
  (of-object "GFile")
  (c-name "g_file_query_writable_namespaces")
  (return-type "GFileAttributeInfoList*")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method set_attribute
  (of-object "GFile")
  (c-name "g_file_set_attribute")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
    '("GFileAttributeType" "type")
    '("gpointer" "value_p")
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method set_attributes_from_info
  (of-object "GFile")
  (c-name "g_file_set_attributes_from_info")
  (return-type "gboolean")
  (parameters
    '("GFileInfo*" "info")
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method set_attributes_async
  (of-object "GFile")
  (c-name "g_file_set_attributes_async")
  (return-type "none")
  (parameters
    '("GFileInfo*" "info")
    '("GFileQueryInfoFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method set_attributes_finish
  (of-object "GFile")
  (c-name "g_file_set_attributes_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GFileInfo**" "info")
    '("GError**" "error")
  )
)

(define-method set_attribute_string
  (of-object "GFile")
  (c-name "g_file_set_attribute_string")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
    '("const-char*" "value")
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method set_attribute_byte_string
  (of-object "GFile")
  (c-name "g_file_set_attribute_byte_string")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
    '("const-char*" "value")
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method set_attribute_uint32
  (of-object "GFile")
  (c-name "g_file_set_attribute_uint32")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
    '("guint32" "value")
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method set_attribute_int32
  (of-object "GFile")
  (c-name "g_file_set_attribute_int32")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
    '("gint32" "value")
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method set_attribute_uint64
  (of-object "GFile")
  (c-name "g_file_set_attribute_uint64")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
    '("guint64" "value")
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method set_attribute_int64
  (of-object "GFile")
  (c-name "g_file_set_attribute_int64")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
    '("gint64" "value")
    '("GFileQueryInfoFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method mount_enclosing_volume
  (of-object "GFile")
  (c-name "g_file_mount_enclosing_volume")
  (return-type "none")
  (parameters
    '("GMountMountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method mount_enclosing_volume_finish
  (of-object "GFile")
  (c-name "g_file_mount_enclosing_volume_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method mount_mountable
  (of-object "GFile")
  (c-name "g_file_mount_mountable")
  (return-type "none")
  (parameters
    '("GMountMountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method mount_mountable_finish
  (of-object "GFile")
  (c-name "g_file_mount_mountable_finish")
  (return-type "GFile*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method unmount_mountable
  (of-object "GFile")
  (c-name "g_file_unmount_mountable")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method unmount_mountable_finish
  (of-object "GFile")
  (c-name "g_file_unmount_mountable_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method unmount_mountable_with_operation
  (of-object "GFile")
  (c-name "g_file_unmount_mountable_with_operation")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method unmount_mountable_with_operation_finish
  (of-object "GFile")
  (c-name "g_file_unmount_mountable_with_operation_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method eject_mountable
  (of-object "GFile")
  (c-name "g_file_eject_mountable")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method eject_mountable_finish
  (of-object "GFile")
  (c-name "g_file_eject_mountable_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method eject_mountable_with_operation
  (of-object "GFile")
  (c-name "g_file_eject_mountable_with_operation")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method eject_mountable_with_operation_finish
  (of-object "GFile")
  (c-name "g_file_eject_mountable_with_operation_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method copy_attributes
  (of-object "GFile")
  (c-name "g_file_copy_attributes")
  (return-type "gboolean")
  (parameters
    '("GFile*" "destination")
    '("GFileCopyFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method monitor_directory
  (of-object "GFile")
  (c-name "g_file_monitor_directory")
  (return-type "GFileMonitor*")
  (parameters
    '("GFileMonitorFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method monitor_file
  (of-object "GFile")
  (c-name "g_file_monitor_file")
  (return-type "GFileMonitor*")
  (parameters
    '("GFileMonitorFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method monitor
  (of-object "GFile")
  (c-name "g_file_monitor")
  (return-type "GFileMonitor*")
  (parameters
    '("GFileMonitorFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method measure_disk_usage
  (of-object "GFile")
  (c-name "g_file_measure_disk_usage")
  (return-type "gboolean")
  (parameters
    '("GFileMeasureFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GFileMeasureProgressCallback" "progress_callback")
    '("gpointer" "progress_data")
    '("guint64*" "disk_usage")
    '("guint64*" "num_dirs")
    '("guint64*" "num_files")
    '("GError**" "error")
  )
)

(define-method measure_disk_usage_async
  (of-object "GFile")
  (c-name "g_file_measure_disk_usage_async")
  (return-type "none")
  (parameters
    '("GFileMeasureFlags" "flags")
    '("gint" "io_priority")
    '("GCancellable*" "cancellable")
    '("GFileMeasureProgressCallback" "progress_callback")
    '("gpointer" "progress_data")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method measure_disk_usage_finish
  (of-object "GFile")
  (c-name "g_file_measure_disk_usage_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("guint64*" "disk_usage")
    '("guint64*" "num_dirs")
    '("guint64*" "num_files")
    '("GError**" "error")
  )
)

(define-method start_mountable
  (of-object "GFile")
  (c-name "g_file_start_mountable")
  (return-type "none")
  (parameters
    '("GDriveStartFlags" "flags")
    '("GMountOperation*" "start_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method start_mountable_finish
  (of-object "GFile")
  (c-name "g_file_start_mountable_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method stop_mountable
  (of-object "GFile")
  (c-name "g_file_stop_mountable")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method stop_mountable_finish
  (of-object "GFile")
  (c-name "g_file_stop_mountable_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method poll_mountable
  (of-object "GFile")
  (c-name "g_file_poll_mountable")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method poll_mountable_finish
  (of-object "GFile")
  (c-name "g_file_poll_mountable_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method query_default_handler
  (of-object "GFile")
  (c-name "g_file_query_default_handler")
  (return-type "GAppInfo*")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method load_contents
  (of-object "GFile")
  (c-name "g_file_load_contents")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("char**" "contents")
    '("gsize*" "length")
    '("char**" "etag_out")
    '("GError**" "error")
  )
)

(define-method load_contents_async
  (of-object "GFile")
  (c-name "g_file_load_contents_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method load_contents_finish
  (of-object "GFile")
  (c-name "g_file_load_contents_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "res")
    '("char**" "contents")
    '("gsize*" "length")
    '("char**" "etag_out")
    '("GError**" "error")
  )
)

(define-method load_partial_contents_async
  (of-object "GFile")
  (c-name "g_file_load_partial_contents_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GFileReadMoreCallback" "read_more_callback")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method load_partial_contents_finish
  (of-object "GFile")
  (c-name "g_file_load_partial_contents_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "res")
    '("char**" "contents")
    '("gsize*" "length")
    '("char**" "etag_out")
    '("GError**" "error")
  )
)

(define-method replace_contents
  (of-object "GFile")
  (c-name "g_file_replace_contents")
  (return-type "gboolean")
  (parameters
    '("const-char*" "contents")
    '("gsize" "length")
    '("const-char*" "etag")
    '("gboolean" "make_backup")
    '("GFileCreateFlags" "flags")
    '("char**" "new_etag")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method replace_contents_async
  (of-object "GFile")
  (c-name "g_file_replace_contents_async")
  (return-type "none")
  (parameters
    '("const-char*" "contents")
    '("gsize" "length")
    '("const-char*" "etag")
    '("gboolean" "make_backup")
    '("GFileCreateFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method replace_contents_bytes_async
  (of-object "GFile")
  (c-name "g_file_replace_contents_bytes_async")
  (return-type "none")
  (parameters
    '("GBytes*" "contents")
    '("const-char*" "etag")
    '("gboolean" "make_backup")
    '("GFileCreateFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method replace_contents_finish
  (of-object "GFile")
  (c-name "g_file_replace_contents_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "res")
    '("char**" "new_etag")
    '("GError**" "error")
  )
)

(define-method supports_thread_contexts
  (of-object "GFile")
  (c-name "g_file_supports_thread_contexts")
  (return-type "gboolean")
)

(define-method load_bytes
  (of-object "GFile")
  (c-name "g_file_load_bytes")
  (return-type "GBytes*")
  (parameters
    '("GCancellable*" "cancellable")
    '("gchar**" "etag_out")
    '("GError**" "error")
  )
)

(define-method load_bytes_async
  (of-object "GFile")
  (c-name "g_file_load_bytes_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method load_bytes_finish
  (of-object "GFile")
  (c-name "g_file_load_bytes_finish")
  (return-type "GBytes*")
  (parameters
    '("GAsyncResult*" "result")
    '("gchar**" "etag_out")
    '("GError**" "error")
  )
)



;; From gfileicon.h

(define-function g_file_icon_get_type
  (c-name "g_file_icon_get_type")
  (return-type "GType")
)

(define-method icon_new
  (of-object "GFile")
  (c-name "g_file_icon_new")
  (return-type "GIcon*")
)

(define-method get_file
  (of-object "GFileIcon")
  (c-name "g_file_icon_get_file")
  (return-type "GFile*")
)



;; From gfileinfo.h

(define-function g_file_info_get_type
  (c-name "g_file_info_get_type")
  (return-type "GType")
)

(define-function g_file_info_new
  (c-name "g_file_info_new")
  (is-constructor-of "GFileInfo")
  (return-type "GFileInfo*")
)

(define-method dup
  (of-object "GFileInfo")
  (c-name "g_file_info_dup")
  (return-type "GFileInfo*")
)

(define-method copy_into
  (of-object "GFileInfo")
  (c-name "g_file_info_copy_into")
  (return-type "none")
  (parameters
    '("GFileInfo*" "dest_info")
  )
)

(define-method has_attribute
  (of-object "GFileInfo")
  (c-name "g_file_info_has_attribute")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method has_namespace
  (of-object "GFileInfo")
  (c-name "g_file_info_has_namespace")
  (return-type "gboolean")
  (parameters
    '("const-char*" "name_space")
  )
)

(define-method list_attributes
  (of-object "GFileInfo")
  (c-name "g_file_info_list_attributes")
  (return-type "char**")
  (parameters
    '("const-char*" "name_space")
  )
)

(define-method get_attribute_data
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_data")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
    '("GFileAttributeType*" "type")
    '("gpointer*" "value_pp")
    '("GFileAttributeStatus*" "status")
  )
)

(define-method get_attribute_type
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_type")
  (return-type "GFileAttributeType")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method remove_attribute
  (of-object "GFileInfo")
  (c-name "g_file_info_remove_attribute")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method get_attribute_status
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_status")
  (return-type "GFileAttributeStatus")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method set_attribute_status
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_status")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
    '("GFileAttributeStatus" "status")
  )
)

(define-method get_attribute_as_string
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_as_string")
  (return-type "char*")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method get_attribute_string
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_string")
  (return-type "const-char*")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method get_attribute_byte_string
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_byte_string")
  (return-type "const-char*")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method get_attribute_boolean
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_boolean")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method get_attribute_uint32
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_uint32")
  (return-type "guint32")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method get_attribute_int32
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_int32")
  (return-type "gint32")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method get_attribute_uint64
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_uint64")
  (return-type "guint64")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method get_attribute_int64
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_int64")
  (return-type "gint64")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method get_attribute_object
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_object")
  (return-type "GObject*")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method get_attribute_stringv
  (of-object "GFileInfo")
  (c-name "g_file_info_get_attribute_stringv")
  (return-type "char**")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method set_attribute
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
    '("GFileAttributeType" "type")
    '("gpointer" "value_p")
  )
)

(define-method set_attribute_string
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_string")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
    '("const-char*" "attr_value")
  )
)

(define-method set_attribute_byte_string
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_byte_string")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
    '("const-char*" "attr_value")
  )
)

(define-method set_attribute_boolean
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_boolean")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
    '("gboolean" "attr_value")
  )
)

(define-method set_attribute_uint32
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_uint32")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
    '("guint32" "attr_value")
  )
)

(define-method set_attribute_int32
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_int32")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
    '("gint32" "attr_value")
  )
)

(define-method set_attribute_uint64
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_uint64")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
    '("guint64" "attr_value")
  )
)

(define-method set_attribute_int64
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_int64")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
    '("gint64" "attr_value")
  )
)

(define-method set_attribute_object
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_object")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
    '("GObject*" "attr_value")
  )
)

(define-method set_attribute_stringv
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_stringv")
  (return-type "none")
  (parameters
    '("const-char*" "attribute")
    '("char**" "attr_value")
  )
)

(define-method clear_status
  (of-object "GFileInfo")
  (c-name "g_file_info_clear_status")
  (return-type "none")
)

(define-method get_deletion_date
  (of-object "GFileInfo")
  (c-name "g_file_info_get_deletion_date")
  (return-type "GDateTime*")
)

(define-method get_file_type
  (of-object "GFileInfo")
  (c-name "g_file_info_get_file_type")
  (return-type "GFileType")
)

(define-method get_is_hidden
  (of-object "GFileInfo")
  (c-name "g_file_info_get_is_hidden")
  (return-type "gboolean")
)

(define-method get_is_backup
  (of-object "GFileInfo")
  (c-name "g_file_info_get_is_backup")
  (return-type "gboolean")
)

(define-method get_is_symlink
  (of-object "GFileInfo")
  (c-name "g_file_info_get_is_symlink")
  (return-type "gboolean")
)

(define-method get_name
  (of-object "GFileInfo")
  (c-name "g_file_info_get_name")
  (return-type "const-char*")
)

(define-method get_display_name
  (of-object "GFileInfo")
  (c-name "g_file_info_get_display_name")
  (return-type "const-char*")
)

(define-method get_edit_name
  (of-object "GFileInfo")
  (c-name "g_file_info_get_edit_name")
  (return-type "const-char*")
)

(define-method get_icon
  (of-object "GFileInfo")
  (c-name "g_file_info_get_icon")
  (return-type "GIcon*")
)

(define-method get_symbolic_icon
  (of-object "GFileInfo")
  (c-name "g_file_info_get_symbolic_icon")
  (return-type "GIcon*")
)

(define-method get_content_type
  (of-object "GFileInfo")
  (c-name "g_file_info_get_content_type")
  (return-type "const-char*")
)

(define-method get_size
  (of-object "GFileInfo")
  (c-name "g_file_info_get_size")
  (return-type "goffset")
)

(define-method get_modification_time
  (of-object "GFileInfo")
  (c-name "g_file_info_get_modification_time")
  (return-type "none")
  (parameters
    '("GTimeVal*" "result")
  )
)

(define-method get_symlink_target
  (of-object "GFileInfo")
  (c-name "g_file_info_get_symlink_target")
  (return-type "const-char*")
)

(define-method get_etag
  (of-object "GFileInfo")
  (c-name "g_file_info_get_etag")
  (return-type "const-char*")
)

(define-method get_sort_order
  (of-object "GFileInfo")
  (c-name "g_file_info_get_sort_order")
  (return-type "gint32")
)

(define-method set_attribute_mask
  (of-object "GFileInfo")
  (c-name "g_file_info_set_attribute_mask")
  (return-type "none")
  (parameters
    '("GFileAttributeMatcher*" "mask")
  )
)

(define-method unset_attribute_mask
  (of-object "GFileInfo")
  (c-name "g_file_info_unset_attribute_mask")
  (return-type "none")
)

(define-method set_file_type
  (of-object "GFileInfo")
  (c-name "g_file_info_set_file_type")
  (return-type "none")
  (parameters
    '("GFileType" "type")
  )
)

(define-method set_is_hidden
  (of-object "GFileInfo")
  (c-name "g_file_info_set_is_hidden")
  (return-type "none")
  (parameters
    '("gboolean" "is_hidden")
  )
)

(define-method set_is_symlink
  (of-object "GFileInfo")
  (c-name "g_file_info_set_is_symlink")
  (return-type "none")
  (parameters
    '("gboolean" "is_symlink")
  )
)

(define-method set_name
  (of-object "GFileInfo")
  (c-name "g_file_info_set_name")
  (return-type "none")
  (parameters
    '("const-char*" "name")
  )
)

(define-method set_display_name
  (of-object "GFileInfo")
  (c-name "g_file_info_set_display_name")
  (return-type "none")
  (parameters
    '("const-char*" "display_name")
  )
)

(define-method set_edit_name
  (of-object "GFileInfo")
  (c-name "g_file_info_set_edit_name")
  (return-type "none")
  (parameters
    '("const-char*" "edit_name")
  )
)

(define-method set_icon
  (of-object "GFileInfo")
  (c-name "g_file_info_set_icon")
  (return-type "none")
  (parameters
    '("GIcon*" "icon")
  )
)

(define-method set_symbolic_icon
  (of-object "GFileInfo")
  (c-name "g_file_info_set_symbolic_icon")
  (return-type "none")
  (parameters
    '("GIcon*" "icon")
  )
)

(define-method set_content_type
  (of-object "GFileInfo")
  (c-name "g_file_info_set_content_type")
  (return-type "none")
  (parameters
    '("const-char*" "content_type")
  )
)

(define-method set_size
  (of-object "GFileInfo")
  (c-name "g_file_info_set_size")
  (return-type "none")
  (parameters
    '("goffset" "size")
  )
)

(define-method set_modification_time
  (of-object "GFileInfo")
  (c-name "g_file_info_set_modification_time")
  (return-type "none")
  (parameters
    '("GTimeVal*" "mtime")
  )
)

(define-method set_symlink_target
  (of-object "GFileInfo")
  (c-name "g_file_info_set_symlink_target")
  (return-type "none")
  (parameters
    '("const-char*" "symlink_target")
  )
)

(define-method set_sort_order
  (of-object "GFileInfo")
  (c-name "g_file_info_set_sort_order")
  (return-type "none")
  (parameters
    '("gint32" "sort_order")
  )
)

(define-function g_file_attribute_matcher_get_type
  (c-name "g_file_attribute_matcher_get_type")
  (return-type "GType")
)

(define-function g_file_attribute_matcher_new
  (c-name "g_file_attribute_matcher_new")
  (is-constructor-of "GFileAttributeMatcher")
  (return-type "GFileAttributeMatcher*")
  (parameters
    '("const-char*" "attributes")
  )
)

(define-method ref
  (of-object "GFileAttributeMatcher")
  (c-name "g_file_attribute_matcher_ref")
  (return-type "GFileAttributeMatcher*")
)

(define-method unref
  (of-object "GFileAttributeMatcher")
  (c-name "g_file_attribute_matcher_unref")
  (return-type "none")
)

(define-method subtract
  (of-object "GFileAttributeMatcher")
  (c-name "g_file_attribute_matcher_subtract")
  (return-type "GFileAttributeMatcher*")
  (parameters
    '("GFileAttributeMatcher*" "subtract")
  )
)

(define-method matches
  (of-object "GFileAttributeMatcher")
  (c-name "g_file_attribute_matcher_matches")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method matches_only
  (of-object "GFileAttributeMatcher")
  (c-name "g_file_attribute_matcher_matches_only")
  (return-type "gboolean")
  (parameters
    '("const-char*" "attribute")
  )
)

(define-method enumerate_namespace
  (of-object "GFileAttributeMatcher")
  (c-name "g_file_attribute_matcher_enumerate_namespace")
  (return-type "gboolean")
  (parameters
    '("const-char*" "ns")
  )
)

(define-method enumerate_next
  (of-object "GFileAttributeMatcher")
  (c-name "g_file_attribute_matcher_enumerate_next")
  (return-type "const-char*")
)

(define-method to_string
  (of-object "GFileAttributeMatcher")
  (c-name "g_file_attribute_matcher_to_string")
  (return-type "char*")
)



;; From gfileinfo-priv.h



;; From gfileinputstream.h

(define-function g_file_input_stream_get_type
  (c-name "g_file_input_stream_get_type")
  (return-type "GType")
)

(define-method query_info
  (of-object "GFileInputStream")
  (c-name "g_file_input_stream_query_info")
  (return-type "GFileInfo*")
  (parameters
    '("const-char*" "attributes")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method query_info_async
  (of-object "GFileInputStream")
  (c-name "g_file_input_stream_query_info_async")
  (return-type "none")
  (parameters
    '("const-char*" "attributes")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method query_info_finish
  (of-object "GFileInputStream")
  (c-name "g_file_input_stream_query_info_finish")
  (return-type "GFileInfo*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)



;; From gfileiostream.h

(define-function g_file_io_stream_get_type
  (c-name "g_file_io_stream_get_type")
  (return-type "GType")
)

(define-method query_info
  (of-object "GFileIOStream")
  (c-name "g_file_io_stream_query_info")
  (return-type "GFileInfo*")
  (parameters
    '("const-char*" "attributes")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method query_info_async
  (of-object "GFileIOStream")
  (c-name "g_file_io_stream_query_info_async")
  (return-type "none")
  (parameters
    '("const-char*" "attributes")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method query_info_finish
  (of-object "GFileIOStream")
  (c-name "g_file_io_stream_query_info_finish")
  (return-type "GFileInfo*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method get_etag
  (of-object "GFileIOStream")
  (c-name "g_file_io_stream_get_etag")
  (return-type "char*")
)



;; From gfilemonitor.h

(define-function g_file_monitor_get_type
  (c-name "g_file_monitor_get_type")
  (return-type "GType")
)

(define-method cancel
  (of-object "GFileMonitor")
  (c-name "g_file_monitor_cancel")
  (return-type "gboolean")
)

(define-method is_cancelled
  (of-object "GFileMonitor")
  (c-name "g_file_monitor_is_cancelled")
  (return-type "gboolean")
)

(define-method set_rate_limit
  (of-object "GFileMonitor")
  (c-name "g_file_monitor_set_rate_limit")
  (return-type "none")
  (parameters
    '("gint" "limit_msecs")
  )
)

(define-method emit_event
  (of-object "GFileMonitor")
  (c-name "g_file_monitor_emit_event")
  (return-type "none")
  (parameters
    '("GFile*" "child")
    '("GFile*" "other_file")
    '("GFileMonitorEvent" "event_type")
  )
)



;; From gfilenamecompleter.h

(define-function g_filename_completer_get_type
  (c-name "g_filename_completer_get_type")
  (return-type "GType")
)

(define-function g_filename_completer_new
  (c-name "g_filename_completer_new")
  (is-constructor-of "GFilenameCompleter")
  (return-type "GFilenameCompleter*")
)

(define-method get_completion_suffix
  (of-object "GFilenameCompleter")
  (c-name "g_filename_completer_get_completion_suffix")
  (return-type "char*")
  (parameters
    '("const-char*" "initial_text")
  )
)

(define-method get_completions
  (of-object "GFilenameCompleter")
  (c-name "g_filename_completer_get_completions")
  (return-type "char**")
  (parameters
    '("const-char*" "initial_text")
  )
)

(define-method set_dirs_only
  (of-object "GFilenameCompleter")
  (c-name "g_filename_completer_set_dirs_only")
  (return-type "none")
  (parameters
    '("gboolean" "dirs_only")
  )
)



;; From gfileoutputstream.h

(define-function g_file_output_stream_get_type
  (c-name "g_file_output_stream_get_type")
  (return-type "GType")
)

(define-method query_info
  (of-object "GFileOutputStream")
  (c-name "g_file_output_stream_query_info")
  (return-type "GFileInfo*")
  (parameters
    '("const-char*" "attributes")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method query_info_async
  (of-object "GFileOutputStream")
  (c-name "g_file_output_stream_query_info_async")
  (return-type "none")
  (parameters
    '("const-char*" "attributes")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method query_info_finish
  (of-object "GFileOutputStream")
  (c-name "g_file_output_stream_query_info_finish")
  (return-type "GFileInfo*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method get_etag
  (of-object "GFileOutputStream")
  (c-name "g_file_output_stream_get_etag")
  (return-type "char*")
)



;; From gfilterinputstream.h

(define-function g_filter_input_stream_get_type
  (c-name "g_filter_input_stream_get_type")
  (return-type "GType")
)

(define-method get_base_stream
  (of-object "GFilterInputStream")
  (c-name "g_filter_input_stream_get_base_stream")
  (return-type "GInputStream*")
)

(define-method get_close_base_stream
  (of-object "GFilterInputStream")
  (c-name "g_filter_input_stream_get_close_base_stream")
  (return-type "gboolean")
)

(define-method set_close_base_stream
  (of-object "GFilterInputStream")
  (c-name "g_filter_input_stream_set_close_base_stream")
  (return-type "none")
  (parameters
    '("gboolean" "close_base")
  )
)



;; From gfilteroutputstream.h

(define-function g_filter_output_stream_get_type
  (c-name "g_filter_output_stream_get_type")
  (return-type "GType")
)

(define-method get_base_stream
  (of-object "GFilterOutputStream")
  (c-name "g_filter_output_stream_get_base_stream")
  (return-type "GOutputStream*")
)

(define-method get_close_base_stream
  (of-object "GFilterOutputStream")
  (c-name "g_filter_output_stream_get_close_base_stream")
  (return-type "gboolean")
)

(define-method set_close_base_stream
  (of-object "GFilterOutputStream")
  (c-name "g_filter_output_stream_set_close_base_stream")
  (return-type "none")
  (parameters
    '("gboolean" "close_base")
  )
)



;; From ghttpproxy.h



;; From gicon.h

(define-function g_icon_get_type
  (c-name "g_icon_get_type")
  (return-type "GType")
)

(define-function g_icon_hash
  (c-name "g_icon_hash")
  (return-type "guint")
  (parameters
    '("gconstpointer" "icon")
  )
)

(define-method equal
  (of-object "GIcon")
  (c-name "g_icon_equal")
  (return-type "gboolean")
  (parameters
    '("GIcon*" "icon2")
  )
)

(define-method to_string
  (of-object "GIcon")
  (c-name "g_icon_to_string")
  (return-type "gchar*")
)

(define-function g_icon_new_for_string
  (c-name "g_icon_new_for_string")
  (return-type "GIcon*")
  (parameters
    '("const-gchar*" "str")
    '("GError**" "error")
  )
)

(define-method serialize
  (of-object "GIcon")
  (c-name "g_icon_serialize")
  (return-type "GVariant*")
)

(define-function g_icon_deserialize
  (c-name "g_icon_deserialize")
  (return-type "GIcon*")
  (parameters
    '("GVariant*" "value")
  )
)



;; From ginetaddress.h

(define-function g_inet_address_get_type
  (c-name "g_inet_address_get_type")
  (return-type "GType")
)

(define-function g_inet_address_new_from_string
  (c-name "g_inet_address_new_from_string")
  (return-type "GInetAddress*")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-function g_inet_address_new_from_bytes
  (c-name "g_inet_address_new_from_bytes")
  (return-type "GInetAddress*")
  (parameters
    '("const-guint8*" "bytes")
    '("GSocketFamily" "family")
  )
)

(define-function g_inet_address_new_loopback
  (c-name "g_inet_address_new_loopback")
  (return-type "GInetAddress*")
  (parameters
    '("GSocketFamily" "family")
  )
)

(define-function g_inet_address_new_any
  (c-name "g_inet_address_new_any")
  (return-type "GInetAddress*")
  (parameters
    '("GSocketFamily" "family")
  )
)

(define-method equal
  (of-object "GInetAddress")
  (c-name "g_inet_address_equal")
  (return-type "gboolean")
  (parameters
    '("GInetAddress*" "other_address")
  )
)

(define-method to_string
  (of-object "GInetAddress")
  (c-name "g_inet_address_to_string")
  (return-type "gchar*")
)

(define-method to_bytes
  (of-object "GInetAddress")
  (c-name "g_inet_address_to_bytes")
  (return-type "const-guint8*")
)

(define-method get_native_size
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_native_size")
  (return-type "gsize")
)

(define-method get_family
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_family")
  (return-type "GSocketFamily")
)

(define-method get_is_any
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_is_any")
  (return-type "gboolean")
)

(define-method get_is_loopback
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_is_loopback")
  (return-type "gboolean")
)

(define-method get_is_link_local
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_is_link_local")
  (return-type "gboolean")
)

(define-method get_is_site_local
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_is_site_local")
  (return-type "gboolean")
)

(define-method get_is_multicast
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_is_multicast")
  (return-type "gboolean")
)

(define-method get_is_mc_global
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_is_mc_global")
  (return-type "gboolean")
)

(define-method get_is_mc_link_local
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_is_mc_link_local")
  (return-type "gboolean")
)

(define-method get_is_mc_node_local
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_is_mc_node_local")
  (return-type "gboolean")
)

(define-method get_is_mc_org_local
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_is_mc_org_local")
  (return-type "gboolean")
)

(define-method get_is_mc_site_local
  (of-object "GInetAddress")
  (c-name "g_inet_address_get_is_mc_site_local")
  (return-type "gboolean")
)



;; From ginetaddressmask.h

(define-function g_inet_address_mask_get_type
  (c-name "g_inet_address_mask_get_type")
  (return-type "GType")
)

(define-method mask_new
  (of-object "GInetAddress")
  (c-name "g_inet_address_mask_new")
  (return-type "GInetAddressMask*")
  (parameters
    '("guint" "length")
    '("GError**" "error")
  )
)

(define-function g_inet_address_mask_new_from_string
  (c-name "g_inet_address_mask_new_from_string")
  (return-type "GInetAddressMask*")
  (parameters
    '("const-gchar*" "mask_string")
    '("GError**" "error")
  )
)

(define-method to_string
  (of-object "GInetAddressMask")
  (c-name "g_inet_address_mask_to_string")
  (return-type "gchar*")
)

(define-method get_family
  (of-object "GInetAddressMask")
  (c-name "g_inet_address_mask_get_family")
  (return-type "GSocketFamily")
)

(define-method get_address
  (of-object "GInetAddressMask")
  (c-name "g_inet_address_mask_get_address")
  (return-type "GInetAddress*")
)

(define-method get_length
  (of-object "GInetAddressMask")
  (c-name "g_inet_address_mask_get_length")
  (return-type "guint")
)

(define-method matches
  (of-object "GInetAddressMask")
  (c-name "g_inet_address_mask_matches")
  (return-type "gboolean")
  (parameters
    '("GInetAddress*" "address")
  )
)

(define-method equal
  (of-object "GInetAddressMask")
  (c-name "g_inet_address_mask_equal")
  (return-type "gboolean")
  (parameters
    '("GInetAddressMask*" "mask2")
  )
)



;; From ginetsocketaddress.h

(define-function g_inet_socket_address_get_type
  (c-name "g_inet_socket_address_get_type")
  (return-type "GType")
)

(define-function g_inet_socket_address_new
  (c-name "g_inet_socket_address_new")
  (is-constructor-of "GInetSocketAddress")
  (return-type "GSocketAddress*")
  (parameters
    '("GInetAddress*" "address")
    '("guint16" "port")
  )
)

(define-function g_inet_socket_address_new_from_string
  (c-name "g_inet_socket_address_new_from_string")
  (return-type "GSocketAddress*")
  (parameters
    '("const-char*" "address")
    '("guint" "port")
  )
)

(define-method get_address
  (of-object "GInetSocketAddress")
  (c-name "g_inet_socket_address_get_address")
  (return-type "GInetAddress*")
)

(define-method get_port
  (of-object "GInetSocketAddress")
  (c-name "g_inet_socket_address_get_port")
  (return-type "guint16")
)

(define-method get_flowinfo
  (of-object "GInetSocketAddress")
  (c-name "g_inet_socket_address_get_flowinfo")
  (return-type "guint32")
)

(define-method get_scope_id
  (of-object "GInetSocketAddress")
  (c-name "g_inet_socket_address_get_scope_id")
  (return-type "guint32")
)



;; From ginitable.h

(define-function g_initable_get_type
  (c-name "g_initable_get_type")
  (return-type "GType")
)

(define-method init
  (of-object "GInitable")
  (c-name "g_initable_init")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function g_initable_new
  (c-name "g_initable_new")
  (return-type "gpointer")
  (parameters
    '("GType" "object_type")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)

(define-function g_initable_newv
  (c-name "g_initable_newv")
  (return-type "gpointer")
  (parameters
    '("GType" "object_type")
    '("guint" "n_parameters")
    '("GParameter*" "parameters")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function g_initable_new_valist
  (c-name "g_initable_new_valist")
  (return-type "GObject*")
  (parameters
    '("GType" "object_type")
    '("const-gchar*" "first_property_name")
    '("va_list" "var_args")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From ginputstream.h

(define-function g_input_stream_get_type
  (c-name "g_input_stream_get_type")
  (return-type "GType")
)

(define-method read
  (of-object "GInputStream")
  (c-name "g_input_stream_read")
  (return-type "gssize")
  (parameters
    '("void*" "buffer")
    '("gsize" "count")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_all
  (of-object "GInputStream")
  (c-name "g_input_stream_read_all")
  (return-type "gboolean")
  (parameters
    '("void*" "buffer")
    '("gsize" "count")
    '("gsize*" "bytes_read")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_bytes
  (of-object "GInputStream")
  (c-name "g_input_stream_read_bytes")
  (return-type "GBytes*")
  (parameters
    '("gsize" "count")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method skip
  (of-object "GInputStream")
  (c-name "g_input_stream_skip")
  (return-type "gssize")
  (parameters
    '("gsize" "count")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method close
  (of-object "GInputStream")
  (c-name "g_input_stream_close")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method read_async
  (of-object "GInputStream")
  (c-name "g_input_stream_read_async")
  (return-type "none")
  (parameters
    '("void*" "buffer")
    '("gsize" "count")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method read_finish
  (of-object "GInputStream")
  (c-name "g_input_stream_read_finish")
  (return-type "gssize")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method read_all_async
  (of-object "GInputStream")
  (c-name "g_input_stream_read_all_async")
  (return-type "none")
  (parameters
    '("void*" "buffer")
    '("gsize" "count")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method read_all_finish
  (of-object "GInputStream")
  (c-name "g_input_stream_read_all_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("gsize*" "bytes_read")
    '("GError**" "error")
  )
)

(define-method read_bytes_async
  (of-object "GInputStream")
  (c-name "g_input_stream_read_bytes_async")
  (return-type "none")
  (parameters
    '("gsize" "count")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method read_bytes_finish
  (of-object "GInputStream")
  (c-name "g_input_stream_read_bytes_finish")
  (return-type "GBytes*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method skip_async
  (of-object "GInputStream")
  (c-name "g_input_stream_skip_async")
  (return-type "none")
  (parameters
    '("gsize" "count")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method skip_finish
  (of-object "GInputStream")
  (c-name "g_input_stream_skip_finish")
  (return-type "gssize")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method close_async
  (of-object "GInputStream")
  (c-name "g_input_stream_close_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method close_finish
  (of-object "GInputStream")
  (c-name "g_input_stream_close_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method is_closed
  (of-object "GInputStream")
  (c-name "g_input_stream_is_closed")
  (return-type "gboolean")
)

(define-method has_pending
  (of-object "GInputStream")
  (c-name "g_input_stream_has_pending")
  (return-type "gboolean")
)

(define-method set_pending
  (of-object "GInputStream")
  (c-name "g_input_stream_set_pending")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method clear_pending
  (of-object "GInputStream")
  (c-name "g_input_stream_clear_pending")
  (return-type "none")
)



;; From gio-autocleanups.h



;; From gioenums.h



;; From gioenumtypes.h

(define-function g_app_info_create_flags_get_type
  (c-name "g_app_info_create_flags_get_type")
  (return-type "GType")
)

(define-function g_converter_flags_get_type
  (c-name "g_converter_flags_get_type")
  (return-type "GType")
)

(define-function g_converter_result_get_type
  (c-name "g_converter_result_get_type")
  (return-type "GType")
)

(define-function g_data_stream_byte_order_get_type
  (c-name "g_data_stream_byte_order_get_type")
  (return-type "GType")
)

(define-function g_data_stream_newline_type_get_type
  (c-name "g_data_stream_newline_type_get_type")
  (return-type "GType")
)

(define-function g_file_attribute_type_get_type
  (c-name "g_file_attribute_type_get_type")
  (return-type "GType")
)

(define-function g_file_attribute_info_flags_get_type
  (c-name "g_file_attribute_info_flags_get_type")
  (return-type "GType")
)

(define-function g_file_attribute_status_get_type
  (c-name "g_file_attribute_status_get_type")
  (return-type "GType")
)

(define-function g_file_query_info_flags_get_type
  (c-name "g_file_query_info_flags_get_type")
  (return-type "GType")
)

(define-function g_file_create_flags_get_type
  (c-name "g_file_create_flags_get_type")
  (return-type "GType")
)

(define-function g_file_measure_flags_get_type
  (c-name "g_file_measure_flags_get_type")
  (return-type "GType")
)

(define-function g_mount_mount_flags_get_type
  (c-name "g_mount_mount_flags_get_type")
  (return-type "GType")
)

(define-function g_mount_unmount_flags_get_type
  (c-name "g_mount_unmount_flags_get_type")
  (return-type "GType")
)

(define-function g_drive_start_flags_get_type
  (c-name "g_drive_start_flags_get_type")
  (return-type "GType")
)

(define-function g_drive_start_stop_type_get_type
  (c-name "g_drive_start_stop_type_get_type")
  (return-type "GType")
)

(define-function g_file_copy_flags_get_type
  (c-name "g_file_copy_flags_get_type")
  (return-type "GType")
)

(define-function g_file_monitor_flags_get_type
  (c-name "g_file_monitor_flags_get_type")
  (return-type "GType")
)

(define-function g_file_type_get_type
  (c-name "g_file_type_get_type")
  (return-type "GType")
)

(define-function g_filesystem_preview_type_get_type
  (c-name "g_filesystem_preview_type_get_type")
  (return-type "GType")
)

(define-function g_file_monitor_event_get_type
  (c-name "g_file_monitor_event_get_type")
  (return-type "GType")
)

(define-function g_io_error_enum_get_type
  (c-name "g_io_error_enum_get_type")
  (return-type "GType")
)

(define-function g_ask_password_flags_get_type
  (c-name "g_ask_password_flags_get_type")
  (return-type "GType")
)

(define-function g_password_save_get_type
  (c-name "g_password_save_get_type")
  (return-type "GType")
)

(define-function g_mount_operation_result_get_type
  (c-name "g_mount_operation_result_get_type")
  (return-type "GType")
)

(define-function g_output_stream_splice_flags_get_type
  (c-name "g_output_stream_splice_flags_get_type")
  (return-type "GType")
)

(define-function g_io_stream_splice_flags_get_type
  (c-name "g_io_stream_splice_flags_get_type")
  (return-type "GType")
)

(define-function g_emblem_origin_get_type
  (c-name "g_emblem_origin_get_type")
  (return-type "GType")
)

(define-function g_resolver_error_get_type
  (c-name "g_resolver_error_get_type")
  (return-type "GType")
)

(define-function g_resolver_record_type_get_type
  (c-name "g_resolver_record_type_get_type")
  (return-type "GType")
)

(define-function g_resource_error_get_type
  (c-name "g_resource_error_get_type")
  (return-type "GType")
)

(define-function g_resource_flags_get_type
  (c-name "g_resource_flags_get_type")
  (return-type "GType")
)

(define-function g_resource_lookup_flags_get_type
  (c-name "g_resource_lookup_flags_get_type")
  (return-type "GType")
)

(define-function g_socket_family_get_type
  (c-name "g_socket_family_get_type")
  (return-type "GType")
)

(define-function g_socket_type_get_type
  (c-name "g_socket_type_get_type")
  (return-type "GType")
)

(define-function g_socket_msg_flags_get_type
  (c-name "g_socket_msg_flags_get_type")
  (return-type "GType")
)

(define-function g_socket_protocol_get_type
  (c-name "g_socket_protocol_get_type")
  (return-type "GType")
)

(define-function g_zlib_compressor_format_get_type
  (c-name "g_zlib_compressor_format_get_type")
  (return-type "GType")
)

(define-function g_unix_socket_address_type_get_type
  (c-name "g_unix_socket_address_type_get_type")
  (return-type "GType")
)

(define-function g_bus_type_get_type
  (c-name "g_bus_type_get_type")
  (return-type "GType")
)

(define-function g_bus_name_owner_flags_get_type
  (c-name "g_bus_name_owner_flags_get_type")
  (return-type "GType")
)

(define-function g_bus_name_watcher_flags_get_type
  (c-name "g_bus_name_watcher_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_proxy_flags_get_type
  (c-name "g_dbus_proxy_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_error_get_type
  (c-name "g_dbus_error_get_type")
  (return-type "GType")
)

(define-function g_dbus_connection_flags_get_type
  (c-name "g_dbus_connection_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_capability_flags_get_type
  (c-name "g_dbus_capability_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_call_flags_get_type
  (c-name "g_dbus_call_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_message_type_get_type
  (c-name "g_dbus_message_type_get_type")
  (return-type "GType")
)

(define-function g_dbus_message_flags_get_type
  (c-name "g_dbus_message_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_message_header_field_get_type
  (c-name "g_dbus_message_header_field_get_type")
  (return-type "GType")
)

(define-function g_dbus_property_info_flags_get_type
  (c-name "g_dbus_property_info_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_subtree_flags_get_type
  (c-name "g_dbus_subtree_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_server_flags_get_type
  (c-name "g_dbus_server_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_signal_flags_get_type
  (c-name "g_dbus_signal_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_send_message_flags_get_type
  (c-name "g_dbus_send_message_flags_get_type")
  (return-type "GType")
)

(define-function g_credentials_type_get_type
  (c-name "g_credentials_type_get_type")
  (return-type "GType")
)

(define-function g_dbus_message_byte_order_get_type
  (c-name "g_dbus_message_byte_order_get_type")
  (return-type "GType")
)

(define-function g_application_flags_get_type
  (c-name "g_application_flags_get_type")
  (return-type "GType")
)

(define-function g_tls_error_get_type
  (c-name "g_tls_error_get_type")
  (return-type "GType")
)

(define-function g_tls_certificate_flags_get_type
  (c-name "g_tls_certificate_flags_get_type")
  (return-type "GType")
)

(define-function g_tls_authentication_mode_get_type
  (c-name "g_tls_authentication_mode_get_type")
  (return-type "GType")
)

(define-function g_tls_rehandshake_mode_get_type
  (c-name "g_tls_rehandshake_mode_get_type")
  (return-type "GType")
)

(define-function g_tls_password_flags_get_type
  (c-name "g_tls_password_flags_get_type")
  (return-type "GType")
)

(define-function g_tls_interaction_result_get_type
  (c-name "g_tls_interaction_result_get_type")
  (return-type "GType")
)

(define-function g_dbus_interface_skeleton_flags_get_type
  (c-name "g_dbus_interface_skeleton_flags_get_type")
  (return-type "GType")
)

(define-function g_dbus_object_manager_client_flags_get_type
  (c-name "g_dbus_object_manager_client_flags_get_type")
  (return-type "GType")
)

(define-function g_tls_database_verify_flags_get_type
  (c-name "g_tls_database_verify_flags_get_type")
  (return-type "GType")
)

(define-function g_tls_database_lookup_flags_get_type
  (c-name "g_tls_database_lookup_flags_get_type")
  (return-type "GType")
)

(define-function g_tls_certificate_request_flags_get_type
  (c-name "g_tls_certificate_request_flags_get_type")
  (return-type "GType")
)

(define-function g_io_module_scope_flags_get_type
  (c-name "g_io_module_scope_flags_get_type")
  (return-type "GType")
)

(define-function g_socket_client_event_get_type
  (c-name "g_socket_client_event_get_type")
  (return-type "GType")
)

(define-function g_socket_listener_event_get_type
  (c-name "g_socket_listener_event_get_type")
  (return-type "GType")
)

(define-function g_test_dbus_flags_get_type
  (c-name "g_test_dbus_flags_get_type")
  (return-type "GType")
)

(define-function g_subprocess_flags_get_type
  (c-name "g_subprocess_flags_get_type")
  (return-type "GType")
)

(define-function g_notification_priority_get_type
  (c-name "g_notification_priority_get_type")
  (return-type "GType")
)

(define-function g_network_connectivity_get_type
  (c-name "g_network_connectivity_get_type")
  (return-type "GType")
)

(define-function g_settings_bind_flags_get_type
  (c-name "g_settings_bind_flags_get_type")
  (return-type "GType")
)



;; From gioerror.h

(define-function g_io_error_quark
  (c-name "g_io_error_quark")
  (return-type "GQuark")
)

(define-function g_io_error_from_errno
  (c-name "g_io_error_from_errno")
  (return-type "GIOErrorEnum")
  (parameters
    '("gint" "err_no")
  )
)

(define-function g_io_error_from_win32_error
  (c-name "g_io_error_from_win32_error")
  (return-type "GIOErrorEnum")
  (parameters
    '("gint" "error_code")
  )
)



;; From gio.h



;; From giomodule.h

(define-function g_io_module_scope_new
  (c-name "g_io_module_scope_new")
  (is-constructor-of "GIoModuleScope")
  (return-type "GIOModuleScope*")
  (parameters
    '("GIOModuleScopeFlags" "flags")
  )
)

(define-method free
  (of-object "GIOModuleScope")
  (c-name "g_io_module_scope_free")
  (return-type "none")
)

(define-method block
  (of-object "GIOModuleScope")
  (c-name "g_io_module_scope_block")
  (return-type "none")
  (parameters
    '("const-gchar*" "basename")
  )
)

(define-function g_io_module_get_type
  (c-name "g_io_module_get_type")
  (return-type "GType")
)

(define-function g_io_module_new
  (c-name "g_io_module_new")
  (is-constructor-of "GIoModule")
  (return-type "GIOModule*")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-function g_io_modules_scan_all_in_directory
  (c-name "g_io_modules_scan_all_in_directory")
  (return-type "none")
  (parameters
    '("const-char*" "dirname")
  )
)

(define-function g_io_modules_load_all_in_directory
  (c-name "g_io_modules_load_all_in_directory")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "dirname")
  )
)

(define-function g_io_modules_scan_all_in_directory_with_scope
  (c-name "g_io_modules_scan_all_in_directory_with_scope")
  (return-type "none")
  (parameters
    '("const-gchar*" "dirname")
    '("GIOModuleScope*" "scope")
  )
)

(define-function g_io_modules_load_all_in_directory_with_scope
  (c-name "g_io_modules_load_all_in_directory_with_scope")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "dirname")
    '("GIOModuleScope*" "scope")
  )
)

(define-function g_io_extension_point_register
  (c-name "g_io_extension_point_register")
  (return-type "GIOExtensionPoint*")
  (parameters
    '("const-char*" "name")
  )
)

(define-function g_io_extension_point_lookup
  (c-name "g_io_extension_point_lookup")
  (return-type "GIOExtensionPoint*")
  (parameters
    '("const-char*" "name")
  )
)

(define-method set_required_type
  (of-object "GIOExtensionPoint")
  (c-name "g_io_extension_point_set_required_type")
  (return-type "none")
  (parameters
    '("GType" "type")
  )
)

(define-method get_required_type
  (of-object "GIOExtensionPoint")
  (c-name "g_io_extension_point_get_required_type")
  (return-type "GType")
)

(define-method get_extensions
  (of-object "GIOExtensionPoint")
  (c-name "g_io_extension_point_get_extensions")
  (return-type "GList*")
)

(define-method get_extension_by_name
  (of-object "GIOExtensionPoint")
  (c-name "g_io_extension_point_get_extension_by_name")
  (return-type "GIOExtension*")
  (parameters
    '("const-char*" "name")
  )
)

(define-function g_io_extension_point_implement
  (c-name "g_io_extension_point_implement")
  (return-type "GIOExtension*")
  (parameters
    '("const-char*" "extension_point_name")
    '("GType" "type")
    '("const-char*" "extension_name")
    '("gint" "priority")
  )
)

(define-method get_type
  (of-object "GIOExtension")
  (c-name "g_io_extension_get_type")
  (return-type "GType")
)

(define-method get_name
  (of-object "GIOExtension")
  (c-name "g_io_extension_get_name")
  (return-type "const-char*")
)

(define-method get_priority
  (of-object "GIOExtension")
  (c-name "g_io_extension_get_priority")
  (return-type "gint")
)

(define-method ref_class
  (of-object "GIOExtension")
  (c-name "g_io_extension_ref_class")
  (return-type "GTypeClass*")
)

(define-method load
  (of-object "GIOModule")
  (c-name "g_io_module_load")
  (return-type "none")
)

(define-method unload
  (of-object "GIOModule")
  (c-name "g_io_module_unload")
  (return-type "none")
)

(define-function g_io_module_query
  (c-name "g_io_module_query")
  (return-type "char**")
)



;; From giomodule-priv.h



;; From gioscheduler.h

(define-function g_io_scheduler_push_job
  (c-name "g_io_scheduler_push_job")
  (return-type "none")
  (parameters
    '("GIOSchedulerJobFunc" "job_func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
    '("gint" "io_priority")
    '("GCancellable*" "cancellable")
  )
)

(define-function g_io_scheduler_cancel_all_jobs
  (c-name "g_io_scheduler_cancel_all_jobs")
  (return-type "none")
)

(define-method send_to_mainloop
  (of-object "GIOSchedulerJob")
  (c-name "g_io_scheduler_job_send_to_mainloop")
  (return-type "gboolean")
  (parameters
    '("GSourceFunc" "func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method send_to_mainloop_async
  (of-object "GIOSchedulerJob")
  (c-name "g_io_scheduler_job_send_to_mainloop_async")
  (return-type "none")
  (parameters
    '("GSourceFunc" "func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)



;; From giostream.h

(define-function g_io_stream_get_type
  (c-name "g_io_stream_get_type")
  (return-type "GType")
)

(define-method get_input_stream
  (of-object "GIOStream")
  (c-name "g_io_stream_get_input_stream")
  (return-type "GInputStream*")
)

(define-method get_output_stream
  (of-object "GIOStream")
  (c-name "g_io_stream_get_output_stream")
  (return-type "GOutputStream*")
)

(define-method splice_async
  (of-object "GIOStream")
  (c-name "g_io_stream_splice_async")
  (return-type "none")
  (parameters
    '("GIOStream*" "stream2")
    '("GIOStreamSpliceFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_io_stream_splice_finish
  (c-name "g_io_stream_splice_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method close
  (of-object "GIOStream")
  (c-name "g_io_stream_close")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method close_async
  (of-object "GIOStream")
  (c-name "g_io_stream_close_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method close_finish
  (of-object "GIOStream")
  (c-name "g_io_stream_close_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method is_closed
  (of-object "GIOStream")
  (c-name "g_io_stream_is_closed")
  (return-type "gboolean")
)

(define-method has_pending
  (of-object "GIOStream")
  (c-name "g_io_stream_has_pending")
  (return-type "gboolean")
)

(define-method set_pending
  (of-object "GIOStream")
  (c-name "g_io_stream_set_pending")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method clear_pending
  (of-object "GIOStream")
  (c-name "g_io_stream_clear_pending")
  (return-type "none")
)



;; From gio-tool.h

(define-function print_error
  (c-name "print_error")
  (return-type "none")
  (parameters
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-function print_file_error
  (c-name "print_file_error")
  (return-type "none")
  (parameters
    '("GFile*" "file")
    '("const-gchar*" "message")
  )
)

(define-function show_help
  (c-name "show_help")
  (return-type "none")
  (parameters
    '("GOptionContext*" "context")
    '("const-char*" "message")
  )
)

(define-function file_type_to_string
  (c-name "file_type_to_string")
  (return-type "const-char*")
  (parameters
    '("GFileType" "type")
  )
)

(define-function attribute_type_to_string
  (c-name "attribute_type_to_string")
  (return-type "const-char*")
  (parameters
    '("GFileAttributeType" "type")
  )
)

(define-function attribute_type_from_string
  (c-name "attribute_type_from_string")
  (return-type "GFileAttributeType")
  (parameters
    '("const-char*" "str")
  )
)

(define-function attribute_flags_to_string
  (c-name "attribute_flags_to_string")
  (return-type "char*")
  (parameters
    '("GFileAttributeInfoFlags" "flags")
  )
)

(define-function file_is_dir
  (c-name "file_is_dir")
  (return-type "gboolean")
  (parameters
    '("GFile*" "file")
  )
)

(define-function handle_cat
  (c-name "handle_cat")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_copy
  (c-name "handle_copy")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_info
  (c-name "handle_info")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_list
  (c-name "handle_list")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_mime
  (c-name "handle_mime")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_mkdir
  (c-name "handle_mkdir")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_monitor
  (c-name "handle_monitor")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_mount
  (c-name "handle_mount")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_move
  (c-name "handle_move")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_open
  (c-name "handle_open")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_rename
  (c-name "handle_rename")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_remove
  (c-name "handle_remove")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_save
  (c-name "handle_save")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_set
  (c-name "handle_set")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_trash
  (c-name "handle_trash")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)

(define-function handle_tree
  (c-name "handle_tree")
  (return-type "int")
  (parameters
    '("int" "argc")
    '("char*[]" "argv")
    '("gboolean" "do_help")
  )
)



;; From gio_trace.h



;; From giotypes.h



;; From giowin32-priv.h

(define-function g_win32_output_stream_new_from_fd
  (c-name "g_win32_output_stream_new_from_fd")
  (return-type "GOutputStream*")
  (parameters
    '("gint" "fd")
    '("gboolean" "close_fd")
  )
)



;; From glistmodel.h

(define-method get_item_type
  (of-object "GListModel")
  (c-name "g_list_model_get_item_type")
  (return-type "GType")
)

(define-method get_n_items
  (of-object "GListModel")
  (c-name "g_list_model_get_n_items")
  (return-type "guint")
)

(define-method get_item
  (of-object "GListModel")
  (c-name "g_list_model_get_item")
  (return-type "gpointer")
  (parameters
    '("guint" "position")
  )
)

(define-method get_object
  (of-object "GListModel")
  (c-name "g_list_model_get_object")
  (return-type "GObject*")
  (parameters
    '("guint" "position")
  )
)

(define-method items_changed
  (of-object "GListModel")
  (c-name "g_list_model_items_changed")
  (return-type "none")
  (parameters
    '("guint" "position")
    '("guint" "removed")
    '("guint" "added")
  )
)



;; From gliststore.h

(define-function g_list_store_new
  (c-name "g_list_store_new")
  (is-constructor-of "GListStore")
  (return-type "GListStore*")
  (parameters
    '("GType" "item_type")
  )
)

(define-method insert
  (of-object "GListStore")
  (c-name "g_list_store_insert")
  (return-type "none")
  (parameters
    '("guint" "position")
    '("gpointer" "item")
  )
)

(define-method insert_sorted
  (of-object "GListStore")
  (c-name "g_list_store_insert_sorted")
  (return-type "guint")
  (parameters
    '("gpointer" "item")
    '("GCompareDataFunc" "compare_func")
    '("gpointer" "user_data")
  )
)

(define-method sort
  (of-object "GListStore")
  (c-name "g_list_store_sort")
  (return-type "none")
  (parameters
    '("GCompareDataFunc" "compare_func")
    '("gpointer" "user_data")
  )
)

(define-method append
  (of-object "GListStore")
  (c-name "g_list_store_append")
  (return-type "none")
  (parameters
    '("gpointer" "item")
  )
)

(define-method remove
  (of-object "GListStore")
  (c-name "g_list_store_remove")
  (return-type "none")
  (parameters
    '("guint" "position")
  )
)

(define-method remove_all
  (of-object "GListStore")
  (c-name "g_list_store_remove_all")
  (return-type "none")
)

(define-method splice
  (of-object "GListStore")
  (c-name "g_list_store_splice")
  (return-type "none")
  (parameters
    '("guint" "position")
    '("guint" "n_removals")
    '("gpointer*" "additions")
    '("guint" "n_additions")
  )
)



;; From gloadableicon.h

(define-function g_loadable_icon_get_type
  (c-name "g_loadable_icon_get_type")
  (return-type "GType")
)

(define-method load
  (of-object "GLoadableIcon")
  (c-name "g_loadable_icon_load")
  (return-type "GInputStream*")
  (parameters
    '("int" "size")
    '("char**" "type")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method load_async
  (of-object "GLoadableIcon")
  (c-name "g_loadable_icon_load_async")
  (return-type "none")
  (parameters
    '("int" "size")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method load_finish
  (of-object "GLoadableIcon")
  (c-name "g_loadable_icon_load_finish")
  (return-type "GInputStream*")
  (parameters
    '("GAsyncResult*" "res")
    '("char**" "type")
    '("GError**" "error")
  )
)



;; From glocalfileenumerator.h



;; From glocalfile.h

(define-function g_local_file_is_remote
  (c-name "g_local_file_is_remote")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-function g_local_file_new_from_dirname_and_basename
  (c-name "g_local_file_new_from_dirname_and_basename")
  (return-type "GFile*")
  (parameters
    '("const-char*" "dirname")
    '("const-char*" "basename")
  )
)



;; From glocalfileinfo.h



;; From glocalfileinputstream.h



;; From glocalfileiostream.h



;; From glocalfilemonitor.h

(define-function g_local_file_monitor_get_type
  (c-name "g_local_file_monitor_get_type")
  (return-type "GType")
)

(define-function g_local_file_monitor_new_for_path
  (c-name "g_local_file_monitor_new_for_path")
  (return-type "GFileMonitor*")
  (parameters
    '("const-gchar*" "pathname")
    '("gboolean" "is_directory")
    '("GFileMonitorFlags" "flags")
    '("GError**" "error")
  )
)

(define-function g_local_file_monitor_new_in_worker
  (c-name "g_local_file_monitor_new_in_worker")
  (return-type "GFileMonitor*")
  (parameters
    '("const-gchar*" "pathname")
    '("gboolean" "is_directory")
    '("GFileMonitorFlags" "flags")
    '("GFileMonitorCallback" "callback")
    '("gpointer" "user_data")
    '("GError**" "error")
  )
)

(define-method handle_event
  (of-object "GFileMonitorSource")
  (c-name "g_file_monitor_source_handle_event")
  (return-type "gboolean")
  (parameters
    '("GFileMonitorEvent" "event_type")
    '("const-gchar*" "child")
    '("const-gchar*" "rename_to")
    '("GFile*" "other")
    '("gint64" "event_time")
  )
)



;; From glocalfileoutputstream.h



;; From glocalvfs.h



;; From gmemoryinputstream.h

(define-function g_memory_input_stream_get_type
  (c-name "g_memory_input_stream_get_type")
  (return-type "GType")
)

(define-function g_memory_input_stream_new
  (c-name "g_memory_input_stream_new")
  (is-constructor-of "GMemoryInputStream")
  (return-type "GInputStream*")
)

(define-function g_memory_input_stream_new_from_data
  (c-name "g_memory_input_stream_new_from_data")
  (return-type "GInputStream*")
  (parameters
    '("const-void*" "data")
    '("gssize" "len")
    '("GDestroyNotify" "destroy")
  )
)

(define-function g_memory_input_stream_new_from_bytes
  (c-name "g_memory_input_stream_new_from_bytes")
  (return-type "GInputStream*")
  (parameters
    '("GBytes*" "bytes")
  )
)

(define-method add_data
  (of-object "GMemoryInputStream")
  (c-name "g_memory_input_stream_add_data")
  (return-type "none")
  (parameters
    '("const-void*" "data")
    '("gssize" "len")
    '("GDestroyNotify" "destroy")
  )
)

(define-method add_bytes
  (of-object "GMemoryInputStream")
  (c-name "g_memory_input_stream_add_bytes")
  (return-type "none")
  (parameters
    '("GBytes*" "bytes")
  )
)



;; From gmemoryoutputstream.h

(define-function g_memory_output_stream_get_type
  (c-name "g_memory_output_stream_get_type")
  (return-type "GType")
)

(define-function g_memory_output_stream_new
  (c-name "g_memory_output_stream_new")
  (is-constructor-of "GMemoryOutputStream")
  (return-type "GOutputStream*")
  (parameters
    '("gpointer" "data")
    '("gsize" "size")
    '("GReallocFunc" "realloc_function")
    '("GDestroyNotify" "destroy_function")
  )
)

(define-function g_memory_output_stream_new_resizable
  (c-name "g_memory_output_stream_new_resizable")
  (return-type "GOutputStream*")
)

(define-method get_data
  (of-object "GMemoryOutputStream")
  (c-name "g_memory_output_stream_get_data")
  (return-type "gpointer")
)

(define-method get_size
  (of-object "GMemoryOutputStream")
  (c-name "g_memory_output_stream_get_size")
  (return-type "gsize")
)

(define-method get_data_size
  (of-object "GMemoryOutputStream")
  (c-name "g_memory_output_stream_get_data_size")
  (return-type "gsize")
)

(define-method steal_data
  (of-object "GMemoryOutputStream")
  (c-name "g_memory_output_stream_steal_data")
  (return-type "gpointer")
)

(define-method steal_as_bytes
  (of-object "GMemoryOutputStream")
  (c-name "g_memory_output_stream_steal_as_bytes")
  (return-type "GBytes*")
)



;; From gmenuexporter.h

(define-method export_menu_model
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_export_menu_model")
  (return-type "guint")
  (parameters
    '("const-gchar*" "object_path")
    '("GMenuModel*" "menu")
    '("GError**" "error")
  )
)

(define-method unexport_menu_model
  (of-object "GDBusConnection")
  (c-name "g_dbus_connection_unexport_menu_model")
  (return-type "none")
  (parameters
    '("guint" "export_id")
  )
)



;; From gmenu.h

(define-function g_menu_get_type
  (c-name "g_menu_get_type")
  (return-type "GType")
)

(define-function g_menu_new
  (c-name "g_menu_new")
  (is-constructor-of "GMenu")
  (return-type "GMenu*")
)

(define-method freeze
  (of-object "GMenu")
  (c-name "g_menu_freeze")
  (return-type "none")
)

(define-method insert_item
  (of-object "GMenu")
  (c-name "g_menu_insert_item")
  (return-type "none")
  (parameters
    '("gint" "position")
    '("GMenuItem*" "item")
  )
)

(define-method prepend_item
  (of-object "GMenu")
  (c-name "g_menu_prepend_item")
  (return-type "none")
  (parameters
    '("GMenuItem*" "item")
  )
)

(define-method append_item
  (of-object "GMenu")
  (c-name "g_menu_append_item")
  (return-type "none")
  (parameters
    '("GMenuItem*" "item")
  )
)

(define-method remove
  (of-object "GMenu")
  (c-name "g_menu_remove")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method remove_all
  (of-object "GMenu")
  (c-name "g_menu_remove_all")
  (return-type "none")
)

(define-method insert
  (of-object "GMenu")
  (c-name "g_menu_insert")
  (return-type "none")
  (parameters
    '("gint" "position")
    '("const-gchar*" "label")
    '("const-gchar*" "detailed_action")
  )
)

(define-method prepend
  (of-object "GMenu")
  (c-name "g_menu_prepend")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
    '("const-gchar*" "detailed_action")
  )
)

(define-method append
  (of-object "GMenu")
  (c-name "g_menu_append")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
    '("const-gchar*" "detailed_action")
  )
)

(define-method insert_section
  (of-object "GMenu")
  (c-name "g_menu_insert_section")
  (return-type "none")
  (parameters
    '("gint" "position")
    '("const-gchar*" "label")
    '("GMenuModel*" "section")
  )
)

(define-method prepend_section
  (of-object "GMenu")
  (c-name "g_menu_prepend_section")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
    '("GMenuModel*" "section")
  )
)

(define-method append_section
  (of-object "GMenu")
  (c-name "g_menu_append_section")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
    '("GMenuModel*" "section")
  )
)

(define-method insert_submenu
  (of-object "GMenu")
  (c-name "g_menu_insert_submenu")
  (return-type "none")
  (parameters
    '("gint" "position")
    '("const-gchar*" "label")
    '("GMenuModel*" "submenu")
  )
)

(define-method prepend_submenu
  (of-object "GMenu")
  (c-name "g_menu_prepend_submenu")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
    '("GMenuModel*" "submenu")
  )
)

(define-method append_submenu
  (of-object "GMenu")
  (c-name "g_menu_append_submenu")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
    '("GMenuModel*" "submenu")
  )
)

(define-function g_menu_item_get_type
  (c-name "g_menu_item_get_type")
  (return-type "GType")
)

(define-function g_menu_item_new
  (c-name "g_menu_item_new")
  (is-constructor-of "GMenuItem")
  (return-type "GMenuItem*")
  (parameters
    '("const-gchar*" "label")
    '("const-gchar*" "detailed_action")
  )
)

(define-function g_menu_item_new_from_model
  (c-name "g_menu_item_new_from_model")
  (return-type "GMenuItem*")
  (parameters
    '("GMenuModel*" "model")
    '("gint" "item_index")
  )
)

(define-function g_menu_item_new_submenu
  (c-name "g_menu_item_new_submenu")
  (return-type "GMenuItem*")
  (parameters
    '("const-gchar*" "label")
    '("GMenuModel*" "submenu")
  )
)

(define-function g_menu_item_new_section
  (c-name "g_menu_item_new_section")
  (return-type "GMenuItem*")
  (parameters
    '("const-gchar*" "label")
    '("GMenuModel*" "section")
  )
)

(define-method get_attribute_value
  (of-object "GMenuItem")
  (c-name "g_menu_item_get_attribute_value")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "attribute")
    '("const-GVariantType*" "expected_type")
  )
)

(define-method get_attribute
  (of-object "GMenuItem")
  (c-name "g_menu_item_get_attribute")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "attribute")
    '("const-gchar*" "format_string")
  )
  (varargs #t)
)

(define-method get_link
  (of-object "GMenuItem")
  (c-name "g_menu_item_get_link")
  (return-type "GMenuModel*")
  (parameters
    '("const-gchar*" "link")
  )
)

(define-method set_attribute_value
  (of-object "GMenuItem")
  (c-name "g_menu_item_set_attribute_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "attribute")
    '("GVariant*" "value")
  )
)

(define-method set_attribute
  (of-object "GMenuItem")
  (c-name "g_menu_item_set_attribute")
  (return-type "none")
  (parameters
    '("const-gchar*" "attribute")
    '("const-gchar*" "format_string")
  )
  (varargs #t)
)

(define-method set_link
  (of-object "GMenuItem")
  (c-name "g_menu_item_set_link")
  (return-type "none")
  (parameters
    '("const-gchar*" "link")
    '("GMenuModel*" "model")
  )
)

(define-method set_label
  (of-object "GMenuItem")
  (c-name "g_menu_item_set_label")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
  )
)

(define-method set_submenu
  (of-object "GMenuItem")
  (c-name "g_menu_item_set_submenu")
  (return-type "none")
  (parameters
    '("GMenuModel*" "submenu")
  )
)

(define-method set_section
  (of-object "GMenuItem")
  (c-name "g_menu_item_set_section")
  (return-type "none")
  (parameters
    '("GMenuModel*" "section")
  )
)

(define-method set_action_and_target_value
  (of-object "GMenuItem")
  (c-name "g_menu_item_set_action_and_target_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "action")
    '("GVariant*" "target_value")
  )
)

(define-method set_action_and_target
  (of-object "GMenuItem")
  (c-name "g_menu_item_set_action_and_target")
  (return-type "none")
  (parameters
    '("const-gchar*" "action")
    '("const-gchar*" "format_string")
  )
  (varargs #t)
)

(define-method set_detailed_action
  (of-object "GMenuItem")
  (c-name "g_menu_item_set_detailed_action")
  (return-type "none")
  (parameters
    '("const-gchar*" "detailed_action")
  )
)

(define-method set_icon
  (of-object "GMenuItem")
  (c-name "g_menu_item_set_icon")
  (return-type "none")
  (parameters
    '("GIcon*" "icon")
  )
)



;; From gmenumodel.h

(define-function g_menu_model_get_type
  (c-name "g_menu_model_get_type")
  (return-type "GType")
)

(define-method is_mutable
  (of-object "GMenuModel")
  (c-name "g_menu_model_is_mutable")
  (return-type "gboolean")
)

(define-method get_n_items
  (of-object "GMenuModel")
  (c-name "g_menu_model_get_n_items")
  (return-type "gint")
)

(define-method iterate_item_attributes
  (of-object "GMenuModel")
  (c-name "g_menu_model_iterate_item_attributes")
  (return-type "GMenuAttributeIter*")
  (parameters
    '("gint" "item_index")
  )
)

(define-method get_item_attribute_value
  (of-object "GMenuModel")
  (c-name "g_menu_model_get_item_attribute_value")
  (return-type "GVariant*")
  (parameters
    '("gint" "item_index")
    '("const-gchar*" "attribute")
    '("const-GVariantType*" "expected_type")
  )
)

(define-method get_item_attribute
  (of-object "GMenuModel")
  (c-name "g_menu_model_get_item_attribute")
  (return-type "gboolean")
  (parameters
    '("gint" "item_index")
    '("const-gchar*" "attribute")
    '("const-gchar*" "format_string")
  )
  (varargs #t)
)

(define-method iterate_item_links
  (of-object "GMenuModel")
  (c-name "g_menu_model_iterate_item_links")
  (return-type "GMenuLinkIter*")
  (parameters
    '("gint" "item_index")
  )
)

(define-method get_item_link
  (of-object "GMenuModel")
  (c-name "g_menu_model_get_item_link")
  (return-type "GMenuModel*")
  (parameters
    '("gint" "item_index")
    '("const-gchar*" "link")
  )
)

(define-method items_changed
  (of-object "GMenuModel")
  (c-name "g_menu_model_items_changed")
  (return-type "none")
  (parameters
    '("gint" "position")
    '("gint" "removed")
    '("gint" "added")
  )
)

(define-function g_menu_attribute_iter_get_type
  (c-name "g_menu_attribute_iter_get_type")
  (return-type "GType")
)

(define-method get_next
  (of-object "GMenuAttributeIter")
  (c-name "g_menu_attribute_iter_get_next")
  (return-type "gboolean")
  (parameters
    '("const-gchar**" "out_name")
    '("GVariant**" "value")
  )
)

(define-method next
  (of-object "GMenuAttributeIter")
  (c-name "g_menu_attribute_iter_next")
  (return-type "gboolean")
)

(define-method get_name
  (of-object "GMenuAttributeIter")
  (c-name "g_menu_attribute_iter_get_name")
  (return-type "const-gchar*")
)

(define-method get_value
  (of-object "GMenuAttributeIter")
  (c-name "g_menu_attribute_iter_get_value")
  (return-type "GVariant*")
)

(define-function g_menu_link_iter_get_type
  (c-name "g_menu_link_iter_get_type")
  (return-type "GType")
)

(define-method get_next
  (of-object "GMenuLinkIter")
  (c-name "g_menu_link_iter_get_next")
  (return-type "gboolean")
  (parameters
    '("const-gchar**" "out_link")
    '("GMenuModel**" "value")
  )
)

(define-method next
  (of-object "GMenuLinkIter")
  (c-name "g_menu_link_iter_next")
  (return-type "gboolean")
)

(define-method get_name
  (of-object "GMenuLinkIter")
  (c-name "g_menu_link_iter_get_name")
  (return-type "const-gchar*")
)

(define-method get_value
  (of-object "GMenuLinkIter")
  (c-name "g_menu_link_iter_get_value")
  (return-type "GMenuModel*")
)



;; From gmount.h

(define-function g_mount_get_type
  (c-name "g_mount_get_type")
  (return-type "GType")
)

(define-method get_root
  (of-object "GMount")
  (c-name "g_mount_get_root")
  (return-type "GFile*")
)

(define-method get_default_location
  (of-object "GMount")
  (c-name "g_mount_get_default_location")
  (return-type "GFile*")
)

(define-method get_name
  (of-object "GMount")
  (c-name "g_mount_get_name")
  (return-type "char*")
)

(define-method get_icon
  (of-object "GMount")
  (c-name "g_mount_get_icon")
  (return-type "GIcon*")
)

(define-method get_symbolic_icon
  (of-object "GMount")
  (c-name "g_mount_get_symbolic_icon")
  (return-type "GIcon*")
)

(define-method get_uuid
  (of-object "GMount")
  (c-name "g_mount_get_uuid")
  (return-type "char*")
)

(define-method get_volume
  (of-object "GMount")
  (c-name "g_mount_get_volume")
  (return-type "GVolume*")
)

(define-method get_drive
  (of-object "GMount")
  (c-name "g_mount_get_drive")
  (return-type "GDrive*")
)

(define-method can_unmount
  (of-object "GMount")
  (c-name "g_mount_can_unmount")
  (return-type "gboolean")
)

(define-method can_eject
  (of-object "GMount")
  (c-name "g_mount_can_eject")
  (return-type "gboolean")
)

(define-method unmount
  (of-object "GMount")
  (c-name "g_mount_unmount")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method unmount_finish
  (of-object "GMount")
  (c-name "g_mount_unmount_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method eject
  (of-object "GMount")
  (c-name "g_mount_eject")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method eject_finish
  (of-object "GMount")
  (c-name "g_mount_eject_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method remount
  (of-object "GMount")
  (c-name "g_mount_remount")
  (return-type "none")
  (parameters
    '("GMountMountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method remount_finish
  (of-object "GMount")
  (c-name "g_mount_remount_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method guess_content_type
  (of-object "GMount")
  (c-name "g_mount_guess_content_type")
  (return-type "none")
  (parameters
    '("gboolean" "force_rescan")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method guess_content_type_finish
  (of-object "GMount")
  (c-name "g_mount_guess_content_type_finish")
  (return-type "gchar**")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method guess_content_type_sync
  (of-object "GMount")
  (c-name "g_mount_guess_content_type_sync")
  (return-type "gchar**")
  (parameters
    '("gboolean" "force_rescan")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method is_shadowed
  (of-object "GMount")
  (c-name "g_mount_is_shadowed")
  (return-type "gboolean")
)

(define-method shadow
  (of-object "GMount")
  (c-name "g_mount_shadow")
  (return-type "none")
)

(define-method unshadow
  (of-object "GMount")
  (c-name "g_mount_unshadow")
  (return-type "none")
)

(define-method unmount_with_operation
  (of-object "GMount")
  (c-name "g_mount_unmount_with_operation")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method unmount_with_operation_finish
  (of-object "GMount")
  (c-name "g_mount_unmount_with_operation_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method eject_with_operation
  (of-object "GMount")
  (c-name "g_mount_eject_with_operation")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method eject_with_operation_finish
  (of-object "GMount")
  (c-name "g_mount_eject_with_operation_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method get_sort_key
  (of-object "GMount")
  (c-name "g_mount_get_sort_key")
  (return-type "const-gchar*")
)



;; From gmountoperation.h

(define-function g_mount_operation_get_type
  (c-name "g_mount_operation_get_type")
  (return-type "GType")
)

(define-function g_mount_operation_new
  (c-name "g_mount_operation_new")
  (is-constructor-of "GMountOperation")
  (return-type "GMountOperation*")
)

(define-method get_username
  (of-object "GMountOperation")
  (c-name "g_mount_operation_get_username")
  (return-type "const-char*")
)

(define-method set_username
  (of-object "GMountOperation")
  (c-name "g_mount_operation_set_username")
  (return-type "none")
  (parameters
    '("const-char*" "username")
  )
)

(define-method get_password
  (of-object "GMountOperation")
  (c-name "g_mount_operation_get_password")
  (return-type "const-char*")
)

(define-method set_password
  (of-object "GMountOperation")
  (c-name "g_mount_operation_set_password")
  (return-type "none")
  (parameters
    '("const-char*" "password")
  )
)

(define-method get_anonymous
  (of-object "GMountOperation")
  (c-name "g_mount_operation_get_anonymous")
  (return-type "gboolean")
)

(define-method set_anonymous
  (of-object "GMountOperation")
  (c-name "g_mount_operation_set_anonymous")
  (return-type "none")
  (parameters
    '("gboolean" "anonymous")
  )
)

(define-method get_domain
  (of-object "GMountOperation")
  (c-name "g_mount_operation_get_domain")
  (return-type "const-char*")
)

(define-method set_domain
  (of-object "GMountOperation")
  (c-name "g_mount_operation_set_domain")
  (return-type "none")
  (parameters
    '("const-char*" "domain")
  )
)

(define-method get_password_save
  (of-object "GMountOperation")
  (c-name "g_mount_operation_get_password_save")
  (return-type "GPasswordSave")
)

(define-method set_password_save
  (of-object "GMountOperation")
  (c-name "g_mount_operation_set_password_save")
  (return-type "none")
  (parameters
    '("GPasswordSave" "save")
  )
)

(define-method get_choice
  (of-object "GMountOperation")
  (c-name "g_mount_operation_get_choice")
  (return-type "int")
)

(define-method set_choice
  (of-object "GMountOperation")
  (c-name "g_mount_operation_set_choice")
  (return-type "none")
  (parameters
    '("int" "choice")
  )
)

(define-method reply
  (of-object "GMountOperation")
  (c-name "g_mount_operation_reply")
  (return-type "none")
  (parameters
    '("GMountOperationResult" "result")
  )
)



;; From gnativesocketaddress.h

(define-function g_native_socket_address_get_type
  (c-name "g_native_socket_address_get_type")
  (return-type "GType")
)

(define-function g_native_socket_address_new
  (c-name "g_native_socket_address_new")
  (is-constructor-of "GNativeSocketAddress")
  (return-type "GSocketAddress*")
  (parameters
    '("gpointer" "native")
    '("gsize" "len")
  )
)



;; From gnativevolumemonitor.h

(define-function g_native_volume_monitor_get_type
  (c-name "g_native_volume_monitor_get_type")
  (return-type "GType")
)



;; From gnetworkaddress.h

(define-function g_network_address_get_type
  (c-name "g_network_address_get_type")
  (return-type "GType")
)

(define-function g_network_address_new
  (c-name "g_network_address_new")
  (is-constructor-of "GNetworkAddress")
  (return-type "GSocketConnectable*")
  (parameters
    '("const-gchar*" "hostname")
    '("guint16" "port")
  )
)

(define-function g_network_address_new_loopback
  (c-name "g_network_address_new_loopback")
  (return-type "GSocketConnectable*")
  (parameters
    '("guint16" "port")
  )
)

(define-function g_network_address_parse
  (c-name "g_network_address_parse")
  (return-type "GSocketConnectable*")
  (parameters
    '("const-gchar*" "host_and_port")
    '("guint16" "default_port")
    '("GError**" "error")
  )
)

(define-function g_network_address_parse_uri
  (c-name "g_network_address_parse_uri")
  (return-type "GSocketConnectable*")
  (parameters
    '("const-gchar*" "uri")
    '("guint16" "default_port")
    '("GError**" "error")
  )
)

(define-method get_hostname
  (of-object "GNetworkAddress")
  (c-name "g_network_address_get_hostname")
  (return-type "const-gchar*")
)

(define-method get_port
  (of-object "GNetworkAddress")
  (c-name "g_network_address_get_port")
  (return-type "guint16")
)

(define-method get_scheme
  (of-object "GNetworkAddress")
  (c-name "g_network_address_get_scheme")
  (return-type "const-gchar*")
)



;; From gnetworking.h

(define-function g_networking_init
  (c-name "g_networking_init")
  (return-type "none")
)



;; From gnetworkmonitorbase.h

(define-function g_network_monitor_base_get_type
  (c-name "g_network_monitor_base_get_type")
  (return-type "GType")
)

(define-method add_network
  (of-object "GNetworkMonitorBase")
  (c-name "g_network_monitor_base_add_network")
  (return-type "none")
  (parameters
    '("GInetAddressMask*" "network")
  )
)

(define-method remove_network
  (of-object "GNetworkMonitorBase")
  (c-name "g_network_monitor_base_remove_network")
  (return-type "none")
  (parameters
    '("GInetAddressMask*" "network")
  )
)

(define-method set_networks
  (of-object "GNetworkMonitorBase")
  (c-name "g_network_monitor_base_set_networks")
  (return-type "none")
  (parameters
    '("GInetAddressMask**" "networks")
    '("gint" "length")
  )
)



;; From gnetworkmonitor.h

(define-function g_network_monitor_get_type
  (c-name "g_network_monitor_get_type")
  (return-type "GType")
)

(define-function g_network_monitor_get_default
  (c-name "g_network_monitor_get_default")
  (return-type "GNetworkMonitor*")
)

(define-method get_network_available
  (of-object "GNetworkMonitor")
  (c-name "g_network_monitor_get_network_available")
  (return-type "gboolean")
)

(define-method get_network_metered
  (of-object "GNetworkMonitor")
  (c-name "g_network_monitor_get_network_metered")
  (return-type "gboolean")
)

(define-method get_connectivity
  (of-object "GNetworkMonitor")
  (c-name "g_network_monitor_get_connectivity")
  (return-type "GNetworkConnectivity")
)

(define-method can_reach
  (of-object "GNetworkMonitor")
  (c-name "g_network_monitor_can_reach")
  (return-type "gboolean")
  (parameters
    '("GSocketConnectable*" "connectable")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method can_reach_async
  (of-object "GNetworkMonitor")
  (c-name "g_network_monitor_can_reach_async")
  (return-type "none")
  (parameters
    '("GSocketConnectable*" "connectable")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method can_reach_finish
  (of-object "GNetworkMonitor")
  (c-name "g_network_monitor_can_reach_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)



;; From gnetworkmonitornetlink.h



;; From gnetworkmonitornm.h



;; From gnetworkmonitorportal.h

(define-function g_network_monitor_portal_get_type
  (c-name "g_network_monitor_portal_get_type")
  (return-type "GType")
)



;; From gnetworkservice.h

(define-function g_network_service_get_type
  (c-name "g_network_service_get_type")
  (return-type "GType")
)

(define-function g_network_service_new
  (c-name "g_network_service_new")
  (is-constructor-of "GNetworkService")
  (return-type "GSocketConnectable*")
  (parameters
    '("const-gchar*" "service")
    '("const-gchar*" "protocol")
    '("const-gchar*" "domain")
  )
)

(define-method get_service
  (of-object "GNetworkService")
  (c-name "g_network_service_get_service")
  (return-type "const-gchar*")
)

(define-method get_protocol
  (of-object "GNetworkService")
  (c-name "g_network_service_get_protocol")
  (return-type "const-gchar*")
)

(define-method get_domain
  (of-object "GNetworkService")
  (c-name "g_network_service_get_domain")
  (return-type "const-gchar*")
)

(define-method get_scheme
  (of-object "GNetworkService")
  (c-name "g_network_service_get_scheme")
  (return-type "const-gchar*")
)

(define-method set_scheme
  (of-object "GNetworkService")
  (c-name "g_network_service_set_scheme")
  (return-type "none")
  (parameters
    '("const-gchar*" "scheme")
  )
)



;; From gnotificationbackend.h

(define-function g_notification_backend_get_type
  (c-name "g_notification_backend_get_type")
  (return-type "GType")
)

(define-function g_notification_backend_new_default
  (c-name "g_notification_backend_new_default")
  (return-type "GNotificationBackend*")
  (parameters
    '("GApplication*" "application")
  )
)

(define-method send_notification
  (of-object "GNotificationBackend")
  (c-name "g_notification_backend_send_notification")
  (return-type "none")
  (parameters
    '("const-gchar*" "id")
    '("GNotification*" "notification")
  )
)

(define-method withdraw_notification
  (of-object "GNotificationBackend")
  (c-name "g_notification_backend_withdraw_notification")
  (return-type "none")
  (parameters
    '("const-gchar*" "id")
  )
)



;; From gnotification.h

(define-function g_notification_get_type
  (c-name "g_notification_get_type")
  (return-type "GType")
)

(define-function g_notification_new
  (c-name "g_notification_new")
  (is-constructor-of "GNotification")
  (return-type "GNotification*")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method set_title
  (of-object "GNotification")
  (c-name "g_notification_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method set_body
  (of-object "GNotification")
  (c-name "g_notification_set_body")
  (return-type "none")
  (parameters
    '("const-gchar*" "body")
  )
)

(define-method set_icon
  (of-object "GNotification")
  (c-name "g_notification_set_icon")
  (return-type "none")
  (parameters
    '("GIcon*" "icon")
  )
)

(define-method set_urgent
  (of-object "GNotification")
  (c-name "g_notification_set_urgent")
  (return-type "none")
  (parameters
    '("gboolean" "urgent")
  )
)

(define-method set_priority
  (of-object "GNotification")
  (c-name "g_notification_set_priority")
  (return-type "none")
  (parameters
    '("GNotificationPriority" "priority")
  )
)

(define-method add_button
  (of-object "GNotification")
  (c-name "g_notification_add_button")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
    '("const-gchar*" "detailed_action")
  )
)

(define-method add_button_with_target
  (of-object "GNotification")
  (c-name "g_notification_add_button_with_target")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
    '("const-gchar*" "action")
    '("const-gchar*" "target_format")
  )
  (varargs #t)
)

(define-method add_button_with_target_value
  (of-object "GNotification")
  (c-name "g_notification_add_button_with_target_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "label")
    '("const-gchar*" "action")
    '("GVariant*" "target")
  )
)

(define-method set_default_action
  (of-object "GNotification")
  (c-name "g_notification_set_default_action")
  (return-type "none")
  (parameters
    '("const-gchar*" "detailed_action")
  )
)

(define-method set_default_action_and_target
  (of-object "GNotification")
  (c-name "g_notification_set_default_action_and_target")
  (return-type "none")
  (parameters
    '("const-gchar*" "action")
    '("const-gchar*" "target_format")
  )
  (varargs #t)
)

(define-method set_default_action_and_target_value
  (of-object "GNotification")
  (c-name "g_notification_set_default_action_and_target_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "action")
    '("GVariant*" "target")
  )
)



;; From gopenuriportal.h

(define-function g_openuri_portal_open_uri
  (c-name "g_openuri_portal_open_uri")
  (return-type "gboolean")
  (parameters
    '("const-char*" "uri")
    '("const-char*" "parent_window")
    '("GError**" "error")
  )
)

(define-function g_openuri_portal_open_uri_async
  (c-name "g_openuri_portal_open_uri_async")
  (return-type "none")
  (parameters
    '("const-char*" "uri")
    '("const-char*" "parent_window")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function g_openuri_portal_open_uri_finish
  (c-name "g_openuri_portal_open_uri_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)



;; From gosxappinfo.h

(define-function g_osx_app_info_get_type
  (c-name "g_osx_app_info_get_type")
  (return-type "GType")
)

(define-method get_filename
  (of-object "GOsxAppInfo")
  (c-name "g_osx_app_info_get_filename")
  (return-type "char*")
)

(define-function g_osx_app_info_get_all_for_scheme
  (c-name "g_osx_app_info_get_all_for_scheme")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "scheme")
  )
)



;; From goutputstream.h

(define-function g_output_stream_get_type
  (c-name "g_output_stream_get_type")
  (return-type "GType")
)

(define-method write
  (of-object "GOutputStream")
  (c-name "g_output_stream_write")
  (return-type "gssize")
  (parameters
    '("const-void*" "buffer")
    '("gsize" "count")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method write_all
  (of-object "GOutputStream")
  (c-name "g_output_stream_write_all")
  (return-type "gboolean")
  (parameters
    '("const-void*" "buffer")
    '("gsize" "count")
    '("gsize*" "bytes_written")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method printf
  (of-object "GOutputStream")
  (c-name "g_output_stream_printf")
  (return-type "gboolean")
  (parameters
    '("gsize*" "bytes_written")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-method vprintf
  (of-object "GOutputStream")
  (c-name "g_output_stream_vprintf")
  (return-type "gboolean")
  (parameters
    '("gsize*" "bytes_written")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
    '("const-gchar*" "format")
    '("va_list" "args")
  )
)

(define-method write_bytes
  (of-object "GOutputStream")
  (c-name "g_output_stream_write_bytes")
  (return-type "gssize")
  (parameters
    '("GBytes*" "bytes")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method splice
  (of-object "GOutputStream")
  (c-name "g_output_stream_splice")
  (return-type "gssize")
  (parameters
    '("GInputStream*" "source")
    '("GOutputStreamSpliceFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method flush
  (of-object "GOutputStream")
  (c-name "g_output_stream_flush")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method close
  (of-object "GOutputStream")
  (c-name "g_output_stream_close")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method write_async
  (of-object "GOutputStream")
  (c-name "g_output_stream_write_async")
  (return-type "none")
  (parameters
    '("const-void*" "buffer")
    '("gsize" "count")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method write_finish
  (of-object "GOutputStream")
  (c-name "g_output_stream_write_finish")
  (return-type "gssize")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method write_all_async
  (of-object "GOutputStream")
  (c-name "g_output_stream_write_all_async")
  (return-type "none")
  (parameters
    '("const-void*" "buffer")
    '("gsize" "count")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method write_all_finish
  (of-object "GOutputStream")
  (c-name "g_output_stream_write_all_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("gsize*" "bytes_written")
    '("GError**" "error")
  )
)

(define-method write_bytes_async
  (of-object "GOutputStream")
  (c-name "g_output_stream_write_bytes_async")
  (return-type "none")
  (parameters
    '("GBytes*" "bytes")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method write_bytes_finish
  (of-object "GOutputStream")
  (c-name "g_output_stream_write_bytes_finish")
  (return-type "gssize")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method splice_async
  (of-object "GOutputStream")
  (c-name "g_output_stream_splice_async")
  (return-type "none")
  (parameters
    '("GInputStream*" "source")
    '("GOutputStreamSpliceFlags" "flags")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method splice_finish
  (of-object "GOutputStream")
  (c-name "g_output_stream_splice_finish")
  (return-type "gssize")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method flush_async
  (of-object "GOutputStream")
  (c-name "g_output_stream_flush_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method flush_finish
  (of-object "GOutputStream")
  (c-name "g_output_stream_flush_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method close_async
  (of-object "GOutputStream")
  (c-name "g_output_stream_close_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method close_finish
  (of-object "GOutputStream")
  (c-name "g_output_stream_close_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method is_closed
  (of-object "GOutputStream")
  (c-name "g_output_stream_is_closed")
  (return-type "gboolean")
)

(define-method is_closing
  (of-object "GOutputStream")
  (c-name "g_output_stream_is_closing")
  (return-type "gboolean")
)

(define-method has_pending
  (of-object "GOutputStream")
  (c-name "g_output_stream_has_pending")
  (return-type "gboolean")
)

(define-method set_pending
  (of-object "GOutputStream")
  (c-name "g_output_stream_set_pending")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method clear_pending
  (of-object "GOutputStream")
  (c-name "g_output_stream_clear_pending")
  (return-type "none")
)



;; From gpermission.h

(define-function g_permission_get_type
  (c-name "g_permission_get_type")
  (return-type "GType")
)

(define-method acquire
  (of-object "GPermission")
  (c-name "g_permission_acquire")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method acquire_async
  (of-object "GPermission")
  (c-name "g_permission_acquire_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method acquire_finish
  (of-object "GPermission")
  (c-name "g_permission_acquire_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method release
  (of-object "GPermission")
  (c-name "g_permission_release")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method release_async
  (of-object "GPermission")
  (c-name "g_permission_release_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method release_finish
  (of-object "GPermission")
  (c-name "g_permission_release_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method get_allowed
  (of-object "GPermission")
  (c-name "g_permission_get_allowed")
  (return-type "gboolean")
)

(define-method get_can_acquire
  (of-object "GPermission")
  (c-name "g_permission_get_can_acquire")
  (return-type "gboolean")
)

(define-method get_can_release
  (of-object "GPermission")
  (c-name "g_permission_get_can_release")
  (return-type "gboolean")
)

(define-method impl_update
  (of-object "GPermission")
  (c-name "g_permission_impl_update")
  (return-type "none")
  (parameters
    '("gboolean" "allowed")
    '("gboolean" "can_acquire")
    '("gboolean" "can_release")
  )
)



;; From gpollableinputstream.h

(define-function g_pollable_input_stream_get_type
  (c-name "g_pollable_input_stream_get_type")
  (return-type "GType")
)

(define-method can_poll
  (of-object "GPollableInputStream")
  (c-name "g_pollable_input_stream_can_poll")
  (return-type "gboolean")
)

(define-method is_readable
  (of-object "GPollableInputStream")
  (c-name "g_pollable_input_stream_is_readable")
  (return-type "gboolean")
)

(define-method create_source
  (of-object "GPollableInputStream")
  (c-name "g_pollable_input_stream_create_source")
  (return-type "GSource*")
  (parameters
    '("GCancellable*" "cancellable")
  )
)

(define-method read_nonblocking
  (of-object "GPollableInputStream")
  (c-name "g_pollable_input_stream_read_nonblocking")
  (return-type "gssize")
  (parameters
    '("void*" "buffer")
    '("gsize" "count")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From gpollableoutputstream.h

(define-function g_pollable_output_stream_get_type
  (c-name "g_pollable_output_stream_get_type")
  (return-type "GType")
)

(define-method can_poll
  (of-object "GPollableOutputStream")
  (c-name "g_pollable_output_stream_can_poll")
  (return-type "gboolean")
)

(define-method is_writable
  (of-object "GPollableOutputStream")
  (c-name "g_pollable_output_stream_is_writable")
  (return-type "gboolean")
)

(define-method create_source
  (of-object "GPollableOutputStream")
  (c-name "g_pollable_output_stream_create_source")
  (return-type "GSource*")
  (parameters
    '("GCancellable*" "cancellable")
  )
)

(define-method write_nonblocking
  (of-object "GPollableOutputStream")
  (c-name "g_pollable_output_stream_write_nonblocking")
  (return-type "gssize")
  (parameters
    '("const-void*" "buffer")
    '("gsize" "count")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From gpollableutils.h

(define-function g_pollable_source_new
  (c-name "g_pollable_source_new")
  (is-constructor-of "GPollableSource")
  (return-type "GSource*")
  (parameters
    '("GObject*" "pollable_stream")
  )
)

(define-function g_pollable_source_new_full
  (c-name "g_pollable_source_new_full")
  (return-type "GSource*")
  (parameters
    '("gpointer" "pollable_stream")
    '("GSource*" "child_source")
    '("GCancellable*" "cancellable")
  )
)

(define-function g_pollable_stream_read
  (c-name "g_pollable_stream_read")
  (return-type "gssize")
  (parameters
    '("GInputStream*" "stream")
    '("void*" "buffer")
    '("gsize" "count")
    '("gboolean" "blocking")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function g_pollable_stream_write
  (c-name "g_pollable_stream_write")
  (return-type "gssize")
  (parameters
    '("GOutputStream*" "stream")
    '("const-void*" "buffer")
    '("gsize" "count")
    '("gboolean" "blocking")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function g_pollable_stream_write_all
  (c-name "g_pollable_stream_write_all")
  (return-type "gboolean")
  (parameters
    '("GOutputStream*" "stream")
    '("const-void*" "buffer")
    '("gsize" "count")
    '("gboolean" "blocking")
    '("gsize*" "bytes_written")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From gpollfilemonitor.h



;; From gportalsupport.h

(define-function glib_should_use_portal
  (c-name "glib_should_use_portal")
  (return-type "gboolean")
)

(define-function glib_network_available_in_sandbox
  (c-name "glib_network_available_in_sandbox")
  (return-type "gboolean")
)



;; From gpropertyaction.h

(define-function g_property_action_get_type
  (c-name "g_property_action_get_type")
  (return-type "GType")
)

(define-function g_property_action_new
  (c-name "g_property_action_new")
  (is-constructor-of "GPropertyAction")
  (return-type "GPropertyAction*")
  (parameters
    '("const-gchar*" "name")
    '("gpointer" "object")
    '("const-gchar*" "property_name")
  )
)



;; From gproxyaddressenumerator.h

(define-function g_proxy_address_enumerator_get_type
  (c-name "g_proxy_address_enumerator_get_type")
  (return-type "GType")
)



;; From gproxyaddress.h

(define-function g_proxy_address_get_type
  (c-name "g_proxy_address_get_type")
  (return-type "GType")
)

(define-function g_proxy_address_new
  (c-name "g_proxy_address_new")
  (is-constructor-of "GProxyAddress")
  (return-type "GSocketAddress*")
  (parameters
    '("GInetAddress*" "inetaddr")
    '("guint16" "port")
    '("const-gchar*" "protocol")
    '("const-gchar*" "dest_hostname")
    '("guint16" "dest_port")
    '("const-gchar*" "username")
    '("const-gchar*" "password")
  )
)

(define-method get_protocol
  (of-object "GProxyAddress")
  (c-name "g_proxy_address_get_protocol")
  (return-type "const-gchar*")
)

(define-method get_destination_protocol
  (of-object "GProxyAddress")
  (c-name "g_proxy_address_get_destination_protocol")
  (return-type "const-gchar*")
)

(define-method get_destination_hostname
  (of-object "GProxyAddress")
  (c-name "g_proxy_address_get_destination_hostname")
  (return-type "const-gchar*")
)

(define-method get_destination_port
  (of-object "GProxyAddress")
  (c-name "g_proxy_address_get_destination_port")
  (return-type "guint16")
)

(define-method get_username
  (of-object "GProxyAddress")
  (c-name "g_proxy_address_get_username")
  (return-type "const-gchar*")
)

(define-method get_password
  (of-object "GProxyAddress")
  (c-name "g_proxy_address_get_password")
  (return-type "const-gchar*")
)

(define-method get_uri
  (of-object "GProxyAddress")
  (c-name "g_proxy_address_get_uri")
  (return-type "const-gchar*")
)



;; From gproxy.h

(define-function g_proxy_get_type
  (c-name "g_proxy_get_type")
  (return-type "GType")
)

(define-function g_proxy_get_default_for_protocol
  (c-name "g_proxy_get_default_for_protocol")
  (return-type "GProxy*")
  (parameters
    '("const-gchar*" "protocol")
  )
)

(define-method connect
  (of-object "GProxy")
  (c-name "g_proxy_connect")
  (return-type "GIOStream*")
  (parameters
    '("GIOStream*" "connection")
    '("GProxyAddress*" "proxy_address")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method connect_async
  (of-object "GProxy")
  (c-name "g_proxy_connect_async")
  (return-type "none")
  (parameters
    '("GIOStream*" "connection")
    '("GProxyAddress*" "proxy_address")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method connect_finish
  (of-object "GProxy")
  (c-name "g_proxy_connect_finish")
  (return-type "GIOStream*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method supports_hostname
  (of-object "GProxy")
  (c-name "g_proxy_supports_hostname")
  (return-type "gboolean")
)



;; From gproxyresolver.h

(define-function g_proxy_resolver_get_type
  (c-name "g_proxy_resolver_get_type")
  (return-type "GType")
)

(define-function g_proxy_resolver_get_default
  (c-name "g_proxy_resolver_get_default")
  (return-type "GProxyResolver*")
)

(define-method is_supported
  (of-object "GProxyResolver")
  (c-name "g_proxy_resolver_is_supported")
  (return-type "gboolean")
)

(define-method lookup
  (of-object "GProxyResolver")
  (c-name "g_proxy_resolver_lookup")
  (return-type "gchar**")
  (parameters
    '("const-gchar*" "uri")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method lookup_async
  (of-object "GProxyResolver")
  (c-name "g_proxy_resolver_lookup_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method lookup_finish
  (of-object "GProxyResolver")
  (c-name "g_proxy_resolver_lookup_finish")
  (return-type "gchar**")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)



;; From gproxyresolverportal.h

(define-function g_proxy_resolver_portal_get_type
  (c-name "g_proxy_resolver_portal_get_type")
  (return-type "GType")
)



;; From gregistrysettingsbackend.h

(define-function g_registry_backend_get_type
  (c-name "g_registry_backend_get_type")
  (return-type "GType")
)



;; From gremoteactiongroup.h

(define-function g_remote_action_group_get_type
  (c-name "g_remote_action_group_get_type")
  (return-type "GType")
)

(define-method activate_action_full
  (of-object "GRemoteActionGroup")
  (c-name "g_remote_action_group_activate_action_full")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("GVariant*" "parameter")
    '("GVariant*" "platform_data")
  )
)

(define-method change_action_state_full
  (of-object "GRemoteActionGroup")
  (c-name "g_remote_action_group_change_action_state_full")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
    '("GVariant*" "value")
    '("GVariant*" "platform_data")
  )
)



;; From gresolver.h

(define-function g_resolver_get_type
  (c-name "g_resolver_get_type")
  (return-type "GType")
)

(define-function g_resolver_get_default
  (c-name "g_resolver_get_default")
  (return-type "GResolver*")
)

(define-method set_default
  (of-object "GResolver")
  (c-name "g_resolver_set_default")
  (return-type "none")
)

(define-method lookup_by_name
  (of-object "GResolver")
  (c-name "g_resolver_lookup_by_name")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "hostname")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method lookup_by_name_async
  (of-object "GResolver")
  (c-name "g_resolver_lookup_by_name_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "hostname")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method lookup_by_name_finish
  (of-object "GResolver")
  (c-name "g_resolver_lookup_by_name_finish")
  (return-type "GList*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-function g_resolver_free_addresses
  (c-name "g_resolver_free_addresses")
  (return-type "none")
  (parameters
    '("GList*" "addresses")
  )
)

(define-method lookup_by_address
  (of-object "GResolver")
  (c-name "g_resolver_lookup_by_address")
  (return-type "gchar*")
  (parameters
    '("GInetAddress*" "address")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method lookup_by_address_async
  (of-object "GResolver")
  (c-name "g_resolver_lookup_by_address_async")
  (return-type "none")
  (parameters
    '("GInetAddress*" "address")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method lookup_by_address_finish
  (of-object "GResolver")
  (c-name "g_resolver_lookup_by_address_finish")
  (return-type "gchar*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method lookup_service
  (of-object "GResolver")
  (c-name "g_resolver_lookup_service")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "service")
    '("const-gchar*" "protocol")
    '("const-gchar*" "domain")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method lookup_service_async
  (of-object "GResolver")
  (c-name "g_resolver_lookup_service_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "service")
    '("const-gchar*" "protocol")
    '("const-gchar*" "domain")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method lookup_service_finish
  (of-object "GResolver")
  (c-name "g_resolver_lookup_service_finish")
  (return-type "GList*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method lookup_records
  (of-object "GResolver")
  (c-name "g_resolver_lookup_records")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "rrname")
    '("GResolverRecordType" "record_type")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method lookup_records_async
  (of-object "GResolver")
  (c-name "g_resolver_lookup_records_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "rrname")
    '("GResolverRecordType" "record_type")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method lookup_records_finish
  (of-object "GResolver")
  (c-name "g_resolver_lookup_records_finish")
  (return-type "GList*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-function g_resolver_free_targets
  (c-name "g_resolver_free_targets")
  (return-type "none")
  (parameters
    '("GList*" "targets")
  )
)

(define-function g_resolver_error_quark
  (c-name "g_resolver_error_quark")
  (return-type "GQuark")
)



;; From gresourcefile.h



;; From gresource.h

(define-function g_resource_error_quark
  (c-name "g_resource_error_quark")
  (return-type "GQuark")
)

(define-function g_resource_get_type
  (c-name "g_resource_get_type")
  (return-type "GType")
)

(define-function g_resource_new_from_data
  (c-name "g_resource_new_from_data")
  (return-type "GResource*")
  (parameters
    '("GBytes*" "data")
    '("GError**" "error")
  )
)

(define-method ref
  (of-object "GResource")
  (c-name "g_resource_ref")
  (return-type "GResource*")
)

(define-method unref
  (of-object "GResource")
  (c-name "g_resource_unref")
  (return-type "none")
)

(define-function g_resource_load
  (c-name "g_resource_load")
  (return-type "GResource*")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method open_stream
  (of-object "GResource")
  (c-name "g_resource_open_stream")
  (return-type "GInputStream*")
  (parameters
    '("const-char*" "path")
    '("GResourceLookupFlags" "lookup_flags")
    '("GError**" "error")
  )
)

(define-method lookup_data
  (of-object "GResource")
  (c-name "g_resource_lookup_data")
  (return-type "GBytes*")
  (parameters
    '("const-char*" "path")
    '("GResourceLookupFlags" "lookup_flags")
    '("GError**" "error")
  )
)

(define-method enumerate_children
  (of-object "GResource")
  (c-name "g_resource_enumerate_children")
  (return-type "char**")
  (parameters
    '("const-char*" "path")
    '("GResourceLookupFlags" "lookup_flags")
    '("GError**" "error")
  )
)

(define-method get_info
  (of-object "GResource")
  (c-name "g_resource_get_info")
  (return-type "gboolean")
  (parameters
    '("const-char*" "path")
    '("GResourceLookupFlags" "lookup_flags")
    '("gsize*" "size")
    '("guint32*" "flags")
    '("GError**" "error")
  )
)

(define-method s_register
  (of-object "GResource")
  (c-name "g_resources_register")
  (return-type "none")
)

(define-method s_unregister
  (of-object "GResource")
  (c-name "g_resources_unregister")
  (return-type "none")
)

(define-function g_resources_open_stream
  (c-name "g_resources_open_stream")
  (return-type "GInputStream*")
  (parameters
    '("const-char*" "path")
    '("GResourceLookupFlags" "lookup_flags")
    '("GError**" "error")
  )
)

(define-function g_resources_lookup_data
  (c-name "g_resources_lookup_data")
  (return-type "GBytes*")
  (parameters
    '("const-char*" "path")
    '("GResourceLookupFlags" "lookup_flags")
    '("GError**" "error")
  )
)

(define-function g_resources_enumerate_children
  (c-name "g_resources_enumerate_children")
  (return-type "char**")
  (parameters
    '("const-char*" "path")
    '("GResourceLookupFlags" "lookup_flags")
    '("GError**" "error")
  )
)

(define-function g_resources_get_info
  (c-name "g_resources_get_info")
  (return-type "gboolean")
  (parameters
    '("const-char*" "path")
    '("GResourceLookupFlags" "lookup_flags")
    '("gsize*" "size")
    '("guint32*" "flags")
    '("GError**" "error")
  )
)

(define-method init
  (of-object "GStaticResource")
  (c-name "g_static_resource_init")
  (return-type "none")
)

(define-method fini
  (of-object "GStaticResource")
  (c-name "g_static_resource_fini")
  (return-type "none")
)

(define-method get_resource
  (of-object "GStaticResource")
  (c-name "g_static_resource_get_resource")
  (return-type "GResource*")
)



;; From gseekable.h

(define-function g_seekable_get_type
  (c-name "g_seekable_get_type")
  (return-type "GType")
)

(define-method tell
  (of-object "GSeekable")
  (c-name "g_seekable_tell")
  (return-type "goffset")
)

(define-method can_seek
  (of-object "GSeekable")
  (c-name "g_seekable_can_seek")
  (return-type "gboolean")
)

(define-method seek
  (of-object "GSeekable")
  (c-name "g_seekable_seek")
  (return-type "gboolean")
  (parameters
    '("goffset" "offset")
    '("GSeekType" "type")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method can_truncate
  (of-object "GSeekable")
  (c-name "g_seekable_can_truncate")
  (return-type "gboolean")
)

(define-method truncate
  (of-object "GSeekable")
  (c-name "g_seekable_truncate")
  (return-type "gboolean")
  (parameters
    '("goffset" "offset")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)



;; From gsettingsbackend.h

(define-function g_settings_backend_get_type
  (c-name "g_settings_backend_get_type")
  (return-type "GType")
)

(define-method changed
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_changed")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gpointer" "origin_tag")
  )
)

(define-method path_changed
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_path_changed")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
    '("gpointer" "origin_tag")
  )
)

(define-function g_settings_backend_flatten_tree
  (c-name "g_settings_backend_flatten_tree")
  (return-type "none")
  (parameters
    '("GTree*" "tree")
    '("gchar**" "path")
    '("const-gchar***" "keys")
    '("GVariant***" "values")
  )
)

(define-method keys_changed
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_keys_changed")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
    '("gchar-const*-const*" "items")
    '("gpointer" "origin_tag")
  )
)

(define-method path_writable_changed
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_path_writable_changed")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method writable_changed
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_writable_changed")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method changed_tree
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_changed_tree")
  (return-type "none")
  (parameters
    '("GTree*" "tree")
    '("gpointer" "origin_tag")
  )
)

(define-function g_settings_backend_get_default
  (c-name "g_settings_backend_get_default")
  (return-type "GSettingsBackend*")
)

(define-function g_keyfile_settings_backend_new
  (c-name "g_keyfile_settings_backend_new")
  (is-constructor-of "GKeyfileSettingsBackend")
  (return-type "GSettingsBackend*")
  (parameters
    '("const-gchar*" "filename")
    '("const-gchar*" "root_path")
    '("const-gchar*" "root_group")
  )
)

(define-function g_null_settings_backend_new
  (c-name "g_null_settings_backend_new")
  (is-constructor-of "GNullSettingsBackend")
  (return-type "GSettingsBackend*")
)

(define-function g_memory_settings_backend_new
  (c-name "g_memory_settings_backend_new")
  (is-constructor-of "GMemorySettingsBackend")
  (return-type "GSettingsBackend*")
)



;; From gsettingsbackendinternal.h

(define-method watch
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_watch")
  (return-type "none")
  (parameters
    '("const-GSettingsListenerVTable*" "vtable")
    '("GObject*" "target")
    '("GMainContext*" "context")
  )
)

(define-method unwatch
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_unwatch")
  (return-type "none")
  (parameters
    '("GObject*" "target")
  )
)

(define-function g_settings_backend_create_tree
  (c-name "g_settings_backend_create_tree")
  (return-type "GTree*")
)

(define-method read
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_read")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "key")
    '("const-GVariantType*" "expected_type")
    '("gboolean" "default_value")
  )
)

(define-method read_user_value
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_read_user_value")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "key")
    '("const-GVariantType*" "expected_type")
  )
)

(define-method write
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_write")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("GVariant*" "value")
    '("gpointer" "origin_tag")
  )
)

(define-method write_tree
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_write_tree")
  (return-type "gboolean")
  (parameters
    '("GTree*" "tree")
    '("gpointer" "origin_tag")
  )
)

(define-method reset
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_reset")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gpointer" "origin_tag")
  )
)

(define-method get_writable
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_get_writable")
  (return-type "gboolean")
  (parameters
    '("const-char*" "key")
  )
)

(define-method unsubscribe
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_unsubscribe")
  (return-type "none")
  (parameters
    '("const-char*" "name")
  )
)

(define-method subscribe
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_subscribe")
  (return-type "none")
  (parameters
    '("const-char*" "name")
  )
)

(define-method get_permission
  (of-object "GSettingsBackend")
  (c-name "g_settings_backend_get_permission")
  (return-type "GPermission*")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-function g_settings_backend_sync_default
  (c-name "g_settings_backend_sync_default")
  (return-type "none")
)

(define-function g_null_settings_backend_get_type
  (c-name "g_null_settings_backend_get_type")
  (return-type "GType")
)

(define-function g_memory_settings_backend_get_type
  (c-name "g_memory_settings_backend_get_type")
  (return-type "GType")
)

(define-function g_nextstep_settings_backend_get_type
  (c-name "g_nextstep_settings_backend_get_type")
  (return-type "GType")
)



;; From gsettings.h

(define-function g_settings_get_type
  (c-name "g_settings_get_type")
  (return-type "GType")
)

(define-function g_settings_list_schemas
  (c-name "g_settings_list_schemas")
  (return-type "const-gchar*-const*")
)

(define-function g_settings_list_relocatable_schemas
  (c-name "g_settings_list_relocatable_schemas")
  (return-type "const-gchar*-const*")
)

(define-function g_settings_new
  (c-name "g_settings_new")
  (is-constructor-of "GSettings")
  (return-type "GSettings*")
  (parameters
    '("const-gchar*" "schema_id")
  )
)

(define-function g_settings_new_with_path
  (c-name "g_settings_new_with_path")
  (return-type "GSettings*")
  (parameters
    '("const-gchar*" "schema_id")
    '("const-gchar*" "path")
  )
)

(define-function g_settings_new_with_backend
  (c-name "g_settings_new_with_backend")
  (return-type "GSettings*")
  (parameters
    '("const-gchar*" "schema_id")
    '("GSettingsBackend*" "backend")
  )
)

(define-function g_settings_new_with_backend_and_path
  (c-name "g_settings_new_with_backend_and_path")
  (return-type "GSettings*")
  (parameters
    '("const-gchar*" "schema_id")
    '("GSettingsBackend*" "backend")
    '("const-gchar*" "path")
  )
)

(define-function g_settings_new_full
  (c-name "g_settings_new_full")
  (return-type "GSettings*")
  (parameters
    '("GSettingsSchema*" "schema")
    '("GSettingsBackend*" "backend")
    '("const-gchar*" "path")
  )
)

(define-method list_children
  (of-object "GSettings")
  (c-name "g_settings_list_children")
  (return-type "gchar**")
)

(define-method list_keys
  (of-object "GSettings")
  (c-name "g_settings_list_keys")
  (return-type "gchar**")
)

(define-method get_range
  (of-object "GSettings")
  (c-name "g_settings_get_range")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method range_check
  (of-object "GSettings")
  (c-name "g_settings_range_check")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("GVariant*" "value")
  )
)

(define-method set_value
  (of-object "GSettings")
  (c-name "g_settings_set_value")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("GVariant*" "value")
  )
)

(define-method get_value
  (of-object "GSettings")
  (c-name "g_settings_get_value")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get_user_value
  (of-object "GSettings")
  (c-name "g_settings_get_user_value")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get_default_value
  (of-object "GSettings")
  (c-name "g_settings_get_default_value")
  (return-type "GVariant*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set
  (of-object "GSettings")
  (c-name "g_settings_set")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-method get
  (of-object "GSettings")
  (c-name "g_settings_get")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-method reset
  (of-object "GSettings")
  (c-name "g_settings_reset")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get_int
  (of-object "GSettings")
  (c-name "g_settings_get_int")
  (return-type "gint")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_int
  (of-object "GSettings")
  (c-name "g_settings_set_int")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("gint" "value")
  )
)

(define-method get_int64
  (of-object "GSettings")
  (c-name "g_settings_get_int64")
  (return-type "gint64")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_int64
  (of-object "GSettings")
  (c-name "g_settings_set_int64")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("gint64" "value")
  )
)

(define-method get_uint
  (of-object "GSettings")
  (c-name "g_settings_get_uint")
  (return-type "guint")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_uint
  (of-object "GSettings")
  (c-name "g_settings_set_uint")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("guint" "value")
  )
)

(define-method get_uint64
  (of-object "GSettings")
  (c-name "g_settings_get_uint64")
  (return-type "guint64")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_uint64
  (of-object "GSettings")
  (c-name "g_settings_set_uint64")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("guint64" "value")
  )
)

(define-method get_string
  (of-object "GSettings")
  (c-name "g_settings_get_string")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_string
  (of-object "GSettings")
  (c-name "g_settings_set_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "value")
  )
)

(define-method get_boolean
  (of-object "GSettings")
  (c-name "g_settings_get_boolean")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_boolean
  (of-object "GSettings")
  (c-name "g_settings_set_boolean")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("gboolean" "value")
  )
)

(define-method get_double
  (of-object "GSettings")
  (c-name "g_settings_get_double")
  (return-type "gdouble")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_double
  (of-object "GSettings")
  (c-name "g_settings_set_double")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("gdouble" "value")
  )
)

(define-method get_strv
  (of-object "GSettings")
  (c-name "g_settings_get_strv")
  (return-type "gchar**")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_strv
  (of-object "GSettings")
  (c-name "g_settings_set_strv")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*-const*" "value")
  )
)

(define-method get_enum
  (of-object "GSettings")
  (c-name "g_settings_get_enum")
  (return-type "gint")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_enum
  (of-object "GSettings")
  (c-name "g_settings_set_enum")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("gint" "value")
  )
)

(define-method get_flags
  (of-object "GSettings")
  (c-name "g_settings_get_flags")
  (return-type "guint")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method set_flags
  (of-object "GSettings")
  (c-name "g_settings_set_flags")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("guint" "value")
  )
)

(define-method get_child
  (of-object "GSettings")
  (c-name "g_settings_get_child")
  (return-type "GSettings*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method is_writable
  (of-object "GSettings")
  (c-name "g_settings_is_writable")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method delay
  (of-object "GSettings")
  (c-name "g_settings_delay")
  (return-type "none")
)

(define-method apply
  (of-object "GSettings")
  (c-name "g_settings_apply")
  (return-type "none")
)

(define-method revert
  (of-object "GSettings")
  (c-name "g_settings_revert")
  (return-type "none")
)

(define-method get_has_unapplied
  (of-object "GSettings")
  (c-name "g_settings_get_has_unapplied")
  (return-type "gboolean")
)

(define-function g_settings_sync
  (c-name "g_settings_sync")
  (return-type "none")
)

(define-method bind
  (of-object "GSettings")
  (c-name "g_settings_bind")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gpointer" "object")
    '("const-gchar*" "property")
    '("GSettingsBindFlags" "flags")
  )
)

(define-method bind_with_mapping
  (of-object "GSettings")
  (c-name "g_settings_bind_with_mapping")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gpointer" "object")
    '("const-gchar*" "property")
    '("GSettingsBindFlags" "flags")
    '("GSettingsBindGetMapping" "get_mapping")
    '("GSettingsBindSetMapping" "set_mapping")
    '("gpointer" "user_data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method bind_writable
  (of-object "GSettings")
  (c-name "g_settings_bind_writable")
  (return-type "none")
  (parameters
    '("const-gchar*" "key")
    '("gpointer" "object")
    '("const-gchar*" "property")
    '("gboolean" "inverted")
  )
)

(define-function g_settings_unbind
  (c-name "g_settings_unbind")
  (return-type "none")
  (parameters
    '("gpointer" "object")
    '("const-gchar*" "property")
  )
)

(define-method create_action
  (of-object "GSettings")
  (c-name "g_settings_create_action")
  (return-type "GAction*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get_mapped
  (of-object "GSettings")
  (c-name "g_settings_get_mapped")
  (return-type "gpointer")
  (parameters
    '("const-gchar*" "key")
    '("GSettingsGetMapping" "mapping")
    '("gpointer" "user_data")
  )
)



;; From gsettings-mapping.h

(define-function g_settings_set_mapping
  (c-name "g_settings_set_mapping")
  (return-type "GVariant*")
  (parameters
    '("const-GValue*" "value")
    '("const-GVariantType*" "expected_type")
    '("gpointer" "user_data")
  )
)

(define-function g_settings_get_mapping
  (c-name "g_settings_get_mapping")
  (return-type "gboolean")
  (parameters
    '("GValue*" "value")
    '("GVariant*" "variant")
    '("gpointer" "user_data")
  )
)

(define-function g_settings_mapping_is_compatible
  (c-name "g_settings_mapping_is_compatible")
  (return-type "gboolean")
  (parameters
    '("GType" "gvalue_type")
    '("const-GVariantType*" "variant_type")
  )
)



;; From gsettingsschema.h

(define-function g_settings_schema_source_get_type
  (c-name "g_settings_schema_source_get_type")
  (return-type "GType")
)

(define-function g_settings_schema_source_get_default
  (c-name "g_settings_schema_source_get_default")
  (return-type "GSettingsSchemaSource*")
)

(define-method ref
  (of-object "GSettingsSchemaSource")
  (c-name "g_settings_schema_source_ref")
  (return-type "GSettingsSchemaSource*")
)

(define-method unref
  (of-object "GSettingsSchemaSource")
  (c-name "g_settings_schema_source_unref")
  (return-type "none")
)

(define-function g_settings_schema_source_new_from_directory
  (c-name "g_settings_schema_source_new_from_directory")
  (return-type "GSettingsSchemaSource*")
  (parameters
    '("const-gchar*" "directory")
    '("GSettingsSchemaSource*" "parent")
    '("gboolean" "trusted")
    '("GError**" "error")
  )
)

(define-method lookup
  (of-object "GSettingsSchemaSource")
  (c-name "g_settings_schema_source_lookup")
  (return-type "GSettingsSchema*")
  (parameters
    '("const-gchar*" "schema_id")
    '("gboolean" "recursive")
  )
)

(define-method list_schemas
  (of-object "GSettingsSchemaSource")
  (c-name "g_settings_schema_source_list_schemas")
  (return-type "none")
  (parameters
    '("gboolean" "recursive")
    '("gchar***" "non_relocatable")
    '("gchar***" "relocatable")
  )
)

(define-function g_settings_schema_get_type
  (c-name "g_settings_schema_get_type")
  (return-type "GType")
)

(define-method ref
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_ref")
  (return-type "GSettingsSchema*")
)

(define-method unref
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_unref")
  (return-type "none")
)

(define-method get_id
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_get_id")
  (return-type "const-gchar*")
)

(define-method get_path
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_get_path")
  (return-type "const-gchar*")
)

(define-method get_key
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_get_key")
  (return-type "GSettingsSchemaKey*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method has_key
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_has_key")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method list_keys
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_list_keys")
  (return-type "gchar**")
)

(define-method list_children
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_list_children")
  (return-type "gchar**")
)

(define-function g_settings_schema_key_get_type
  (c-name "g_settings_schema_key_get_type")
  (return-type "GType")
)

(define-method ref
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_ref")
  (return-type "GSettingsSchemaKey*")
)

(define-method unref
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_unref")
  (return-type "none")
)

(define-method get_value_type
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_get_value_type")
  (return-type "const-GVariantType*")
)

(define-method get_default_value
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_get_default_value")
  (return-type "GVariant*")
)

(define-method get_range
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_get_range")
  (return-type "GVariant*")
)

(define-method range_check
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_range_check")
  (return-type "gboolean")
  (parameters
    '("GVariant*" "value")
  )
)

(define-method get_name
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_get_name")
  (return-type "const-gchar*")
)

(define-method get_summary
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_get_summary")
  (return-type "const-gchar*")
)

(define-method get_description
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_get_description")
  (return-type "const-gchar*")
)



;; From gsettingsschema-internal.h

(define-method get_gettext_domain
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_get_gettext_domain")
  (return-type "const-gchar*")
)

(define-method get_value
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_get_value")
  (return-type "GVariantIter*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method list
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_list")
  (return-type "const-GQuark*")
  (parameters
    '("gint*" "n_items")
  )
)

(define-method get_string
  (of-object "GSettingsSchema")
  (c-name "g_settings_schema_get_string")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method init
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_init")
  (return-type "none")
  (parameters
    '("GSettingsSchema*" "schema")
    '("const-gchar*" "name")
  )
)

(define-method clear
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_clear")
  (return-type "none")
)

(define-method type_check
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_type_check")
  (return-type "gboolean")
  (parameters
    '("GVariant*" "value")
  )
)

(define-method range_fixup
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_range_fixup")
  (return-type "GVariant*")
  (parameters
    '("GVariant*" "value")
  )
)

(define-method get_translated_default
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_get_translated_default")
  (return-type "GVariant*")
)

(define-method to_enum
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_to_enum")
  (return-type "gint")
  (parameters
    '("GVariant*" "value")
  )
)

(define-method from_enum
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_from_enum")
  (return-type "GVariant*")
  (parameters
    '("gint" "value")
  )
)

(define-method to_flags
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_to_flags")
  (return-type "guint")
  (parameters
    '("GVariant*" "value")
  )
)

(define-method from_flags
  (of-object "GSettingsSchemaKey")
  (c-name "g_settings_schema_key_from_flags")
  (return-type "GVariant*")
  (parameters
    '("guint" "value")
  )
)



;; From gsimpleactiongroup.h

(define-function g_simple_action_group_get_type
  (c-name "g_simple_action_group_get_type")
  (return-type "GType")
)

(define-function g_simple_action_group_new
  (c-name "g_simple_action_group_new")
  (is-constructor-of "GSimpleActionGroup")
  (return-type "GSimpleActionGroup*")
)

(define-method lookup
  (of-object "GSimpleActionGroup")
  (c-name "g_simple_action_group_lookup")
  (return-type "GAction*")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method insert
  (of-object "GSimpleActionGroup")
  (c-name "g_simple_action_group_insert")
  (return-type "none")
  (parameters
    '("GAction*" "action")
  )
)

(define-method remove
  (of-object "GSimpleActionGroup")
  (c-name "g_simple_action_group_remove")
  (return-type "none")
  (parameters
    '("const-gchar*" "action_name")
  )
)

(define-method add_entries
  (of-object "GSimpleActionGroup")
  (c-name "g_simple_action_group_add_entries")
  (return-type "none")
  (parameters
    '("const-GActionEntry*" "entries")
    '("gint" "n_entries")
    '("gpointer" "user_data")
  )
)



;; From gsimpleaction.h

(define-function g_simple_action_get_type
  (c-name "g_simple_action_get_type")
  (return-type "GType")
)

(define-function g_simple_action_new
  (c-name "g_simple_action_new")
  (is-constructor-of "GSimpleAction")
  (return-type "GSimpleAction*")
  (parameters
    '("const-gchar*" "name")
    '("const-GVariantType*" "parameter_type")
  )
)

(define-function g_simple_action_new_stateful
  (c-name "g_simple_action_new_stateful")
  (return-type "GSimpleAction*")
  (parameters
    '("const-gchar*" "name")
    '("const-GVariantType*" "parameter_type")
    '("GVariant*" "state")
  )
)

(define-method set_enabled
  (of-object "GSimpleAction")
  (c-name "g_simple_action_set_enabled")
  (return-type "none")
  (parameters
    '("gboolean" "enabled")
  )
)

(define-method set_state
  (of-object "GSimpleAction")
  (c-name "g_simple_action_set_state")
  (return-type "none")
  (parameters
    '("GVariant*" "value")
  )
)

(define-method set_state_hint
  (of-object "GSimpleAction")
  (c-name "g_simple_action_set_state_hint")
  (return-type "none")
  (parameters
    '("GVariant*" "state_hint")
  )
)



;; From gsimpleasyncresult.h

(define-function g_simple_async_result_get_type
  (c-name "g_simple_async_result_get_type")
  (return-type "GType")
)

(define-function g_simple_async_result_new
  (c-name "g_simple_async_result_new")
  (is-constructor-of "GSimpleAsyncResult")
  (return-type "GSimpleAsyncResult*")
  (parameters
    '("GObject*" "source_object")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
    '("gpointer" "source_tag")
  )
)

(define-function g_simple_async_result_new_error
  (c-name "g_simple_async_result_new_error")
  (return-type "GSimpleAsyncResult*")
  (parameters
    '("GObject*" "source_object")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
    '("GQuark" "domain")
    '("gint" "code")
    '("const-char*" "format")
  )
  (varargs #t)
)

(define-function g_simple_async_result_new_from_error
  (c-name "g_simple_async_result_new_from_error")
  (return-type "GSimpleAsyncResult*")
  (parameters
    '("GObject*" "source_object")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
    '("const-GError*" "error")
  )
)

(define-function g_simple_async_result_new_take_error
  (c-name "g_simple_async_result_new_take_error")
  (return-type "GSimpleAsyncResult*")
  (parameters
    '("GObject*" "source_object")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
    '("GError*" "error")
  )
)

(define-method set_op_res_gpointer
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_set_op_res_gpointer")
  (return-type "none")
  (parameters
    '("gpointer" "op_res")
    '("GDestroyNotify" "destroy_op_res")
  )
)

(define-method get_op_res_gpointer
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_get_op_res_gpointer")
  (return-type "gpointer")
)

(define-method set_op_res_gssize
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_set_op_res_gssize")
  (return-type "none")
  (parameters
    '("gssize" "op_res")
  )
)

(define-method get_op_res_gssize
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_get_op_res_gssize")
  (return-type "gssize")
)

(define-method set_op_res_gboolean
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_set_op_res_gboolean")
  (return-type "none")
  (parameters
    '("gboolean" "op_res")
  )
)

(define-method get_op_res_gboolean
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_get_op_res_gboolean")
  (return-type "gboolean")
)

(define-method set_check_cancellable
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_set_check_cancellable")
  (return-type "none")
  (parameters
    '("GCancellable*" "check_cancellable")
  )
)

(define-method get_source_tag
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_get_source_tag")
  (return-type "gpointer")
)

(define-method set_handle_cancellation
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_set_handle_cancellation")
  (return-type "none")
  (parameters
    '("gboolean" "handle_cancellation")
  )
)

(define-method complete
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_complete")
  (return-type "none")
)

(define-method complete_in_idle
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_complete_in_idle")
  (return-type "none")
)

(define-method run_in_thread
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_run_in_thread")
  (return-type "none")
  (parameters
    '("GSimpleAsyncThreadFunc" "func")
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
  )
)

(define-method set_from_error
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_set_from_error")
  (return-type "none")
  (parameters
    '("const-GError*" "error")
  )
)

(define-method take_error
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_take_error")
  (return-type "none")
  (parameters
    '("GError*" "error")
  )
)

(define-method propagate_error
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_propagate_error")
  (return-type "gboolean")
  (parameters
    '("GError**" "dest")
  )
)

(define-method set_error
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_set_error")
  (return-type "none")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("const-char*" "format")
  )
  (varargs #t)
)

(define-method set_error_va
  (of-object "GSimpleAsyncResult")
  (c-name "g_simple_async_result_set_error_va")
  (return-type "none")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("const-char*" "format")
    '("va_list" "args")
  )
)

(define-function g_simple_async_result_is_valid
  (c-name "g_simple_async_result_is_valid")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GObject*" "source")
    '("gpointer" "source_tag")
  )
)

(define-function g_simple_async_report_error_in_idle
  (c-name "g_simple_async_report_error_in_idle")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
    '("GQuark" "domain")
    '("gint" "code")
    '("const-char*" "format")
  )
  (varargs #t)
)

(define-function g_simple_async_report_gerror_in_idle
  (c-name "g_simple_async_report_gerror_in_idle")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
    '("const-GError*" "error")
  )
)

(define-function g_simple_async_report_take_gerror_in_idle
  (c-name "g_simple_async_report_take_gerror_in_idle")
  (return-type "none")
  (parameters
    '("GObject*" "object")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
    '("GError*" "error")
  )
)



;; From gsimpleiostream.h

(define-function g_simple_io_stream_get_type
  (c-name "g_simple_io_stream_get_type")
  (return-type "GType")
)

(define-function g_simple_io_stream_new
  (c-name "g_simple_io_stream_new")
  (is-constructor-of "GSimpleIoStream")
  (return-type "GIOStream*")
  (parameters
    '("GInputStream*" "input_stream")
    '("GOutputStream*" "output_stream")
  )
)



;; From gsimplepermission.h

(define-function g_simple_permission_get_type
  (c-name "g_simple_permission_get_type")
  (return-type "GType")
)

(define-function g_simple_permission_new
  (c-name "g_simple_permission_new")
  (is-constructor-of "GSimplePermission")
  (return-type "GPermission*")
  (parameters
    '("gboolean" "allowed")
  )
)



;; From gsimpleproxyresolver.h

(define-function g_simple_proxy_resolver_get_type
  (c-name "g_simple_proxy_resolver_get_type")
  (return-type "GType")
)

(define-function g_simple_proxy_resolver_new
  (c-name "g_simple_proxy_resolver_new")
  (is-constructor-of "GSimpleProxyResolver")
  (return-type "GProxyResolver*")
  (parameters
    '("const-gchar*" "default_proxy")
    '("gchar**" "ignore_hosts")
  )
)

(define-method set_default_proxy
  (of-object "GSimpleProxyResolver")
  (c-name "g_simple_proxy_resolver_set_default_proxy")
  (return-type "none")
  (parameters
    '("const-gchar*" "default_proxy")
  )
)

(define-method set_ignore_hosts
  (of-object "GSimpleProxyResolver")
  (c-name "g_simple_proxy_resolver_set_ignore_hosts")
  (return-type "none")
  (parameters
    '("gchar**" "ignore_hosts")
  )
)

(define-method set_uri_proxy
  (of-object "GSimpleProxyResolver")
  (c-name "g_simple_proxy_resolver_set_uri_proxy")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri_scheme")
    '("const-gchar*" "proxy")
  )
)



;; From gsocketaddressenumerator.h

(define-function g_socket_address_enumerator_get_type
  (c-name "g_socket_address_enumerator_get_type")
  (return-type "GType")
)

(define-method next
  (of-object "GSocketAddressEnumerator")
  (c-name "g_socket_address_enumerator_next")
  (return-type "GSocketAddress*")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method next_async
  (of-object "GSocketAddressEnumerator")
  (c-name "g_socket_address_enumerator_next_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method next_finish
  (of-object "GSocketAddressEnumerator")
  (c-name "g_socket_address_enumerator_next_finish")
  (return-type "GSocketAddress*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)



;; From gsocketaddress.h

(define-function g_socket_address_get_type
  (c-name "g_socket_address_get_type")
  (return-type "GType")
)

(define-method get_family
  (of-object "GSocketAddress")
  (c-name "g_socket_address_get_family")
  (return-type "GSocketFamily")
)

(define-function g_socket_address_new_from_native
  (c-name "g_socket_address_new_from_native")
  (return-type "GSocketAddress*")
  (parameters
    '("gpointer" "native")
    '("gsize" "len")
  )
)

(define-method to_native
  (of-object "GSocketAddress")
  (c-name "g_socket_address_to_native")
  (return-type "gboolean")
  (parameters
    '("gpointer" "dest")
    '("gsize" "destlen")
    '("GError**" "error")
  )
)

(define-method get_native_size
  (of-object "GSocketAddress")
  (c-name "g_socket_address_get_native_size")
  (return-type "gssize")
)



;; From gsocketclient.h

(define-function g_socket_client_get_type
  (c-name "g_socket_client_get_type")
  (return-type "GType")
)

(define-function g_socket_client_new
  (c-name "g_socket_client_new")
  (is-constructor-of "GSocketClient")
  (return-type "GSocketClient*")
)

(define-method get_family
  (of-object "GSocketClient")
  (c-name "g_socket_client_get_family")
  (return-type "GSocketFamily")
)

(define-method set_family
  (of-object "GSocketClient")
  (c-name "g_socket_client_set_family")
  (return-type "none")
  (parameters
    '("GSocketFamily" "family")
  )
)

(define-method get_socket_type
  (of-object "GSocketClient")
  (c-name "g_socket_client_get_socket_type")
  (return-type "GSocketType")
)

(define-method set_socket_type
  (of-object "GSocketClient")
  (c-name "g_socket_client_set_socket_type")
  (return-type "none")
  (parameters
    '("GSocketType" "type")
  )
)

(define-method get_protocol
  (of-object "GSocketClient")
  (c-name "g_socket_client_get_protocol")
  (return-type "GSocketProtocol")
)

(define-method set_protocol
  (of-object "GSocketClient")
  (c-name "g_socket_client_set_protocol")
  (return-type "none")
  (parameters
    '("GSocketProtocol" "protocol")
  )
)

(define-method get_local_address
  (of-object "GSocketClient")
  (c-name "g_socket_client_get_local_address")
  (return-type "GSocketAddress*")
)

(define-method set_local_address
  (of-object "GSocketClient")
  (c-name "g_socket_client_set_local_address")
  (return-type "none")
  (parameters
    '("GSocketAddress*" "address")
  )
)

(define-method get_timeout
  (of-object "GSocketClient")
  (c-name "g_socket_client_get_timeout")
  (return-type "guint")
)

(define-method set_timeout
  (of-object "GSocketClient")
  (c-name "g_socket_client_set_timeout")
  (return-type "none")
  (parameters
    '("guint" "timeout")
  )
)

(define-method get_enable_proxy
  (of-object "GSocketClient")
  (c-name "g_socket_client_get_enable_proxy")
  (return-type "gboolean")
)

(define-method set_enable_proxy
  (of-object "GSocketClient")
  (c-name "g_socket_client_set_enable_proxy")
  (return-type "none")
  (parameters
    '("gboolean" "enable")
  )
)

(define-method get_tls
  (of-object "GSocketClient")
  (c-name "g_socket_client_get_tls")
  (return-type "gboolean")
)

(define-method set_tls
  (of-object "GSocketClient")
  (c-name "g_socket_client_set_tls")
  (return-type "none")
  (parameters
    '("gboolean" "tls")
  )
)

(define-method get_tls_validation_flags
  (of-object "GSocketClient")
  (c-name "g_socket_client_get_tls_validation_flags")
  (return-type "GTlsCertificateFlags")
)

(define-method set_tls_validation_flags
  (of-object "GSocketClient")
  (c-name "g_socket_client_set_tls_validation_flags")
  (return-type "none")
  (parameters
    '("GTlsCertificateFlags" "flags")
  )
)

(define-method get_proxy_resolver
  (of-object "GSocketClient")
  (c-name "g_socket_client_get_proxy_resolver")
  (return-type "GProxyResolver*")
)

(define-method set_proxy_resolver
  (of-object "GSocketClient")
  (c-name "g_socket_client_set_proxy_resolver")
  (return-type "none")
  (parameters
    '("GProxyResolver*" "proxy_resolver")
  )
)

(define-method connect
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect")
  (return-type "GSocketConnection*")
  (parameters
    '("GSocketConnectable*" "connectable")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method connect_to_host
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_to_host")
  (return-type "GSocketConnection*")
  (parameters
    '("const-gchar*" "host_and_port")
    '("guint16" "default_port")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method connect_to_service
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_to_service")
  (return-type "GSocketConnection*")
  (parameters
    '("const-gchar*" "domain")
    '("const-gchar*" "service")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method connect_to_uri
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_to_uri")
  (return-type "GSocketConnection*")
  (parameters
    '("const-gchar*" "uri")
    '("guint16" "default_port")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method connect_async
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_async")
  (return-type "none")
  (parameters
    '("GSocketConnectable*" "connectable")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method connect_finish
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_finish")
  (return-type "GSocketConnection*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method connect_to_host_async
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_to_host_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "host_and_port")
    '("guint16" "default_port")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method connect_to_host_finish
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_to_host_finish")
  (return-type "GSocketConnection*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method connect_to_service_async
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_to_service_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "domain")
    '("const-gchar*" "service")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method connect_to_service_finish
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_to_service_finish")
  (return-type "GSocketConnection*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method connect_to_uri_async
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_to_uri_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
    '("guint16" "default_port")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method connect_to_uri_finish
  (of-object "GSocketClient")
  (c-name "g_socket_client_connect_to_uri_finish")
  (return-type "GSocketConnection*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method add_application_proxy
  (of-object "GSocketClient")
  (c-name "g_socket_client_add_application_proxy")
  (return-type "none")
  (parameters
    '("const-gchar*" "protocol")
  )
)



;; From gsocketconnectable.h

(define-function g_socket_connectable_get_type
  (c-name "g_socket_connectable_get_type")
  (return-type "GType")
)

(define-method enumerate
  (of-object "GSocketConnectable")
  (c-name "g_socket_connectable_enumerate")
  (return-type "GSocketAddressEnumerator*")
)

(define-method proxy_enumerate
  (of-object "GSocketConnectable")
  (c-name "g_socket_connectable_proxy_enumerate")
  (return-type "GSocketAddressEnumerator*")
)

(define-method to_string
  (of-object "GSocketConnectable")
  (c-name "g_socket_connectable_to_string")
  (return-type "gchar*")
)



;; From gsocketconnection.h

(define-function g_socket_connection_get_type
  (c-name "g_socket_connection_get_type")
  (return-type "GType")
)

(define-method is_connected
  (of-object "GSocketConnection")
  (c-name "g_socket_connection_is_connected")
  (return-type "gboolean")
)

(define-method connect
  (of-object "GSocketConnection")
  (c-name "g_socket_connection_connect")
  (return-type "gboolean")
  (parameters
    '("GSocketAddress*" "address")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method connect_async
  (of-object "GSocketConnection")
  (c-name "g_socket_connection_connect_async")
  (return-type "none")
  (parameters
    '("GSocketAddress*" "address")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method connect_finish
  (of-object "GSocketConnection")
  (c-name "g_socket_connection_connect_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method get_socket
  (of-object "GSocketConnection")
  (c-name "g_socket_connection_get_socket")
  (return-type "GSocket*")
)

(define-method get_local_address
  (of-object "GSocketConnection")
  (c-name "g_socket_connection_get_local_address")
  (return-type "GSocketAddress*")
  (parameters
    '("GError**" "error")
  )
)

(define-method get_remote_address
  (of-object "GSocketConnection")
  (c-name "g_socket_connection_get_remote_address")
  (return-type "GSocketAddress*")
  (parameters
    '("GError**" "error")
  )
)

(define-function g_socket_connection_factory_register_type
  (c-name "g_socket_connection_factory_register_type")
  (return-type "none")
  (parameters
    '("GType" "g_type")
    '("GSocketFamily" "family")
    '("GSocketType" "type")
    '("gint" "protocol")
  )
)

(define-function g_socket_connection_factory_lookup_type
  (c-name "g_socket_connection_factory_lookup_type")
  (return-type "GType")
  (parameters
    '("GSocketFamily" "family")
    '("GSocketType" "type")
    '("gint" "protocol_id")
  )
)

(define-method connection_factory_create_connection
  (of-object "GSocket")
  (c-name "g_socket_connection_factory_create_connection")
  (return-type "GSocketConnection*")
)



;; From gsocketcontrolmessage.h

(define-function g_socket_control_message_get_type
  (c-name "g_socket_control_message_get_type")
  (return-type "GType")
)

(define-method get_size
  (of-object "GSocketControlMessage")
  (c-name "g_socket_control_message_get_size")
  (return-type "gsize")
)

(define-method get_level
  (of-object "GSocketControlMessage")
  (c-name "g_socket_control_message_get_level")
  (return-type "int")
)

(define-method get_msg_type
  (of-object "GSocketControlMessage")
  (c-name "g_socket_control_message_get_msg_type")
  (return-type "int")
)

(define-method serialize
  (of-object "GSocketControlMessage")
  (c-name "g_socket_control_message_serialize")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-function g_socket_control_message_deserialize
  (c-name "g_socket_control_message_deserialize")
  (return-type "GSocketControlMessage*")
  (parameters
    '("int" "level")
    '("int" "type")
    '("gsize" "size")
    '("gpointer" "data")
  )
)



;; From gsocket.h

(define-function g_socket_get_type
  (c-name "g_socket_get_type")
  (return-type "GType")
)

(define-function g_socket_new
  (c-name "g_socket_new")
  (is-constructor-of "GSocket")
  (return-type "GSocket*")
  (parameters
    '("GSocketFamily" "family")
    '("GSocketType" "type")
    '("GSocketProtocol" "protocol")
    '("GError**" "error")
  )
)

(define-function g_socket_new_from_fd
  (c-name "g_socket_new_from_fd")
  (return-type "GSocket*")
  (parameters
    '("gint" "fd")
    '("GError**" "error")
  )
)

(define-method get_fd
  (of-object "GSocket")
  (c-name "g_socket_get_fd")
  (return-type "int")
)

(define-method get_family
  (of-object "GSocket")
  (c-name "g_socket_get_family")
  (return-type "GSocketFamily")
)

(define-method get_socket_type
  (of-object "GSocket")
  (c-name "g_socket_get_socket_type")
  (return-type "GSocketType")
)

(define-method get_protocol
  (of-object "GSocket")
  (c-name "g_socket_get_protocol")
  (return-type "GSocketProtocol")
)

(define-method get_local_address
  (of-object "GSocket")
  (c-name "g_socket_get_local_address")
  (return-type "GSocketAddress*")
  (parameters
    '("GError**" "error")
  )
)

(define-method get_remote_address
  (of-object "GSocket")
  (c-name "g_socket_get_remote_address")
  (return-type "GSocketAddress*")
  (parameters
    '("GError**" "error")
  )
)

(define-method set_blocking
  (of-object "GSocket")
  (c-name "g_socket_set_blocking")
  (return-type "none")
  (parameters
    '("gboolean" "blocking")
  )
)

(define-method get_blocking
  (of-object "GSocket")
  (c-name "g_socket_get_blocking")
  (return-type "gboolean")
)

(define-method set_keepalive
  (of-object "GSocket")
  (c-name "g_socket_set_keepalive")
  (return-type "none")
  (parameters
    '("gboolean" "keepalive")
  )
)

(define-method get_keepalive
  (of-object "GSocket")
  (c-name "g_socket_get_keepalive")
  (return-type "gboolean")
)

(define-method get_listen_backlog
  (of-object "GSocket")
  (c-name "g_socket_get_listen_backlog")
  (return-type "gint")
)

(define-method set_listen_backlog
  (of-object "GSocket")
  (c-name "g_socket_set_listen_backlog")
  (return-type "none")
  (parameters
    '("gint" "backlog")
  )
)

(define-method get_timeout
  (of-object "GSocket")
  (c-name "g_socket_get_timeout")
  (return-type "guint")
)

(define-method set_timeout
  (of-object "GSocket")
  (c-name "g_socket_set_timeout")
  (return-type "none")
  (parameters
    '("guint" "timeout")
  )
)

(define-method get_ttl
  (of-object "GSocket")
  (c-name "g_socket_get_ttl")
  (return-type "guint")
)

(define-method set_ttl
  (of-object "GSocket")
  (c-name "g_socket_set_ttl")
  (return-type "none")
  (parameters
    '("guint" "ttl")
  )
)

(define-method get_broadcast
  (of-object "GSocket")
  (c-name "g_socket_get_broadcast")
  (return-type "gboolean")
)

(define-method set_broadcast
  (of-object "GSocket")
  (c-name "g_socket_set_broadcast")
  (return-type "none")
  (parameters
    '("gboolean" "broadcast")
  )
)

(define-method get_multicast_loopback
  (of-object "GSocket")
  (c-name "g_socket_get_multicast_loopback")
  (return-type "gboolean")
)

(define-method set_multicast_loopback
  (of-object "GSocket")
  (c-name "g_socket_set_multicast_loopback")
  (return-type "none")
  (parameters
    '("gboolean" "loopback")
  )
)

(define-method get_multicast_ttl
  (of-object "GSocket")
  (c-name "g_socket_get_multicast_ttl")
  (return-type "guint")
)

(define-method set_multicast_ttl
  (of-object "GSocket")
  (c-name "g_socket_set_multicast_ttl")
  (return-type "none")
  (parameters
    '("guint" "ttl")
  )
)

(define-method is_connected
  (of-object "GSocket")
  (c-name "g_socket_is_connected")
  (return-type "gboolean")
)

(define-method bind
  (of-object "GSocket")
  (c-name "g_socket_bind")
  (return-type "gboolean")
  (parameters
    '("GSocketAddress*" "address")
    '("gboolean" "allow_reuse")
    '("GError**" "error")
  )
)

(define-method join_multicast_group
  (of-object "GSocket")
  (c-name "g_socket_join_multicast_group")
  (return-type "gboolean")
  (parameters
    '("GInetAddress*" "group")
    '("gboolean" "source_specific")
    '("const-gchar*" "iface")
    '("GError**" "error")
  )
)

(define-method leave_multicast_group
  (of-object "GSocket")
  (c-name "g_socket_leave_multicast_group")
  (return-type "gboolean")
  (parameters
    '("GInetAddress*" "group")
    '("gboolean" "source_specific")
    '("const-gchar*" "iface")
    '("GError**" "error")
  )
)

(define-method join_multicast_group_ssm
  (of-object "GSocket")
  (c-name "g_socket_join_multicast_group_ssm")
  (return-type "gboolean")
  (parameters
    '("GInetAddress*" "group")
    '("GInetAddress*" "source_specific")
    '("const-gchar*" "iface")
    '("GError**" "error")
  )
)

(define-method leave_multicast_group_ssm
  (of-object "GSocket")
  (c-name "g_socket_leave_multicast_group_ssm")
  (return-type "gboolean")
  (parameters
    '("GInetAddress*" "group")
    '("GInetAddress*" "source_specific")
    '("const-gchar*" "iface")
    '("GError**" "error")
  )
)

(define-method connect
  (of-object "GSocket")
  (c-name "g_socket_connect")
  (return-type "gboolean")
  (parameters
    '("GSocketAddress*" "address")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method check_connect_result
  (of-object "GSocket")
  (c-name "g_socket_check_connect_result")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method get_available_bytes
  (of-object "GSocket")
  (c-name "g_socket_get_available_bytes")
  (return-type "gssize")
)

(define-method condition_check
  (of-object "GSocket")
  (c-name "g_socket_condition_check")
  (return-type "GIOCondition")
  (parameters
    '("GIOCondition" "condition")
  )
)

(define-method condition_wait
  (of-object "GSocket")
  (c-name "g_socket_condition_wait")
  (return-type "gboolean")
  (parameters
    '("GIOCondition" "condition")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method condition_timed_wait
  (of-object "GSocket")
  (c-name "g_socket_condition_timed_wait")
  (return-type "gboolean")
  (parameters
    '("GIOCondition" "condition")
    '("gint64" "timeout")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method accept
  (of-object "GSocket")
  (c-name "g_socket_accept")
  (return-type "GSocket*")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method listen
  (of-object "GSocket")
  (c-name "g_socket_listen")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method receive
  (of-object "GSocket")
  (c-name "g_socket_receive")
  (return-type "gssize")
  (parameters
    '("gchar*" "buffer")
    '("gsize" "size")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method receive_from
  (of-object "GSocket")
  (c-name "g_socket_receive_from")
  (return-type "gssize")
  (parameters
    '("GSocketAddress**" "address")
    '("gchar*" "buffer")
    '("gsize" "size")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method send
  (of-object "GSocket")
  (c-name "g_socket_send")
  (return-type "gssize")
  (parameters
    '("const-gchar*" "buffer")
    '("gsize" "size")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method send_to
  (of-object "GSocket")
  (c-name "g_socket_send_to")
  (return-type "gssize")
  (parameters
    '("GSocketAddress*" "address")
    '("const-gchar*" "buffer")
    '("gsize" "size")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method receive_message
  (of-object "GSocket")
  (c-name "g_socket_receive_message")
  (return-type "gssize")
  (parameters
    '("GSocketAddress**" "address")
    '("GInputVector*" "vectors")
    '("gint" "num_vectors")
    '("GSocketControlMessage***" "messages")
    '("gint*" "num_messages")
    '("gint*" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method send_message
  (of-object "GSocket")
  (c-name "g_socket_send_message")
  (return-type "gssize")
  (parameters
    '("GSocketAddress*" "address")
    '("GOutputVector*" "vectors")
    '("gint" "num_vectors")
    '("GSocketControlMessage**" "messages")
    '("gint" "num_messages")
    '("gint" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method receive_messages
  (of-object "GSocket")
  (c-name "g_socket_receive_messages")
  (return-type "gint")
  (parameters
    '("GInputMessage*" "messages")
    '("guint" "num_messages")
    '("gint" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method send_messages
  (of-object "GSocket")
  (c-name "g_socket_send_messages")
  (return-type "gint")
  (parameters
    '("GOutputMessage*" "messages")
    '("guint" "num_messages")
    '("gint" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method close
  (of-object "GSocket")
  (c-name "g_socket_close")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method shutdown
  (of-object "GSocket")
  (c-name "g_socket_shutdown")
  (return-type "gboolean")
  (parameters
    '("gboolean" "shutdown_read")
    '("gboolean" "shutdown_write")
    '("GError**" "error")
  )
)

(define-method is_closed
  (of-object "GSocket")
  (c-name "g_socket_is_closed")
  (return-type "gboolean")
)

(define-method create_source
  (of-object "GSocket")
  (c-name "g_socket_create_source")
  (return-type "GSource*")
  (parameters
    '("GIOCondition" "condition")
    '("GCancellable*" "cancellable")
  )
)

(define-method speaks_ipv4
  (of-object "GSocket")
  (c-name "g_socket_speaks_ipv4")
  (return-type "gboolean")
)

(define-method get_credentials
  (of-object "GSocket")
  (c-name "g_socket_get_credentials")
  (return-type "GCredentials*")
  (parameters
    '("GError**" "error")
  )
)

(define-method receive_with_blocking
  (of-object "GSocket")
  (c-name "g_socket_receive_with_blocking")
  (return-type "gssize")
  (parameters
    '("gchar*" "buffer")
    '("gsize" "size")
    '("gboolean" "blocking")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method send_with_blocking
  (of-object "GSocket")
  (c-name "g_socket_send_with_blocking")
  (return-type "gssize")
  (parameters
    '("const-gchar*" "buffer")
    '("gsize" "size")
    '("gboolean" "blocking")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method get_option
  (of-object "GSocket")
  (c-name "g_socket_get_option")
  (return-type "gboolean")
  (parameters
    '("gint" "level")
    '("gint" "optname")
    '("gint*" "value")
    '("GError**" "error")
  )
)

(define-method set_option
  (of-object "GSocket")
  (c-name "g_socket_set_option")
  (return-type "gboolean")
  (parameters
    '("gint" "level")
    '("gint" "optname")
    '("gint" "value")
    '("GError**" "error")
  )
)



;; From gsocketinputstream.h



;; From gsocketlistener.h

(define-function g_socket_listener_get_type
  (c-name "g_socket_listener_get_type")
  (return-type "GType")
)

(define-function g_socket_listener_new
  (c-name "g_socket_listener_new")
  (is-constructor-of "GSocketListener")
  (return-type "GSocketListener*")
)

(define-method set_backlog
  (of-object "GSocketListener")
  (c-name "g_socket_listener_set_backlog")
  (return-type "none")
  (parameters
    '("int" "listen_backlog")
  )
)

(define-method add_socket
  (of-object "GSocketListener")
  (c-name "g_socket_listener_add_socket")
  (return-type "gboolean")
  (parameters
    '("GSocket*" "socket")
    '("GObject*" "source_object")
    '("GError**" "error")
  )
)

(define-method add_address
  (of-object "GSocketListener")
  (c-name "g_socket_listener_add_address")
  (return-type "gboolean")
  (parameters
    '("GSocketAddress*" "address")
    '("GSocketType" "type")
    '("GSocketProtocol" "protocol")
    '("GObject*" "source_object")
    '("GSocketAddress**" "effective_address")
    '("GError**" "error")
  )
)

(define-method add_inet_port
  (of-object "GSocketListener")
  (c-name "g_socket_listener_add_inet_port")
  (return-type "gboolean")
  (parameters
    '("guint16" "port")
    '("GObject*" "source_object")
    '("GError**" "error")
  )
)

(define-method add_any_inet_port
  (of-object "GSocketListener")
  (c-name "g_socket_listener_add_any_inet_port")
  (return-type "guint16")
  (parameters
    '("GObject*" "source_object")
    '("GError**" "error")
  )
)

(define-method accept_socket
  (of-object "GSocketListener")
  (c-name "g_socket_listener_accept_socket")
  (return-type "GSocket*")
  (parameters
    '("GObject**" "source_object")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method accept_socket_async
  (of-object "GSocketListener")
  (c-name "g_socket_listener_accept_socket_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method accept_socket_finish
  (of-object "GSocketListener")
  (c-name "g_socket_listener_accept_socket_finish")
  (return-type "GSocket*")
  (parameters
    '("GAsyncResult*" "result")
    '("GObject**" "source_object")
    '("GError**" "error")
  )
)

(define-method accept
  (of-object "GSocketListener")
  (c-name "g_socket_listener_accept")
  (return-type "GSocketConnection*")
  (parameters
    '("GObject**" "source_object")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method accept_async
  (of-object "GSocketListener")
  (c-name "g_socket_listener_accept_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method accept_finish
  (of-object "GSocketListener")
  (c-name "g_socket_listener_accept_finish")
  (return-type "GSocketConnection*")
  (parameters
    '("GAsyncResult*" "result")
    '("GObject**" "source_object")
    '("GError**" "error")
  )
)

(define-method close
  (of-object "GSocketListener")
  (c-name "g_socket_listener_close")
  (return-type "none")
)



;; From gsocketoutputstream.h



;; From gsocketservice.h

(define-function g_socket_service_get_type
  (c-name "g_socket_service_get_type")
  (return-type "GType")
)

(define-function g_socket_service_new
  (c-name "g_socket_service_new")
  (is-constructor-of "GSocketService")
  (return-type "GSocketService*")
)

(define-method start
  (of-object "GSocketService")
  (c-name "g_socket_service_start")
  (return-type "none")
)

(define-method stop
  (of-object "GSocketService")
  (c-name "g_socket_service_stop")
  (return-type "none")
)

(define-method is_active
  (of-object "GSocketService")
  (c-name "g_socket_service_is_active")
  (return-type "gboolean")
)



;; From gsocks4aproxy.h



;; From gsocks4proxy.h



;; From gsocks5proxy.h



;; From gsrvtarget.h

(define-function g_srv_target_get_type
  (c-name "g_srv_target_get_type")
  (return-type "GType")
)

(define-function g_srv_target_new
  (c-name "g_srv_target_new")
  (is-constructor-of "GSrvTarget")
  (return-type "GSrvTarget*")
  (parameters
    '("const-gchar*" "hostname")
    '("guint16" "port")
    '("guint16" "priority")
    '("guint16" "weight")
  )
)

(define-method copy
  (of-object "GSrvTarget")
  (c-name "g_srv_target_copy")
  (return-type "GSrvTarget*")
)

(define-method free
  (of-object "GSrvTarget")
  (c-name "g_srv_target_free")
  (return-type "none")
)

(define-method get_hostname
  (of-object "GSrvTarget")
  (c-name "g_srv_target_get_hostname")
  (return-type "const-gchar*")
)

(define-method get_port
  (of-object "GSrvTarget")
  (c-name "g_srv_target_get_port")
  (return-type "guint16")
)

(define-method get_priority
  (of-object "GSrvTarget")
  (c-name "g_srv_target_get_priority")
  (return-type "guint16")
)

(define-method get_weight
  (of-object "GSrvTarget")
  (c-name "g_srv_target_get_weight")
  (return-type "guint16")
)

(define-function g_srv_target_list_sort
  (c-name "g_srv_target_list_sort")
  (return-type "GList*")
  (parameters
    '("GList*" "targets")
  )
)



;; From gsubprocess.h

(define-function g_subprocess_get_type
  (c-name "g_subprocess_get_type")
  (return-type "GType")
)

(define-function g_subprocess_new
  (c-name "g_subprocess_new")
  (is-constructor-of "GSubprocess")
  (return-type "GSubprocess*")
  (parameters
    '("GSubprocessFlags" "flags")
    '("GError**" "error")
    '("const-gchar*" "argv0")
  )
  (varargs #t)
)

(define-function g_subprocess_newv
  (c-name "g_subprocess_newv")
  (return-type "GSubprocess*")
  (parameters
    '("const-gchar*-const*" "argv")
    '("GSubprocessFlags" "flags")
    '("GError**" "error")
  )
)

(define-method get_stdin_pipe
  (of-object "GSubprocess")
  (c-name "g_subprocess_get_stdin_pipe")
  (return-type "GOutputStream*")
)

(define-method get_stdout_pipe
  (of-object "GSubprocess")
  (c-name "g_subprocess_get_stdout_pipe")
  (return-type "GInputStream*")
)

(define-method get_stderr_pipe
  (of-object "GSubprocess")
  (c-name "g_subprocess_get_stderr_pipe")
  (return-type "GInputStream*")
)

(define-method get_identifier
  (of-object "GSubprocess")
  (c-name "g_subprocess_get_identifier")
  (return-type "const-gchar*")
)

(define-method send_signal
  (of-object "GSubprocess")
  (c-name "g_subprocess_send_signal")
  (return-type "none")
  (parameters
    '("gint" "signal_num")
  )
)

(define-method force_exit
  (of-object "GSubprocess")
  (c-name "g_subprocess_force_exit")
  (return-type "none")
)

(define-method wait
  (of-object "GSubprocess")
  (c-name "g_subprocess_wait")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method wait_async
  (of-object "GSubprocess")
  (c-name "g_subprocess_wait_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method wait_finish
  (of-object "GSubprocess")
  (c-name "g_subprocess_wait_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method wait_check
  (of-object "GSubprocess")
  (c-name "g_subprocess_wait_check")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method wait_check_async
  (of-object "GSubprocess")
  (c-name "g_subprocess_wait_check_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method wait_check_finish
  (of-object "GSubprocess")
  (c-name "g_subprocess_wait_check_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method get_status
  (of-object "GSubprocess")
  (c-name "g_subprocess_get_status")
  (return-type "gint")
)

(define-method get_successful
  (of-object "GSubprocess")
  (c-name "g_subprocess_get_successful")
  (return-type "gboolean")
)

(define-method get_if_exited
  (of-object "GSubprocess")
  (c-name "g_subprocess_get_if_exited")
  (return-type "gboolean")
)

(define-method get_exit_status
  (of-object "GSubprocess")
  (c-name "g_subprocess_get_exit_status")
  (return-type "gint")
)

(define-method get_if_signaled
  (of-object "GSubprocess")
  (c-name "g_subprocess_get_if_signaled")
  (return-type "gboolean")
)

(define-method get_term_sig
  (of-object "GSubprocess")
  (c-name "g_subprocess_get_term_sig")
  (return-type "gint")
)

(define-method communicate
  (of-object "GSubprocess")
  (c-name "g_subprocess_communicate")
  (return-type "gboolean")
  (parameters
    '("GBytes*" "stdin_buf")
    '("GCancellable*" "cancellable")
    '("GBytes**" "stdout_buf")
    '("GBytes**" "stderr_buf")
    '("GError**" "error")
  )
)

(define-method communicate_async
  (of-object "GSubprocess")
  (c-name "g_subprocess_communicate_async")
  (return-type "none")
  (parameters
    '("GBytes*" "stdin_buf")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method communicate_finish
  (of-object "GSubprocess")
  (c-name "g_subprocess_communicate_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GBytes**" "stdout_buf")
    '("GBytes**" "stderr_buf")
    '("GError**" "error")
  )
)

(define-method communicate_utf8
  (of-object "GSubprocess")
  (c-name "g_subprocess_communicate_utf8")
  (return-type "gboolean")
  (parameters
    '("const-char*" "stdin_buf")
    '("GCancellable*" "cancellable")
    '("char**" "stdout_buf")
    '("char**" "stderr_buf")
    '("GError**" "error")
  )
)

(define-method communicate_utf8_async
  (of-object "GSubprocess")
  (c-name "g_subprocess_communicate_utf8_async")
  (return-type "none")
  (parameters
    '("const-char*" "stdin_buf")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method communicate_utf8_finish
  (of-object "GSubprocess")
  (c-name "g_subprocess_communicate_utf8_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("char**" "stdout_buf")
    '("char**" "stderr_buf")
    '("GError**" "error")
  )
)



;; From gsubprocesslauncher.h

(define-function g_subprocess_launcher_get_type
  (c-name "g_subprocess_launcher_get_type")
  (return-type "GType")
)

(define-function g_subprocess_launcher_new
  (c-name "g_subprocess_launcher_new")
  (is-constructor-of "GSubprocessLauncher")
  (return-type "GSubprocessLauncher*")
  (parameters
    '("GSubprocessFlags" "flags")
  )
)

(define-method spawn
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_spawn")
  (return-type "GSubprocess*")
  (parameters
    '("GError**" "error")
    '("const-gchar*" "argv0")
  )
  (varargs #t)
)

(define-method spawnv
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_spawnv")
  (return-type "GSubprocess*")
  (parameters
    '("const-gchar*-const*" "argv")
    '("GError**" "error")
  )
)

(define-method set_environ
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_set_environ")
  (return-type "none")
  (parameters
    '("gchar**" "env")
  )
)

(define-method setenv
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_setenv")
  (return-type "none")
  (parameters
    '("const-gchar*" "variable")
    '("const-gchar*" "value")
    '("gboolean" "overwrite")
  )
)

(define-method unsetenv
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_unsetenv")
  (return-type "none")
  (parameters
    '("const-gchar*" "variable")
  )
)

(define-method getenv
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_getenv")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "variable")
  )
)

(define-method set_cwd
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_set_cwd")
  (return-type "none")
  (parameters
    '("const-gchar*" "cwd")
  )
)

(define-method set_flags
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_set_flags")
  (return-type "none")
  (parameters
    '("GSubprocessFlags" "flags")
  )
)

(define-method set_stdin_file_path
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_set_stdin_file_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method take_stdin_fd
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_take_stdin_fd")
  (return-type "none")
  (parameters
    '("gint" "fd")
  )
)

(define-method set_stdout_file_path
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_set_stdout_file_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method take_stdout_fd
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_take_stdout_fd")
  (return-type "none")
  (parameters
    '("gint" "fd")
  )
)

(define-method set_stderr_file_path
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_set_stderr_file_path")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method take_stderr_fd
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_take_stderr_fd")
  (return-type "none")
  (parameters
    '("gint" "fd")
  )
)

(define-method take_fd
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_take_fd")
  (return-type "none")
  (parameters
    '("gint" "source_fd")
    '("gint" "target_fd")
  )
)

(define-method set_child_setup
  (of-object "GSubprocessLauncher")
  (c-name "g_subprocess_launcher_set_child_setup")
  (return-type "none")
  (parameters
    '("GSpawnChildSetupFunc" "child_setup")
    '("gpointer" "user_data")
    '("GDestroyNotify" "destroy_notify")
  )
)



;; From gtask.h

(define-function g_task_get_type
  (c-name "g_task_get_type")
  (return-type "GType")
)

(define-function g_task_new
  (c-name "g_task_new")
  (is-constructor-of "GTask")
  (return-type "GTask*")
  (parameters
    '("gpointer" "source_object")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "callback_data")
  )
)

(define-function g_task_report_error
  (c-name "g_task_report_error")
  (return-type "none")
  (parameters
    '("gpointer" "source_object")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "callback_data")
    '("gpointer" "source_tag")
    '("GError*" "error")
  )
)

(define-function g_task_report_new_error
  (c-name "g_task_report_new_error")
  (return-type "none")
  (parameters
    '("gpointer" "source_object")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "callback_data")
    '("gpointer" "source_tag")
    '("GQuark" "domain")
    '("gint" "code")
    '("const-char*" "format")
  )
  (varargs #t)
)

(define-method set_task_data
  (of-object "GTask")
  (c-name "g_task_set_task_data")
  (return-type "none")
  (parameters
    '("gpointer" "task_data")
    '("GDestroyNotify" "task_data_destroy")
  )
)

(define-method set_priority
  (of-object "GTask")
  (c-name "g_task_set_priority")
  (return-type "none")
  (parameters
    '("gint" "priority")
  )
)

(define-method set_check_cancellable
  (of-object "GTask")
  (c-name "g_task_set_check_cancellable")
  (return-type "none")
  (parameters
    '("gboolean" "check_cancellable")
  )
)

(define-method set_source_tag
  (of-object "GTask")
  (c-name "g_task_set_source_tag")
  (return-type "none")
  (parameters
    '("gpointer" "source_tag")
  )
)

(define-method get_source_object
  (of-object "GTask")
  (c-name "g_task_get_source_object")
  (return-type "gpointer")
)

(define-method get_task_data
  (of-object "GTask")
  (c-name "g_task_get_task_data")
  (return-type "gpointer")
)

(define-method get_priority
  (of-object "GTask")
  (c-name "g_task_get_priority")
  (return-type "gint")
)

(define-method get_context
  (of-object "GTask")
  (c-name "g_task_get_context")
  (return-type "GMainContext*")
)

(define-method get_cancellable
  (of-object "GTask")
  (c-name "g_task_get_cancellable")
  (return-type "GCancellable*")
)

(define-method get_check_cancellable
  (of-object "GTask")
  (c-name "g_task_get_check_cancellable")
  (return-type "gboolean")
)

(define-method get_source_tag
  (of-object "GTask")
  (c-name "g_task_get_source_tag")
  (return-type "gpointer")
)

(define-function g_task_is_valid
  (c-name "g_task_is_valid")
  (return-type "gboolean")
  (parameters
    '("gpointer" "result")
    '("gpointer" "source_object")
  )
)

(define-method run_in_thread
  (of-object "GTask")
  (c-name "g_task_run_in_thread")
  (return-type "none")
  (parameters
    '("GTaskThreadFunc" "task_func")
  )
)

(define-method run_in_thread_sync
  (of-object "GTask")
  (c-name "g_task_run_in_thread_sync")
  (return-type "none")
  (parameters
    '("GTaskThreadFunc" "task_func")
  )
)

(define-method set_return_on_cancel
  (of-object "GTask")
  (c-name "g_task_set_return_on_cancel")
  (return-type "gboolean")
  (parameters
    '("gboolean" "return_on_cancel")
  )
)

(define-method get_return_on_cancel
  (of-object "GTask")
  (c-name "g_task_get_return_on_cancel")
  (return-type "gboolean")
)

(define-method attach_source
  (of-object "GTask")
  (c-name "g_task_attach_source")
  (return-type "none")
  (parameters
    '("GSource*" "source")
    '("GSourceFunc" "callback")
  )
)

(define-method return_pointer
  (of-object "GTask")
  (c-name "g_task_return_pointer")
  (return-type "none")
  (parameters
    '("gpointer" "result")
    '("GDestroyNotify" "result_destroy")
  )
)

(define-method return_boolean
  (of-object "GTask")
  (c-name "g_task_return_boolean")
  (return-type "none")
  (parameters
    '("gboolean" "result")
  )
)

(define-method return_int
  (of-object "GTask")
  (c-name "g_task_return_int")
  (return-type "none")
  (parameters
    '("gssize" "result")
  )
)

(define-method return_error
  (of-object "GTask")
  (c-name "g_task_return_error")
  (return-type "none")
  (parameters
    '("GError*" "error")
  )
)

(define-method return_new_error
  (of-object "GTask")
  (c-name "g_task_return_new_error")
  (return-type "none")
  (parameters
    '("GQuark" "domain")
    '("gint" "code")
    '("const-char*" "format")
  )
  (varargs #t)
)

(define-method return_error_if_cancelled
  (of-object "GTask")
  (c-name "g_task_return_error_if_cancelled")
  (return-type "gboolean")
)

(define-method propagate_pointer
  (of-object "GTask")
  (c-name "g_task_propagate_pointer")
  (return-type "gpointer")
  (parameters
    '("GError**" "error")
  )
)

(define-method propagate_boolean
  (of-object "GTask")
  (c-name "g_task_propagate_boolean")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method propagate_int
  (of-object "GTask")
  (c-name "g_task_propagate_int")
  (return-type "gssize")
  (parameters
    '("GError**" "error")
  )
)

(define-method had_error
  (of-object "GTask")
  (c-name "g_task_had_error")
  (return-type "gboolean")
)

(define-method get_completed
  (of-object "GTask")
  (c-name "g_task_get_completed")
  (return-type "gboolean")
)



;; From gtcpconnection.h

(define-function g_tcp_connection_get_type
  (c-name "g_tcp_connection_get_type")
  (return-type "GType")
)

(define-method set_graceful_disconnect
  (of-object "GTcpConnection")
  (c-name "g_tcp_connection_set_graceful_disconnect")
  (return-type "none")
  (parameters
    '("gboolean" "graceful_disconnect")
  )
)

(define-method get_graceful_disconnect
  (of-object "GTcpConnection")
  (c-name "g_tcp_connection_get_graceful_disconnect")
  (return-type "gboolean")
)



;; From gtcpwrapperconnection.h

(define-function g_tcp_wrapper_connection_get_type
  (c-name "g_tcp_wrapper_connection_get_type")
  (return-type "GType")
)

(define-function g_tcp_wrapper_connection_new
  (c-name "g_tcp_wrapper_connection_new")
  (is-constructor-of "GTcpWrapperConnection")
  (return-type "GSocketConnection*")
  (parameters
    '("GIOStream*" "base_io_stream")
    '("GSocket*" "socket")
  )
)

(define-method get_base_io_stream
  (of-object "GTcpWrapperConnection")
  (c-name "g_tcp_wrapper_connection_get_base_io_stream")
  (return-type "GIOStream*")
)



;; From gtestdbus.h

(define-function g_test_dbus_get_type
  (c-name "g_test_dbus_get_type")
  (return-type "GType")
)

(define-function g_test_dbus_new
  (c-name "g_test_dbus_new")
  (is-constructor-of "GTestDbus")
  (return-type "GTestDBus*")
  (parameters
    '("GTestDBusFlags" "flags")
  )
)

(define-method get_flags
  (of-object "GTestDBus")
  (c-name "g_test_dbus_get_flags")
  (return-type "GTestDBusFlags")
)

(define-method get_bus_address
  (of-object "GTestDBus")
  (c-name "g_test_dbus_get_bus_address")
  (return-type "const-gchar*")
)

(define-method add_service_dir
  (of-object "GTestDBus")
  (c-name "g_test_dbus_add_service_dir")
  (return-type "none")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-method up
  (of-object "GTestDBus")
  (c-name "g_test_dbus_up")
  (return-type "none")
)

(define-method stop
  (of-object "GTestDBus")
  (c-name "g_test_dbus_stop")
  (return-type "none")
)

(define-method down
  (of-object "GTestDBus")
  (c-name "g_test_dbus_down")
  (return-type "none")
)

(define-function g_test_dbus_unset
  (c-name "g_test_dbus_unset")
  (return-type "none")
)



;; From gthemedicon.h

(define-function g_themed_icon_get_type
  (c-name "g_themed_icon_get_type")
  (return-type "GType")
)

(define-function g_themed_icon_new
  (c-name "g_themed_icon_new")
  (is-constructor-of "GThemedIcon")
  (return-type "GIcon*")
  (parameters
    '("const-char*" "iconname")
  )
)

(define-function g_themed_icon_new_with_default_fallbacks
  (c-name "g_themed_icon_new_with_default_fallbacks")
  (return-type "GIcon*")
  (parameters
    '("const-char*" "iconname")
  )
)

(define-function g_themed_icon_new_from_names
  (c-name "g_themed_icon_new_from_names")
  (return-type "GIcon*")
  (parameters
    '("char**" "iconnames")
    '("int" "len")
  )
)

(define-method prepend_name
  (of-object "GThemedIcon")
  (c-name "g_themed_icon_prepend_name")
  (return-type "none")
  (parameters
    '("const-char*" "iconname")
  )
)

(define-method append_name
  (of-object "GThemedIcon")
  (c-name "g_themed_icon_append_name")
  (return-type "none")
  (parameters
    '("const-char*" "iconname")
  )
)

(define-method get_names
  (of-object "GThemedIcon")
  (c-name "g_themed_icon_get_names")
  (return-type "const-gchar*-const*")
)



;; From gthreadedresolver.h

(define-function g_threaded_resolver_get_type
  (c-name "g_threaded_resolver_get_type")
  (return-type "GType")
)



;; From gthreadedsocketservice.h

(define-function g_threaded_socket_service_get_type
  (c-name "g_threaded_socket_service_get_type")
  (return-type "GType")
)

(define-function g_threaded_socket_service_new
  (c-name "g_threaded_socket_service_new")
  (is-constructor-of "GThreadedSocketService")
  (return-type "GSocketService*")
  (parameters
    '("int" "max_threads")
  )
)



;; From gtlsbackend.h

(define-function g_tls_backend_get_type
  (c-name "g_tls_backend_get_type")
  (return-type "GType")
)

(define-function g_tls_backend_get_default
  (c-name "g_tls_backend_get_default")
  (return-type "GTlsBackend*")
)

(define-method get_default_database
  (of-object "GTlsBackend")
  (c-name "g_tls_backend_get_default_database")
  (return-type "GTlsDatabase*")
)

(define-method supports_tls
  (of-object "GTlsBackend")
  (c-name "g_tls_backend_supports_tls")
  (return-type "gboolean")
)

(define-method supports_dtls
  (of-object "GTlsBackend")
  (c-name "g_tls_backend_supports_dtls")
  (return-type "gboolean")
)

(define-method get_certificate_type
  (of-object "GTlsBackend")
  (c-name "g_tls_backend_get_certificate_type")
  (return-type "GType")
)

(define-method get_client_connection_type
  (of-object "GTlsBackend")
  (c-name "g_tls_backend_get_client_connection_type")
  (return-type "GType")
)

(define-method get_server_connection_type
  (of-object "GTlsBackend")
  (c-name "g_tls_backend_get_server_connection_type")
  (return-type "GType")
)

(define-method get_file_database_type
  (of-object "GTlsBackend")
  (c-name "g_tls_backend_get_file_database_type")
  (return-type "GType")
)

(define-method get_dtls_client_connection_type
  (of-object "GTlsBackend")
  (c-name "g_tls_backend_get_dtls_client_connection_type")
  (return-type "GType")
)

(define-method get_dtls_server_connection_type
  (of-object "GTlsBackend")
  (c-name "g_tls_backend_get_dtls_server_connection_type")
  (return-type "GType")
)



;; From gtlscertificate.h

(define-function g_tls_certificate_get_type
  (c-name "g_tls_certificate_get_type")
  (return-type "GType")
)

(define-function g_tls_certificate_new_from_pem
  (c-name "g_tls_certificate_new_from_pem")
  (return-type "GTlsCertificate*")
  (parameters
    '("const-gchar*" "data")
    '("gssize" "length")
    '("GError**" "error")
  )
)

(define-function g_tls_certificate_new_from_file
  (c-name "g_tls_certificate_new_from_file")
  (return-type "GTlsCertificate*")
  (parameters
    '("const-gchar*" "file")
    '("GError**" "error")
  )
)

(define-function g_tls_certificate_new_from_files
  (c-name "g_tls_certificate_new_from_files")
  (return-type "GTlsCertificate*")
  (parameters
    '("const-gchar*" "cert_file")
    '("const-gchar*" "key_file")
    '("GError**" "error")
  )
)

(define-function g_tls_certificate_list_new_from_file
  (c-name "g_tls_certificate_list_new_from_file")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "file")
    '("GError**" "error")
  )
)

(define-method get_issuer
  (of-object "GTlsCertificate")
  (c-name "g_tls_certificate_get_issuer")
  (return-type "GTlsCertificate*")
)

(define-method verify
  (of-object "GTlsCertificate")
  (c-name "g_tls_certificate_verify")
  (return-type "GTlsCertificateFlags")
  (parameters
    '("GSocketConnectable*" "identity")
    '("GTlsCertificate*" "trusted_ca")
  )
)

(define-method is_same
  (of-object "GTlsCertificate")
  (c-name "g_tls_certificate_is_same")
  (return-type "gboolean")
  (parameters
    '("GTlsCertificate*" "cert_two")
  )
)



;; From gtlsclientconnection.h

(define-function g_tls_client_connection_get_type
  (c-name "g_tls_client_connection_get_type")
  (return-type "GType")
)

(define-function g_tls_client_connection_new
  (c-name "g_tls_client_connection_new")
  (is-constructor-of "GTlsClientConnection")
  (return-type "GIOStream*")
  (parameters
    '("GIOStream*" "base_io_stream")
    '("GSocketConnectable*" "server_identity")
    '("GError**" "error")
  )
)

(define-method get_validation_flags
  (of-object "GTlsClientConnection")
  (c-name "g_tls_client_connection_get_validation_flags")
  (return-type "GTlsCertificateFlags")
)

(define-method set_validation_flags
  (of-object "GTlsClientConnection")
  (c-name "g_tls_client_connection_set_validation_flags")
  (return-type "none")
  (parameters
    '("GTlsCertificateFlags" "flags")
  )
)

(define-method get_server_identity
  (of-object "GTlsClientConnection")
  (c-name "g_tls_client_connection_get_server_identity")
  (return-type "GSocketConnectable*")
)

(define-method set_server_identity
  (of-object "GTlsClientConnection")
  (c-name "g_tls_client_connection_set_server_identity")
  (return-type "none")
  (parameters
    '("GSocketConnectable*" "identity")
  )
)

(define-method get_use_ssl3
  (of-object "GTlsClientConnection")
  (c-name "g_tls_client_connection_get_use_ssl3")
  (return-type "gboolean")
)

(define-method set_use_ssl3
  (of-object "GTlsClientConnection")
  (c-name "g_tls_client_connection_set_use_ssl3")
  (return-type "none")
  (parameters
    '("gboolean" "use_ssl3")
  )
)

(define-method get_accepted_cas
  (of-object "GTlsClientConnection")
  (c-name "g_tls_client_connection_get_accepted_cas")
  (return-type "GList*")
)

(define-method copy_session_state
  (of-object "GTlsClientConnection")
  (c-name "g_tls_client_connection_copy_session_state")
  (return-type "none")
  (parameters
    '("GTlsClientConnection*" "source")
  )
)



;; From gtlsconnection.h

(define-function g_tls_connection_get_type
  (c-name "g_tls_connection_get_type")
  (return-type "GType")
)

(define-method set_use_system_certdb
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_set_use_system_certdb")
  (return-type "none")
  (parameters
    '("gboolean" "use_system_certdb")
  )
)

(define-method get_use_system_certdb
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_get_use_system_certdb")
  (return-type "gboolean")
)

(define-method set_database
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_set_database")
  (return-type "none")
  (parameters
    '("GTlsDatabase*" "database")
  )
)

(define-method get_database
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_get_database")
  (return-type "GTlsDatabase*")
)

(define-method set_certificate
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_set_certificate")
  (return-type "none")
  (parameters
    '("GTlsCertificate*" "certificate")
  )
)

(define-method get_certificate
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_get_certificate")
  (return-type "GTlsCertificate*")
)

(define-method set_interaction
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_set_interaction")
  (return-type "none")
  (parameters
    '("GTlsInteraction*" "interaction")
  )
)

(define-method get_interaction
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_get_interaction")
  (return-type "GTlsInteraction*")
)

(define-method get_peer_certificate
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_get_peer_certificate")
  (return-type "GTlsCertificate*")
)

(define-method get_peer_certificate_errors
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_get_peer_certificate_errors")
  (return-type "GTlsCertificateFlags")
)

(define-method set_require_close_notify
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_set_require_close_notify")
  (return-type "none")
  (parameters
    '("gboolean" "require_close_notify")
  )
)

(define-method get_require_close_notify
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_get_require_close_notify")
  (return-type "gboolean")
)

(define-method set_rehandshake_mode
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_set_rehandshake_mode")
  (return-type "none")
  (parameters
    '("GTlsRehandshakeMode" "mode")
  )
)

(define-method get_rehandshake_mode
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_get_rehandshake_mode")
  (return-type "GTlsRehandshakeMode")
)

(define-method handshake
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_handshake")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method handshake_async
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_handshake_async")
  (return-type "none")
  (parameters
    '("int" "io_priority")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method handshake_finish
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_handshake_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-function g_tls_error_quark
  (c-name "g_tls_error_quark")
  (return-type "GQuark")
)

(define-method emit_accept_certificate
  (of-object "GTlsConnection")
  (c-name "g_tls_connection_emit_accept_certificate")
  (return-type "gboolean")
  (parameters
    '("GTlsCertificate*" "peer_cert")
    '("GTlsCertificateFlags" "errors")
  )
)



;; From gtlsdatabase.h

(define-function g_tls_database_get_type
  (c-name "g_tls_database_get_type")
  (return-type "GType")
)

(define-method verify_chain
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_verify_chain")
  (return-type "GTlsCertificateFlags")
  (parameters
    '("GTlsCertificate*" "chain")
    '("const-gchar*" "purpose")
    '("GSocketConnectable*" "identity")
    '("GTlsInteraction*" "interaction")
    '("GTlsDatabaseVerifyFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method verify_chain_async
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_verify_chain_async")
  (return-type "none")
  (parameters
    '("GTlsCertificate*" "chain")
    '("const-gchar*" "purpose")
    '("GSocketConnectable*" "identity")
    '("GTlsInteraction*" "interaction")
    '("GTlsDatabaseVerifyFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method verify_chain_finish
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_verify_chain_finish")
  (return-type "GTlsCertificateFlags")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method create_certificate_handle
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_create_certificate_handle")
  (return-type "gchar*")
  (parameters
    '("GTlsCertificate*" "certificate")
  )
)

(define-method lookup_certificate_for_handle
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_lookup_certificate_for_handle")
  (return-type "GTlsCertificate*")
  (parameters
    '("const-gchar*" "handle")
    '("GTlsInteraction*" "interaction")
    '("GTlsDatabaseLookupFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method lookup_certificate_for_handle_async
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_lookup_certificate_for_handle_async")
  (return-type "none")
  (parameters
    '("const-gchar*" "handle")
    '("GTlsInteraction*" "interaction")
    '("GTlsDatabaseLookupFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method lookup_certificate_for_handle_finish
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_lookup_certificate_for_handle_finish")
  (return-type "GTlsCertificate*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method lookup_certificate_issuer
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_lookup_certificate_issuer")
  (return-type "GTlsCertificate*")
  (parameters
    '("GTlsCertificate*" "certificate")
    '("GTlsInteraction*" "interaction")
    '("GTlsDatabaseLookupFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method lookup_certificate_issuer_async
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_lookup_certificate_issuer_async")
  (return-type "none")
  (parameters
    '("GTlsCertificate*" "certificate")
    '("GTlsInteraction*" "interaction")
    '("GTlsDatabaseLookupFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method lookup_certificate_issuer_finish
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_lookup_certificate_issuer_finish")
  (return-type "GTlsCertificate*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method lookup_certificates_issued_by
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_lookup_certificates_issued_by")
  (return-type "GList*")
  (parameters
    '("GByteArray*" "issuer_raw_dn")
    '("GTlsInteraction*" "interaction")
    '("GTlsDatabaseLookupFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method lookup_certificates_issued_by_async
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_lookup_certificates_issued_by_async")
  (return-type "none")
  (parameters
    '("GByteArray*" "issuer_raw_dn")
    '("GTlsInteraction*" "interaction")
    '("GTlsDatabaseLookupFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method lookup_certificates_issued_by_finish
  (of-object "GTlsDatabase")
  (c-name "g_tls_database_lookup_certificates_issued_by_finish")
  (return-type "GList*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)



;; From gtlsfiledatabase.h

(define-function g_tls_file_database_get_type
  (c-name "g_tls_file_database_get_type")
  (return-type "GType")
)

(define-function g_tls_file_database_new
  (c-name "g_tls_file_database_new")
  (is-constructor-of "GTlsFileDatabase")
  (return-type "GTlsDatabase*")
  (parameters
    '("const-gchar*" "anchors")
    '("GError**" "error")
  )
)



;; From gtlsinteraction.h

(define-function g_tls_interaction_get_type
  (c-name "g_tls_interaction_get_type")
  (return-type "GType")
)

(define-method invoke_ask_password
  (of-object "GTlsInteraction")
  (c-name "g_tls_interaction_invoke_ask_password")
  (return-type "GTlsInteractionResult")
  (parameters
    '("GTlsPassword*" "password")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method ask_password
  (of-object "GTlsInteraction")
  (c-name "g_tls_interaction_ask_password")
  (return-type "GTlsInteractionResult")
  (parameters
    '("GTlsPassword*" "password")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method ask_password_async
  (of-object "GTlsInteraction")
  (c-name "g_tls_interaction_ask_password_async")
  (return-type "none")
  (parameters
    '("GTlsPassword*" "password")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method ask_password_finish
  (of-object "GTlsInteraction")
  (c-name "g_tls_interaction_ask_password_finish")
  (return-type "GTlsInteractionResult")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method invoke_request_certificate
  (of-object "GTlsInteraction")
  (c-name "g_tls_interaction_invoke_request_certificate")
  (return-type "GTlsInteractionResult")
  (parameters
    '("GTlsConnection*" "connection")
    '("GTlsCertificateRequestFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method request_certificate
  (of-object "GTlsInteraction")
  (c-name "g_tls_interaction_request_certificate")
  (return-type "GTlsInteractionResult")
  (parameters
    '("GTlsConnection*" "connection")
    '("GTlsCertificateRequestFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method request_certificate_async
  (of-object "GTlsInteraction")
  (c-name "g_tls_interaction_request_certificate_async")
  (return-type "none")
  (parameters
    '("GTlsConnection*" "connection")
    '("GTlsCertificateRequestFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method request_certificate_finish
  (of-object "GTlsInteraction")
  (c-name "g_tls_interaction_request_certificate_finish")
  (return-type "GTlsInteractionResult")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)



;; From gtlspassword.h

(define-function g_tls_password_get_type
  (c-name "g_tls_password_get_type")
  (return-type "GType")
)

(define-function g_tls_password_new
  (c-name "g_tls_password_new")
  (is-constructor-of "GTlsPassword")
  (return-type "GTlsPassword*")
  (parameters
    '("GTlsPasswordFlags" "flags")
    '("const-gchar*" "description")
  )
)

(define-method get_value
  (of-object "GTlsPassword")
  (c-name "g_tls_password_get_value")
  (return-type "const-guchar*")
  (parameters
    '("gsize*" "length")
  )
)

(define-method set_value
  (of-object "GTlsPassword")
  (c-name "g_tls_password_set_value")
  (return-type "none")
  (parameters
    '("const-guchar*" "value")
    '("gssize" "length")
  )
)

(define-method set_value_full
  (of-object "GTlsPassword")
  (c-name "g_tls_password_set_value_full")
  (return-type "none")
  (parameters
    '("guchar*" "value")
    '("gssize" "length")
    '("GDestroyNotify" "destroy")
  )
)

(define-method get_flags
  (of-object "GTlsPassword")
  (c-name "g_tls_password_get_flags")
  (return-type "GTlsPasswordFlags")
)

(define-method set_flags
  (of-object "GTlsPassword")
  (c-name "g_tls_password_set_flags")
  (return-type "none")
  (parameters
    '("GTlsPasswordFlags" "flags")
  )
)

(define-method get_description
  (of-object "GTlsPassword")
  (c-name "g_tls_password_get_description")
  (return-type "const-gchar*")
)

(define-method set_description
  (of-object "GTlsPassword")
  (c-name "g_tls_password_set_description")
  (return-type "none")
  (parameters
    '("const-gchar*" "description")
  )
)

(define-method get_warning
  (of-object "GTlsPassword")
  (c-name "g_tls_password_get_warning")
  (return-type "const-gchar*")
)

(define-method set_warning
  (of-object "GTlsPassword")
  (c-name "g_tls_password_set_warning")
  (return-type "none")
  (parameters
    '("const-gchar*" "warning")
  )
)



;; From gtlsserverconnection.h

(define-function g_tls_server_connection_get_type
  (c-name "g_tls_server_connection_get_type")
  (return-type "GType")
)

(define-function g_tls_server_connection_new
  (c-name "g_tls_server_connection_new")
  (is-constructor-of "GTlsServerConnection")
  (return-type "GIOStream*")
  (parameters
    '("GIOStream*" "base_io_stream")
    '("GTlsCertificate*" "certificate")
    '("GError**" "error")
  )
)



;; From gunionvolumemonitor.h



;; From gunixconnection.h

(define-function g_unix_connection_get_type
  (c-name "g_unix_connection_get_type")
  (return-type "GType")
)

(define-method send_fd
  (of-object "GUnixConnection")
  (c-name "g_unix_connection_send_fd")
  (return-type "gboolean")
  (parameters
    '("gint" "fd")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method receive_fd
  (of-object "GUnixConnection")
  (c-name "g_unix_connection_receive_fd")
  (return-type "gint")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method send_credentials
  (of-object "GUnixConnection")
  (c-name "g_unix_connection_send_credentials")
  (return-type "gboolean")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method send_credentials_async
  (of-object "GUnixConnection")
  (c-name "g_unix_connection_send_credentials_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method send_credentials_finish
  (of-object "GUnixConnection")
  (c-name "g_unix_connection_send_credentials_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method receive_credentials
  (of-object "GUnixConnection")
  (c-name "g_unix_connection_receive_credentials")
  (return-type "GCredentials*")
  (parameters
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method receive_credentials_async
  (of-object "GUnixConnection")
  (c-name "g_unix_connection_receive_credentials_async")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method receive_credentials_finish
  (of-object "GUnixConnection")
  (c-name "g_unix_connection_receive_credentials_finish")
  (return-type "GCredentials*")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)



;; From gunixcredentialsmessage.h

(define-function g_unix_credentials_message_get_type
  (c-name "g_unix_credentials_message_get_type")
  (return-type "GType")
)

(define-function g_unix_credentials_message_new
  (c-name "g_unix_credentials_message_new")
  (is-constructor-of "GUnixCredentialsMessage")
  (return-type "GSocketControlMessage*")
)

(define-function g_unix_credentials_message_new_with_credentials
  (c-name "g_unix_credentials_message_new_with_credentials")
  (return-type "GSocketControlMessage*")
  (parameters
    '("GCredentials*" "credentials")
  )
)

(define-method get_credentials
  (of-object "GUnixCredentialsMessage")
  (c-name "g_unix_credentials_message_get_credentials")
  (return-type "GCredentials*")
)

(define-function g_unix_credentials_message_is_supported
  (c-name "g_unix_credentials_message_is_supported")
  (return-type "gboolean")
)



;; From gunixfdlist.h

(define-function g_unix_fd_list_get_type
  (c-name "g_unix_fd_list_get_type")
  (return-type "GType")
)

(define-function g_unix_fd_list_new
  (c-name "g_unix_fd_list_new")
  (is-constructor-of "GUnixFdList")
  (return-type "GUnixFDList*")
)

(define-function g_unix_fd_list_new_from_array
  (c-name "g_unix_fd_list_new_from_array")
  (return-type "GUnixFDList*")
  (parameters
    '("const-gint*" "fds")
    '("gint" "n_fds")
  )
)

(define-method append
  (of-object "GUnixFDList")
  (c-name "g_unix_fd_list_append")
  (return-type "gint")
  (parameters
    '("gint" "fd")
    '("GError**" "error")
  )
)

(define-method get_length
  (of-object "GUnixFDList")
  (c-name "g_unix_fd_list_get_length")
  (return-type "gint")
)

(define-method get
  (of-object "GUnixFDList")
  (c-name "g_unix_fd_list_get")
  (return-type "gint")
  (parameters
    '("gint" "index_")
    '("GError**" "error")
  )
)

(define-method peek_fds
  (of-object "GUnixFDList")
  (c-name "g_unix_fd_list_peek_fds")
  (return-type "const-gint*")
  (parameters
    '("gint*" "length")
  )
)

(define-method steal_fds
  (of-object "GUnixFDList")
  (c-name "g_unix_fd_list_steal_fds")
  (return-type "gint*")
  (parameters
    '("gint*" "length")
  )
)



;; From gunixfdmessage.h

(define-function g_unix_fd_message_get_type
  (c-name "g_unix_fd_message_get_type")
  (return-type "GType")
)

(define-function g_unix_fd_message_new_with_fd_list
  (c-name "g_unix_fd_message_new_with_fd_list")
  (return-type "GSocketControlMessage*")
  (parameters
    '("GUnixFDList*" "fd_list")
  )
)

(define-function g_unix_fd_message_new
  (c-name "g_unix_fd_message_new")
  (is-constructor-of "GUnixFdMessage")
  (return-type "GSocketControlMessage*")
)

(define-method get_fd_list
  (of-object "GUnixFDMessage")
  (c-name "g_unix_fd_message_get_fd_list")
  (return-type "GUnixFDList*")
)

(define-method steal_fds
  (of-object "GUnixFDMessage")
  (c-name "g_unix_fd_message_steal_fds")
  (return-type "gint*")
  (parameters
    '("gint*" "length")
  )
)

(define-method append_fd
  (of-object "GUnixFDMessage")
  (c-name "g_unix_fd_message_append_fd")
  (return-type "gboolean")
  (parameters
    '("gint" "fd")
    '("GError**" "error")
  )
)



;; From gunixinputstream.h

(define-function g_unix_input_stream_get_type
  (c-name "g_unix_input_stream_get_type")
  (return-type "GType")
)

(define-function g_unix_input_stream_new
  (c-name "g_unix_input_stream_new")
  (is-constructor-of "GUnixInputStream")
  (return-type "GInputStream*")
  (parameters
    '("gint" "fd")
    '("gboolean" "close_fd")
  )
)

(define-method set_close_fd
  (of-object "GUnixInputStream")
  (c-name "g_unix_input_stream_set_close_fd")
  (return-type "none")
  (parameters
    '("gboolean" "close_fd")
  )
)

(define-method get_close_fd
  (of-object "GUnixInputStream")
  (c-name "g_unix_input_stream_get_close_fd")
  (return-type "gboolean")
)

(define-method get_fd
  (of-object "GUnixInputStream")
  (c-name "g_unix_input_stream_get_fd")
  (return-type "gint")
)



;; From gunixmount.h



;; From gunixmounts.h

(define-function g_unix_mount_entry_get_type
  (c-name "g_unix_mount_entry_get_type")
  (return-type "GType")
)

(define-function g_unix_mount_point_get_type
  (c-name "g_unix_mount_point_get_type")
  (return-type "GType")
)

(define-function g_unix_mount_copy
  (c-name "g_unix_mount_copy")
  (return-type "GUnixMountEntry*")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-method free
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_free")
  (return-type "none")
)

(define-method copy
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_copy")
  (return-type "GUnixMountPoint*")
)

(define-function g_unix_mount_compare
  (c-name "g_unix_mount_compare")
  (return-type "gint")
  (parameters
    '("GUnixMountEntry*" "mount1")
    '("GUnixMountEntry*" "mount2")
  )
)

(define-function g_unix_mount_get_mount_path
  (c-name "g_unix_mount_get_mount_path")
  (return-type "const-char*")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-function g_unix_mount_get_device_path
  (c-name "g_unix_mount_get_device_path")
  (return-type "const-char*")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-function g_unix_mount_get_fs_type
  (c-name "g_unix_mount_get_fs_type")
  (return-type "const-char*")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-function g_unix_mount_is_readonly
  (c-name "g_unix_mount_is_readonly")
  (return-type "gboolean")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-function g_unix_mount_is_system_internal
  (c-name "g_unix_mount_is_system_internal")
  (return-type "gboolean")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-function g_unix_mount_guess_can_eject
  (c-name "g_unix_mount_guess_can_eject")
  (return-type "gboolean")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-function g_unix_mount_guess_should_display
  (c-name "g_unix_mount_guess_should_display")
  (return-type "gboolean")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-function g_unix_mount_guess_name
  (c-name "g_unix_mount_guess_name")
  (return-type "char*")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-function g_unix_mount_guess_icon
  (c-name "g_unix_mount_guess_icon")
  (return-type "GIcon*")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-function g_unix_mount_guess_symbolic_icon
  (c-name "g_unix_mount_guess_symbolic_icon")
  (return-type "GIcon*")
  (parameters
    '("GUnixMountEntry*" "mount_entry")
  )
)

(define-method get_mount_path
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_get_mount_path")
  (return-type "const-char*")
)

(define-method get_device_path
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_get_device_path")
  (return-type "const-char*")
)

(define-method get_fs_type
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_get_fs_type")
  (return-type "const-char*")
)

(define-method get_options
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_get_options")
  (return-type "const-char*")
)

(define-method is_readonly
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_is_readonly")
  (return-type "gboolean")
)

(define-method is_user_mountable
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_is_user_mountable")
  (return-type "gboolean")
)

(define-method is_loopback
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_is_loopback")
  (return-type "gboolean")
)

(define-method guess_can_eject
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_guess_can_eject")
  (return-type "gboolean")
)

(define-method guess_name
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_guess_name")
  (return-type "char*")
)

(define-method guess_icon
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_guess_icon")
  (return-type "GIcon*")
)

(define-method guess_symbolic_icon
  (of-object "GUnixMountPoint")
  (c-name "g_unix_mount_point_guess_symbolic_icon")
  (return-type "GIcon*")
)

(define-function g_unix_mount_points_get
  (c-name "g_unix_mount_points_get")
  (return-type "GList*")
  (parameters
    '("guint64*" "time_read")
  )
)

(define-function g_unix_mounts_get
  (c-name "g_unix_mounts_get")
  (return-type "GList*")
  (parameters
    '("guint64*" "time_read")
  )
)

(define-function g_unix_mount_at
  (c-name "g_unix_mount_at")
  (return-type "GUnixMountEntry*")
  (parameters
    '("const-char*" "mount_path")
    '("guint64*" "time_read")
  )
)

(define-function g_unix_mount_for
  (c-name "g_unix_mount_for")
  (return-type "GUnixMountEntry*")
  (parameters
    '("const-char*" "file_path")
    '("guint64*" "time_read")
  )
)

(define-function g_unix_mounts_changed_since
  (c-name "g_unix_mounts_changed_since")
  (return-type "gboolean")
  (parameters
    '("guint64" "time")
  )
)

(define-function g_unix_mount_points_changed_since
  (c-name "g_unix_mount_points_changed_since")
  (return-type "gboolean")
  (parameters
    '("guint64" "time")
  )
)

(define-function g_unix_mount_monitor_get_type
  (c-name "g_unix_mount_monitor_get_type")
  (return-type "GType")
)

(define-function g_unix_mount_monitor_get
  (c-name "g_unix_mount_monitor_get")
  (return-type "GUnixMountMonitor*")
)

(define-function g_unix_mount_monitor_new
  (c-name "g_unix_mount_monitor_new")
  (is-constructor-of "GUnixMountMonitor")
  (return-type "GUnixMountMonitor*")
)

(define-method set_rate_limit
  (of-object "GUnixMountMonitor")
  (c-name "g_unix_mount_monitor_set_rate_limit")
  (return-type "none")
  (parameters
    '("int" "limit_msec")
  )
)

(define-function g_unix_is_mount_path_system_internal
  (c-name "g_unix_is_mount_path_system_internal")
  (return-type "gboolean")
  (parameters
    '("const-char*" "mount_path")
  )
)

(define-function g_unix_is_system_fs_type
  (c-name "g_unix_is_system_fs_type")
  (return-type "gboolean")
  (parameters
    '("const-char*" "fs_type")
  )
)

(define-function g_unix_is_system_device_path
  (c-name "g_unix_is_system_device_path")
  (return-type "gboolean")
  (parameters
    '("const-char*" "device_path")
  )
)



;; From gunixoutputstream.h

(define-function g_unix_output_stream_get_type
  (c-name "g_unix_output_stream_get_type")
  (return-type "GType")
)

(define-function g_unix_output_stream_new
  (c-name "g_unix_output_stream_new")
  (is-constructor-of "GUnixOutputStream")
  (return-type "GOutputStream*")
  (parameters
    '("gint" "fd")
    '("gboolean" "close_fd")
  )
)

(define-method set_close_fd
  (of-object "GUnixOutputStream")
  (c-name "g_unix_output_stream_set_close_fd")
  (return-type "none")
  (parameters
    '("gboolean" "close_fd")
  )
)

(define-method get_close_fd
  (of-object "GUnixOutputStream")
  (c-name "g_unix_output_stream_get_close_fd")
  (return-type "gboolean")
)

(define-method get_fd
  (of-object "GUnixOutputStream")
  (c-name "g_unix_output_stream_get_fd")
  (return-type "gint")
)



;; From gunixsocketaddress.h

(define-function g_unix_socket_address_get_type
  (c-name "g_unix_socket_address_get_type")
  (return-type "GType")
)

(define-function g_unix_socket_address_new
  (c-name "g_unix_socket_address_new")
  (is-constructor-of "GUnixSocketAddress")
  (return-type "GSocketAddress*")
  (parameters
    '("const-gchar*" "path")
  )
)

(define-function g_unix_socket_address_new_abstract
  (c-name "g_unix_socket_address_new_abstract")
  (return-type "GSocketAddress*")
  (parameters
    '("const-gchar*" "path")
    '("gint" "path_len")
  )
)

(define-function g_unix_socket_address_new_with_type
  (c-name "g_unix_socket_address_new_with_type")
  (return-type "GSocketAddress*")
  (parameters
    '("const-gchar*" "path")
    '("gint" "path_len")
    '("GUnixSocketAddressType" "type")
  )
)

(define-method get_path
  (of-object "GUnixSocketAddress")
  (c-name "g_unix_socket_address_get_path")
  (return-type "const-char*")
)

(define-method get_path_len
  (of-object "GUnixSocketAddress")
  (c-name "g_unix_socket_address_get_path_len")
  (return-type "gsize")
)

(define-method get_address_type
  (of-object "GUnixSocketAddress")
  (c-name "g_unix_socket_address_get_address_type")
  (return-type "GUnixSocketAddressType")
)

(define-method get_is_abstract
  (of-object "GUnixSocketAddress")
  (c-name "g_unix_socket_address_get_is_abstract")
  (return-type "gboolean")
)

(define-function g_unix_socket_address_abstract_names_supported
  (c-name "g_unix_socket_address_abstract_names_supported")
  (return-type "gboolean")
)



;; From gunixvolume.h



;; From gunixvolumemonitor.h



;; From gvfs.h

(define-function g_vfs_get_type
  (c-name "g_vfs_get_type")
  (return-type "GType")
)

(define-method is_active
  (of-object "GVfs")
  (c-name "g_vfs_is_active")
  (return-type "gboolean")
)

(define-method get_file_for_path
  (of-object "GVfs")
  (c-name "g_vfs_get_file_for_path")
  (return-type "GFile*")
  (parameters
    '("const-char*" "path")
  )
)

(define-method get_file_for_uri
  (of-object "GVfs")
  (c-name "g_vfs_get_file_for_uri")
  (return-type "GFile*")
  (parameters
    '("const-char*" "uri")
  )
)

(define-method get_supported_uri_schemes
  (of-object "GVfs")
  (c-name "g_vfs_get_supported_uri_schemes")
  (return-type "const-gchar*-const*")
)

(define-method parse_name
  (of-object "GVfs")
  (c-name "g_vfs_parse_name")
  (return-type "GFile*")
  (parameters
    '("const-char*" "parse_name")
  )
)

(define-function g_vfs_get_default
  (c-name "g_vfs_get_default")
  (return-type "GVfs*")
)

(define-function g_vfs_get_local
  (c-name "g_vfs_get_local")
  (return-type "GVfs*")
)

(define-method register_uri_scheme
  (of-object "GVfs")
  (c-name "g_vfs_register_uri_scheme")
  (return-type "gboolean")
  (parameters
    '("const-char*" "scheme")
    '("GVfsFileLookupFunc" "uri_func")
    '("gpointer" "uri_data")
    '("GDestroyNotify" "uri_destroy")
    '("GVfsFileLookupFunc" "parse_name_func")
    '("gpointer" "parse_name_data")
    '("GDestroyNotify" "parse_name_destroy")
  )
)

(define-method unregister_uri_scheme
  (of-object "GVfs")
  (c-name "g_vfs_unregister_uri_scheme")
  (return-type "gboolean")
  (parameters
    '("const-char*" "scheme")
  )
)



;; From gvolume.h

(define-function g_volume_get_type
  (c-name "g_volume_get_type")
  (return-type "GType")
)

(define-method get_name
  (of-object "GVolume")
  (c-name "g_volume_get_name")
  (return-type "char*")
)

(define-method get_icon
  (of-object "GVolume")
  (c-name "g_volume_get_icon")
  (return-type "GIcon*")
)

(define-method get_symbolic_icon
  (of-object "GVolume")
  (c-name "g_volume_get_symbolic_icon")
  (return-type "GIcon*")
)

(define-method get_uuid
  (of-object "GVolume")
  (c-name "g_volume_get_uuid")
  (return-type "char*")
)

(define-method get_drive
  (of-object "GVolume")
  (c-name "g_volume_get_drive")
  (return-type "GDrive*")
)

(define-method get_mount
  (of-object "GVolume")
  (c-name "g_volume_get_mount")
  (return-type "GMount*")
)

(define-method can_mount
  (of-object "GVolume")
  (c-name "g_volume_can_mount")
  (return-type "gboolean")
)

(define-method can_eject
  (of-object "GVolume")
  (c-name "g_volume_can_eject")
  (return-type "gboolean")
)

(define-method should_automount
  (of-object "GVolume")
  (c-name "g_volume_should_automount")
  (return-type "gboolean")
)

(define-method mount
  (of-object "GVolume")
  (c-name "g_volume_mount")
  (return-type "none")
  (parameters
    '("GMountMountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method mount_finish
  (of-object "GVolume")
  (c-name "g_volume_mount_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method eject
  (of-object "GVolume")
  (c-name "g_volume_eject")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method eject_finish
  (of-object "GVolume")
  (c-name "g_volume_eject_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method get_identifier
  (of-object "GVolume")
  (c-name "g_volume_get_identifier")
  (return-type "char*")
  (parameters
    '("const-char*" "kind")
  )
)

(define-method enumerate_identifiers
  (of-object "GVolume")
  (c-name "g_volume_enumerate_identifiers")
  (return-type "char**")
)

(define-method get_activation_root
  (of-object "GVolume")
  (c-name "g_volume_get_activation_root")
  (return-type "GFile*")
)

(define-method eject_with_operation
  (of-object "GVolume")
  (c-name "g_volume_eject_with_operation")
  (return-type "none")
  (parameters
    '("GMountUnmountFlags" "flags")
    '("GMountOperation*" "mount_operation")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method eject_with_operation_finish
  (of-object "GVolume")
  (c-name "g_volume_eject_with_operation_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "result")
    '("GError**" "error")
  )
)

(define-method get_sort_key
  (of-object "GVolume")
  (c-name "g_volume_get_sort_key")
  (return-type "const-gchar*")
)



;; From gvolumemonitor.h

(define-function g_volume_monitor_get_type
  (c-name "g_volume_monitor_get_type")
  (return-type "GType")
)

(define-function g_volume_monitor_get
  (c-name "g_volume_monitor_get")
  (return-type "GVolumeMonitor*")
)

(define-method get_connected_drives
  (of-object "GVolumeMonitor")
  (c-name "g_volume_monitor_get_connected_drives")
  (return-type "GList*")
)

(define-method get_volumes
  (of-object "GVolumeMonitor")
  (c-name "g_volume_monitor_get_volumes")
  (return-type "GList*")
)

(define-method get_mounts
  (of-object "GVolumeMonitor")
  (c-name "g_volume_monitor_get_mounts")
  (return-type "GList*")
)

(define-method get_volume_for_uuid
  (of-object "GVolumeMonitor")
  (c-name "g_volume_monitor_get_volume_for_uuid")
  (return-type "GVolume*")
  (parameters
    '("const-char*" "uuid")
  )
)

(define-method get_mount_for_uuid
  (of-object "GVolumeMonitor")
  (c-name "g_volume_monitor_get_mount_for_uuid")
  (return-type "GMount*")
  (parameters
    '("const-char*" "uuid")
  )
)

(define-function g_volume_monitor_adopt_orphan_mount
  (c-name "g_volume_monitor_adopt_orphan_mount")
  (return-type "GVolume*")
  (parameters
    '("GMount*" "mount")
  )
)



;; From gwin32appinfo.h

(define-function g_win32_app_info_get_type
  (c-name "g_win32_app_info_get_type")
  (return-type "GType")
)



;; From gwin32inputstream.h

(define-function g_win32_input_stream_get_type
  (c-name "g_win32_input_stream_get_type")
  (return-type "GType")
)

(define-function g_win32_input_stream_new
  (c-name "g_win32_input_stream_new")
  (is-constructor-of "GWin32InputStream")
  (return-type "GInputStream*")
  (parameters
    '("void*" "handle")
    '("gboolean" "close_handle")
  )
)

(define-method set_close_handle
  (of-object "GWin32InputStream")
  (c-name "g_win32_input_stream_set_close_handle")
  (return-type "none")
  (parameters
    '("gboolean" "close_handle")
  )
)

(define-method get_close_handle
  (of-object "GWin32InputStream")
  (c-name "g_win32_input_stream_get_close_handle")
  (return-type "gboolean")
)

(define-method get_handle
  (of-object "GWin32InputStream")
  (c-name "g_win32_input_stream_get_handle")
  (return-type "void*")
)



;; From gwin32mount.h



;; From gwin32networking.h



;; From gwin32networkmonitor.h



;; From gwin32outputstream.h

(define-function g_win32_output_stream_get_type
  (c-name "g_win32_output_stream_get_type")
  (return-type "GType")
)

(define-function g_win32_output_stream_new
  (c-name "g_win32_output_stream_new")
  (is-constructor-of "GWin32OutputStream")
  (return-type "GOutputStream*")
  (parameters
    '("void*" "handle")
    '("gboolean" "close_handle")
  )
)

(define-method set_close_handle
  (of-object "GWin32OutputStream")
  (c-name "g_win32_output_stream_set_close_handle")
  (return-type "none")
  (parameters
    '("gboolean" "close_handle")
  )
)

(define-method get_close_handle
  (of-object "GWin32OutputStream")
  (c-name "g_win32_output_stream_get_close_handle")
  (return-type "gboolean")
)

(define-method get_handle
  (of-object "GWin32OutputStream")
  (c-name "g_win32_output_stream_get_handle")
  (return-type "void*")
)



;; From gwin32registrykey.h

(define-method copy
  (of-object "GWin32RegistrySubkeyIter")
  (c-name "g_win32_registry_subkey_iter_copy")
  (return-type "GWin32RegistrySubkeyIter*")
)

(define-method free
  (of-object "GWin32RegistrySubkeyIter")
  (c-name "g_win32_registry_subkey_iter_free")
  (return-type "none")
)

(define-method assign
  (of-object "GWin32RegistrySubkeyIter")
  (c-name "g_win32_registry_subkey_iter_assign")
  (return-type "none")
  (parameters
    '("const-GWin32RegistrySubkeyIter*" "other")
  )
)

(define-function g_win32_registry_subkey_iter_get_type
  (c-name "g_win32_registry_subkey_iter_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_copy")
  (return-type "GWin32RegistryValueIter*")
)

(define-method free
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_free")
  (return-type "none")
)

(define-method assign
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_assign")
  (return-type "none")
  (parameters
    '("const-GWin32RegistryValueIter*" "other")
  )
)

(define-function g_win32_registry_value_iter_get_type
  (c-name "g_win32_registry_value_iter_get_type")
  (return-type "GType")
)

(define-function g_win32_registry_key_get_type
  (c-name "g_win32_registry_key_get_type")
  (return-type "GType")
)

(define-function g_win32_registry_key_new
  (c-name "g_win32_registry_key_new")
  (is-constructor-of "GWin32RegistryKey")
  (return-type "GWin32RegistryKey*")
  (parameters
    '("const-gchar*" "path")
    '("GError**" "error")
  )
)

(define-function g_win32_registry_key_new_w
  (c-name "g_win32_registry_key_new_w")
  (return-type "GWin32RegistryKey*")
  (parameters
    '("const-gunichar2*" "path")
    '("GError**" "error")
  )
)

(define-method get_child
  (of-object "GWin32RegistryKey")
  (c-name "g_win32_registry_key_get_child")
  (return-type "GWin32RegistryKey*")
  (parameters
    '("const-gchar*" "subkey")
    '("GError**" "error")
  )
)

(define-method get_child_w
  (of-object "GWin32RegistryKey")
  (c-name "g_win32_registry_key_get_child_w")
  (return-type "GWin32RegistryKey*")
  (parameters
    '("const-gunichar2*" "subkey")
    '("GError**" "error")
  )
)

(define-method init
  (of-object "GWin32RegistrySubkeyIter")
  (c-name "g_win32_registry_subkey_iter_init")
  (return-type "gboolean")
  (parameters
    '("GWin32RegistryKey*" "key")
    '("GError**" "error")
  )
)

(define-method clear
  (of-object "GWin32RegistrySubkeyIter")
  (c-name "g_win32_registry_subkey_iter_clear")
  (return-type "none")
)

(define-method n_subkeys
  (of-object "GWin32RegistrySubkeyIter")
  (c-name "g_win32_registry_subkey_iter_n_subkeys")
  (return-type "gsize")
)

(define-method next
  (of-object "GWin32RegistrySubkeyIter")
  (c-name "g_win32_registry_subkey_iter_next")
  (return-type "gboolean")
  (parameters
    '("gboolean" "skip_errors")
    '("GError**" "error")
  )
)

(define-method get_name
  (of-object "GWin32RegistrySubkeyIter")
  (c-name "g_win32_registry_subkey_iter_get_name")
  (return-type "gboolean")
  (parameters
    '("gchar**" "subkey_name")
    '("gsize*" "subkey_name_len")
    '("GError**" "error")
  )
)

(define-method get_name_w
  (of-object "GWin32RegistrySubkeyIter")
  (c-name "g_win32_registry_subkey_iter_get_name_w")
  (return-type "gboolean")
  (parameters
    '("gunichar2**" "subkey_name")
    '("gsize*" "subkey_name_len")
    '("GError**" "error")
  )
)

(define-method init
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_init")
  (return-type "gboolean")
  (parameters
    '("GWin32RegistryKey*" "key")
    '("GError**" "error")
  )
)

(define-method clear
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_clear")
  (return-type "none")
)

(define-method n_values
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_n_values")
  (return-type "gsize")
)

(define-method next
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_next")
  (return-type "gboolean")
  (parameters
    '("gboolean" "skip_errors")
    '("GError**" "error")
  )
)

(define-method get_value_type
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_get_value_type")
  (return-type "gboolean")
  (parameters
    '("GWin32RegistryValueType*" "value_type")
    '("GError**" "error")
  )
)

(define-method get_name
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_get_name")
  (return-type "gboolean")
  (parameters
    '("gchar**" "value_name")
    '("gsize*" "value_name_len")
    '("GError**" "error")
  )
)

(define-method get_name_w
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_get_name_w")
  (return-type "gboolean")
  (parameters
    '("gunichar2**" "value_name")
    '("gsize*" "value_name_len")
    '("GError**" "error")
  )
)

(define-method get_data
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_get_data")
  (return-type "gboolean")
  (parameters
    '("gboolean" "auto_expand")
    '("gpointer*" "value_data")
    '("gsize*" "value_data_size")
    '("GError**" "error")
  )
)

(define-method get_data_w
  (of-object "GWin32RegistryValueIter")
  (c-name "g_win32_registry_value_iter_get_data_w")
  (return-type "gboolean")
  (parameters
    '("gboolean" "auto_expand")
    '("gpointer*" "value_data")
    '("gsize*" "value_data_size")
    '("GError**" "error")
  )
)

(define-method get_value
  (of-object "GWin32RegistryKey")
  (c-name "g_win32_registry_key_get_value")
  (return-type "gboolean")
  (parameters
    '("gboolean" "auto_expand")
    '("const-gchar*" "value_name")
    '("GWin32RegistryValueType*" "value_type")
    '("gpointer*" "value_data")
    '("gsize*" "value_data_size")
    '("GError**" "error")
  )
)

(define-method get_value_w
  (of-object "GWin32RegistryKey")
  (c-name "g_win32_registry_key_get_value_w")
  (return-type "gboolean")
  (parameters
    '("gboolean" "auto_expand")
    '("const-gunichar2*" "value_name")
    '("GWin32RegistryValueType*" "value_type")
    '("gpointer*" "value_data")
    '("gsize*" "value_data_size")
    '("GError**" "error")
  )
)

(define-method get_path
  (of-object "GWin32RegistryKey")
  (c-name "g_win32_registry_key_get_path")
  (return-type "const-gchar*")
)

(define-method get_path_w
  (of-object "GWin32RegistryKey")
  (c-name "g_win32_registry_key_get_path_w")
  (return-type "const-gunichar2*")
)

(define-method watch
  (of-object "GWin32RegistryKey")
  (c-name "g_win32_registry_key_watch")
  (return-type "gboolean")
  (parameters
    '("gboolean" "watch_children")
    '("GWin32RegistryKeyWatcherFlags" "watch_flags")
    '("GWin32RegistryKeyWatchCallbackFunc" "callback")
    '("gpointer" "user_data")
    '("GError**" "error")
  )
)

(define-method has_changed
  (of-object "GWin32RegistryKey")
  (c-name "g_win32_registry_key_has_changed")
  (return-type "gboolean")
)

(define-method erase_change_indicator
  (of-object "GWin32RegistryKey")
  (c-name "g_win32_registry_key_erase_change_indicator")
  (return-type "none")
)



;; From gwin32volumemonitor.h



;; From gzlibcompressor.h

(define-function g_zlib_compressor_get_type
  (c-name "g_zlib_compressor_get_type")
  (return-type "GType")
)

(define-function g_zlib_compressor_new
  (c-name "g_zlib_compressor_new")
  (is-constructor-of "GZlibCompressor")
  (return-type "GZlibCompressor*")
  (parameters
    '("GZlibCompressorFormat" "format")
    '("int" "level")
  )
)

(define-method get_file_info
  (of-object "GZlibCompressor")
  (c-name "g_zlib_compressor_get_file_info")
  (return-type "GFileInfo*")
)

(define-method set_file_info
  (of-object "GZlibCompressor")
  (c-name "g_zlib_compressor_set_file_info")
  (return-type "none")
  (parameters
    '("GFileInfo*" "file_info")
  )
)



;; From gzlibdecompressor.h

(define-function g_zlib_decompressor_get_type
  (c-name "g_zlib_decompressor_get_type")
  (return-type "GType")
)

(define-function g_zlib_decompressor_new
  (c-name "g_zlib_decompressor_new")
  (is-constructor-of "GZlibDecompressor")
  (return-type "GZlibDecompressor*")
  (parameters
    '("GZlibCompressorFormat" "format")
  )
)

(define-method get_file_info
  (of-object "GZlibDecompressor")
  (c-name "g_zlib_decompressor_get_file_info")
  (return-type "GFileInfo*")
)



;; From thumbnail-verify.h

(define-function thumbnail_verify
  (c-name "thumbnail_verify")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "thumbnail_path")
    '("const-gchar*" "file_uri")
    '("const-GLocalFileStat*" "file_stat_buf")
  )
)



;; From xdp-dbus.h

(define-function gxdp_documents_get_type
  (c-name "gxdp_documents_get_type")
  (return-type "GType")
)

(define-function gxdp_documents_interface_info
  (c-name "gxdp_documents_interface_info")
  (return-type "GDBusInterfaceInfo*")
)

(define-function gxdp_documents_override_properties
  (c-name "gxdp_documents_override_properties")
  (return-type "guint")
  (parameters
    '("GObjectClass*" "klass")
    '("guint" "property_id_begin")
  )
)

(define-method complete_get_mount_point
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_complete_get_mount_point")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
    '("const-gchar*" "path")
  )
)

(define-method complete_add
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_complete_add")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
    '("GUnixFDList*" "fd_list")
    '("const-gchar*" "doc_id")
  )
)

(define-method complete_add_named
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_complete_add_named")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
    '("GUnixFDList*" "fd_list")
    '("const-gchar*" "doc_id")
  )
)

(define-method complete_add_full
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_complete_add_full")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
    '("GUnixFDList*" "fd_list")
    '("const-gchar*-const*" "doc_ids")
    '("GVariant*" "extra_out")
  )
)

(define-method complete_grant_permissions
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_complete_grant_permissions")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
  )
)

(define-method complete_revoke_permissions
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_complete_revoke_permissions")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
  )
)

(define-method complete_delete
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_complete_delete")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
  )
)

(define-method complete_lookup
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_complete_lookup")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
    '("const-gchar*" "doc_id")
  )
)

(define-method complete_info
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_complete_info")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
    '("const-gchar*" "path")
    '("GVariant*" "apps")
  )
)

(define-method complete_list
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_complete_list")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
    '("GVariant*" "docs")
  )
)

(define-method call_get_mount_point
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_get_mount_point")
  (return-type "none")
  (parameters
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_get_mount_point_finish
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_get_mount_point_finish")
  (return-type "gboolean")
  (parameters
    '("gchar**" "out_path")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_get_mount_point_sync
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_get_mount_point_sync")
  (return-type "gboolean")
  (parameters
    '("gchar**" "out_path")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_add
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_add")
  (return-type "none")
  (parameters
    '("GVariant*" "arg_o_path_fd")
    '("gboolean" "arg_reuse_existing")
    '("gboolean" "arg_persistent")
    '("GUnixFDList*" "fd_list")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_add_finish
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_add_finish")
  (return-type "gboolean")
  (parameters
    '("gchar**" "out_doc_id")
    '("GUnixFDList**" "out_fd_list")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_add_sync
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_add_sync")
  (return-type "gboolean")
  (parameters
    '("GVariant*" "arg_o_path_fd")
    '("gboolean" "arg_reuse_existing")
    '("gboolean" "arg_persistent")
    '("GUnixFDList*" "fd_list")
    '("gchar**" "out_doc_id")
    '("GUnixFDList**" "out_fd_list")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_add_named
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_add_named")
  (return-type "none")
  (parameters
    '("GVariant*" "arg_o_path_parent_fd")
    '("const-gchar*" "arg_filename")
    '("gboolean" "arg_reuse_existing")
    '("gboolean" "arg_persistent")
    '("GUnixFDList*" "fd_list")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_add_named_finish
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_add_named_finish")
  (return-type "gboolean")
  (parameters
    '("gchar**" "out_doc_id")
    '("GUnixFDList**" "out_fd_list")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_add_named_sync
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_add_named_sync")
  (return-type "gboolean")
  (parameters
    '("GVariant*" "arg_o_path_parent_fd")
    '("const-gchar*" "arg_filename")
    '("gboolean" "arg_reuse_existing")
    '("gboolean" "arg_persistent")
    '("GUnixFDList*" "fd_list")
    '("gchar**" "out_doc_id")
    '("GUnixFDList**" "out_fd_list")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_add_full
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_add_full")
  (return-type "none")
  (parameters
    '("GVariant*" "arg_o_path_fds")
    '("guint" "arg_flags")
    '("const-gchar*" "arg_app_id")
    '("const-gchar*-const*" "arg_permissions")
    '("GUnixFDList*" "fd_list")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_add_full_finish
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_add_full_finish")
  (return-type "gboolean")
  (parameters
    '("gchar***" "out_doc_ids")
    '("GVariant**" "out_extra_out")
    '("GUnixFDList**" "out_fd_list")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_add_full_sync
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_add_full_sync")
  (return-type "gboolean")
  (parameters
    '("GVariant*" "arg_o_path_fds")
    '("guint" "arg_flags")
    '("const-gchar*" "arg_app_id")
    '("const-gchar*-const*" "arg_permissions")
    '("GUnixFDList*" "fd_list")
    '("gchar***" "out_doc_ids")
    '("GVariant**" "out_extra_out")
    '("GUnixFDList**" "out_fd_list")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_grant_permissions
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_grant_permissions")
  (return-type "none")
  (parameters
    '("const-gchar*" "arg_doc_id")
    '("const-gchar*" "arg_app_id")
    '("const-gchar*-const*" "arg_permissions")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_grant_permissions_finish
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_grant_permissions_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_grant_permissions_sync
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_grant_permissions_sync")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "arg_doc_id")
    '("const-gchar*" "arg_app_id")
    '("const-gchar*-const*" "arg_permissions")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_revoke_permissions
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_revoke_permissions")
  (return-type "none")
  (parameters
    '("const-gchar*" "arg_doc_id")
    '("const-gchar*" "arg_app_id")
    '("const-gchar*-const*" "arg_permissions")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_revoke_permissions_finish
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_revoke_permissions_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_revoke_permissions_sync
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_revoke_permissions_sync")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "arg_doc_id")
    '("const-gchar*" "arg_app_id")
    '("const-gchar*-const*" "arg_permissions")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_delete
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_delete")
  (return-type "none")
  (parameters
    '("const-gchar*" "arg_doc_id")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_delete_finish
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_delete_finish")
  (return-type "gboolean")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_delete_sync
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_delete_sync")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "arg_doc_id")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_lookup
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_lookup")
  (return-type "none")
  (parameters
    '("const-gchar*" "arg_filename")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_lookup_finish
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_lookup_finish")
  (return-type "gboolean")
  (parameters
    '("gchar**" "out_doc_id")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_lookup_sync
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_lookup_sync")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "arg_filename")
    '("gchar**" "out_doc_id")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_info
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_info")
  (return-type "none")
  (parameters
    '("const-gchar*" "arg_doc_id")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_info_finish
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_info_finish")
  (return-type "gboolean")
  (parameters
    '("gchar**" "out_path")
    '("GVariant**" "out_apps")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_info_sync
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_info_sync")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "arg_doc_id")
    '("gchar**" "out_path")
    '("GVariant**" "out_apps")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_list
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_list")
  (return-type "none")
  (parameters
    '("const-gchar*" "arg_app_id")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_list_finish
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_list_finish")
  (return-type "gboolean")
  (parameters
    '("GVariant**" "out_docs")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_list_sync
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_call_list_sync")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "arg_app_id")
    '("GVariant**" "out_docs")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method get_version
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_get_version")
  (return-type "guint")
)

(define-method set_version
  (of-object "GXdpDocuments")
  (c-name "gxdp_documents_set_version")
  (return-type "none")
  (parameters
    '("guint" "value")
  )
)

(define-function gxdp_documents_proxy_get_type
  (c-name "gxdp_documents_proxy_get_type")
  (return-type "GType")
)

(define-function gxdp_documents_proxy_new_finish
  (c-name "gxdp_documents_proxy_new_finish")
  (return-type "GXdpDocuments*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function gxdp_documents_proxy_new_sync
  (c-name "gxdp_documents_proxy_new_sync")
  (return-type "GXdpDocuments*")
  (parameters
    '("GDBusConnection*" "connection")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function gxdp_documents_proxy_new_for_bus
  (c-name "gxdp_documents_proxy_new_for_bus")
  (return-type "none")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function gxdp_documents_proxy_new_for_bus_finish
  (c-name "gxdp_documents_proxy_new_for_bus_finish")
  (return-type "GXdpDocuments*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function gxdp_documents_proxy_new_for_bus_sync
  (c-name "gxdp_documents_proxy_new_for_bus_sync")
  (return-type "GXdpDocuments*")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function gxdp_documents_skeleton_get_type
  (c-name "gxdp_documents_skeleton_get_type")
  (return-type "GType")
)

(define-function gxdp_open_uri_get_type
  (c-name "gxdp_open_uri_get_type")
  (return-type "GType")
)

(define-function gxdp_open_uri_interface_info
  (c-name "gxdp_open_uri_interface_info")
  (return-type "GDBusInterfaceInfo*")
)

(define-function gxdp_open_uri_override_properties
  (c-name "gxdp_open_uri_override_properties")
  (return-type "guint")
  (parameters
    '("GObjectClass*" "klass")
    '("guint" "property_id_begin")
  )
)

(define-method complete_open_uri
  (of-object "GXdpOpenURI")
  (c-name "gxdp_open_uri_complete_open_uri")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
    '("const-gchar*" "handle")
  )
)

(define-method complete_open_file
  (of-object "GXdpOpenURI")
  (c-name "gxdp_open_uri_complete_open_file")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
    '("GUnixFDList*" "fd_list")
    '("const-gchar*" "handle")
  )
)

(define-method call_open_uri
  (of-object "GXdpOpenURI")
  (c-name "gxdp_open_uri_call_open_uri")
  (return-type "none")
  (parameters
    '("const-gchar*" "arg_parent_window")
    '("const-gchar*" "arg_uri")
    '("GVariant*" "arg_options")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_open_uri_finish
  (of-object "GXdpOpenURI")
  (c-name "gxdp_open_uri_call_open_uri_finish")
  (return-type "gboolean")
  (parameters
    '("gchar**" "out_handle")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_open_uri_sync
  (of-object "GXdpOpenURI")
  (c-name "gxdp_open_uri_call_open_uri_sync")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "arg_parent_window")
    '("const-gchar*" "arg_uri")
    '("GVariant*" "arg_options")
    '("gchar**" "out_handle")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method call_open_file
  (of-object "GXdpOpenURI")
  (c-name "gxdp_open_uri_call_open_file")
  (return-type "none")
  (parameters
    '("const-gchar*" "arg_parent_window")
    '("GVariant*" "arg_fd")
    '("GVariant*" "arg_options")
    '("GUnixFDList*" "fd_list")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_open_file_finish
  (of-object "GXdpOpenURI")
  (c-name "gxdp_open_uri_call_open_file_finish")
  (return-type "gboolean")
  (parameters
    '("gchar**" "out_handle")
    '("GUnixFDList**" "out_fd_list")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_open_file_sync
  (of-object "GXdpOpenURI")
  (c-name "gxdp_open_uri_call_open_file_sync")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "arg_parent_window")
    '("GVariant*" "arg_fd")
    '("GVariant*" "arg_options")
    '("GUnixFDList*" "fd_list")
    '("gchar**" "out_handle")
    '("GUnixFDList**" "out_fd_list")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-method get_version
  (of-object "GXdpOpenURI")
  (c-name "gxdp_open_uri_get_version")
  (return-type "guint")
)

(define-method set_version
  (of-object "GXdpOpenURI")
  (c-name "gxdp_open_uri_set_version")
  (return-type "none")
  (parameters
    '("guint" "value")
  )
)

(define-function gxdp_open_uri_proxy_get_type
  (c-name "gxdp_open_uri_proxy_get_type")
  (return-type "GType")
)

(define-function gxdp_open_uri_proxy_new_finish
  (c-name "gxdp_open_uri_proxy_new_finish")
  (return-type "GXdpOpenURI*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function gxdp_open_uri_proxy_new_sync
  (c-name "gxdp_open_uri_proxy_new_sync")
  (return-type "GXdpOpenURI*")
  (parameters
    '("GDBusConnection*" "connection")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function gxdp_open_uri_proxy_new_for_bus
  (c-name "gxdp_open_uri_proxy_new_for_bus")
  (return-type "none")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function gxdp_open_uri_proxy_new_for_bus_finish
  (c-name "gxdp_open_uri_proxy_new_for_bus_finish")
  (return-type "GXdpOpenURI*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function gxdp_open_uri_proxy_new_for_bus_sync
  (c-name "gxdp_open_uri_proxy_new_for_bus_sync")
  (return-type "GXdpOpenURI*")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function gxdp_open_uri_skeleton_get_type
  (c-name "gxdp_open_uri_skeleton_get_type")
  (return-type "GType")
)

(define-function gxdp_network_monitor_get_type
  (c-name "gxdp_network_monitor_get_type")
  (return-type "GType")
)

(define-function gxdp_network_monitor_interface_info
  (c-name "gxdp_network_monitor_interface_info")
  (return-type "GDBusInterfaceInfo*")
)

(define-function gxdp_network_monitor_override_properties
  (c-name "gxdp_network_monitor_override_properties")
  (return-type "guint")
  (parameters
    '("GObjectClass*" "klass")
    '("guint" "property_id_begin")
  )
)

(define-method emit_changed
  (of-object "GXdpNetworkMonitor")
  (c-name "gxdp_network_monitor_emit_changed")
  (return-type "none")
  (parameters
    '("gboolean" "arg_available")
  )
)

(define-method get_available
  (of-object "GXdpNetworkMonitor")
  (c-name "gxdp_network_monitor_get_available")
  (return-type "gboolean")
)

(define-method set_available
  (of-object "GXdpNetworkMonitor")
  (c-name "gxdp_network_monitor_set_available")
  (return-type "none")
  (parameters
    '("gboolean" "value")
  )
)

(define-method get_metered
  (of-object "GXdpNetworkMonitor")
  (c-name "gxdp_network_monitor_get_metered")
  (return-type "gboolean")
)

(define-method set_metered
  (of-object "GXdpNetworkMonitor")
  (c-name "gxdp_network_monitor_set_metered")
  (return-type "none")
  (parameters
    '("gboolean" "value")
  )
)

(define-method get_connectivity
  (of-object "GXdpNetworkMonitor")
  (c-name "gxdp_network_monitor_get_connectivity")
  (return-type "guint")
)

(define-method set_connectivity
  (of-object "GXdpNetworkMonitor")
  (c-name "gxdp_network_monitor_set_connectivity")
  (return-type "none")
  (parameters
    '("guint" "value")
  )
)

(define-function gxdp_network_monitor_proxy_get_type
  (c-name "gxdp_network_monitor_proxy_get_type")
  (return-type "GType")
)

(define-function gxdp_network_monitor_proxy_new_finish
  (c-name "gxdp_network_monitor_proxy_new_finish")
  (return-type "GXdpNetworkMonitor*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function gxdp_network_monitor_proxy_new_sync
  (c-name "gxdp_network_monitor_proxy_new_sync")
  (return-type "GXdpNetworkMonitor*")
  (parameters
    '("GDBusConnection*" "connection")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function gxdp_network_monitor_proxy_new_for_bus
  (c-name "gxdp_network_monitor_proxy_new_for_bus")
  (return-type "none")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function gxdp_network_monitor_proxy_new_for_bus_finish
  (c-name "gxdp_network_monitor_proxy_new_for_bus_finish")
  (return-type "GXdpNetworkMonitor*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function gxdp_network_monitor_proxy_new_for_bus_sync
  (c-name "gxdp_network_monitor_proxy_new_for_bus_sync")
  (return-type "GXdpNetworkMonitor*")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function gxdp_network_monitor_skeleton_get_type
  (c-name "gxdp_network_monitor_skeleton_get_type")
  (return-type "GType")
)

(define-function gxdp_proxy_resolver_get_type
  (c-name "gxdp_proxy_resolver_get_type")
  (return-type "GType")
)

(define-function gxdp_proxy_resolver_interface_info
  (c-name "gxdp_proxy_resolver_interface_info")
  (return-type "GDBusInterfaceInfo*")
)

(define-function gxdp_proxy_resolver_override_properties
  (c-name "gxdp_proxy_resolver_override_properties")
  (return-type "guint")
  (parameters
    '("GObjectClass*" "klass")
    '("guint" "property_id_begin")
  )
)

(define-method complete_lookup
  (of-object "GXdpProxyResolver")
  (c-name "gxdp_proxy_resolver_complete_lookup")
  (return-type "none")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
    '("const-gchar*-const*" "proxies")
  )
)

(define-method call_lookup
  (of-object "GXdpProxyResolver")
  (c-name "gxdp_proxy_resolver_call_lookup")
  (return-type "none")
  (parameters
    '("const-gchar*" "arg_uri")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method call_lookup_finish
  (of-object "GXdpProxyResolver")
  (c-name "gxdp_proxy_resolver_call_lookup_finish")
  (return-type "gboolean")
  (parameters
    '("gchar***" "out_proxies")
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-method call_lookup_sync
  (of-object "GXdpProxyResolver")
  (c-name "gxdp_proxy_resolver_call_lookup_sync")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "arg_uri")
    '("gchar***" "out_proxies")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function gxdp_proxy_resolver_proxy_get_type
  (c-name "gxdp_proxy_resolver_proxy_get_type")
  (return-type "GType")
)

(define-function gxdp_proxy_resolver_proxy_new_finish
  (c-name "gxdp_proxy_resolver_proxy_new_finish")
  (return-type "GXdpProxyResolver*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function gxdp_proxy_resolver_proxy_new_sync
  (c-name "gxdp_proxy_resolver_proxy_new_sync")
  (return-type "GXdpProxyResolver*")
  (parameters
    '("GDBusConnection*" "connection")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function gxdp_proxy_resolver_proxy_new_for_bus
  (c-name "gxdp_proxy_resolver_proxy_new_for_bus")
  (return-type "none")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-function gxdp_proxy_resolver_proxy_new_for_bus_finish
  (c-name "gxdp_proxy_resolver_proxy_new_for_bus_finish")
  (return-type "GXdpProxyResolver*")
  (parameters
    '("GAsyncResult*" "res")
    '("GError**" "error")
  )
)

(define-function gxdp_proxy_resolver_proxy_new_for_bus_sync
  (c-name "gxdp_proxy_resolver_proxy_new_for_bus_sync")
  (return-type "GXdpProxyResolver*")
  (parameters
    '("GBusType" "bus_type")
    '("GDBusProxyFlags" "flags")
    '("const-gchar*" "name")
    '("const-gchar*" "object_path")
    '("GCancellable*" "cancellable")
    '("GError**" "error")
  )
)

(define-function gxdp_proxy_resolver_skeleton_get_type
  (c-name "gxdp_proxy_resolver_skeleton_get_type")
  (return-type "GType")
)


