/* Copyright (C) 2012 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <giomm/filteroutputstream.h>
#include <giomm/pollableoutputstream.h>

_DEFS(giomm,gio)
_PINCLUDE(giomm/private/filteroutputstream_p.h)

namespace Gio
{

class Converter;
class OutputStream;

/** ConverterOutputstream - Converter Output Stream.
 * Converter output stream implements OutputStream and allows conversion of
 * data of various types during reading.  ConverterOutputStream also implements
 * the PollableOutputStream interface.
 * @newin{2,34}
 */
class ConverterOutputStream : public FilterOutputStream,
                              public PollableOutputStream
{
  _CLASS_GOBJECT(ConverterOutputStream, GConverterOutputStream, G_CONVERTER_OUTPUT_STREAM, FilterOutputStream, GFilterOutputStream)
  _IMPLEMENTS_INTERFACE(PollableOutputStream)

protected:
  _WRAP_CTOR(ConverterOutputStream(const Glib::RefPtr<OutputStream>& base_stream, const Glib::RefPtr<Converter>& converter), g_converter_output_stream_new)

public:
  _WRAP_METHOD_DOCS_ONLY(g_converter_output_stream_new)
  _WRAP_CREATE(const Glib::RefPtr<OutputStream>& base_stream, const Glib::RefPtr<Converter>& converter)

  // The C function returns an unreffed private member.
  _WRAP_METHOD(Glib::RefPtr<Converter> get_converter(), g_converter_output_stream_get_converter, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Converter> get_converter() const, g_converter_output_stream_get_converter, constversion)

  _WRAP_PROPERTY("converter", Glib::RefPtr<Converter>)
};

} // namespace Gio
