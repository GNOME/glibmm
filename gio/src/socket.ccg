/* Copyright (C) 2007 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gio/gio.h>
#include <glibmm/error.h>
#include <giomm/asyncresult.h>
#include <giomm/socketsource.h>
#include "slot_async.h"

namespace Gio
{

Socket::Socket(SocketFamily family, SocketType type, SocketProtocol protocol,
  const Glib::RefPtr<Cancellable>& cancellable)
: _CONSTRUCT("family", int(family), "type", int(type), "protocol", int(protocol))
{
  init(cancellable);
}

Socket::Socket(int fd, const Glib::RefPtr<Cancellable>& cancellable) : _CONSTRUCT("fd", fd)
{
  init(cancellable);
}

// static
Glib::RefPtr<Socket>
Socket::create(SocketFamily family, SocketType type, SocketProtocol protocol,
  const Glib::RefPtr<Cancellable>& cancellable)
{
  return Glib::RefPtr<Socket>(new Socket(family, type, protocol, cancellable));
}

// static
Glib::RefPtr<Socket>
Socket::create_from_fd(int fd, const Glib::RefPtr<Cancellable>& cancellable)
{
  return Glib::RefPtr<Socket>(new Socket(fd, cancellable));
}

gssize
Socket::receive_from(Glib::RefPtr<SocketAddress>& address, char* buffer, gsize size,
  const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = nullptr;
  GSocketAddress* caddr = nullptr;
  auto retvalue = g_socket_receive_from(
    gobj(), &caddr, buffer, size, const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  if (caddr)
    address = Glib::wrap(caddr);

  return retvalue;
}

gssize
Socket::receive_from(Glib::RefPtr<SocketAddress>& address, char* buffer, gsize size)
{
  GError* gerror = nullptr;
  GSocketAddress* caddr = nullptr;
  auto retvalue = g_socket_receive_from(gobj(), &caddr, buffer, size, nullptr, &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  if (caddr)
    address = Glib::wrap(caddr);

  return retvalue;
}

gssize
Socket::receive_with_blocking(
  gchar* buffer, gsize size, bool blocking, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = nullptr;
  const auto retvalue = g_socket_receive_with_blocking(
    gobj(), buffer, size, blocking, Glib::unwrap(cancellable), &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

gssize
Socket::send_with_blocking(
  gchar* buffer, gsize size, bool blocking, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = nullptr;
  const auto retvalue = g_socket_send_with_blocking(
    gobj(), buffer, size, blocking, Glib::unwrap(cancellable), &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

Glib::RefPtr<SocketSource>
Socket::create_source(Glib::IOCondition condition, const Glib::RefPtr<Cancellable>& cancellable)
{
  // The corresponding unreference() takes place in the dtor
  // of the Glib::RefPtr<Socket> object below.
  reference();
  return SocketSource::create(Glib::RefPtr<Socket>(this), condition, cancellable);
}

} // namespace Gio
