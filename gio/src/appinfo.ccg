/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <giomm/file.h>
#include <glibmm/vectorutils.h>
#include <giomm/slot_async.h>
#include <gio/gio.h>

namespace
{
/* Special type traits for pointers to the GAppInfo interface.
 * The partial specialization in glibmm/glib/glibmm/containerhandle_shared.h
 * is not well suited for interfaces which do not already have a wrapper.
 * Its to_cpp_type() calls Glib::wrap_auto() instead id Glib::wrap_auto_interface().
 * These type traits are used by Glib::ListHandler<>::list_to_vector() in
 * Gio::AppInfo::get_all() and Gio::AppInfo::get_all_for_type().
 * https://gitlab.gnome.org/GNOME/glibmm/-/issues/94
 */
struct TypeTraits_AppInfo
{
  using T = Gio::AppInfo;
  using CppType = Glib::RefPtr<T>;
  using CType = typename T::BaseObjectType*;
  using CTypeNonConst = typename T::BaseObjectType*;

  static CType to_c_type(const CppType& ptr) { return Glib::unwrap(ptr); }
  static CType to_c_type(CType ptr) { return ptr; }
  static CppType to_cpp_type(CType ptr) { return Glib::wrap(ptr, true); }

  static void release_c_type(CType ptr)
  {
    GLIBMM_DEBUG_UNREFERENCE(nullptr, ptr);
    g_object_unref(ptr);
  }
};
} // anonymous namespace

namespace Gio
{

Glib::RefPtr<AppInfo>
AppInfo::create_from_commandline(
  const std::string& commandline, const std::string& application_name, CreateFlags flags)
{
  GAppInfo* capp_info = nullptr;
  GError* gerror = nullptr;

  capp_info = g_app_info_create_from_commandline(commandline.c_str(), application_name.c_str(),
    static_cast<GAppInfoCreateFlags>(flags), &gerror);

  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return Glib::wrap(capp_info);
}

Glib::RefPtr<AppInfo>
AppInfo::create_duplicate() const
{
  return Glib::wrap(g_app_info_dup(const_cast<GAppInfo*>(gobj())));
}

bool
AppInfo::launch(
  const Glib::RefPtr<Gio::File>& file, const Glib::RefPtr<AppLaunchContext>& launch_context)
{
  std::vector<Glib::RefPtr<Gio::File>> vec = { file };

  GError* gerror = nullptr;
  const bool retvalue = g_app_info_launch(gobj(),
    Glib::ListHandler<Glib::RefPtr<Gio::File>>::vector_to_list(vec).data(),
    Glib::unwrap(launch_context), &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool
AppInfo::launch(const Glib::RefPtr<Gio::File>& file)
{
  std::vector<Glib::RefPtr<Gio::File>> vec = { file };

  GError* gerror = nullptr;
  const bool retvalue = g_app_info_launch(gobj(),
    Glib::ListHandler<Glib::RefPtr<Gio::File>>::vector_to_list(vec).data(), nullptr, &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool
AppInfo::launch_uri(const std::string& uri, const Glib::RefPtr<AppLaunchContext>& launch_context)
{
  std::vector<std::string> vec = { uri };

  GError* gerror = nullptr;
  const bool retvalue =
    g_app_info_launch_uris(gobj(), Glib::ListHandler<std::string>::vector_to_list(vec).data(),
      Glib::unwrap(launch_context), &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool
AppInfo::launch_uri(const std::string& uri)
{
  std::vector<std::string> vec = { uri };

  GError* gerror = nullptr;
  const bool retvalue = g_app_info_launch_uris(
    gobj(), Glib::ListHandler<std::string>::vector_to_list(vec).data(), nullptr, &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

} // namespace Gio
