/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <giomm/file.h>
#include <glibmm/listhandle.h>
#include <glibmm/vectorutils.h>
#include "slot_async.h"
#include <gio/gio.h>

namespace Gio
{

Glib::RefPtr<AppInfo>
AppInfo::create_from_commandline(
  const std::string& commandline, const std::string& application_name, AppInfoCreateFlags flags)
{
  GAppInfo* capp_info = nullptr;
  GError* gerror = nullptr;

  capp_info = g_app_info_create_from_commandline(commandline.c_str(), application_name.c_str(),
    static_cast<GAppInfoCreateFlags>(flags), &gerror);

  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return Glib::wrap(capp_info);
}

Glib::RefPtr<AppInfo>
AppInfo::create_duplicate() const
{
  return Glib::wrap(g_app_info_dup(const_cast<GAppInfo*>(gobj())));
}

bool
AppInfo::launch(
  const Glib::RefPtr<Gio::File>& file, const Glib::RefPtr<AppLaunchContext>& context)
{
  std::vector<Glib::RefPtr<Gio::File>> vec = { file };

  GError* gerror = nullptr;
  const bool retvalue = g_app_info_launch(gobj(),
    Glib::ListHandler<Glib::RefPtr<Gio::File>>::vector_to_list(vec).data(),
    Glib::unwrap(context), &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool
AppInfo::launch(const Glib::RefPtr<Gio::File>& file)
{
  std::vector<Glib::RefPtr<Gio::File>> vec = { file };

  GError* gerror = nullptr;
  const bool retvalue = g_app_info_launch(gobj(),
    Glib::ListHandler<Glib::RefPtr<Gio::File>>::vector_to_list(vec).data(), nullptr, &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool
AppInfo::launch_uri(const std::string& uri, const Glib::RefPtr<AppLaunchContext>& context)
{
  std::vector<std::string> vec = { uri };

  GError* gerror = nullptr;
  const bool retvalue =
    g_app_info_launch_uris(gobj(), Glib::ListHandler<std::string>::vector_to_list(vec).data(),
      Glib::unwrap(context), &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

bool
AppInfo::launch_uri(const std::string& uri)
{
  std::vector<std::string> vec = { uri };

  GError* gerror = nullptr;
  const bool retvalue = g_app_info_launch_uris(
    gobj(), Glib::ListHandler<std::string>::vector_to_list(vec).data(), nullptr, &(gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  return retvalue;
}

} // namespace Gio
