/* Copyright (C) 2007 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gio/gio.h>
#include <glibmm/error.h>
#include <giomm/private/icon_p.h>
#include "slot_async.h"

namespace Gio
{

Glib::RefPtr<InputStream>
LoadableIcon::load(int size, Glib::ustring& type, const Glib::RefPtr<Cancellable>& cancellable)
{
  char* c_type;
  GError* gerror = nullptr;
  auto retval =
    Glib::wrap(g_loadable_icon_load(gobj(), size, &c_type, Glib::unwrap(cancellable), &gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  type = c_type;
  g_free(c_type);
  if (retval)
    retval->reference(); // The function does not do a ref for us.
  return retval;
}

Glib::RefPtr<InputStream>
LoadableIcon::load(int size, Glib::ustring& type)
{
  char* c_type;
  GError* gerror = nullptr;
  auto retval = Glib::wrap(g_loadable_icon_load(gobj(), size, &c_type, nullptr, &gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);

  type = c_type;
  g_free(c_type);
  if (retval)
    retval->reference(); // The function does not do a ref for us.
  return retval;
}

void
LoadableIcon::load_async(
  int size, const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  auto slot_copy = new SlotAsyncReady(slot);

  g_loadable_icon_load_async(
    gobj(), size, Glib::unwrap(cancellable), &SignalProxy_async_callback, slot_copy);
}

void
LoadableIcon::load_async(int size, const SlotAsyncReady& slot)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  auto slot_copy = new SlotAsyncReady(slot);

  g_loadable_icon_load_async(gobj(), size, nullptr, &SignalProxy_async_callback, slot_copy);
}

} // namespace Gio
