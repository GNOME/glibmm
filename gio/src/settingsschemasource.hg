/* Copyright (C) 2015 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

_CONFIGINCLUDE(giommconfig.h)

#include <giomm/settingsschema.h>

#include <glibmm/ustring.h>
#include <vector>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/object_p.h)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GSettingsSchemaSource GSettingsSchemaSource;
#endif

namespace Gio
{

//TODO: Add some class documentation, though there is none in the C docs.

/** See SettingsSchema.
 *
 * @newin{2,32}
 */
class GIOMM_API SettingsSchemaSource final
{
  _CLASS_OPAQUE_REFCOUNTED(SettingsSchemaSource, GSettingsSchemaSource, NONE, g_settings_schema_source_ref, g_settings_schema_source_unref, GIOMM_API)

protected:
  _IGNORE(g_settings_schema_source_ref, g_settings_schema_source_unref)

public:
  _WRAP_METHOD(static Glib::RefPtr<SettingsSchemaSource> get_default(), g_settings_schema_source_get_default, refreturn)

  _WRAP_METHOD(static Glib::RefPtr<SettingsSchemaSource> create(
    const std::string& directory, bool trusted{.},
    const Glib::RefPtr<SettingsSchemaSource>& parent{.} = get_default()),
    g_settings_schema_source_new_from_directory, errthrow)

  //Note this doesn't need refreturn because the C function returns a reference.
  //- it is documented as transfer:full
  _WRAP_METHOD(Glib::RefPtr<SettingsSchema> lookup(const Glib::ustring& schema_id, bool recursive), g_settings_schema_source_lookup)
  _WRAP_METHOD(Glib::RefPtr<const SettingsSchema> lookup(const Glib::ustring& schema_id, bool recursive) const, g_settings_schema_source_lookup)

  _IGNORE(g_settings_schema_source_list_schemas)
  /** Lists the schemas in a given source.
   *
   * Do not call this function from normal programs. It is designed for use by
   * database editors, commandline tools, etc.
   *
   * @newin{2,64}
   *
   * @param relocatable Whether you want the list of relocatable schemas
   * (<tt>true</tt>) or the list of non-relocatable schemas (<tt>false</tt>)
   * for this source. Non-relocatable schemas are those for which you can call
   * Gio::Settings::create() without specifying a path. Relocatable schemas are
   * those for which you must pass a path to Gio::Settings::create().
   *
   * @param recursive If <tt>true</tt>, the list will include parent sources.
   * If <tt>false</tt>, it will only include the schemas from one source (i.e.
   * one directory). You probably want to recurse.
   *
   * @return a vector of the names of the schemas matching the given parameters.
   */
  std::vector<Glib::ustring> list_schemas(bool relocatable, bool recursive) const;
};

} // namespace Gio
