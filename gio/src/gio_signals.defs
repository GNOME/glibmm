(define-signal changed
  (of-object "GAppInfoMonitor")
  (return-type "void")
  (when "first")
)

(define-signal launch-failed
  (of-object "GAppLaunchContext")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "startup_notify_id")
  )
)

(define-signal launched
  (of-object "GAppLaunchContext")
  (return-type "void")
  (when "last")
  (parameters
    '("GAppInfo*" "info")
    '("GVariant*" "platform_data")
  )
)

(define-signal activate
  (of-object "GApplication")
  (return-type "void")
  (when "last")
)

(define-signal command-line
  (of-object "GApplication")
  (return-type "gint")
  (when "last")
  (parameters
    '("GApplicationCommandLine*" "command_line")
  )
)

(define-signal handle-local-options
  (of-object "GApplication")
  (return-type "gint")
  (when "last")
  (parameters
    '("GVariantDict*" "options")
  )
)

(define-signal open
  (of-object "GApplication")
  (return-type "void")
  (when "last")
  (parameters
    '("gpointer" "files")
    '("gint" "n_files")
    '("gchar*" "hint")
  )
)

(define-signal shutdown
  (of-object "GApplication")
  (return-type "void")
  (when "last")
)

(define-signal startup
  (of-object "GApplication")
  (return-type "void")
  (when "first")
)

(define-signal cancelled
  (of-object "GCancellable")
  (return-type "void")
  (when "last")
)

(define-signal allow-mechanism
  (of-object "GDBusAuthObserver")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("const-gchar*" "mechanism")
  )
)

(define-signal authorize-authenticated-peer
  (of-object "GDBusAuthObserver")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GIOStream*" "stream")
    '("GCredentials*" "credentials")
  )
)

(define-signal closed
  (of-object "GDBusConnection")
  (return-type "void")
  (when "last")
  (parameters
    '("gboolean" "remote_peer_vanished")
    '("GError*" "error")
  )
)

(define-signal g-authorize-method
  (of-object "GDBusInterfaceSkeleton")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GDBusMethodInvocation*" "invocation")
  )
)

(define-signal interface-proxy-properties-changed
  (of-object "GDBusObjectManagerClient")
  (return-type "void")
  (when "last")
  (parameters
    '("GDBusObjectProxy*" "object_proxy")
    '("GDBusProxy*" "interface_proxy")
    '("GVariant*" "changed_properties")
    '("gchar**" "invalidated_properties")
  )
)

(define-signal interface-proxy-signal
  (of-object "GDBusObjectManagerClient")
  (return-type "void")
  (when "last")
  (parameters
    '("GDBusObjectProxy*" "object_proxy")
    '("GDBusProxy*" "interface_proxy")
    '("gchar*" "sender_name")
    '("gchar*" "signal_name")
    '("GVariant*" "parameters")
  )
)

(define-signal authorize-method
  (of-object "GDBusObjectSkeleton")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GDBusInterfaceSkeleton*" "interface")
    '("GDBusMethodInvocation*" "invocation")
  )
)

(define-signal g-properties-changed
  (of-object "GDBusProxy")
  (return-type "void")
  (when "last")
  (parameters
    '("GVariant*" "changed_properties")
    '("gchar**" "invalidated_properties")
  )
)

(define-signal g-signal
  (of-object "GDBusProxy")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "sender_name")
    '("gchar*" "signal_name")
    '("GVariant*" "parameters")
  )
)

(define-signal new-connection
  (of-object "GDBusServer")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GDBusConnection*" "connection")
  )
)

(define-signal changed
  (of-object "GFileMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GFile*" "file")
    '("GFile*" "other_file")
    '("GFileMonitorEvent" "event_type")
  )
)

(define-signal got-completion-data
  (of-object "GFilenameCompleter")
  (return-type "void")
  (when "last")
)

(define-signal items-changed
  (of-object "GMenuModel")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "position")
    '("gint" "removed")
    '("gint" "added")
  )
)

(define-signal aborted
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
)

(define-signal ask-password
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "message")
    '("gchar*" "default_user")
    '("gchar*" "default_domain")
    '("GAskPasswordFlags" "flags")
  )
)

(define-signal ask-question
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "message")
    '("gchar**" "choices")
  )
)

(define-signal reply
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GMountOperationResult" "result")
  )
)

(define-signal show-processes
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "message")
    '("GArray*" "processes")
    '("gchar**" "choices")
  )
)

(define-signal show-unmount-progress
  (of-object "GMountOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "message")
    '("gint64" "time_left")
    '("gint64" "bytes_left")
  )
)

(define-signal reload
  (of-object "GResolver")
  (return-type "void")
  (when "last")
)

(define-signal change-event
  (of-object "GSettings")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gpointer" "keys")
    '("gint" "n_keys")
  )
)

(define-signal changed
  (of-object "GSettings")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "key")
  )
)

(define-signal writable-change-event
  (of-object "GSettings")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("guint" "key")
  )
)

(define-signal writable-changed
  (of-object "GSettings")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "key")
  )
)

(define-signal activate
  (of-object "GSimpleAction")
  (return-type "void")
  (when "last")
  (parameters
    '("GVariant*" "parameter")
  )
)

(define-signal change-state
  (of-object "GSimpleAction")
  (return-type "void")
  (when "last")
  (parameters
    '("GVariant*" "value")
  )
)

(define-signal event
  (of-object "GSocketClient")
  (return-type "void")
  (when "last")
  (parameters
    '("GSocketClientEvent" "event")
    '("GSocketConnectable*" "connectable")
    '("GIOStream*" "connection")
  )
)

(define-signal event
  (of-object "GSocketListener")
  (return-type "void")
  (when "last")
  (parameters
    '("GSocketListenerEvent" "event")
    '("GSocket*" "socket")
  )
)

(define-signal incoming
  (of-object "GSocketService")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GSocketConnection*" "connection")
    '("GObject*" "source_object")
  )
)

(define-signal run
  (of-object "GThreadedSocketService")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GSocketConnection*" "connection")
    '("GObject*" "source_object")
  )
)

(define-signal accept-certificate
  (of-object "GTlsConnection")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GTlsCertificate*" "peer_cert")
    '("GTlsCertificateFlags" "errors")
  )
)

(define-signal mountpoints-changed
  (of-object "GUnixMountMonitor")
  (return-type "void")
  (when "last")
)

(define-signal mounts-changed
  (of-object "GUnixMountMonitor")
  (return-type "void")
  (when "last")
)

(define-signal drive-changed
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GDrive*" "drive")
  )
)

(define-signal drive-connected
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GDrive*" "drive")
  )
)

(define-signal drive-disconnected
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GDrive*" "drive")
  )
)

(define-signal drive-eject-button
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GDrive*" "drive")
  )
)

(define-signal drive-stop-button
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GDrive*" "drive")
  )
)

(define-signal mount-added
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GMount*" "mount")
  )
)

(define-signal mount-changed
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GMount*" "mount")
  )
)

(define-signal mount-pre-unmount
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GMount*" "mount")
  )
)

(define-signal mount-removed
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GMount*" "mount")
  )
)

(define-signal volume-added
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GVolume*" "volume")
  )
)

(define-signal volume-changed
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GVolume*" "volume")
  )
)

(define-signal volume-removed
  (of-object "GVolumeMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("GVolume*" "volume")
  )
)

(define-signal action-added
  (of-object "GActionGroup")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "action_name")
  )
)

(define-signal action-enabled-changed
  (of-object "GActionGroup")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "action_name")
    '("gboolean" "enabled")
  )
)

(define-signal action-removed
  (of-object "GActionGroup")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "action_name")
  )
)

(define-signal action-state-changed
  (of-object "GActionGroup")
  (return-type "void")
  (when "last")
  (parameters
    '("gchar*" "action_name")
    '("GVariant*" "value")
  )
)

(define-signal interface-added
  (of-object "GDBusObject")
  (return-type "void")
  (when "last")
  (parameters
    '("GDBusInterface*" "interface")
  )
)

(define-signal interface-removed
  (of-object "GDBusObject")
  (return-type "void")
  (when "last")
  (parameters
    '("GDBusInterface*" "interface")
  )
)

(define-signal interface-added
  (of-object "GDBusObjectManager")
  (return-type "void")
  (when "last")
  (parameters
    '("GDBusObject*" "object")
    '("GDBusInterface*" "interface")
  )
)

(define-signal interface-removed
  (of-object "GDBusObjectManager")
  (return-type "void")
  (when "last")
  (parameters
    '("GDBusObject*" "object")
    '("GDBusInterface*" "interface")
  )
)

(define-signal object-added
  (of-object "GDBusObjectManager")
  (return-type "void")
  (when "last")
  (parameters
    '("GDBusObject*" "object")
  )
)

(define-signal object-removed
  (of-object "GDBusObjectManager")
  (return-type "void")
  (when "last")
  (parameters
    '("GDBusObject*" "object")
  )
)

(define-signal changed
  (of-object "GDrive")
  (return-type "void")
  (when "last")
)

(define-signal disconnected
  (of-object "GDrive")
  (return-type "void")
  (when "last")
)

(define-signal eject-button
  (of-object "GDrive")
  (return-type "void")
  (when "last")
)

(define-signal stop-button
  (of-object "GDrive")
  (return-type "void")
  (when "last")
)

(define-signal accept-certificate
  (of-object "GDtlsConnection")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GTlsCertificate*" "peer_cert")
    '("GTlsCertificateFlags" "errors")
  )
)

(define-signal items-changed
  (of-object "GListModel")
  (return-type "void")
  (when "last")
  (parameters
    '("guint" "position")
    '("guint" "removed")
    '("guint" "added")
  )
)

(define-signal changed
  (of-object "GMount")
  (return-type "void")
  (when "last")
)

(define-signal pre-unmount
  (of-object "GMount")
  (return-type "void")
  (when "last")
)

(define-signal unmounted
  (of-object "GMount")
  (return-type "void")
  (when "last")
)

(define-signal network-changed
  (of-object "GNetworkMonitor")
  (return-type "void")
  (when "last")
  (parameters
    '("gboolean" "available")
  )
)

(define-signal changed
  (of-object "GVolume")
  (return-type "void")
  (when "last")
)

(define-signal removed
  (of-object "GVolume")
  (return-type "void")
  (when "last")
)

(define-property action-group
  (of-object "GApplication")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property application-id
  (of-object "GApplication")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property flags
  (of-object "GApplication")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inactivity-timeout
  (of-object "GApplication")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-busy
  (of-object "GApplication")
  (docs "Whether the application is currently marked as busy through g_application_mark_busy() or g_application_bind_busy_property().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-registered
  (of-object "GApplication")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-remote
  (of-object "GApplication")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property resource-base-path
  (of-object "GApplication")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property arguments
  (of-object "GApplicationCommandLine")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property is-remote
  (of-object "GApplicationCommandLine")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property options
  (of-object "GApplicationCommandLine")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property platform-data
  (of-object "GApplicationCommandLine")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property buffer-size
  (of-object "GBufferedInputStream")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property auto-grow
  (of-object "GBufferedOutputStream")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property buffer-size
  (of-object "GBufferedOutputStream")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property bytes
  (of-object "GBytesIcon")
  (docs "The bytes containing the icon.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property from-charset
  (of-object "GCharsetConverter")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property to-charset
  (of-object "GCharsetConverter")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property use-fallback
  (of-object "GCharsetConverter")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property converter
  (of-object "GConverterInputStream")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property converter
  (of-object "GConverterOutputStream")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property address
  (of-object "GDBusConnection")
  (docs "A D-Bus address specifying potential endpoints that can be used when establishing the connection.")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property authentication-observer
  (of-object "GDBusConnection")
  (docs "A #GDBusAuthObserver object to assist in the authentication process or %NULL.")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property capabilities
  (of-object "GDBusConnection")
  (docs "Flags from the #GDBusCapabilityFlags enumeration representing connection features negotiated with the other peer.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property closed
  (of-object "GDBusConnection")
  (docs "A boolean specifying whether the connection has been closed.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property exit-on-close
  (of-object "GDBusConnection")
  (docs "A boolean specifying whether the process will be terminated (by calling `raise(SIGTERM)`) if the connection is closed by the remote peer.  Note that #GDBusConnection objects returned by g_bus_get_finish() and g_bus_get_sync() will (usually) have this property set to %TRUE.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property flags
  (of-object "GDBusConnection")
  (docs "Flags from the #GDBusConnectionFlags enumeration.")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property guid
  (of-object "GDBusConnection")
  (docs "The GUID of the peer performing the role of server when authenticating.  If you are constructing a #GDBusConnection and pass %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER in the #GDBusConnection:flags property then you MUST also set this property to a valid guid.  If you are constructing a #GDBusConnection and pass %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT in the #GDBusConnection:flags property you will be able to read the GUID of the other peer here after the connection has been successfully initialized.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property stream
  (of-object "GDBusConnection")
  (docs "The underlying #GIOStream used for I/O.  If this is passed on construction and is a #GSocketConnection, then the corresponding #GSocket will be put into non-blocking mode.  While the #GDBusConnection is active, it will interact with this stream from a worker thread, so it is not safe to interact with the stream directly.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property unique-name
  (of-object "GDBusConnection")
  (docs "The unique name as assigned by the message bus or %NULL if the connection is not open or not a message bus connection.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property g-flags
  (of-object "GDBusInterfaceSkeleton")
  (docs "Flags from the #GDBusInterfaceSkeletonFlags enumeration.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property locked
  (of-object "GDBusMessage")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property bus-type
  (of-object "GDBusObjectManagerClient")
  (docs "If this property is not %G_BUS_TYPE_NONE, then #GDBusObjectManagerClient:connection must be %NULL and will be set to the #GDBusConnection obtained by calling g_bus_get() with the value of this property.")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property connection
  (of-object "GDBusObjectManagerClient")
  (docs "The #GDBusConnection to use.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property flags
  (of-object "GDBusObjectManagerClient")
  (docs "Flags from the #GDBusObjectManagerClientFlags enumeration.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property get-proxy-type-destroy-notify
  (of-object "GDBusObjectManagerClient")
  (docs "A #GDestroyNotify for the #gpointer user_data in #GDBusObjectManagerClient:get-proxy-type-user-data.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property get-proxy-type-func
  (of-object "GDBusObjectManagerClient")
  (docs "The #GDBusProxyTypeFunc to use when determining what #GType to use for interface proxies or %NULL.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property get-proxy-type-user-data
  (of-object "GDBusObjectManagerClient")
  (docs "The #gpointer user_data to pass to #GDBusObjectManagerClient:get-proxy-type-func.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property name
  (of-object "GDBusObjectManagerClient")
  (docs "The well-known name or unique name that the manager is for.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property name-owner
  (of-object "GDBusObjectManagerClient")
  (docs "The unique name that owns #GDBusObjectManagerClient:name or %NULL if no-one is currently owning the name. Connect to the #GObject::notify signal to track changes to this property.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property object-path
  (of-object "GDBusObjectManagerClient")
  (docs "The object path the manager is for.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property connection
  (of-object "GDBusObjectManagerServer")
  (docs "The #GDBusConnection to export objects on.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property object-path
  (of-object "GDBusObjectManagerServer")
  (docs "The object path to register the manager object at.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-connection
  (of-object "GDBusObjectProxy")
  (docs "The connection of the proxy.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-object-path
  (of-object "GDBusObjectProxy")
  (docs "The object path of the proxy.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-object-path
  (of-object "GDBusObjectSkeleton")
  (docs "The object path where the object is exported.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property g-bus-type
  (of-object "GDBusProxy")
  (docs "If this property is not %G_BUS_TYPE_NONE, then #GDBusProxy:g-connection must be %NULL and will be set to the #GDBusConnection obtained by calling g_bus_get() with the value of this property.")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property g-connection
  (of-object "GDBusProxy")
  (docs "The #GDBusConnection the proxy is for.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-default-timeout
  (of-object "GDBusProxy")
  (docs "The timeout to use if -1 (specifying default timeout) is passed as @timeout_msec in the g_dbus_proxy_call() and g_dbus_proxy_call_sync() functions.  This allows applications to set a proxy-wide timeout for all remote method invocations on the proxy. If this property is -1, the default timeout (typically 25 seconds) is used. If set to %G_MAXINT, then no timeout is used.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property g-flags
  (of-object "GDBusProxy")
  (docs "Flags from the #GDBusProxyFlags enumeration.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-interface-info
  (of-object "GDBusProxy")
  (docs "Ensure that interactions with this proxy conform to the given interface. This is mainly to ensure that malformed data received from the other peer is ignored. The given #GDBusInterfaceInfo is said to be the 'expected interface'.  The checks performed are: - When completing a method call, if the type signature of   the reply message isn't what's expected, the reply is   discarded and the #GError is set to %G_IO_ERROR_INVALID_ARGUMENT.  - Received signals that have a type signature mismatch are dropped and   a warning is logged via g_warning().  - Properties received via the initial `GetAll()` call or via the   `::PropertiesChanged` signal (on the   [org.freedesktop.DBus.Properties](http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-properties)   interface) or set using g_dbus_proxy_set_cached_property()   with a type signature mismatch are ignored and a warning is   logged via g_warning().  Note that these checks are never done on methods, signals and properties that are not referenced in the given #GDBusInterfaceInfo, since extending a D-Bus interface on the service-side is not considered an ABI break.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property g-interface-name
  (of-object "GDBusProxy")
  (docs "The D-Bus interface name the proxy is for.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-name
  (of-object "GDBusProxy")
  (docs "The well-known or unique name that the proxy is for.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property g-name-owner
  (of-object "GDBusProxy")
  (docs "The unique name that owns #GDBusProxy:g-name or %NULL if no-one currently owns that name. You may connect to #GObject::notify signal to track changes to this property.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property g-object-path
  (of-object "GDBusProxy")
  (docs "The object path the proxy is for.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property active
  (of-object "GDBusServer")
  (docs "Whether the server is currently active.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property address
  (of-object "GDBusServer")
  (docs "The D-Bus address to listen on.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property authentication-observer
  (of-object "GDBusServer")
  (docs "A #GDBusAuthObserver object to assist in the authentication process or %NULL.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property client-address
  (of-object "GDBusServer")
  (docs "The D-Bus address that clients can use.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property flags
  (of-object "GDBusServer")
  (docs "Flags from the #GDBusServerFlags enumeration.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property guid
  (of-object "GDBusServer")
  (docs "The guid of the server.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property byte-order
  (of-object "GDataInputStream")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property newline-type
  (of-object "GDataInputStream")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property byte-order
  (of-object "GDataOutputStream")
  (docs "Determines the byte ordering that is used when writing multi-byte entities (such as integers) to the stream.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filename
  (of-object "GDesktopAppInfo")
  (docs "The origin filename of this #GDesktopAppInfo")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property icon
  (of-object "GEmblem")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property origin
  (of-object "GEmblem")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property gicon
  (of-object "GEmblemedIcon")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property container
  (of-object "GFileEnumerator")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property file
  (of-object "GFileIcon")
  (docs "The file containing the icon.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property cancelled
  (of-object "GFileMonitor")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property rate-limit
  (of-object "GFileMonitor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property base-stream
  (of-object "GFilterInputStream")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-base-stream
  (of-object "GFilterInputStream")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property base-stream
  (of-object "GFilterOutputStream")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-base-stream
  (of-object "GFilterOutputStream")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property closed
  (of-object "GIOStream")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property input-stream
  (of-object "GIOStream")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property output-stream
  (of-object "GIOStream")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property bytes
  (of-object "GInetAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property family
  (of-object "GInetAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property is-any
  (of-object "GInetAddress")
  (docs "Whether this is the 'any' address for its family. See g_inet_address_get_is_any().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-link-local
  (of-object "GInetAddress")
  (docs "Whether this is a link-local address. See g_inet_address_get_is_link_local().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-loopback
  (of-object "GInetAddress")
  (docs "Whether this is the loopback address for its family. See g_inet_address_get_is_loopback().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-mc-global
  (of-object "GInetAddress")
  (docs "Whether this is a global multicast address. See g_inet_address_get_is_mc_global().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-mc-link-local
  (of-object "GInetAddress")
  (docs "Whether this is a link-local multicast address. See g_inet_address_get_is_mc_link_local().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-mc-node-local
  (of-object "GInetAddress")
  (docs "Whether this is a node-local multicast address. See g_inet_address_get_is_mc_node_local().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-mc-org-local
  (of-object "GInetAddress")
  (docs "Whether this is an organization-local multicast address. See g_inet_address_get_is_mc_org_local().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-mc-site-local
  (of-object "GInetAddress")
  (docs "Whether this is a site-local multicast address. See g_inet_address_get_is_mc_site_local().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-multicast
  (of-object "GInetAddress")
  (docs "Whether this is a multicast address. See g_inet_address_get_is_multicast().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-site-local
  (of-object "GInetAddress")
  (docs "Whether this is a site-local address. See g_inet_address_get_is_loopback().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property address
  (of-object "GInetAddressMask")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family
  (of-object "GInetAddressMask")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property length
  (of-object "GInetAddressMask")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property address
  (of-object "GInetSocketAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property flowinfo
  (of-object "GInetSocketAddress")
  (docs "The `sin6_flowinfo` field, for IPv6 addresses.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property port
  (of-object "GInetSocketAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property scope-id
  (of-object "GInetSocketAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property item-type
  (of-object "GListStore")
  (docs "The type of items contained in this list store. Items must be subclasses of #GObject.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property data
  (of-object "GMemoryOutputStream")
  (docs "Pointer to buffer where data will be written.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property data-size
  (of-object "GMemoryOutputStream")
  (docs "Size of data written to the buffer.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property destroy-function
  (of-object "GMemoryOutputStream")
  (docs "Function called with the buffer as argument when the stream is destroyed.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property realloc-function
  (of-object "GMemoryOutputStream")
  (docs "Function with realloc semantics called to enlarge the buffer.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property size
  (of-object "GMemoryOutputStream")
  (docs "Current size of the data buffer.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property anonymous
  (of-object "GMountOperation")
  (docs "Whether to use an anonymous user when authenticating.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property choice
  (of-object "GMountOperation")
  (docs "The index of the user's choice when a question is asked during the mount operation. See the #GMountOperation::ask-question signal.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property domain
  (of-object "GMountOperation")
  (docs "The domain to use for the mount operation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property password
  (of-object "GMountOperation")
  (docs "The password that is used for authentication when carrying out the mount operation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property password-save
  (of-object "GMountOperation")
  (docs "Determines if and how the password information should be saved.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property username
  (of-object "GMountOperation")
  (docs "The user name that is used for authentication when carrying out the mount operation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hostname
  (of-object "GNetworkAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property port
  (of-object "GNetworkAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property scheme
  (of-object "GNetworkAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property domain
  (of-object "GNetworkService")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property protocol
  (of-object "GNetworkService")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property scheme
  (of-object "GNetworkService")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property service
  (of-object "GNetworkService")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property allowed
  (of-object "GPermission")
  (docs "%TRUE if the caller currently has permission to perform the action that @permission represents the permission to perform.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property can-acquire
  (of-object "GPermission")
  (docs "%TRUE if it is generally possible to acquire the permission by calling g_permission_acquire().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property can-release
  (of-object "GPermission")
  (docs "%TRUE if it is generally possible to release the permission by calling g_permission_release().")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property enabled
  (of-object "GPropertyAction")
  (docs "If @action is currently enabled.  If the action is disabled then calls to g_action_activate() and g_action_change_state() have no effect.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property invert-boolean
  (of-object "GPropertyAction")
  (docs "If %TRUE, the state of the action will be the negation of the property value, provided the property is boolean.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property name
  (of-object "GPropertyAction")
  (docs "The name of the action.  This is mostly meaningful for identifying the action once it has been added to a #GActionMap.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property object
  (of-object "GPropertyAction")
  (docs "The object to wrap a property on.  The object must be a non-%NULL #GObject with properties.")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property parameter-type
  (of-object "GPropertyAction")
  (docs "The type of the parameter that must be given when activating the action.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property property-name
  (of-object "GPropertyAction")
  (docs "The name of the property to wrap on the object.  The property must exist on the passed-in object and it must be readable and writable (and not construct-only).")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property state
  (of-object "GPropertyAction")
  (docs "The state of the action, or %NULL if the action is stateless.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property state-type
  (of-object "GPropertyAction")
  (docs "The #GVariantType of the state that the action has, or %NULL if the action is stateless.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property destination-hostname
  (of-object "GProxyAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property destination-port
  (of-object "GProxyAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property destination-protocol
  (of-object "GProxyAddress")
  (docs "The protocol being spoke to the destination host, or %NULL if the #GProxyAddress doesn't know.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property password
  (of-object "GProxyAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property protocol
  (of-object "GProxyAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property uri
  (of-object "GProxyAddress")
  (docs "The URI string that the proxy was constructed from (or %NULL if the creator didn't specify this).")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property username
  (of-object "GProxyAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property connectable
  (of-object "GProxyAddressEnumerator")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property default-port
  (of-object "GProxyAddressEnumerator")
  (docs "The default port to use if #GProxyAddressEnumerator:uri does not specify one.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property proxy-resolver
  (of-object "GProxyAddressEnumerator")
  (docs "The proxy resolver to use.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property uri
  (of-object "GProxyAddressEnumerator")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property backend
  (of-object "GSettings")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property delay-apply
  (of-object "GSettings")
  (docs "Whether the #GSettings object is in 'delay-apply' mode. See g_settings_delay() for details.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-unapplied
  (of-object "GSettings")
  (docs "If this property is %TRUE, the #GSettings object has outstanding changes that will be applied when g_settings_apply() is called.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property path
  (of-object "GSettings")
  (docs "The path within the backend where the settings are stored.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property schema
  (of-object "GSettings")
  (docs "The name of the schema that describes the types of keys for this #GSettings object.  The type of this property is *not* #GSettingsSchema. #GSettingsSchema has only existed since version 2.32 and unfortunately this name was used in previous versions to refer to the schema ID rather than the schema itself.  Take care to use the 'settings-schema' property if you wish to pass in a #GSettingsSchema.")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (deprecated #t)
)

(define-property schema-id
  (of-object "GSettings")
  (docs "The name of the schema that describes the types of keys for this #GSettings object.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property settings-schema
  (of-object "GSettings")
  (docs "The #GSettingsSchema describing the types of keys for this #GSettings object.  Ideally, this property would be called 'schema'.  #GSettingsSchema has only existed since version 2.32, however, and before then the 'schema' property was used to refer to the ID of the schema rather than the schema itself.  Take care.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property enabled
  (of-object "GSimpleAction")
  (docs "If @action is currently enabled.  If the action is disabled then calls to g_action_activate() and g_action_change_state() have no effect.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GSimpleAction")
  (docs "The name of the action. This is mostly meaningful for identifying the action once it has been added to a #GSimpleActionGroup.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property parameter-type
  (of-object "GSimpleAction")
  (docs "The type of the parameter that must be given when activating the action.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property state
  (of-object "GSimpleAction")
  (docs "The state of the action, or %NULL if the action is stateless.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property state-type
  (of-object "GSimpleAction")
  (docs "The #GVariantType of the state that the action has, or %NULL if the action is stateless.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property input-stream
  (of-object "GSimpleIOStream")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property output-stream
  (of-object "GSimpleIOStream")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property default-proxy
  (of-object "GSimpleProxyResolver")
  (docs "The default proxy URI that will be used for any URI that doesn't match #GSimpleProxyResolver:ignore-hosts, and doesn't match any of the schemes set with g_simple_proxy_resolver_set_uri_proxy().  Note that as a special case, if this URI starts with 'socks://', #GSimpleProxyResolver will treat it as referring to all three of the socks5, socks4a, and socks4 proxy types.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ignore-hosts
  (of-object "GSimpleProxyResolver")
  (docs "A list of hostnames and IP addresses that the resolver should allow direct connections to.  Entries can be in one of 4 formats:  - A hostname, such as 'example.com', '.example.com', or   '*.example.com', any of which match 'example.com' or   any subdomain of it.  - An IPv4 or IPv6 address, such as '192.168.1.1',   which matches only that address.  - A hostname or IP address followed by a port, such as   'example.com:80', which matches whatever the hostname or IP   address would match, but only for URLs with the (explicitly)   indicated port. In the case of an IPv6 address, the address   part must appear in brackets: '[::1]:443'  - An IP address range, given by a base address and prefix length,   such as 'fe80::/10', which matches any address in that range.  Note that when dealing with Unicode hostnames, the matching is done against the ASCII form of the name.  Also note that hostname exclusions apply only to connections made to hosts identified by name, and IP address exclusions apply only to connections made to hosts identified by address. That is, if example.com has an address of 192.168.1.1, and the :ignore-hosts list contains only '192.168.1.1', then a connection to 'example.com' (eg, via a #GNetworkAddress) will use the proxy, and a connection to '192.168.1.1' (eg, via a #GInetSocketAddress) will not.  These rules match the 'ignore-hosts'/'noproxy' rules most commonly used by other applications.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property blocking
  (of-object "GSocket")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property broadcast
  (of-object "GSocket")
  (docs "Whether the socket should allow sending to broadcast addresses.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family
  (of-object "GSocket")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property fd
  (of-object "GSocket")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property keepalive
  (of-object "GSocket")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property listen-backlog
  (of-object "GSocket")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property local-address
  (of-object "GSocket")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property multicast-loopback
  (of-object "GSocket")
  (docs "Whether outgoing multicast packets loop back to the local host.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property multicast-ttl
  (of-object "GSocket")
  (docs "Time-to-live out outgoing multicast packets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property protocol
  (of-object "GSocket")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property remote-address
  (of-object "GSocket")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property timeout
  (of-object "GSocket")
  (docs "The timeout in seconds on socket I/O")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ttl
  (of-object "GSocket")
  (docs "Time-to-live for outgoing unicast packets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GSocket")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property family
  (of-object "GSocketAddress")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property enable-proxy
  (of-object "GSocketClient")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family
  (of-object "GSocketClient")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property local-address
  (of-object "GSocketClient")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property protocol
  (of-object "GSocketClient")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property proxy-resolver
  (of-object "GSocketClient")
  (docs "The proxy resolver to use")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property timeout
  (of-object "GSocketClient")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tls
  (of-object "GSocketClient")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tls-validation-flags
  (of-object "GSocketClient")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GSocketClient")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property socket
  (of-object "GSocketConnection")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property listen-backlog
  (of-object "GSocketListener")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GSocketService")
  (docs "Whether the service is currently accepting connections.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property argv
  (of-object "GSubprocess")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property flags
  (of-object "GSubprocess")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property flags
  (of-object "GSubprocessLauncher")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property completed
  (of-object "GTask")
  (docs "Whether the task has completed, meaning its callback (if set) has been invoked. This can only happen after g_task_return_pointer(), g_task_return_error() or one of the other return functions have been called on the task.  This property is guaranteed to change from %FALSE to %TRUE exactly once.  The #GObject::notify signal for this change is emitted in the same main context as the task’s callback, immediately after that callback is invoked.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property graceful-disconnect
  (of-object "GTcpConnection")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property base-io-stream
  (of-object "GTcpWrapperConnection")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property flags
  (of-object "GTestDBus")
  (docs "#GTestDBusFlags specifying the behaviour of the D-Bus session.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property name
  (of-object "GThemedIcon")
  (docs "The icon name.")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property names
  (of-object "GThemedIcon")
  (docs "A %NULL-terminated array of icon names.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property use-default-fallbacks
  (of-object "GThemedIcon")
  (docs "Whether to use the default fallbacks found by shortening the icon name at '-' characters. If the 'names' array has more than one element, ignores any past the first.  For example, if the icon name was 'gnome-dev-cdrom-audio', the array would become |[<!-- language='C' --> {   'gnome-dev-cdrom-audio',   'gnome-dev-cdrom',   'gnome-dev',   'gnome',   NULL }; ]|")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property max-threads
  (of-object "GThreadedSocketService")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property certificate
  (of-object "GTlsCertificate")
  (docs "The DER (binary) encoded representation of the certificate. This property and the #GTlsCertificate:certificate-pem property represent the same data, just in different forms.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property certificate-pem
  (of-object "GTlsCertificate")
  (docs "The PEM (ASCII) encoded representation of the certificate. This property and the #GTlsCertificate:certificate property represent the same data, just in different forms.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property issuer
  (of-object "GTlsCertificate")
  (docs "A #GTlsCertificate representing the entity that issued this certificate. If %NULL, this means that the certificate is either self-signed, or else the certificate of the issuer is not available.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property private-key
  (of-object "GTlsCertificate")
  (docs "The DER (binary) encoded representation of the certificate's private key, in either PKCS#1 format or unencrypted PKCS#8 format. This property (or the #GTlsCertificate:private-key-pem property) can be set when constructing a key (eg, from a file), but cannot be read.  PKCS#8 format is supported since 2.32; earlier releases only support PKCS#1. You can use the `openssl rsa` tool to convert PKCS#8 keys to PKCS#1.")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property private-key-pem
  (of-object "GTlsCertificate")
  (docs "The PEM (ASCII) encoded representation of the certificate's private key in either PKCS#1 format ('`BEGIN RSA PRIVATE KEY`') or unencrypted PKCS#8 format ('`BEGIN PRIVATE KEY`'). This property (or the #GTlsCertificate:private-key property) can be set when constructing a key (eg, from a file), but cannot be read.  PKCS#8 format is supported since 2.32; earlier releases only support PKCS#1. You can use the `openssl rsa` tool to convert PKCS#8 keys to PKCS#1.")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property base-io-stream
  (of-object "GTlsConnection")
  (docs "The #GIOStream that the connection wraps. The connection holds a reference to this stream, and may run operations on the stream from other threads throughout its lifetime. Consequently, after the #GIOStream has been constructed, application code may only run its own operations on this stream when no #GIOStream operations are running.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property certificate
  (of-object "GTlsConnection")
  (docs "The connection's certificate; see g_tls_connection_set_certificate().")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property database
  (of-object "GTlsConnection")
  (docs "The certificate database to use when verifying this TLS connection. If no certificate database is set, then the default database will be used. See g_tls_backend_get_default_database().")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property interaction
  (of-object "GTlsConnection")
  (docs "A #GTlsInteraction object to be used when the connection or certificate database need to interact with the user. This will be used to prompt the user for passwords where necessary.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property peer-certificate
  (of-object "GTlsConnection")
  (docs "The connection's peer's certificate, after the TLS handshake has completed and the certificate has been accepted. Note in particular that this is not yet set during the emission of #GTlsConnection::accept-certificate.  (You can watch for a #GObject::notify signal on this property to detect when a handshake has occurred.)")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property peer-certificate-errors
  (of-object "GTlsConnection")
  (docs "The errors noticed-and-ignored while verifying #GTlsConnection:peer-certificate. Normally this should be 0, but it may not be if #GTlsClientConnection:validation-flags is not %G_TLS_CERTIFICATE_VALIDATE_ALL, or if #GTlsConnection::accept-certificate overrode the default behavior.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property rehandshake-mode
  (of-object "GTlsConnection")
  (docs "The rehandshaking mode. See g_tls_connection_set_rehandshake_mode().")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property require-close-notify
  (of-object "GTlsConnection")
  (docs "Whether or not proper TLS close notification is required. See g_tls_connection_set_require_close_notify().")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-system-certdb
  (of-object "GTlsConnection")
  (docs "Whether or not the system certificate database will be used to verify peer certificates. See g_tls_connection_set_use_system_certdb().")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (deprecated #t)
)

(define-property description
  (of-object "GTlsPassword")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property flags
  (of-object "GTlsPassword")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property warning
  (of-object "GTlsPassword")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property credentials
  (of-object "GUnixCredentialsMessage")
  (docs "The credentials stored in the message.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property fd-list
  (of-object "GUnixFDMessage")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-fd
  (of-object "GUnixInputStream")
  (docs "Whether to close the file descriptor when the stream is closed.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fd
  (of-object "GUnixInputStream")
  (docs "The file descriptor that the stream reads from.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property close-fd
  (of-object "GUnixOutputStream")
  (docs "Whether to close the file descriptor when the stream is closed.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fd
  (of-object "GUnixOutputStream")
  (docs "The file descriptor that the stream writes to.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property abstract
  (of-object "GUnixSocketAddress")
  (docs "Whether or not this is an abstract address")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (deprecated #t)
)

(define-property address-type
  (of-object "GUnixSocketAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property path
  (of-object "GUnixSocketAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property path-as-array
  (of-object "GUnixSocketAddress")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property file-info
  (of-object "GZlibCompressor")
  (docs "If set to a non-%NULL #GFileInfo object, and #GZlibCompressor:format is %G_ZLIB_COMPRESSOR_FORMAT_GZIP, the compressor will write the file name and modification time from the file info to the GZIP header.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property format
  (of-object "GZlibCompressor")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property level
  (of-object "GZlibCompressor")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property file-info
  (of-object "GZlibDecompressor")
  (docs "A #GFileInfo containing the information found in the GZIP header of the data stream processed, or %NULL if the header was not yet fully processed, is not present at all, or the compressor's #GZlibDecompressor:format property is not %G_ZLIB_COMPRESSOR_FORMAT_GZIP.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property format
  (of-object "GZlibDecompressor")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property enabled
  (of-object "GAction")
  (docs "If @action is currently enabled.  If the action is disabled then calls to g_action_activate() and g_action_change_state() have no effect.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property name
  (of-object "GAction")
  (docs "The name of the action.  This is mostly meaningful for identifying the action once it has been added to a #GActionGroup. It is immutable.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property parameter-type
  (of-object "GAction")
  (docs "The type of the parameter that must be given when activating the action. This is immutable, and may be %NULL if no parameter is needed when activating the action.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property state
  (of-object "GAction")
  (docs "The state of the action, or %NULL if the action is stateless.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property state-type
  (of-object "GAction")
  (docs "The #GVariantType of the state that the action has, or %NULL if the action is stateless. This is immutable.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property accepted-cas
  (of-object "GDtlsClientConnection")
  (docs "A list of the distinguished names of the Certificate Authorities that the server will accept client certificates signed by. If the server requests a client certificate during the handshake, then this property will be set after the handshake completes.  Each item in the list is a #GByteArray which contains the complete subject DN of the certificate authority.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property server-identity
  (of-object "GDtlsClientConnection")
  (docs "A #GSocketConnectable describing the identity of the server that is expected on the other end of the connection.  If the %G_TLS_CERTIFICATE_BAD_IDENTITY flag is set in #GDtlsClientConnection:validation-flags, this object will be used to determine the expected identify of the remote end of the connection; if #GDtlsClientConnection:server-identity is not set, or does not match the identity presented by the server, then the %G_TLS_CERTIFICATE_BAD_IDENTITY validation will fail.  In addition to its use in verifying the server certificate, this is also used to give a hint to the server about what certificate we expect, which is useful for servers that serve virtual hosts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property validation-flags
  (of-object "GDtlsClientConnection")
  (docs "What steps to perform when validating a certificate received from a server. Server certificates that fail to validate in all of the ways indicated here will be rejected unless the application overrides the default via #GDtlsConnection::accept-certificate.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property base-socket
  (of-object "GDtlsConnection")
  (docs "The #GDatagramBased that the connection wraps. Note that this may be any implementation of #GDatagramBased, not just a #GSocket.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property certificate
  (of-object "GDtlsConnection")
  (docs "The connection's certificate; see g_dtls_connection_set_certificate().")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property database
  (of-object "GDtlsConnection")
  (docs "The certificate database to use when verifying this TLS connection. If no certificate database is set, then the default database will be used. See g_dtls_backend_get_default_database().")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property interaction
  (of-object "GDtlsConnection")
  (docs "A #GTlsInteraction object to be used when the connection or certificate database need to interact with the user. This will be used to prompt the user for passwords where necessary.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property peer-certificate
  (of-object "GDtlsConnection")
  (docs "The connection's peer's certificate, after the TLS handshake has completed and the certificate has been accepted. Note in particular that this is not yet set during the emission of #GDtlsConnection::accept-certificate.  (You can watch for a #GObject::notify signal on this property to detect when a handshake has occurred.)")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property peer-certificate-errors
  (of-object "GDtlsConnection")
  (docs "The errors noticed-and-ignored while verifying #GDtlsConnection:peer-certificate. Normally this should be 0, but it may not be if #GDtlsClientConnection:validation-flags is not %G_TLS_CERTIFICATE_VALIDATE_ALL, or if #GDtlsConnection::accept-certificate overrode the default behavior.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property rehandshake-mode
  (of-object "GDtlsConnection")
  (docs "The rehandshaking mode. See g_dtls_connection_set_rehandshake_mode().")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property require-close-notify
  (of-object "GDtlsConnection")
  (docs "Whether or not proper TLS close notification is required. See g_dtls_connection_set_require_close_notify().")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property authentication-mode
  (of-object "GDtlsServerConnection")
  (docs "The #GTlsAuthenticationMode for the server. This can be changed before calling g_dtls_connection_handshake() if you want to rehandshake with a different mode from the initial handshake.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property connectivity
  (of-object "GNetworkMonitor")
  (docs "More detailed information about the host's network connectivity. See g_network_monitor_get_connectivity() and #GNetworkConnectivity for more details.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property network-available
  (of-object "GNetworkMonitor")
  (docs "Whether the network is considered available. That is, whether the system has a default route for at least one of IPv4 or IPv6.  Real-world networks are of course much more complicated than this; the machine may be connected to a wifi hotspot that requires payment before allowing traffic through, or may be connected to a functioning router that has lost its own upstream connectivity. Some hosts might only be accessible when a VPN is active. Other hosts might only be accessible when the VPN is not active. Thus, it is best to use g_network_monitor_can_reach() or g_network_monitor_can_reach_async() to test for reachability on a host-by-host basis. (On the other hand, when the property is %FALSE, the application can reasonably expect that no remote hosts at all are reachable, and should indicate this to the user in its UI.)  See also #GNetworkMonitor::network-changed.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property network-metered
  (of-object "GNetworkMonitor")
  (docs "Whether the network is considered metered. That is, whether the system has traffic flowing through the default connection that is subject to limitations set by service providers. For example, traffic might be billed by the amount of data transmitted, or there might be a quota on the amount of traffic per month. This is typical with tethered connections (3G and 4G) and in such situations, bandwidth intensive applications may wish to avoid network activity where possible if it will cost the user money or use up their limited quota.  If more information is required about specific devices then the system network management API should be used instead (for example, NetworkManager or ConnMan).  If this information is not available then no networks will be marked as metered.  See also #GNetworkMonitor:network-available.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property accepted-cas
  (of-object "GTlsClientConnection")
  (docs "A list of the distinguished names of the Certificate Authorities that the server will accept client certificates signed by. If the server requests a client certificate during the handshake, then this property will be set after the handshake completes.  Each item in the list is a #GByteArray which contains the complete subject DN of the certificate authority.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property server-identity
  (of-object "GTlsClientConnection")
  (docs "A #GSocketConnectable describing the identity of the server that is expected on the other end of the connection.  If the %G_TLS_CERTIFICATE_BAD_IDENTITY flag is set in #GTlsClientConnection:validation-flags, this object will be used to determine the expected identify of the remote end of the connection; if #GTlsClientConnection:server-identity is not set, or does not match the identity presented by the server, then the %G_TLS_CERTIFICATE_BAD_IDENTITY validation will fail.  In addition to its use in verifying the server certificate, this is also used to give a hint to the server about what certificate we expect, which is useful for servers that serve virtual hosts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-ssl3
  (of-object "GTlsClientConnection")
  (docs "If %TRUE, tells the connection to use a fallback version of TLS or SSL, rather than trying to negotiate the best version of TLS to use. This can be used when talking to servers that don't implement version negotiation correctly and therefore refuse to handshake at all with a 'modern' TLS handshake.  Despite the property name, the fallback version is not necessarily SSL 3.0; if SSL 3.0 has been disabled, the #GTlsClientConnection will use the next highest available version (normally TLS 1.0) as the fallback version.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property validation-flags
  (of-object "GTlsClientConnection")
  (docs "What steps to perform when validating a certificate received from a server. Server certificates that fail to validate in all of the ways indicated here will be rejected unless the application overrides the default via #GTlsConnection::accept-certificate.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property anchors
  (of-object "GTlsFileDatabase")
  (docs "The path to a file containing PEM encoded certificate authority root anchors. The certificates in this file will be treated as root authorities for the purpose of verifying other certificates via the g_tls_database_verify_chain() operation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property authentication-mode
  (of-object "GTlsServerConnection")
  (docs "The #GTlsAuthenticationMode for the server. This can be changed before calling g_tls_connection_handshake() if you want to rehandshake with a different mode from the initial handshake.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

