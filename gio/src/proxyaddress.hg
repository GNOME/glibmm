/* Copyright (C) 2009 The glibmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <giomm/inetsocketaddress.h>

_DEFS(giomm,gio)
_PINCLUDE(giomm/private/inetsocketaddress_p.h)

namespace Gio
{

/** ProxyAddress - An internet address with proxy information.
 * Support for proxied InetSocketAddress.
 *
 * @ingroup NetworkIO
 * @newin{2,28}
 */
class ProxyAddress
: public InetSocketAddress
{
  _CLASS_GOBJECT(ProxyAddress, GProxyAddress, G_PROXY_ADDRESS, InetSocketAddress, GInetSocketAddress)

protected:
  _WRAP_CTOR(ProxyAddress(const Glib::RefPtr<InetAddress>& address,
    guint16 port,
    const Glib::ustring& protocol,
    const Glib::ustring& destination_hostname,
    guint16 destination_port,
    const Glib::ustring& username = Glib::ustring(),
    const Glib::ustring& password = Glib::ustring()), g_proxy_address_new)

public:
  _WRAP_CREATE(const Glib::RefPtr<InetAddress>& address,
    guint16 port,
    const Glib::ustring& protocol,
    const Glib::ustring& destination_hostname,
    guint16 destination_port,
    const Glib::ustring& username = Glib::ustring(),
    const Glib::ustring& password = Glib::ustring())

  _WRAP_METHOD(Glib::ustring get_protocol() const, g_proxy_address_get_protocol)
  _WRAP_METHOD(Glib::ustring get_destination_protocol() const, g_proxy_address_get_destination_protocol)
  _WRAP_METHOD(Glib::ustring get_destination_hostname() const, g_proxy_address_get_destination_hostname)
  _WRAP_METHOD(guint16 get_destination_port() const, g_proxy_address_get_destination_port)

  _WRAP_METHOD(Glib::ustring get_username() const, g_proxy_address_get_username)
  _WRAP_METHOD(Glib::ustring get_password() const, g_proxy_address_get_password)

  _WRAP_METHOD(Glib::ustring get_uri() const, g_proxy_address_get_uri)


  _WRAP_PROPERTY("protocol", Glib::ustring)
  _WRAP_PROPERTY("destination_protocol", Glib::ustring)
  _WRAP_PROPERTY("destination_hostname", Glib::ustring)

//TODO: This should really be a guint16:
  _WRAP_PROPERTY("destination_port", Glib::ustring)

  _WRAP_PROPERTY("username", Glib::ustring)
  _WRAP_PROPERTY("password", Glib::ustring)
  _WRAP_PROPERTY("uri", Glib::ustring)
};

} // namespace Gio
