/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

_CONFIGINCLUDE(giommconfig.h)

#include <giomm/inputstream.h>
#include <giomm/seekable.h>

_DEFS(giomm,gio)
_PINCLUDE(giomm/private/inputstream_p.h)

namespace Gio
{

/** MemoryInputStream implements InputStream for arbitrary memory chunks.
 *
 * @ingroup Streams
 *
 * @newin{2,16}
 */
class MemoryInputStream
: public Gio::InputStream,
  public Seekable
{
  _CLASS_GOBJECT(MemoryInputStream, GMemoryInputStream, G_MEMORY_INPUT_STREAM, Gio::InputStream, GInputStream)
  _IMPLEMENTS_INTERFACE(Seekable)

protected:
  _CTOR_DEFAULT
  // TODO: *_new_from_data constructor needs to be fixed?

public:
  _WRAP_CREATE()

_DEPRECATE_IFDEF_START
  /** Appends to data that can be read from the input stream.
   *
   * @param data Input data.
   *
   * @deprecated Use add_data() with SlotDestroyData or GDestroyNotify instead.
   */
  void add_data(const std::string& data);

  /** Appends to data that can be read from the input stream.
   *
   * Note that the data will be copied internally and freed when no longer needed.
   *
   * @param data Input data.
   * @param len Length of the data, may be -1 if data is a null-terminated string.
   *
   * @deprecated Use add_data() with SlotDestroyData or GDestroyNotify instead.
   */
  void add_data(const void* data, gssize len);
_DEPRECATE_IFDEF_END

  _WRAP_METHOD(void add_data(const void* data, gssize len, GDestroyNotify destroy), g_memory_input_stream_add_data)

  /** For example,
   * void on_destroy_data(void* data);
   *
   * @param data The data to free.
   *
   * @newin{2,40}
   */
  using SlotDestroyData = sigc::slot<void, void*>;

  /** Appends to data that can be read from the input stream.
   *
   * @param data Input data.
   * @param len Length of the data, may be -1 if data is a null-terminated string.
   * @param destroy_slot A slot to be called to free the data when it is no longer needed.
   *
   * @newin{2,40}
   */
  void add_data(const void* data, gssize len, const SlotDestroyData& destroy_slot);

  _WRAP_METHOD(void add_bytes(const Glib::RefPtr<const Glib::Bytes>& bytes), g_memory_input_stream_add_bytes, newin "2,44")
};

} // namespace Gio
