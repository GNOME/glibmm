/* Copyright (C) 2010 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gio/gio.h>
#include <utility>
#include <glibmm/error.h>
#include <glibmm/exceptionhandler.h>
#include "slot_async.h"

namespace Gio
{

void
Proxy::connect_async(const Glib::RefPtr<IOStream>& connection,
  const Glib::RefPtr<const ProxyAddress>& proxy_address, const SlotAsyncReady& slot,
  const Glib::RefPtr<Cancellable>& cancellable)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  auto slot_copy = new SlotAsyncReady(slot);

  g_proxy_connect_async(gobj(), Glib::unwrap(connection),
    const_cast<GProxyAddress*>(Glib::unwrap(proxy_address)), Glib::unwrap(cancellable),
    &SignalProxy_async_callback, slot_copy);
}

void
Proxy::connect_async(const Glib::RefPtr<IOStream>& connection,
  const Glib::RefPtr<const ProxyAddress>& proxy_address, const SlotAsyncReady& slot)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  auto slot_copy = new SlotAsyncReady(slot);

  g_proxy_connect_async(gobj(), Glib::unwrap(connection),
    const_cast<GProxyAddress*>(Glib::unwrap(proxy_address)), nullptr, &SignalProxy_async_callback,
    slot_copy);
}

} // namespace Gio
