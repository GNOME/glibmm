/* Copyright (C) 2009 jonathon jongsma
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <glibmm/object.h>
#include <giomm/enums.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gio
{

/** An IPv4/IPv6 address
 *
 * InetAddress represents an IPv4 or IPv6 internet address. Use
 * Resolver::lookup_by_name() or Resolver::lookup_by_name_async() to look up
 * the InetAddress for a hostname. Use Resolver::lookup_by_address() or
 * Resolver::lookup_by_address_async() to look up the hostname for a
 * InetAddress.
 *
 * To actually connect to a remote host, you will need a InetSocketAddress
 * (which includes a InetAddress as well as a port number).
 *
 * @newin{2,24}
 * @ingroup NetworkIO
 */
class InetAddress
: public Glib::Object
{
  _CLASS_GOBJECT(InetAddress, GInetAddress, G_INET_ADDRESS, Glib::Object, GObject)

protected:
 _WRAP_CTOR(InetAddress(const guint8 *bytes, SocketFamily family), g_inet_address_new_from_bytes)
 _IGNORE(g_inet_address_mask_new)dnl// Belongs to GInetAddressMask.

public:
  static Glib::RefPtr<InetAddress> create(const Glib::ustring& string);
  _WRAP_CREATE(const guint8 *bytes, SocketFamily family)
  static Glib::RefPtr<InetAddress> create_any(SocketFamily family);
  static Glib::RefPtr<InetAddress> create_loopback(SocketFamily family);

  _WRAP_METHOD(bool address_equal(const Glib::RefPtr<const InetAddress>& other_address) const, g_inet_address_equal)

  _WRAP_METHOD(const guint8* to_bytes() const, g_inet_address_to_bytes)
  _WRAP_METHOD(Glib::ustring to_string() const, g_inet_address_to_string)
  _WRAP_METHOD(SocketFamily get_family() const, g_inet_address_get_family)
  _WRAP_METHOD(bool get_is_any() const, g_inet_address_get_is_any)
  _WRAP_METHOD(bool get_is_link_local() const, g_inet_address_get_is_link_local)
  _WRAP_METHOD(bool get_is_loopback() const, g_inet_address_get_is_loopback)
  _WRAP_METHOD(bool get_is_mc_global() const, g_inet_address_get_is_mc_global)
  _WRAP_METHOD(bool get_is_mc_link_local() const, g_inet_address_get_is_mc_link_local)
  _WRAP_METHOD(bool get_is_mc_node_local() const, g_inet_address_get_is_mc_node_local)
  _WRAP_METHOD(bool get_is_mc_org_local() const, g_inet_address_get_is_mc_org_local)
  _WRAP_METHOD(bool get_is_mc_site_local() const, g_inet_address_get_is_mc_site_local)
  _WRAP_METHOD(bool get_is_multicast() const, g_inet_address_get_is_multicast)
  _WRAP_METHOD(bool get_is_site_local() const, g_inet_address_get_is_site_local)
  _WRAP_METHOD(gsize get_native_size() const, g_inet_address_get_native_size)

  _WRAP_PROPERTY("bytes", void*)
  _WRAP_PROPERTY("family", SocketFamily)
  _WRAP_PROPERTY("is-any", bool)
  _WRAP_PROPERTY("is-link-local", bool)
  _WRAP_PROPERTY("is-loopback", bool)
  _WRAP_PROPERTY("is-mc-global", bool)
  _WRAP_PROPERTY("is-mc-link-local", bool)
  _WRAP_PROPERTY("is-mc-node-local", bool)
  _WRAP_PROPERTY("is-mc-org-local", bool)
  _WRAP_PROPERTY("is-mc-site-local", bool)
  _WRAP_PROPERTY("is-multicast", bool)
  _WRAP_PROPERTY("is-site-local", bool)
};

} // namespace Gio
