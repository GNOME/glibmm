/* Copyright (C) 2007 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <glibmm/object.h>
#include <giomm/socketconnectable.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gio
{

/** A SocketConnectable for resolving hostnames
 *
 * NetworkAddress provides an easy way to resolve a hostname and then attempt to
 * connect to that host, handling the possibility of multiple IP addresses and
 * multiple address families.
 *
 * @newin{2,24}
 * @ingroup NetworkIO
 */
class NetworkAddress : public Glib::Object,
    public SocketConnectable
{
  _CLASS_GOBJECT(NetworkAddress, GNetworkAddress, G_NETWORK_ADDRESS, Glib::Object, GObject)
  _IMPLEMENTS_INTERFACE(SocketConnectable)

  _WRAP_CTOR(NetworkAddress(const std::string& hostname, guint16 port), g_network_address_new)

public:
  _WRAP_CREATE(const std::string& hostname, guint16 port)

  _WRAP_METHOD(std::string get_hostname() const, g_network_address_get_hostname)
  _WRAP_METHOD(guint16 get_port() const, g_network_address_get_port)
  _WRAP_METHOD(std::string get_scheme() const, g_network_address_get_scheme)

  static Glib::RefPtr<NetworkAddress> parse(const std::string& host_and_port, guint16 default_port);

  _WRAP_PROPERTY("hostname", std::string)
  _WRAP_PROPERTY("port", guint)
  _WRAP_PROPERTY("scheme", std::string)
};

} // namespace Gio
