/* Copyright (C) 2010 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gio/gunixfdlist.h>
#include <glibmm/error.h>

namespace Gio
{

UnixFDList::UnixFDList(const Glib::ArrayHandle<int>& fds)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  // g_unix_fd_list_new_from_array() must be called.
  // Its parameters don't correspond to properties.
  // _CONSTRUCT() + g_unit_fd_list_append() is not an alternative.
  // g_unit_fd_list_append() duplicates the file descriptor,
  // but g_unix_fd_list_new_from_array() does not.
  Glib::Object((GObject*)g_unix_fd_list_new_from_array(fds.data(), fds.size()))
{
}

UnixFDList::UnixFDList(const Glib::ArrayHandle<int>& fds, int n_fds)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  // g_unix_fd_list_new_from_array() must be called.
  // Its parameters don't correspond to properties.
  // _CONSTRUCT() + g_unit_fd_list_append() is not an alternative.
  // g_unit_fd_list_append() duplicates the file descriptor,
  // but g_unix_fd_list_new_from_array() does not.
  Glib::Object((GObject*)g_unix_fd_list_new_from_array(fds.data(), n_fds))
{
}

const Glib::ArrayHandle<int>
UnixFDList::peek_fds() const
{
  int length = 0;
  const auto fds = g_unix_fd_list_peek_fds(const_cast<GUnixFDList*>(gobj()), &length);
  // The array is terminated with a -1, but that terminating element is
  // not included in the length that g_unix_fd_list_peek_fds() returns.
  return Glib::ArrayHandle<int>(fds, length, Glib::OWNERSHIP_NONE);
}

Glib::ArrayHandle<int>
UnixFDList::steal_fds()
{
  int length = 0;
  const auto fds = g_unix_fd_list_steal_fds(gobj(), &length);
  // The array is terminated with a -1, but that terminating element is
  // not included in the length that g_unix_fd_list_steal_fds() returns.
  return Glib::ArrayHandle<int>(fds, length, Glib::OWNERSHIP_DEEP);
}

} // namespace Gio
