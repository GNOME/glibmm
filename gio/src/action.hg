/* Copyright (C) 2011 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

_CONFIGINCLUDE(giommconfig.h)

#include <glibmm/interface.h>
#include <glibmm/variant.h>
#include <glibmm/varianttype.h>
#include <gio/gio.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/interface_p.h)
_PINCLUDE(gio/gio.h)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GActionInterface GActionInterface;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gio
{

/** Action - An action.
 * Action represents a single named action.
 *
 * The main interface to an action is that it can be activated with activate().
 * This results in the signal_activate() signal being emitted. An activation
 * has a Glib::VariantBase parameter (which may be <tt>0</tt>). The correct
 * type for the parameter is determined by a static parameter type (which is
 * given at construction time).
 *
 * An action may optionally have a state, in which case the state may be set
 * with change_state(). This call takes a Glib::VariantBase. The correct type
 * for the state is determined by a static state type (which is given at
 * construction time).
 *
 * The state may have a hint associated with it, specifying its valid range.
 *
 * Action is merely the interface to the concept of an action, as described
 * above. Various implementations of actions exist, including SimpleAction and
 * Gtk::Action.
 *
 * In all cases, the implementing class is responsible for storing the name of
 * the action, the parameter type, the enabled state, the optional state type
 * and the state and emitting the appropriate signals when these change. The
 * implementor responsible for filtering calls to activate() and change_state()
 * for type safety and for the state being enabled.
 *
 * Probably the only useful thing to do with a Action is to put it inside of a
 * SimpleActionGroup.
 *
 * @newin{2,32}
 */
class Action : public Glib::Interface
{
  _CLASS_INTERFACE(Action, GAction, G_ACTION, GActionInterface)

public:
  _WRAP_METHOD(Glib::ustring get_name() const, g_action_get_name)
  _WRAP_METHOD(Glib::VariantType get_parameter_type() const, g_action_get_parameter_type)
  _WRAP_METHOD(Glib::VariantType get_state_type() const, g_action_get_state_type)

  //TODO: Is there any specific type that can really be used with this? A std::list<>. We must test this.
  //  See also ActionGroup:::get_action_state_hint().
  /** Requests a hint about the valid range of values for the state of
   * the action.
   *
   * If a null Variant is returned it either means that the action is not stateful
   * or that there is no hint about the valid range of values for the
   * state of the action.
   *
   * If a Variant array is returned then each item in the array is a
   * possible value for the state.  If a Variant pair (ie: two-tuple) is
   * returned then the tuple specifies the inclusive lower and upper bound
   * of valid values for the state.
   *
   * In any case, the information is merely a hint.  It may be possible to
   * have a state value outside of the hinted range and setting a value
   * within the range may fail.
   *
   * @param value This will be set to the state range hint.
   */
  template <typename T_Value>
  void get_state_hint(T_Value& value) const;

  //TODO: When we can break ABI, Return a Glib::VariantContainerBase,
  // as we already do for ActionGroup::get_action_state_hint(),
  // because that is what this returns (to specify a range).
  _WRAP_METHOD(Glib::VariantBase get_state_hint_variant() const, g_action_get_state_hint)

  _WRAP_METHOD(bool get_enabled() const, g_action_get_enabled)

  /** Request for the state of @a action to be changed to @a value,
   * assuming that the action has the expected state type.
   *
   * See get_state_type().
   *
   * This call merely requests a change.  The action may refuse to change
   * its state or may change its state to something other than @a value.
   * See get_state_hint().
   *
   * @newin{2,38}
   *
   * @param value The new state.
   */
  template <typename T_Value>
  void change_state(const T_Value& value);

  //This is just here to maintain API compatibility,
  //by stopping the compiler from calling the
  //regular change_state() with a Variant,
  //if the application code previously called change_state(VariantBase).
  template <typename T_Value>
  void change_state(const Glib::Variant<T_Value>& value);

  _WRAP_METHOD(void change_state_variant(const Glib::VariantBase& value), g_action_change_state)

  _WRAP_METHOD(void change_state(const Glib::VariantBase& value), g_action_change_state, deprecated "Use the templated method instead, passing a normal C++ type.")

  /** Queries the current state of the action.
   *
   * If the action is not stateful then a null Variant will be returned.  If the
   * action is stateful then the type of the return value is the type
   * given by get_state_type().
   *
   * @param value This will be set to the current state of the action.
   */
  template <typename T_Value>
  void get_state(T_Value& value) const;

  _WRAP_METHOD(Glib::VariantBase get_state_variant() const, g_action_get_state)

  /** Activates the action.
   */
  void activate();

  /** Activates the action.
   *
   * The @a parameter must be the correct type of parameter for the action (ie:
   * the parameter type given at construction time), if any.
   *
   * @param parameter: The parameter to the activation
   */
  template <typename T_Value>
  void activate(const T_Value& parameter);

  //This is just here to maintain API compatibility,
  //by stopping the compiler from calling the
  //regular activate() with a Variant,
  //if the application code previously called activate(VariantBase).
  template <typename T_Value>
  void activate(const Glib::Variant<T_Value>& parameter);

  _WRAP_METHOD(void activate_variant(const Glib::VariantBase& parameter), g_action_activate)

  _WRAP_METHOD(void activate(const Glib::VariantBase& parameter), g_action_activate, deprecated "Use the templated method instead, passing a normal C++ type.")

  _WRAP_METHOD(static bool name_is_valid(const Glib::ustring& action_name), g_action_name_is_valid )

  /** Parses a detailed action name into its separate name and target components.
   *
   * Detailed action names can have three formats. See parse_detailed_name_variant().
   *
   * @newin{2,40}
   *
   * @param detailed_name A detailed action name.
   * @param[out] action_name The action name.
   * @param[out] target_value The target value.
   * @throw Glib::VariantParseError if @a detailed_name has an invalid format or a target of an unexpected type.
   */
  template <typename T_Value>
  static void parse_detailed_name(const Glib::ustring& detailed_name, Glib::ustring& action_name, T_Value& target_value);

  _WRAP_METHOD(static void parse_detailed_name_variant(const Glib::ustring& detailed_name,
    Glib::ustring& action_name{>>}, Glib::VariantBase& target_value{>>}), g_action_parse_detailed_name, errthrow "Glib::VariantParseError", errthrow)

  /** Formats a detailed action name from the action's action_name and @a target_value.
   *
   * This function is the opposite of parse_detailed_action_name().
   * It will produce a string that can be parsed back to the @a action_name
   * and @a target_value by that function.
   *
   * See that function for the types of strings that will be printed by
   * this function.
   *
   * @param target_value A Variant target value.
   * @result A detailed format string.
   */
  template <typename T_Value>
  Glib::ustring print_detailed_name(const T_Value& target_value);

  _WRAP_METHOD(static Glib::ustring print_detailed_name_variant(const Glib::ustring& action_name, const Glib::VariantBase& target_value), g_action_print_detailed_name)

  _WRAP_PROPERTY("enabled", bool)
  _WRAP_PROPERTY("name", Glib::ustring)
  _WRAP_PROPERTY("parameter-type", Glib::VariantType)
  _WRAP_PROPERTY("state", Glib::VariantBase)
  _WRAP_PROPERTY("state-type", Glib::VariantType)

#m4 _CONVERSION(`Glib::ustring',`const gchar*',`$3.c_str()')
  _WRAP_VFUNC(Glib::ustring get_name() const, "get_name", keep_return)

#m4 _CONVERSION(`Glib::VariantType',`const GVariantType*',`$3.gobj()')

  _WRAP_VFUNC(Glib::VariantType get_parameter_type() const, "get_parameter_type", keep_return)
  _WRAP_VFUNC(Glib::VariantType get_state_type() const, "get_state_type", keep_return)

  _WRAP_VFUNC(Glib::VariantBase get_state_hint() const, "get_state_hint", refreturn_ctype)

  _WRAP_VFUNC(bool get_enabled() const, "get_enabled")

  _WRAP_VFUNC(Glib::VariantBase get_state() const, "get_state", refreturn_ctype)

#m4 _CONVERSION(`GVariant*',`const Glib::VariantBase&',`Glib::wrap($3, true)')
  _WRAP_VFUNC(void change_state(const Glib::VariantBase& value), "change_state")
  _WRAP_VFUNC(void activate(const Glib::VariantBase& parameter), "activate")
};

template <typename T_Value>
void Action::get_state(T_Value& value) const
{
  value = T_Value(); //Make sure that it is initialized.

  using type_glib_variant = Glib::Variant<T_Value>;

  g_return_if_fail(
    g_variant_type_equal(g_action_get_state_type(const_cast<GAction*>(gobj())), type_glib_variant::variant_type().gobj()));

  const auto variantBase = get_state_variant();
  const auto variantDerived = variantBase.cast_dynamic<type_glib_variant>(variantBase);
  value = variantDerived.get();
}

template <typename T_Value>
void Action::get_state_hint(T_Value& value) const
{
  value = T_Value(); //Make sure that it is initialized.

  using type_glib_variant = Glib::Variant<T_Value>;

  const auto variantBase = get_state_hint_variant();

  // We can't check the type (a range) that will be returned before getting the range hint.
  g_return_if_fail(
    variantBase.is_of_type(type_glib_variant::variant_type()) );

  const auto variantDerived = variantBase.cast_dynamic<type_glib_variant>(variantBase);
  value = variantDerived.get();
}

#ifndef DOXYGEN_SHOULD_SKIP_THIS
// Doxygen 1.8.4 does not understand that this is the static function previously declared.
template <typename T_Value>
//static
void Action::parse_detailed_name(const Glib::ustring& detailed_name, Glib::ustring& action_name, T_Value& target_value)
{
  action_name.clear(); //Make sure the output arguments are initialized.
  target_value = T_Value();

  using type_glib_variant = Glib::Variant<T_Value>;

  Glib::VariantBase target_value_variantBase;
  parse_detailed_name_variant(detailed_name, action_name, target_value_variantBase);

  if (!target_value_variantBase)
    throw Glib::VariantParseError(Glib::VariantParseError::TYPE_ERROR,
      "Detailed action name '" + detailed_name + "' has no target. Expected a target of type " +
      type_glib_variant::variant_type().get_string());

  if (!target_value_variantBase.is_of_type(type_glib_variant::variant_type()))
    throw Glib::VariantParseError(Glib::VariantParseError::TYPE_ERROR,
      "Detailed action name '" + detailed_name + "' has a target of type " +
      target_value_variantBase.get_type_string() + ". Expected " + type_glib_variant::variant_type().get_string());

  const type_glib_variant target_value_variantDerived =
    target_value_variantBase.cast_dynamic<type_glib_variant>(target_value_variantBase);
  target_value = target_value_variantDerived.get();
}
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

template <typename T_Value>
Glib::ustring Action::print_detailed_name(const T_Value& target_value)
{
  using type_glib_variant = Glib::Variant<T_Value>;

  g_return_val_if_fail(
    g_variant_type_equal(g_action_get_parameter_type(const_cast<GAction*>(gobj())), type_glib_variant::variant_type().gobj()),
    Glib::ustring());
  return print_detailed_name_variant(get_name(), type_glib_variant::create(target_value));
}

template <typename T_Value>
void Action::change_state(const T_Value& value)
{
  using type_glib_variant = Glib::Variant<T_Value>;

  g_return_if_fail(
    g_variant_type_equal(g_action_get_state_type(const_cast<GAction*>(gobj())), type_glib_variant::variant_type().gobj()));

  change_state_variant(type_glib_variant::create(value));
}

template <typename T_Value>
void Action::change_state(const Glib::Variant<T_Value>& value)
{
  change_state_variant(value);
}

template <typename T_Value>
void Action::activate(const T_Value& parameter)
{
  using type_glib_variant = Glib::Variant<T_Value>;

  g_return_if_fail(
    g_variant_type_equal(g_action_get_parameter_type(const_cast<GAction*>(gobj())), type_glib_variant::variant_type().gobj()));

  activate_variant(type_glib_variant::create(parameter));
}


template <typename T_Value>
void Action::activate(const Glib::Variant<T_Value>& value)
{
  activate_variant(value);
}


} // namespace Gio
