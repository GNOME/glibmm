/* Copyright (C) 2012 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

_CONFIGINCLUDE(giommconfig.h)

#include <glibmm/interface.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/interface_p.h)
_PINCLUDE(gio/gio.h)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GPollableInputStreamInterface GPollableInputStreamInterface;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gio
{

class GIOMM_API Cancellable;

// GPollableInputStream requires GInputStream (a GObject), but Gio::PollableInputStream
// shall not be derived from Gio::InputStream, like the Gio::Tls[Client|Server]Connection
// interfaces are derived from Gio::TlsConnection. The unusual Gio::TlsConnection class
// hierarchy is possible only because no subclass of Glib::Object implements
// Gio::Tls[Client|Server]Connection.
// See https://bugzilla.gnome.org/show_bug.cgi?id=776537

/** PollableInputStream - Interface for pollable input streams.
 * PollableInputStream is implemented by InputStreams that can be polled for
 * readiness to read. This can be used when interfacing with a non-GIO API that
 * expects UNIX-file-descriptor-style asynchronous I/O rather than GIO-style.
 * @newin{2,34}
 */
class GIOMM_API PollableInputStream : public Glib::Interface
{
  _CLASS_INTERFACE(PollableInputStream, GPollableInputStream, G_POLLABLE_INPUT_STREAM, GPollableInputStreamInterface, , , GIOMM_API)

public:
  _WRAP_METHOD(bool can_poll() const, g_pollable_input_stream_can_poll)
  _WRAP_METHOD(bool is_readable() const, g_pollable_input_stream_is_readable)

  //TODO: _WRAP_METHOD(Glib::RefPtr<Source> create_source(const Glib::RefPtr<Cancellable>& cancellable), g_pollable_input_stream_create_source)

  _WRAP_METHOD(gssize read_nonblocking(void* buffer, gsize count, const Glib::RefPtr<Cancellable>& cancellable{?}), g_pollable_input_stream_read_nonblocking, errthrow)

protected:
  _WRAP_VFUNC(bool can_poll() const, "can_poll")
  _WRAP_VFUNC(bool is_readable() const, "is_readable")

  //TODO: _WRAP_VFUNC(Glib::RefPtr<Source> create_source(const Glib::RefPtr<Cancellable>& cancellable), "create_source")

  _WRAP_VFUNC(gssize read_nonblocking(void* buffer, gsize count), "read_nonblocking", errthrow, err_return_value -1)
};

} // namespace Gio
