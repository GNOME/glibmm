/* Copyright (C) 2007 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <glibmm/object.h>

#include <giomm/asyncresult.h>
#include <giomm/cancellable.h>
#include <giomm/socketconnectable.h>
#include <giomm/enums.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gio
{

/** Abstract base class representing endpoints for socket communication
 *
 * @newin{2,24}
 * @ingroup NetworkIO
 */
class SocketAddress : public Glib::Object,
    public SocketConnectable
{
  _CLASS_GOBJECT(SocketAddress, GSocketAddress, G_SOCKET_ADDRESS, Glib::Object, GObject)
  _IMPLEMENTS_INTERFACE(SocketConnectable)

public:

  // Note that we can't use _WRAP_CTOR() and _WRAP_CREATE() because the C
  // function does more than just call g_object_new():
  // See https://bugzilla.gnome.org/show_bug.cgi?id=766150
  _WRAP_METHOD(static Glib::RefPtr<SocketAddress> create(gpointer native, gsize len), g_socket_address_new_from_native)

  _WRAP_METHOD(SocketFamily get_family() const, g_socket_address_get_family)
  _WRAP_METHOD(bool to_native(gpointer dest, gsize destlen), g_socket_address_to_native, errthrow)
  _WRAP_METHOD(gssize get_native_size() const, g_socket_address_get_native_size)

  _WRAP_PROPERTY("family", Glib::RefPtr<SocketFamily>)
};

} // namespace Gio
