/* Copyright (C) 2010 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <glibmm/error.h>
#include <glibmm/interface.h>
#include <giomm/asyncresult.h>
#include <giomm/cancellable.h>
//#include <giomm/error.h> //Because this is thrown by some of these methods.

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/interface_p.h)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GProxyResolverInterface GProxyResolverInterface;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gio
{


/** ProxyResolver - Asynchronous and cancellable network proxy resolver.
 * ProxyResolver provides synchronous and asynchronous network proxy
 * resolution. ProxyResolver is used within ClientSocket through the method
 * Gio::SocketConnectable::proxy_enumerate().
 *
 * @ingroup NetworkIO
 * @newin{2,28}
 */
class ProxyResolver : public Glib::Interface
{
  _CLASS_INTERFACE(ProxyResolver, GProxyResolver, G_PROXY_RESOLVER, GProxyResolverInterface)

public:

  _WRAP_METHOD(static Glib::RefPtr<ProxyResolver> get_default(), g_proxy_resolver_get_default)

  _WRAP_METHOD(bool is_supported() const, g_proxy_resolver_is_supported)

  //TODO: Use std::string instead of ustring (StringArrayHandle uses ustring)?:
#m4 _CONVERSION(`gchar**',`std::vector<Glib::ustring>',`Glib::ArrayHandler<Glib::ustring>::array_to_vector($3, Glib::OWNERSHIP_DEEP)')
  _WRAP_METHOD(std::vector<Glib::ustring> lookup(const Glib::ustring& uri,
						 const Glib::RefPtr<Cancellable>& cancellable), g_proxy_resolver_lookup, errthrow)

  /** Looks into the system proxy configuration to determine what proxy, if any, to use to connect to uri.
   * The returned proxy URIs are of the form \<protocol\>://[user[:password]\@]host:port or direct://, where \<protocol\> could be http, rtsp, socks or other proxying protocol.
   *
   * If you don't know what network protocol is being used on the socket, you should use none as the URI protocol.
   * In this case, the resolver might still return a generic proxy type (such as SOCKS), but would not return protocol-specific proxy types (such as http).
   *
   * direct:// is used when no proxy is needed. Direct connection should not be attempted unless it is part of the returned array of proxies.
   *
   * @param uri a URI representing the destination to connect to.
   */
  std::vector<Glib::ustring> lookup(const Glib::ustring& uri);

  /** Asynchronous lookup of proxy. See lookup() for more details.
   * @param uri a URI representing the destination to connect to.
   * @param slot A callback slot to call after the resolution completes.
   * @param cancellable A Cancellable object which can be used to cancel the operation.
   */
  void lookup_async(const Glib::ustring& uri, const SlotAsyncReady& slot, const Glib::RefPtr<Cancellable>& cancellable);

  /** Asynchronous lookup of proxy. See lookup() for more details.
   * @param uri a URI representing the destination to connect to.
   * @param slot A callback slot to call after the resolution completes.
   */
  void lookup_async(const Glib::ustring& uri, const SlotAsyncReady& slot);

  _IGNORE(g_proxy_resolver_lookup_async)

  _WRAP_METHOD(std::vector<Glib::ustring> lookup_finish(const Glib::RefPtr<AsyncResult>& result), g_proxy_resolver_lookup_finish, errthrow)

};


} // namespace Gio
