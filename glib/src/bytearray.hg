/* Copyright (C) 2013 The glibmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(glibmm,glib)

#include <cstddef> // std::size_t
#include <sigc++/slot.h>
#include <glibmm/refptr.h>
#include <glibmm/value.h>
#include <glibmm/wrap.h>
#include <glib.h>

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GByteArray GByteArray;
#endif

namespace Glib
{

/** ByteArray - Arrays of bytes.
 * ByteArray is a mutable array of bytes, to provide arrays of bytes which grow
 * automatically as elements are added.
 *
 * To create a new ByteArray use create(). To add elements to a ByteArray, use
 * append(), and prepend().
 *
 * To set the size of a ByteArray, use set_size().
 *
 * @newin{2,36}
 */
class ByteArray final
{
  _CLASS_OPAQUE_REFCOUNTED(ByteArray, GByteArray, NONE, g_byte_array_ref, g_byte_array_unref)
  _IGNORE(g_byte_array_ref, g_byte_array_unref)

public:
  /** A Slot type to compare two elements in the array.  The slot should return
   * -1 if the first value is less than the second, 0 if they are equal and 1
   * if the first value is greater than the second.
   *
   * Slot Prototype:
   *
   * <code>
   * int compare(const guint8* first, const guint8* second);
   * </code>
   */
  using SlotCompare = sigc::slot<int, const guint8*, const guint8*>;

  _WRAP_METHOD(static Glib::RefPtr<ByteArray> create(), g_byte_array_new)

  _WRAP_METHOD(Glib::RefPtr<ByteArray> append(const guint8* data, guint len), g_byte_array_append, refreturn)
  _WRAP_METHOD(Glib::RefPtr<ByteArray> prepend(const guint8* data, guint len), g_byte_array_prepend, refreturn)

  /** Gets the size of the byte array.
   * @return The size.
   * @newin{2,36}
   */
  guint size() const;

  /** Gets the data of the byte array.
   * @return The data.
   * @newin{2,36}
   */
  guint8* get_data();

  /** Gets the data of the byte array.
   * @return The data.
   * @newin{2,36}
   */
  const guint8* get_data() const;

  _WRAP_METHOD(Glib::RefPtr<ByteArray> remove_index(guint index), g_byte_array_remove_index, refreturn)
  _WRAP_METHOD(Glib::RefPtr<ByteArray> remove_index_fast(guint index), g_byte_array_remove_index_fast, refreturn)
  _WRAP_METHOD(Glib::RefPtr<ByteArray> remove_range(guint index, guint length), g_byte_array_remove_range, refreturn)

  _WRAP_METHOD(void sort(const SlotCompare& slot), g_byte_array_sort_with_data, slot_name slot, slot_callback ByteArray_Compare_Data_Func, no_slot_copy)
  _IGNORE(g_byte_array_sort)

  _WRAP_METHOD(Glib::RefPtr<ByteArray> set_size(guint length), g_byte_array_set_size, refreturn)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type() G_GNUC_CONST;
#endif
};

#ifndef DOXYGEN_SHOULD_SKIP_THIS
template <>
class Value< Glib::RefPtr<Glib::ByteArray> > : public ValueBase_Boxed
{
public:
  static GType value_type() { return Glib::ByteArray::get_type(); }
  void set(const Glib::RefPtr<Glib::ByteArray>& array) { set_boxed(Glib::unwrap(array)); }
  Glib::RefPtr<Glib::ByteArray> get()                  { return Glib::RefPtr<Glib::ByteArray>(reinterpret_cast<Glib::ByteArray*>(get_boxed())); }
};
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

} // namespace Glib
