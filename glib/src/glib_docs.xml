<root>
<property name="GBinding:flags">
<description>
Flags to be used to control the #GBinding

Since: 2.26

</description>
</property>

<property name="GBinding:source">
<description>
The #GObject that should be used as the source of the binding

Since: 2.26

</description>
</property>

<property name="GBinding:source-property">
<description>
The name of the property of #GBinding:source that should be used
as the source of the binding

Since: 2.26

</description>
</property>

<property name="GBinding:target">
<description>
The #GObject that should be used as the target of the binding

Since: 2.26

</description>
</property>

<property name="GBinding:target-property">
<description>
The name of the property of #GBinding:target that should be used
as the target of the binding

Since: 2.26

</description>
</property>

<enum name="GBindingFlags">
<description>
Flags to be passed to g_object_bind_property() or
g_object_bind_property_full().

This enumeration can be extended at later date.

Since: 2.26

</description>
<parameters>
<parameter name="G_BINDING_DEFAULT">
<parameter_description> The default binding; if the source property
changes, the target property is updated with its value.
</parameter_description>
</parameter>
<parameter name="G_BINDING_BIDIRECTIONAL">
<parameter_description> Bidirectional binding; if either the
property of the source or the property of the target changes,
the other is updated.
</parameter_description>
</parameter>
<parameter name="G_BINDING_SYNC_CREATE">
<parameter_description> Synchronize the values of the source and
target properties when creating the binding; the direction of
the synchronization is always from the source to the target.
</parameter_description>
</parameter>
<parameter name="G_BINDING_INVERT_BOOLEAN">
<parameter_description> If the two properties being bound are
booleans, setting one to %TRUE will result in the other being
set to %FALSE and vice versa. This flag will only work for
boolean properties, and cannot be used when passing custom
transformation functions to g_object_bind_property_full().
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GBookmarkFileError">
<description>
Error codes returned by bookmark file parsing.

</description>
<parameters>
<parameter name="G_BOOKMARK_FILE_ERROR_INVALID_URI">
<parameter_description> URI was ill-formed
</parameter_description>
</parameter>
<parameter name="G_BOOKMARK_FILE_ERROR_INVALID_VALUE">
<parameter_description> a requested field was not found
</parameter_description>
</parameter>
<parameter name="G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED">
<parameter_description> a requested application did
not register a bookmark
</parameter_description>
</parameter>
<parameter name="G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND">
<parameter_description> a requested URI was not found
</parameter_description>
</parameter>
<parameter name="G_BOOKMARK_FILE_ERROR_READ">
<parameter_description> document was ill formed
</parameter_description>
</parameter>
<parameter name="G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING">
<parameter_description> the text being parsed was
in an unknown encoding
</parameter_description>
</parameter>
<parameter name="G_BOOKMARK_FILE_ERROR_WRITE">
<parameter_description> an error occurred while writing
</parameter_description>
</parameter>
<parameter name="G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND">
<parameter_description> requested file was not found
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GChecksumType">
<description>
The hashing algorithm to be used by #GChecksum when performing the
digest of some data.

Note that the #GChecksumType enumeration may be extended at a later
date to include new hashing algorithm types.

Since: 2.16

</description>
<parameters>
<parameter name="G_CHECKSUM_MD5">
<parameter_description> Use the MD5 hashing algorithm
</parameter_description>
</parameter>
<parameter name="G_CHECKSUM_SHA1">
<parameter_description> Use the SHA-1 hashing algorithm
</parameter_description>
</parameter>
<parameter name="G_CHECKSUM_SHA256">
<parameter_description> Use the SHA-256 hashing algorithm
</parameter_description>
</parameter>
<parameter name="G_CHECKSUM_SHA384">
<parameter_description> Use the SHA-384 hashing algorithm (Since: 2.51)
</parameter_description>
</parameter>
<parameter name="G_CHECKSUM_SHA512">
<parameter_description> Use the SHA-512 hashing algorithm (Since: 2.36)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GConnectFlags">
<description>
The connection flags are used to specify the behaviour of a signal's 
connection.

</description>
<parameters>
<parameter name="G_CONNECT_AFTER">
<parameter_description> whether the handler should be called before or after the 
default handler of the signal.
</parameter_description>
</parameter>
<parameter name="G_CONNECT_SWAPPED">
<parameter_description> whether the instance and data should be swapped when
calling the handler; see g_signal_connect_swapped() for an example.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GConvertError">
<description>
Error codes returned by character set conversion routines.

</description>
<parameters>
<parameter name="G_CONVERT_ERROR_NO_CONVERSION">
<parameter_description> Conversion between the requested character
sets is not supported.
</parameter_description>
</parameter>
<parameter name="G_CONVERT_ERROR_ILLEGAL_SEQUENCE">
<parameter_description> Invalid byte sequence in conversion input;
or the character sequence could not be represented in the target
character set.
</parameter_description>
</parameter>
<parameter name="G_CONVERT_ERROR_FAILED">
<parameter_description> Conversion failed for some reason.
</parameter_description>
</parameter>
<parameter name="G_CONVERT_ERROR_PARTIAL_INPUT">
<parameter_description> Partial character sequence at end of input.
</parameter_description>
</parameter>
<parameter name="G_CONVERT_ERROR_BAD_URI">
<parameter_description> URI is invalid.
</parameter_description>
</parameter>
<parameter name="G_CONVERT_ERROR_NOT_ABSOLUTE_PATH">
<parameter_description> Pathname is not an absolute path.
</parameter_description>
</parameter>
<parameter name="G_CONVERT_ERROR_NO_MEMORY">
<parameter_description> No memory available. Since: 2.40
</parameter_description>
</parameter>
<parameter name="G_CONVERT_ERROR_EMBEDDED_NUL">
<parameter_description> An embedded NUL character is present in
conversion output where a NUL-terminated string is expected.
Since: 2.56
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GDateDMY">
<description>
This enumeration isn't used in the API, but may be useful if you need
to mark a number as a day, month, or year.

</description>
<parameters>
<parameter name="G_DATE_DAY">
<parameter_description> a day
</parameter_description>
</parameter>
<parameter name="G_DATE_MONTH">
<parameter_description> a month
</parameter_description>
</parameter>
<parameter name="G_DATE_YEAR">
<parameter_description> a year
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GDateMonth">
<description>
Enumeration representing a month; values are #G_DATE_JANUARY,
#G_DATE_FEBRUARY, etc. #G_DATE_BAD_MONTH is the invalid value.

</description>
<parameters>
<parameter name="G_DATE_BAD_MONTH">
<parameter_description> invalid value
</parameter_description>
</parameter>
<parameter name="G_DATE_JANUARY">
<parameter_description> January
</parameter_description>
</parameter>
<parameter name="G_DATE_FEBRUARY">
<parameter_description> February
</parameter_description>
</parameter>
<parameter name="G_DATE_MARCH">
<parameter_description> March
</parameter_description>
</parameter>
<parameter name="G_DATE_APRIL">
<parameter_description> April
</parameter_description>
</parameter>
<parameter name="G_DATE_MAY">
<parameter_description> May
</parameter_description>
</parameter>
<parameter name="G_DATE_JUNE">
<parameter_description> June
</parameter_description>
</parameter>
<parameter name="G_DATE_JULY">
<parameter_description> July
</parameter_description>
</parameter>
<parameter name="G_DATE_AUGUST">
<parameter_description> August
</parameter_description>
</parameter>
<parameter name="G_DATE_SEPTEMBER">
<parameter_description> September
</parameter_description>
</parameter>
<parameter name="G_DATE_OCTOBER">
<parameter_description> October
</parameter_description>
</parameter>
<parameter name="G_DATE_NOVEMBER">
<parameter_description> November
</parameter_description>
</parameter>
<parameter name="G_DATE_DECEMBER">
<parameter_description> December
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GDateWeekday">
<description>
Enumeration representing a day of the week; #G_DATE_MONDAY,
#G_DATE_TUESDAY, etc. #G_DATE_BAD_WEEKDAY is an invalid weekday.

</description>
<parameters>
<parameter name="G_DATE_BAD_WEEKDAY">
<parameter_description> invalid value
</parameter_description>
</parameter>
<parameter name="G_DATE_MONDAY">
<parameter_description> Monday
</parameter_description>
</parameter>
<parameter name="G_DATE_TUESDAY">
<parameter_description> Tuesday
</parameter_description>
</parameter>
<parameter name="G_DATE_WEDNESDAY">
<parameter_description> Wednesday
</parameter_description>
</parameter>
<parameter name="G_DATE_THURSDAY">
<parameter_description> Thursday
</parameter_description>
</parameter>
<parameter name="G_DATE_FRIDAY">
<parameter_description> Friday
</parameter_description>
</parameter>
<parameter name="G_DATE_SATURDAY">
<parameter_description> Saturday
</parameter_description>
</parameter>
<parameter name="G_DATE_SUNDAY">
<parameter_description> Sunday
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GErrorType">
<description>
The possible errors, used in the @v_error field
of #GTokenValue, when the token is a %G_TOKEN_ERROR.

</description>
<parameters>
<parameter name="G_ERR_UNKNOWN">
<parameter_description> unknown error
</parameter_description>
</parameter>
<parameter name="G_ERR_UNEXP_EOF">
<parameter_description> unexpected end of file
</parameter_description>
</parameter>
<parameter name="G_ERR_UNEXP_EOF_IN_STRING">
<parameter_description> unterminated string constant
</parameter_description>
</parameter>
<parameter name="G_ERR_UNEXP_EOF_IN_COMMENT">
<parameter_description> unterminated comment
</parameter_description>
</parameter>
<parameter name="G_ERR_NON_DIGIT_IN_CONST">
<parameter_description> non-digit character in a number
</parameter_description>
</parameter>
<parameter name="G_ERR_DIGIT_RADIX">
<parameter_description> digit beyond radix in a number
</parameter_description>
</parameter>
<parameter name="G_ERR_FLOAT_RADIX">
<parameter_description> non-decimal floating point number
</parameter_description>
</parameter>
<parameter name="G_ERR_FLOAT_MALFORMED">
<parameter_description> malformed floating point number
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GFileError">
<description>
Values corresponding to @errno codes returned from file operations
on UNIX. Unlike @errno codes, GFileError values are available on
all systems, even Windows. The exact meaning of each code depends
on what sort of file operation you were performing; the UNIX
documentation gives more details. The following error code descriptions
come from the GNU C Library manual, and are under the copyright
of that manual.

It's not very portable to make detailed assumptions about exactly
which errors will be returned from a given operation. Some errors
don't occur on some systems, etc., sometimes there are subtle
differences in when a system will report a given error, etc.

</description>
<parameters>
<parameter name="G_FILE_ERROR_EXIST">
<parameter_description> Operation not permitted; only the owner of
the file (or other resource) or processes with special privileges
can perform the operation.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_ISDIR">
<parameter_description> File is a directory; you cannot open a directory
for writing, or create or remove hard links to it.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_ACCES">
<parameter_description> Permission denied; the file permissions do not
allow the attempted operation.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_NAMETOOLONG">
<parameter_description> Filename too long.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_NOENT">
<parameter_description> No such file or directory. This is a &quot;file
doesn't exist&quot; error for ordinary files that are referenced in
contexts where they are expected to already exist.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_NOTDIR">
<parameter_description> A file that isn't a directory was specified when
a directory is required.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_NXIO">
<parameter_description> No such device or address. The system tried to
use the device represented by a file you specified, and it
couldn't find the device. This can mean that the device file was
installed incorrectly, or that the physical device is missing or
not correctly attached to the computer.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_NODEV">
<parameter_description> The underlying file system of the specified file
does not support memory mapping.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_ROFS">
<parameter_description> The directory containing the new link can't be
modified because it's on a read-only file system.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_TXTBSY">
<parameter_description> Text file busy.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_FAULT">
<parameter_description> You passed in a pointer to bad memory.
(GLib won't reliably return this, don't pass in pointers to bad
memory.)
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_LOOP">
<parameter_description> Too many levels of symbolic links were encountered
in looking up a file name. This often indicates a cycle of symbolic
links.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_NOSPC">
<parameter_description> No space left on device; write operation on a
file failed because the disk is full.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_NOMEM">
<parameter_description> No memory available. The system cannot allocate
more virtual memory because its capacity is full.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_MFILE">
<parameter_description> The current process has too many files open and
can't open any more. Duplicate descriptors do count toward this
limit.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_NFILE">
<parameter_description> There are too many distinct file openings in the
entire system.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_BADF">
<parameter_description> Bad file descriptor; for example, I/O on a
descriptor that has been closed or reading from a descriptor open
only for writing (or vice versa).
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_INVAL">
<parameter_description> Invalid argument. This is used to indicate
various kinds of problems with passing the wrong argument to a
library function.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_PIPE">
<parameter_description> Broken pipe; there is no process reading from the
other end of a pipe. Every library function that returns this
error code also generates a 'SIGPIPE' signal; this signal
terminates the program if not handled or blocked. Thus, your
program will never actually see this code unless it has handled
or blocked 'SIGPIPE'.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_AGAIN">
<parameter_description> Resource temporarily unavailable; the call might
work if you try again later.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_INTR">
<parameter_description> Interrupted function call; an asynchronous signal
occurred and prevented completion of the call. When this
happens, you should try the call again.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_IO">
<parameter_description> Input/output error; usually used for physical read
or write errors. i.e. the disk or other physical device hardware
is returning errors.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_PERM">
<parameter_description> Operation not permitted; only the owner of the
file (or other resource) or processes with special privileges can
perform the operation.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_NOSYS">
<parameter_description> Function not implemented; this indicates that
the system is missing some functionality.
</parameter_description>
</parameter>
<parameter name="G_FILE_ERROR_FAILED">
<parameter_description> Does not correspond to a UNIX error code; this
is the standard &quot;failed for unspecified reason&quot; error code present
in all #GError error code enumerations. Returned if no specific
code applies.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GFileTest">
<description>
A test to perform on a file using g_file_test().

</description>
<parameters>
<parameter name="G_FILE_TEST_IS_REGULAR">
<parameter_description> %TRUE if the file is a regular file
(not a directory). Note that this test will also return %TRUE
if the tested file is a symlink to a regular file.
</parameter_description>
</parameter>
<parameter name="G_FILE_TEST_IS_SYMLINK">
<parameter_description> %TRUE if the file is a symlink.
</parameter_description>
</parameter>
<parameter name="G_FILE_TEST_IS_DIR">
<parameter_description> %TRUE if the file is a directory.
</parameter_description>
</parameter>
<parameter name="G_FILE_TEST_IS_EXECUTABLE">
<parameter_description> %TRUE if the file is executable.
</parameter_description>
</parameter>
<parameter name="G_FILE_TEST_EXISTS">
<parameter_description> %TRUE if the file exists. It may or may not
be a regular file.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GFormatSizeFlags">
<description>
Flags to modify the format of the string returned by g_format_size_full().

</description>
<parameters>
<parameter name="G_FORMAT_SIZE_DEFAULT">
<parameter_description> behave the same as g_format_size()
</parameter_description>
</parameter>
<parameter name="G_FORMAT_SIZE_LONG_FORMAT">
<parameter_description> include the exact number of bytes as part
of the returned string.  For example, &quot;45.6 kB (45,612 bytes)&quot;.
</parameter_description>
</parameter>
<parameter name="G_FORMAT_SIZE_IEC_UNITS">
<parameter_description> use IEC (base 1024) units with &quot;KiB&quot;-style
suffixes. IEC units should only be used for reporting things with
a strong &quot;power of 2&quot; basis, like RAM sizes or RAID stripe sizes.
Network and storage sizes should be reported in the normal SI units.
</parameter_description>
</parameter>
<parameter name="G_FORMAT_SIZE_BITS">
<parameter_description> set the size as a quantity in bits, rather than
bytes, and return units in bits. For example, ‘Mb’ rather than ‘MB’.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GHookFlagMask">
<description>
Flags used internally in the #GHook implementation.

</description>
<parameters>
<parameter name="G_HOOK_FLAG_ACTIVE">
<parameter_description> set if the hook has not been destroyed
</parameter_description>
</parameter>
<parameter name="G_HOOK_FLAG_IN_CALL">
<parameter_description> set if the hook is currently being run
</parameter_description>
</parameter>
<parameter name="G_HOOK_FLAG_MASK">
<parameter_description> A mask covering all bits reserved for
hook flags; see %G_HOOK_FLAG_USER_SHIFT
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GIOChannelError">
<description>
Error codes returned by #GIOChannel operations.

</description>
<parameters>
<parameter name="G_IO_CHANNEL_ERROR_FBIG">
<parameter_description> File too large.
</parameter_description>
</parameter>
<parameter name="G_IO_CHANNEL_ERROR_INVAL">
<parameter_description> Invalid argument.
</parameter_description>
</parameter>
<parameter name="G_IO_CHANNEL_ERROR_IO">
<parameter_description> IO error.
</parameter_description>
</parameter>
<parameter name="G_IO_CHANNEL_ERROR_ISDIR">
<parameter_description> File is a directory.
</parameter_description>
</parameter>
<parameter name="G_IO_CHANNEL_ERROR_NOSPC">
<parameter_description> No space left on device.
</parameter_description>
</parameter>
<parameter name="G_IO_CHANNEL_ERROR_NXIO">
<parameter_description> No such device or address.
</parameter_description>
</parameter>
<parameter name="G_IO_CHANNEL_ERROR_OVERFLOW">
<parameter_description> Value too large for defined datatype.
</parameter_description>
</parameter>
<parameter name="G_IO_CHANNEL_ERROR_PIPE">
<parameter_description> Broken pipe.
</parameter_description>
</parameter>
<parameter name="G_IO_CHANNEL_ERROR_FAILED">
<parameter_description> Some other error.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GIOCondition">
<description>
A bitwise combination representing a condition to watch for on an
event source.

</description>
<parameters>
<parameter name="G_IO_IN">
<parameter_description> There is data to read.
</parameter_description>
</parameter>
<parameter name="G_IO_OUT">
<parameter_description> Data can be written (without blocking).
</parameter_description>
</parameter>
<parameter name="G_IO_PRI">
<parameter_description> There is urgent data to read.
</parameter_description>
</parameter>
<parameter name="G_IO_ERR">
<parameter_description> Error condition.
</parameter_description>
</parameter>
<parameter name="G_IO_HUP">
<parameter_description> Hung up (the connection has been broken, usually for
pipes and sockets).
</parameter_description>
</parameter>
<parameter name="G_IO_NVAL">
<parameter_description> Invalid request. The file descriptor is not open.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GIOError">
<description>
#GIOError is only used by the deprecated functions
g_io_channel_read(), g_io_channel_write(), and g_io_channel_seek().

</description>
<parameters>
<parameter name="G_IO_ERROR_NONE">
<parameter_description> no error
</parameter_description>
</parameter>
<parameter name="G_IO_ERROR_AGAIN">
<parameter_description> an EAGAIN error occurred
</parameter_description>
</parameter>
<parameter name="G_IO_ERROR_INVAL">
<parameter_description> an EINVAL error occurred
</parameter_description>
</parameter>
<parameter name="G_IO_ERROR_UNKNOWN">
<parameter_description> another error occurred
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GIOFlags">
<description>
Specifies properties of a #GIOChannel. Some of the flags can only be
read with g_io_channel_get_flags(), but not changed with
g_io_channel_set_flags().

</description>
<parameters>
<parameter name="G_IO_FLAG_APPEND">
<parameter_description> turns on append mode, corresponds to %O_APPEND
(see the documentation of the UNIX open() syscall)
</parameter_description>
</parameter>
<parameter name="G_IO_FLAG_NONBLOCK">
<parameter_description> turns on nonblocking mode, corresponds to
%O_NONBLOCK/%O_NDELAY (see the documentation of the UNIX open()
syscall)
</parameter_description>
</parameter>
<parameter name="G_IO_FLAG_IS_READABLE">
<parameter_description> indicates that the io channel is readable.
This flag cannot be changed.
</parameter_description>
</parameter>
<parameter name="G_IO_FLAG_IS_WRITABLE">
<parameter_description> indicates that the io channel is writable.
This flag cannot be changed.
</parameter_description>
</parameter>
<parameter name="G_IO_FLAG_IS_WRITEABLE">
<parameter_description> a misspelled version of @G_IO_FLAG_IS_WRITABLE
that existed before the spelling was fixed in GLib 2.30. It is kept
here for compatibility reasons. Deprecated since 2.30
</parameter_description>
</parameter>
<parameter name="G_IO_FLAG_IS_SEEKABLE">
<parameter_description> indicates that the io channel is seekable,
i.e. that g_io_channel_seek_position() can be used on it.
This flag cannot be changed.
</parameter_description>
</parameter>
<parameter name="G_IO_FLAG_MASK">
<parameter_description> the mask that specifies all the valid flags.
</parameter_description>
</parameter>
<parameter name="G_IO_FLAG_GET_MASK">
<parameter_description> the mask of the flags that are returned from
g_io_channel_get_flags()
</parameter_description>
</parameter>
<parameter name="G_IO_FLAG_SET_MASK">
<parameter_description> the mask of the flags that the user can modify
with g_io_channel_set_flags()
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GIOStatus">
<description>
Stati returned by most of the #GIOFuncs functions.

</description>
<parameters>
<parameter name="G_IO_STATUS_ERROR">
<parameter_description> An error occurred.
</parameter_description>
</parameter>
<parameter name="G_IO_STATUS_NORMAL">
<parameter_description> Success.
</parameter_description>
</parameter>
<parameter name="G_IO_STATUS_EOF">
<parameter_description> End of file.
</parameter_description>
</parameter>
<parameter name="G_IO_STATUS_AGAIN">
<parameter_description> Resource temporarily unavailable.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GKeyFileError">
<description>
Error codes returned by key file parsing.

</description>
<parameters>
<parameter name="G_KEY_FILE_ERROR_UNKNOWN_ENCODING">
<parameter_description> the text being parsed was in
an unknown encoding
</parameter_description>
</parameter>
<parameter name="G_KEY_FILE_ERROR_PARSE">
<parameter_description> document was ill-formed
</parameter_description>
</parameter>
<parameter name="G_KEY_FILE_ERROR_NOT_FOUND">
<parameter_description> the file was not found
</parameter_description>
</parameter>
<parameter name="G_KEY_FILE_ERROR_KEY_NOT_FOUND">
<parameter_description> a requested key was not found
</parameter_description>
</parameter>
<parameter name="G_KEY_FILE_ERROR_GROUP_NOT_FOUND">
<parameter_description> a requested group was not found
</parameter_description>
</parameter>
<parameter name="G_KEY_FILE_ERROR_INVALID_VALUE">
<parameter_description> a value could not be parsed
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GKeyFileFlags">
<description>
Flags which influence the parsing.

</description>
<parameters>
<parameter name="G_KEY_FILE_NONE">
<parameter_description> No flags, default behaviour
</parameter_description>
</parameter>
<parameter name="G_KEY_FILE_KEEP_COMMENTS">
<parameter_description> Use this flag if you plan to write the
(possibly modified) contents of the key file back to a file;
otherwise all comments will be lost when the key file is
written back.
</parameter_description>
</parameter>
<parameter name="G_KEY_FILE_KEEP_TRANSLATIONS">
<parameter_description> Use this flag if you plan to write the
(possibly modified) contents of the key file back to a file;
otherwise only the translations for the current language will be
written back.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GLogLevelFlags">
<description>
Flags specifying the level of log messages.

It is possible to change how GLib treats messages of the various
levels using g_log_set_handler() and g_log_set_fatal_mask().

</description>
<parameters>
<parameter name="G_LOG_FLAG_RECURSION">
<parameter_description> internal flag
</parameter_description>
</parameter>
<parameter name="G_LOG_FLAG_FATAL">
<parameter_description> internal flag
</parameter_description>
</parameter>
<parameter name="G_LOG_LEVEL_ERROR">
<parameter_description> log level for errors, see g_error().
This level is also used for messages produced by g_assert().
</parameter_description>
</parameter>
<parameter name="G_LOG_LEVEL_CRITICAL">
<parameter_description> log level for critical warning messages, see
g_critical().
This level is also used for messages produced by g_return_if_fail()
and g_return_val_if_fail().
</parameter_description>
</parameter>
<parameter name="G_LOG_LEVEL_WARNING">
<parameter_description> log level for warnings, see g_warning()
</parameter_description>
</parameter>
<parameter name="G_LOG_LEVEL_MESSAGE">
<parameter_description> log level for messages, see g_message()
</parameter_description>
</parameter>
<parameter name="G_LOG_LEVEL_INFO">
<parameter_description> log level for informational messages, see g_info()
</parameter_description>
</parameter>
<parameter name="G_LOG_LEVEL_DEBUG">
<parameter_description> log level for debug messages, see g_debug()
</parameter_description>
</parameter>
<parameter name="G_LOG_LEVEL_MASK">
<parameter_description> a mask including all log levels
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GLogWriterOutput">
<description>
Return values from #GLogWriterFuncs to indicate whether the given log entry
was successfully handled by the writer, or whether there was an error in
handling it (and hence a fallback writer should be used).

If a #GLogWriterFunc ignores a log entry, it should return
%G_LOG_WRITER_HANDLED.

Since: 2.50

</description>
<parameters>
<parameter name="G_LOG_WRITER_HANDLED">
<parameter_description> Log writer has handled the log entry.
</parameter_description>
</parameter>
<parameter name="G_LOG_WRITER_UNHANDLED">
<parameter_description> Log writer could not handle the log entry.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GMarkupCollectType">
<description>
A mixed enumerated type and flags field. You must specify one type
(string, strdup, boolean, tristate).  Additionally, you may  optionally
bitwise OR the type with the flag %G_MARKUP_COLLECT_OPTIONAL.

It is likely that this enum will be extended in the future to
support other types.

</description>
<parameters>
<parameter name="G_MARKUP_COLLECT_INVALID">
<parameter_description> used to terminate the list of attributes
to collect
</parameter_description>
</parameter>
<parameter name="G_MARKUP_COLLECT_STRING">
<parameter_description> collect the string pointer directly from
the attribute_values[] array. Expects a parameter of type (const
char **). If %G_MARKUP_COLLECT_OPTIONAL is specified and the
attribute isn't present then the pointer will be set to %NULL
</parameter_description>
</parameter>
<parameter name="G_MARKUP_COLLECT_STRDUP">
<parameter_description> as with %G_MARKUP_COLLECT_STRING, but
expects a parameter of type (char **) and g_strdup()s the
returned pointer. The pointer must be freed with g_free()
</parameter_description>
</parameter>
<parameter name="G_MARKUP_COLLECT_BOOLEAN">
<parameter_description> expects a parameter of type (gboolean *)
and parses the attribute value as a boolean. Sets %FALSE if the
attribute isn't present. Valid boolean values consist of
(case-insensitive) &quot;false&quot;, &quot;f&quot;, &quot;no&quot;, &quot;n&quot;, &quot;0&quot; and &quot;true&quot;, &quot;t&quot;,
&quot;yes&quot;, &quot;y&quot;, &quot;1&quot;
</parameter_description>
</parameter>
<parameter name="G_MARKUP_COLLECT_TRISTATE">
<parameter_description> as with %G_MARKUP_COLLECT_BOOLEAN, but
in the case of a missing attribute a value is set that compares
equal to neither %FALSE nor %TRUE G_MARKUP_COLLECT_OPTIONAL is
implied
</parameter_description>
</parameter>
<parameter name="G_MARKUP_COLLECT_OPTIONAL">
<parameter_description> can be bitwise ORed with the other fields.
If present, allows the attribute not to appear. A default value
is set depending on what value type is used
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GMarkupError">
<description>
Error codes returned by markup parsing.

</description>
<parameters>
<parameter name="G_MARKUP_ERROR_BAD_UTF8">
<parameter_description> text being parsed was not valid UTF-8
</parameter_description>
</parameter>
<parameter name="G_MARKUP_ERROR_EMPTY">
<parameter_description> document contained nothing, or only whitespace
</parameter_description>
</parameter>
<parameter name="G_MARKUP_ERROR_PARSE">
<parameter_description> document was ill-formed
</parameter_description>
</parameter>
<parameter name="G_MARKUP_ERROR_UNKNOWN_ELEMENT">
<parameter_description> error should be set by #GMarkupParser
functions; element wasn't known
</parameter_description>
</parameter>
<parameter name="G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE">
<parameter_description> error should be set by #GMarkupParser
functions; attribute wasn't known
</parameter_description>
</parameter>
<parameter name="G_MARKUP_ERROR_INVALID_CONTENT">
<parameter_description> error should be set by #GMarkupParser
functions; content was invalid
</parameter_description>
</parameter>
<parameter name="G_MARKUP_ERROR_MISSING_ATTRIBUTE">
<parameter_description> error should be set by #GMarkupParser
functions; a required attribute was missing
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GMarkupParseFlags">
<description>
Flags that affect the behaviour of the parser.

</description>
<parameters>
<parameter name="G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG">
<parameter_description> flag you should not use
</parameter_description>
</parameter>
<parameter name="G_MARKUP_TREAT_CDATA_AS_TEXT">
<parameter_description> When this flag is set, CDATA marked
sections are not passed literally to the @passthrough function of
the parser. Instead, the content of the section (without the
`&lt;![CDATA[` and `]]&gt;`) is
passed to the @text function. This flag was added in GLib 2.12
</parameter_description>
</parameter>
<parameter name="G_MARKUP_PREFIX_ERROR_POSITION">
<parameter_description> Normally errors caught by GMarkup
itself have line/column information prefixed to them to let the
caller know the location of the error. When this flag is set the
location information is also prefixed to errors generated by the
#GMarkupParser implementation functions
</parameter_description>
</parameter>
<parameter name="G_MARKUP_IGNORE_QUALIFIED">
<parameter_description> Ignore (don't report) qualified
attributes and tags, along with their contents.  A qualified
attribute or tag is one that contains ':' in its name (ie: is in
another namespace).  Since: 2.40.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GModuleFlags">
<description>
Flags passed to g_module_open().
Note that these flags are not supported on all platforms.

</description>
<parameters>
<parameter name="G_MODULE_BIND_LAZY">
<parameter_description> specifies that symbols are only resolved when
needed. The default action is to bind all symbols when the module
is loaded.
</parameter_description>
</parameter>
<parameter name="G_MODULE_BIND_LOCAL">
<parameter_description> specifies that symbols in the module should
not be added to the global name space. The default action on most
platforms is to place symbols in the module in the global name space,
which may cause conflicts with existing symbols.
</parameter_description>
</parameter>
<parameter name="G_MODULE_BIND_MASK">
<parameter_description> mask for all flags.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GNormalizeMode">
<description>
Defines how a Unicode string is transformed in a canonical
form, standardizing such issues as whether a character with
an accent is represented as a base character and combining
accent or as a single precomposed character. Unicode strings
should generally be normalized before comparing them.

</description>
<parameters>
<parameter name="G_NORMALIZE_DEFAULT">
<parameter_description> standardize differences that do not affect the
text content, such as the above-mentioned accent representation
</parameter_description>
</parameter>
<parameter name="G_NORMALIZE_NFD">
<parameter_description> another name for %G_NORMALIZE_DEFAULT
</parameter_description>
</parameter>
<parameter name="G_NORMALIZE_DEFAULT_COMPOSE">
<parameter_description> like %G_NORMALIZE_DEFAULT, but with
composed forms rather than a maximally decomposed form
</parameter_description>
</parameter>
<parameter name="G_NORMALIZE_NFC">
<parameter_description> another name for %G_NORMALIZE_DEFAULT_COMPOSE
</parameter_description>
</parameter>
<parameter name="G_NORMALIZE_ALL">
<parameter_description> beyond %G_NORMALIZE_DEFAULT also standardize the
&quot;compatibility&quot; characters in Unicode, such as SUPERSCRIPT THREE
to the standard forms (in this case DIGIT THREE). Formatting
information may be lost but for most text operations such
characters should be considered the same
</parameter_description>
</parameter>
<parameter name="G_NORMALIZE_NFKD">
<parameter_description> another name for %G_NORMALIZE_ALL
</parameter_description>
</parameter>
<parameter name="G_NORMALIZE_ALL_COMPOSE">
<parameter_description> like %G_NORMALIZE_ALL, but with composed
forms rather than a maximally decomposed form
</parameter_description>
</parameter>
<parameter name="G_NORMALIZE_NFKC">
<parameter_description> another name for %G_NORMALIZE_ALL_COMPOSE
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GNumberParserError">
<description>
Error codes returned by functions converting a string to a number.

Since: 2.54

</description>
<parameters>
<parameter name="G_NUMBER_PARSER_ERROR_INVALID">
<parameter_description> String was not a valid number.
</parameter_description>
</parameter>
<parameter name="G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS">
<parameter_description> String was a number, but out of bounds.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GObject::notify">
<description>
The notify signal is emitted on an object when one of its
properties has been changed. Note that getting this signal
doesn't guarantee that the value of the property has actually
changed, it may also be emitted when the setter for the property
is called to reinstate the previous value.

This signal is typically used to obtain change notification for a
single property, by specifying the property name as a detail in the
g_signal_connect() call, like this:
|[&lt;!-- language=&quot;C&quot; --&gt; 
g_signal_connect (text_view-&gt;buffer, &quot;notify::paste-target-list&quot;,
G_CALLBACK (gtk_text_view_target_list_notify),
text_view)
]|
It is important to note that you must use
[canonical][canonical-parameter-name] parameter names as
detail strings for the notify signal.

</description>
<parameters>
<parameter name="gobject">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec of the property which changed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="GOnceStatus">
<description>
The possible statuses of a one-time initialization function
controlled by a #GOnce struct.

Since: 2.4

</description>
<parameters>
<parameter name="G_ONCE_STATUS_NOTCALLED">
<parameter_description> the function has not been called yet.
</parameter_description>
</parameter>
<parameter name="G_ONCE_STATUS_PROGRESS">
<parameter_description> the function call is currently in progress.
</parameter_description>
</parameter>
<parameter name="G_ONCE_STATUS_READY">
<parameter_description> the function has been called.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GOptionArg">
<description>
The #GOptionArg enum values determine which type of extra argument the
options expect to find. If an option expects an extra argument, it can
be specified in several ways; with a short option: `-x arg`, with a long
option: `--name arg` or combined in a single argument: `--name=arg`.

</description>
<parameters>
<parameter name="G_OPTION_ARG_NONE">
<parameter_description> No extra argument. This is useful for simple flags.
</parameter_description>
</parameter>
<parameter name="G_OPTION_ARG_STRING">
<parameter_description> The option takes a string argument.
</parameter_description>
</parameter>
<parameter name="G_OPTION_ARG_INT">
<parameter_description> The option takes an integer argument.
</parameter_description>
</parameter>
<parameter name="G_OPTION_ARG_CALLBACK">
<parameter_description> The option provides a callback (of type
#GOptionArgFunc) to parse the extra argument.
</parameter_description>
</parameter>
<parameter name="G_OPTION_ARG_FILENAME">
<parameter_description> The option takes a filename as argument.
</parameter_description>
</parameter>
<parameter name="G_OPTION_ARG_STRING_ARRAY">
<parameter_description> The option takes a string argument, multiple
uses of the option are collected into an array of strings.
</parameter_description>
</parameter>
<parameter name="G_OPTION_ARG_FILENAME_ARRAY">
<parameter_description> The option takes a filename as argument, 
multiple uses of the option are collected into an array of strings.
</parameter_description>
</parameter>
<parameter name="G_OPTION_ARG_DOUBLE">
<parameter_description> The option takes a double argument. The argument
can be formatted either for the user's locale or for the &quot;C&quot; locale.
Since 2.12
</parameter_description>
</parameter>
<parameter name="G_OPTION_ARG_INT64">
<parameter_description> The option takes a 64-bit integer. Like
%G_OPTION_ARG_INT but for larger numbers. The number can be in
decimal base, or in hexadecimal (when prefixed with `0x`, for
example, `0xffffffff`). Since 2.12
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GOptionError">
<description>
Error codes returned by option parsing.

</description>
<parameters>
<parameter name="G_OPTION_ERROR_UNKNOWN_OPTION">
<parameter_description> An option was not known to the parser.
This error will only be reported, if the parser hasn't been instructed
to ignore unknown options, see g_option_context_set_ignore_unknown_options().
</parameter_description>
</parameter>
<parameter name="G_OPTION_ERROR_BAD_VALUE">
<parameter_description> A value couldn't be parsed.
</parameter_description>
</parameter>
<parameter name="G_OPTION_ERROR_FAILED">
<parameter_description> A #GOptionArgFunc callback failed.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GOptionFlags">
<description>
Flags which modify individual options.

</description>
<parameters>
<parameter name="G_OPTION_FLAG_NONE">
<parameter_description> No flags. Since: 2.42.
</parameter_description>
</parameter>
<parameter name="G_OPTION_FLAG_HIDDEN">
<parameter_description> The option doesn't appear in `--help` output.
</parameter_description>
</parameter>
<parameter name="G_OPTION_FLAG_IN_MAIN">
<parameter_description> The option appears in the main section of the
`--help` output, even if it is defined in a group.
</parameter_description>
</parameter>
<parameter name="G_OPTION_FLAG_REVERSE">
<parameter_description> For options of the %G_OPTION_ARG_NONE kind, this
flag indicates that the sense of the option is reversed.
</parameter_description>
</parameter>
<parameter name="G_OPTION_FLAG_NO_ARG">
<parameter_description> For options of the %G_OPTION_ARG_CALLBACK kind,
this flag indicates that the callback does not take any argument
(like a %G_OPTION_ARG_NONE option). Since 2.8
</parameter_description>
</parameter>
<parameter name="G_OPTION_FLAG_FILENAME">
<parameter_description> For options of the %G_OPTION_ARG_CALLBACK
kind, this flag indicates that the argument should be passed to the
callback in the GLib filename encoding rather than UTF-8. Since 2.8
</parameter_description>
</parameter>
<parameter name="G_OPTION_FLAG_OPTIONAL_ARG">
<parameter_description> For options of the %G_OPTION_ARG_CALLBACK 
kind, this flag indicates that the argument supply is optional.
If no argument is given then data of %GOptionParseFunc will be
set to NULL. Since 2.8
</parameter_description>
</parameter>
<parameter name="G_OPTION_FLAG_NOALIAS">
<parameter_description> This flag turns off the automatic conflict
resolution which prefixes long option names with `groupname-` if 
there is a conflict. This option should only be used in situations
where aliasing is necessary to model some legacy commandline interface.
It is not safe to use this option, unless all option groups are under
your direct control. Since 2.8.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GParamFlags">
<description>
Through the #GParamFlags flag values, certain aspects of parameters
can be configured. See also #G_PARAM_STATIC_STRINGS.

</description>
<parameters>
<parameter name="G_PARAM_READABLE">
<parameter_description> the parameter is readable
</parameter_description>
</parameter>
<parameter name="G_PARAM_WRITABLE">
<parameter_description> the parameter is writable
</parameter_description>
</parameter>
<parameter name="G_PARAM_READWRITE">
<parameter_description> alias for %G_PARAM_READABLE | %G_PARAM_WRITABLE
</parameter_description>
</parameter>
<parameter name="G_PARAM_CONSTRUCT">
<parameter_description> the parameter will be set upon object construction
</parameter_description>
</parameter>
<parameter name="G_PARAM_CONSTRUCT_ONLY">
<parameter_description> the parameter can only be set upon object construction
</parameter_description>
</parameter>
<parameter name="G_PARAM_LAX_VALIDATION">
<parameter_description> upon parameter conversion (see g_param_value_convert())
strict validation is not required
</parameter_description>
</parameter>
<parameter name="G_PARAM_STATIC_NAME">
<parameter_description> the string used as name when constructing the 
parameter is guaranteed to remain valid and
unmodified for the lifetime of the parameter. 
Since 2.8
</parameter_description>
</parameter>
<parameter name="G_PARAM_STATIC_NICK">
<parameter_description> the string used as nick when constructing the
parameter is guaranteed to remain valid and
unmmodified for the lifetime of the parameter.
Since 2.8
</parameter_description>
</parameter>
<parameter name="G_PARAM_STATIC_BLURB">
<parameter_description> the string used as blurb when constructing the 
parameter is guaranteed to remain valid and 
unmodified for the lifetime of the parameter. 
Since 2.8
</parameter_description>
</parameter>
<parameter name="G_PARAM_EXPLICIT_NOTIFY">
<parameter_description> calls to g_object_set_property() for this
property will not automatically result in a &quot;notify&quot; signal being
emitted: the implementation must call g_object_notify() themselves
in case the property actually changes.  Since: 2.42.
</parameter_description>
</parameter>
<parameter name="G_PARAM_PRIVATE">
<parameter_description> internal
</parameter_description>
</parameter>
<parameter name="G_PARAM_DEPRECATED">
<parameter_description> the parameter is deprecated and will be removed
in a future version. A warning will be generated if it is used
while running with G_ENABLE_DIAGNOSTIC=1.
Since 2.26
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GRegexCompileFlags">
<description>
Flags specifying compile-time options.

Since: 2.14

</description>
<parameters>
<parameter name="G_REGEX_CASELESS">
<parameter_description> Letters in the pattern match both upper- and
lowercase letters. This option can be changed within a pattern
by a &quot;(?i)&quot; option setting.
</parameter_description>
</parameter>
<parameter name="G_REGEX_MULTILINE">
<parameter_description> By default, GRegex treats the strings as consisting
of a single line of characters (even if it actually contains
newlines). The &quot;start of line&quot; metacharacter (&quot;^&quot;) matches only
at the start of the string, while the &quot;end of line&quot; metacharacter
(&quot;$&quot;) matches only at the end of the string, or before a terminating
newline (unless #G_REGEX_DOLLAR_ENDONLY is set). When
#G_REGEX_MULTILINE is set, the &quot;start of line&quot; and &quot;end of line&quot;
constructs match immediately following or immediately before any
newline in the string, respectively, as well as at the very start
and end. This can be changed within a pattern by a &quot;(?m)&quot; option
setting.
</parameter_description>
</parameter>
<parameter name="G_REGEX_DOTALL">
<parameter_description> A dot metacharacter (&quot;.&quot;) in the pattern matches all
characters, including newlines. Without it, newlines are excluded.
This option can be changed within a pattern by a (&quot;?s&quot;) option setting.
</parameter_description>
</parameter>
<parameter name="G_REGEX_EXTENDED">
<parameter_description> Whitespace data characters in the pattern are
totally ignored except when escaped or inside a character class.
Whitespace does not include the VT character (code 11). In addition,
characters between an unescaped &quot;#&quot; outside a character class and
the next newline character, inclusive, are also ignored. This can
be changed within a pattern by a &quot;(?x)&quot; option setting.
</parameter_description>
</parameter>
<parameter name="G_REGEX_ANCHORED">
<parameter_description> The pattern is forced to be &quot;anchored&quot;, that is,
it is constrained to match only at the first matching point in the
string that is being searched. This effect can also be achieved by
appropriate constructs in the pattern itself such as the &quot;^&quot;
metacharacter.
</parameter_description>
</parameter>
<parameter name="G_REGEX_DOLLAR_ENDONLY">
<parameter_description> A dollar metacharacter (&quot;$&quot;) in the pattern
matches only at the end of the string. Without this option, a
dollar also matches immediately before the final character if
it is a newline (but not before any other newlines). This option
is ignored if #G_REGEX_MULTILINE is set.
</parameter_description>
</parameter>
<parameter name="G_REGEX_UNGREEDY">
<parameter_description> Inverts the &quot;greediness&quot; of the quantifiers so that
they are not greedy by default, but become greedy if followed by &quot;?&quot;.
It can also be set by a &quot;(?U)&quot; option setting within the pattern.
</parameter_description>
</parameter>
<parameter name="G_REGEX_RAW">
<parameter_description> Usually strings must be valid UTF-8 strings, using this
flag they are considered as a raw sequence of bytes.
</parameter_description>
</parameter>
<parameter name="G_REGEX_NO_AUTO_CAPTURE">
<parameter_description> Disables the use of numbered capturing
parentheses in the pattern. Any opening parenthesis that is not
followed by &quot;?&quot; behaves as if it were followed by &quot;?:&quot; but named
parentheses can still be used for capturing (and they acquire numbers
in the usual way).
</parameter_description>
</parameter>
<parameter name="G_REGEX_OPTIMIZE">
<parameter_description> Optimize the regular expression. If the pattern will
be used many times, then it may be worth the effort to optimize it
to improve the speed of matches.
</parameter_description>
</parameter>
<parameter name="G_REGEX_FIRSTLINE">
<parameter_description> Limits an unanchored pattern to match before (or at) the
first newline. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_DUPNAMES">
<parameter_description> Names used to identify capturing subpatterns need not
be unique. This can be helpful for certain types of pattern when it
is known that only one instance of the named subpattern can ever be
matched.
</parameter_description>
</parameter>
<parameter name="G_REGEX_NEWLINE_CR">
<parameter_description> Usually any newline character or character sequence is
recognized. If this option is set, the only recognized newline character
is '\r'.
</parameter_description>
</parameter>
<parameter name="G_REGEX_NEWLINE_LF">
<parameter_description> Usually any newline character or character sequence is
recognized. If this option is set, the only recognized newline character
is '\n'.
</parameter_description>
</parameter>
<parameter name="G_REGEX_NEWLINE_CRLF">
<parameter_description> Usually any newline character or character sequence is
recognized. If this option is set, the only recognized newline character
sequence is '\r\n'.
</parameter_description>
</parameter>
<parameter name="G_REGEX_NEWLINE_ANYCRLF">
<parameter_description> Usually any newline character or character sequence
is recognized. If this option is set, the only recognized newline character
sequences are '\r', '\n', and '\r\n'. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_BSR_ANYCRLF">
<parameter_description> Usually any newline character or character sequence
is recognised. If this option is set, then &quot;\R&quot; only recognizes the newline
characters '\r', '\n' and '\r\n'. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_JAVASCRIPT_COMPAT">
<parameter_description> Changes behaviour so that it is compatible with
JavaScript rather than PCRE. Since: 2.34
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GRegexError">
<description>
Error codes returned by regular expressions functions.

Since: 2.14

</description>
<parameters>
<parameter name="G_REGEX_ERROR_COMPILE">
<parameter_description> Compilation of the regular expression failed.
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_OPTIMIZE">
<parameter_description> Optimization of the regular expression failed.
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_REPLACE">
<parameter_description> Replacement failed due to an ill-formed replacement
string.
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_MATCH">
<parameter_description> The match process failed.
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_INTERNAL">
<parameter_description> Internal error of the regular expression engine.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_STRAY_BACKSLASH">
<parameter_description> &quot;\\&quot; at end of pattern. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_MISSING_CONTROL_CHAR">
<parameter_description> &quot;\\c&quot; at end of pattern. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_UNRECOGNIZED_ESCAPE">
<parameter_description> Unrecognized character follows &quot;\\&quot;.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER">
<parameter_description> Numbers out of order in &quot;{}&quot;
quantifier. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_QUANTIFIER_TOO_BIG">
<parameter_description> Number too big in &quot;{}&quot; quantifier.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS">
<parameter_description> Missing terminating &quot;]&quot; for
character class. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS">
<parameter_description> Invalid escape sequence
in character class. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_RANGE_OUT_OF_ORDER">
<parameter_description> Range out of order in character class.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_NOTHING_TO_REPEAT">
<parameter_description> Nothing to repeat. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_UNRECOGNIZED_CHARACTER">
<parameter_description> Unrecognized character after &quot;(?&quot;,
&quot;(?&lt;&quot; or &quot;(?P&quot;. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS">
<parameter_description> POSIX named classes are
supported only within a class. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_UNMATCHED_PARENTHESIS">
<parameter_description> Missing terminating &quot;)&quot; or &quot;)&quot;
without opening &quot;(&quot;. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE">
<parameter_description> Reference to non-existent
subpattern. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_UNTERMINATED_COMMENT">
<parameter_description> Missing terminating &quot;)&quot; after comment.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_EXPRESSION_TOO_LARGE">
<parameter_description> Regular expression too large.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_MEMORY_ERROR">
<parameter_description> Failed to get memory. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND">
<parameter_description> Lookbehind assertion is not
fixed length. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_MALFORMED_CONDITION">
<parameter_description> Malformed number or name after &quot;(?(&quot;.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES">
<parameter_description> Conditional group contains
more than two branches. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_ASSERTION_EXPECTED">
<parameter_description> Assertion expected after &quot;(?(&quot;.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME">
<parameter_description> Unknown POSIX class name.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED">
<parameter_description> POSIX collating
elements are not supported. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_HEX_CODE_TOO_LARGE">
<parameter_description> Character value in &quot;\\x{...}&quot; sequence
is too large. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_INVALID_CONDITION">
<parameter_description> Invalid condition &quot;(?(0)&quot;. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND">
<parameter_description> \\C not allowed in
lookbehind assertion. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_INFINITE_LOOP">
<parameter_description> Recursive call could loop indefinitely.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR">
<parameter_description> Missing terminator
in subpattern name. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME">
<parameter_description> Two named subpatterns have
the same name. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_MALFORMED_PROPERTY">
<parameter_description> Malformed &quot;\\P&quot; or &quot;\\p&quot; sequence.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_UNKNOWN_PROPERTY">
<parameter_description> Unknown property name after &quot;\\P&quot; or
&quot;\\p&quot;. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG">
<parameter_description> Subpattern name is too long
(maximum 32 characters). Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_TOO_MANY_SUBPATTERNS">
<parameter_description> Too many named subpatterns (maximum
10,000). Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_INVALID_OCTAL_VALUE">
<parameter_description> Octal value is greater than &quot;\\377&quot;.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE">
<parameter_description> &quot;DEFINE&quot; group contains more
than one branch. Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_DEFINE_REPETION">
<parameter_description> Repeating a &quot;DEFINE&quot; group is not allowed.
This error is never raised. Since: 2.16 Deprecated: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS">
<parameter_description> Inconsistent newline options.
Since 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_MISSING_BACK_REFERENCE">
<parameter_description> &quot;\\g&quot; is not followed by a braced,
angle-bracketed, or quoted name or number, or by a plain number. Since: 2.16
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE">
<parameter_description> relative reference must not be zero. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN">
<parameter_description> the backtracing
control verb used does not allow an argument. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB">
<parameter_description> unknown backtracing 
control verb. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_NUMBER_TOO_BIG">
<parameter_description> number is too big in escape sequence. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_MISSING_SUBPATTERN_NAME">
<parameter_description> Missing subpattern name. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_MISSING_DIGIT">
<parameter_description> Missing digit. Since 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_INVALID_DATA_CHARACTER">
<parameter_description> In JavaScript compatibility mode,
&quot;[&quot; is an invalid data character. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME">
<parameter_description> different names for subpatterns of the 
same number are not allowed. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED">
<parameter_description> the backtracing control
verb requires an argument. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_INVALID_CONTROL_CHAR">
<parameter_description> &quot;\\c&quot; must be followed by an ASCII 
character. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_MISSING_NAME">
<parameter_description> &quot;\\k&quot; is not followed by a braced, angle-bracketed, or 
quoted name. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS">
<parameter_description> &quot;\\N&quot; is not supported in a class. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES">
<parameter_description> too many forward references. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_NAME_TOO_LONG">
<parameter_description> the name is too long in &quot;(*MARK)&quot;, &quot;(*PRUNE)&quot;, 
&quot;(*SKIP)&quot;, or &quot;(*THEN)&quot;. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE">
<parameter_description> the character value in the \\u sequence is
too large. Since: 2.34
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GRegexMatchFlags">
<description>
Flags specifying match-time options.

Since: 2.14

</description>
<parameters>
<parameter name="G_REGEX_MATCH_ANCHORED">
<parameter_description> The pattern is forced to be &quot;anchored&quot;, that is,
it is constrained to match only at the first matching point in the
string that is being searched. This effect can also be achieved by
appropriate constructs in the pattern itself such as the &quot;^&quot;
metacharacter.
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_NOTBOL">
<parameter_description> Specifies that first character of the string is
not the beginning of a line, so the circumflex metacharacter should
not match before it. Setting this without #G_REGEX_MULTILINE (at
compile time) causes circumflex never to match. This option affects
only the behaviour of the circumflex metacharacter, it does not
affect &quot;\A&quot;.
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_NOTEOL">
<parameter_description> Specifies that the end of the subject string is
not the end of a line, so the dollar metacharacter should not match
it nor (except in multiline mode) a newline immediately before it.
Setting this without #G_REGEX_MULTILINE (at compile time) causes
dollar never to match. This option affects only the behaviour of
the dollar metacharacter, it does not affect &quot;\Z&quot; or &quot;\z&quot;.
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_NOTEMPTY">
<parameter_description> An empty string is not considered to be a valid
match if this option is set. If there are alternatives in the pattern,
they are tried. If all the alternatives match the empty string, the
entire match fails. For example, if the pattern &quot;a?b?&quot; is applied to
a string not beginning with &quot;a&quot; or &quot;b&quot;, it matches the empty string
at the start of the string. With this flag set, this match is not
valid, so GRegex searches further into the string for occurrences
of &quot;a&quot; or &quot;b&quot;.
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_PARTIAL">
<parameter_description> Turns on the partial matching feature, for more
documentation on partial matching see g_match_info_is_partial_match().
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_NEWLINE_CR">
<parameter_description> Overrides the newline definition set when
creating a new #GRegex, setting the '\r' character as line terminator.
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_NEWLINE_LF">
<parameter_description> Overrides the newline definition set when
creating a new #GRegex, setting the '\n' character as line terminator.
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_NEWLINE_CRLF">
<parameter_description> Overrides the newline definition set when
creating a new #GRegex, setting the '\r\n' characters sequence as line terminator.
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_NEWLINE_ANY">
<parameter_description> Overrides the newline definition set when
creating a new #GRegex, any Unicode newline sequence
is recognised as a newline. These are '\r', '\n' and '\rn', and the
single characters U+000B LINE TABULATION, U+000C FORM FEED (FF),
U+0085 NEXT LINE (NEL), U+2028 LINE SEPARATOR and
U+2029 PARAGRAPH SEPARATOR.
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_NEWLINE_ANYCRLF">
<parameter_description> Overrides the newline definition set when
creating a new #GRegex; any '\r', '\n', or '\r\n' character sequence
is recognized as a newline. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_BSR_ANYCRLF">
<parameter_description> Overrides the newline definition for &quot;\R&quot; set when
creating a new #GRegex; only '\r', '\n', or '\r\n' character sequences
are recognized as a newline by &quot;\R&quot;. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_BSR_ANY">
<parameter_description> Overrides the newline definition for &quot;\R&quot; set when
creating a new #GRegex; any Unicode newline character or character sequence
are recognized as a newline by &quot;\R&quot;. These are '\r', '\n' and '\rn', and the
single characters U+000B LINE TABULATION, U+000C FORM FEED (FF),
U+0085 NEXT LINE (NEL), U+2028 LINE SEPARATOR and
U+2029 PARAGRAPH SEPARATOR. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_PARTIAL_SOFT">
<parameter_description> An alias for #G_REGEX_MATCH_PARTIAL. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_PARTIAL_HARD">
<parameter_description> Turns on the partial matching feature. In contrast to
to #G_REGEX_MATCH_PARTIAL_SOFT, this stops matching as soon as a partial match
is found, without continuing to search for a possible complete match. See
g_match_info_is_partial_match() for more information. Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_REGEX_MATCH_NOTEMPTY_ATSTART">
<parameter_description> Like #G_REGEX_MATCH_NOTEMPTY, but only applied to
the start of the matched string. For anchored
patterns this can only happen for pattern containing &quot;\K&quot;. Since: 2.34
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GSeekType">
<description>
An enumeration specifying the base position for a
g_io_channel_seek_position() operation.

</description>
<parameters>
<parameter name="G_SEEK_CUR">
<parameter_description> the current position in the file.
</parameter_description>
</parameter>
<parameter name="G_SEEK_SET">
<parameter_description> the start of the file.
</parameter_description>
</parameter>
<parameter name="G_SEEK_END">
<parameter_description> the end of the file.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GShellError">
<description>
Error codes returned by shell functions.

</description>
<parameters>
<parameter name="G_SHELL_ERROR_BAD_QUOTING">
<parameter_description> Mismatched or otherwise mangled quoting.
</parameter_description>
</parameter>
<parameter name="G_SHELL_ERROR_EMPTY_STRING">
<parameter_description> String to be parsed was empty.
</parameter_description>
</parameter>
<parameter name="G_SHELL_ERROR_FAILED">
<parameter_description> Some other error.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GSignalFlags">
<description>
The signal flags are used to specify a signal's behaviour, the overall
signal description outlines how especially the RUN flags control the
stages of a signal emission.

</description>
<parameters>
<parameter name="G_SIGNAL_RUN_FIRST">
<parameter_description> Invoke the object method handler in the first emission stage.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_RUN_LAST">
<parameter_description> Invoke the object method handler in the third emission stage.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_RUN_CLEANUP">
<parameter_description> Invoke the object method handler in the last emission stage.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_NO_RECURSE">
<parameter_description> Signals being emitted for an object while currently being in
emission for this very object will not be emitted recursively,
but instead cause the first emission to be restarted.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_DETAILED">
<parameter_description> This signal supports &quot;::detail&quot; appendices to the signal name
upon handler connections and emissions.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_ACTION">
<parameter_description> Action signals are signals that may freely be emitted on alive
objects from user code via g_signal_emit() and friends, without
the need of being embedded into extra code that performs pre or
post emission adjustments on the object. They can also be thought
of as object methods which can be called generically by 
third-party code.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_NO_HOOKS">
<parameter_description> No emissions hooks are supported for this signal.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_MUST_COLLECT">
<parameter_description> Varargs signal emission will always collect the
arguments, even if there are no signal handlers connected.  Since 2.30.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_DEPRECATED">
<parameter_description> The signal is deprecated and will be removed
in a future version. A warning will be generated if it is connected while
running with G_ENABLE_DIAGNOSTIC=1.  Since 2.32.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GSignalMatchType">
<description>
The match types specify what g_signal_handlers_block_matched(),
g_signal_handlers_unblock_matched() and g_signal_handlers_disconnect_matched()
match signals by.

</description>
<parameters>
<parameter name="G_SIGNAL_MATCH_ID">
<parameter_description> The signal id must be equal.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_MATCH_DETAIL">
<parameter_description> The signal detail be equal.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_MATCH_CLOSURE">
<parameter_description> The closure must be the same.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_MATCH_FUNC">
<parameter_description> The C closure callback must be the same.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_MATCH_DATA">
<parameter_description> The closure data must be the same.
</parameter_description>
</parameter>
<parameter name="G_SIGNAL_MATCH_UNBLOCKED">
<parameter_description> Only unblocked signals may matched.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GSpawnError">
<description>
Error codes returned by spawning processes.

</description>
<parameters>
<parameter name="G_SPAWN_ERROR_FORK">
<parameter_description> Fork failed due to lack of memory.
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_READ">
<parameter_description> Read or select on pipes failed.
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_CHDIR">
<parameter_description> Changing to working directory failed.
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_ACCES">
<parameter_description> execv() returned `EACCES`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_PERM">
<parameter_description> execv() returned `EPERM`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_TOO_BIG">
<parameter_description> execv() returned `E2BIG`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_2BIG">
<parameter_description> deprecated alias for %G_SPAWN_ERROR_TOO_BIG
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_NOEXEC">
<parameter_description> execv() returned `ENOEXEC`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_NAMETOOLONG">
<parameter_description> execv() returned `ENAMETOOLONG`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_NOENT">
<parameter_description> execv() returned `ENOENT`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_NOMEM">
<parameter_description> execv() returned `ENOMEM`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_NOTDIR">
<parameter_description> execv() returned `ENOTDIR`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_LOOP">
<parameter_description> execv() returned `ELOOP`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_TXTBUSY">
<parameter_description> execv() returned `ETXTBUSY`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_IO">
<parameter_description> execv() returned `EIO`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_NFILE">
<parameter_description> execv() returned `ENFILE`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_MFILE">
<parameter_description> execv() returned `EMFILE`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_INVAL">
<parameter_description> execv() returned `EINVAL`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_ISDIR">
<parameter_description> execv() returned `EISDIR`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_LIBBAD">
<parameter_description> execv() returned `ELIBBAD`
</parameter_description>
</parameter>
<parameter name="G_SPAWN_ERROR_FAILED">
<parameter_description> Some other fatal failure,
`error-&gt;message` should explain.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GSpawnFlags">
<description>
Flags passed to g_spawn_sync(), g_spawn_async() and g_spawn_async_with_pipes().

</description>
<parameters>
<parameter name="G_SPAWN_DEFAULT">
<parameter_description> no flags, default behaviour
</parameter_description>
</parameter>
<parameter name="G_SPAWN_LEAVE_DESCRIPTORS_OPEN">
<parameter_description> the parent's open file descriptors will
be inherited by the child; otherwise all descriptors except stdin,
stdout and stderr will be closed before calling exec() in the child.
</parameter_description>
</parameter>
<parameter name="G_SPAWN_DO_NOT_REAP_CHILD">
<parameter_description> the child will not be automatically reaped;
you must use g_child_watch_add() yourself (or call waitpid() or handle
`SIGCHLD` yourself), or the child will become a zombie.
</parameter_description>
</parameter>
<parameter name="G_SPAWN_SEARCH_PATH">
<parameter_description> `argv[0]` need not be an absolute path, it will be
looked for in the user's `PATH`.
</parameter_description>
</parameter>
<parameter name="G_SPAWN_STDOUT_TO_DEV_NULL">
<parameter_description> the child's standard output will be discarded,
instead of going to the same location as the parent's standard output.
</parameter_description>
</parameter>
<parameter name="G_SPAWN_STDERR_TO_DEV_NULL">
<parameter_description> the child's standard error will be discarded.
</parameter_description>
</parameter>
<parameter name="G_SPAWN_CHILD_INHERITS_STDIN">
<parameter_description> the child will inherit the parent's standard
input (by default, the child's standard input is attached to `/dev/null`).
</parameter_description>
</parameter>
<parameter name="G_SPAWN_FILE_AND_ARGV_ZERO">
<parameter_description> the first element of `argv` is the file to
execute, while the remaining elements are the actual argument vector
to pass to the file. Normally g_spawn_async_with_pipes() uses `argv[0]`
as the file to execute, and passes all of `argv` to the child.
</parameter_description>
</parameter>
<parameter name="G_SPAWN_SEARCH_PATH_FROM_ENVP">
<parameter_description> if `argv[0]` is not an abolute path,
it will be looked for in the `PATH` from the passed child environment.
Since: 2.34
</parameter_description>
</parameter>
<parameter name="G_SPAWN_CLOEXEC_PIPES">
<parameter_description> create all pipes with the `O_CLOEXEC` flag set.
Since: 2.40
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GTestFileType">
<description>
The type of file to return the filename for, when used with
g_test_build_filename().

These two options correspond rather directly to the 'dist' and
'built' terminology that automake uses and are explicitly used to
distinguish between the 'srcdir' and 'builddir' being separate.  All
files in your project should either be dist (in the
`EXTRA_DIST` or `dist_schema_DATA`
sense, in which case they will always be in the srcdir) or built (in
the `BUILT_SOURCES` sense, in which case they will
always be in the builddir).

Note: as a general rule of automake, files that are generated only as
part of the build-from-git process (but then are distributed with the
tarball) always go in srcdir (even if doing a srcdir != builddir
build from git) and are considered as distributed files.

Since: 2.38

</description>
<parameters>
<parameter name="G_TEST_DIST">
<parameter_description> a file that was included in the distribution tarball
</parameter_description>
</parameter>
<parameter name="G_TEST_BUILT">
<parameter_description> a file that was built on the compiling machine
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GTestSubprocessFlags">
<description>
Flags to pass to g_test_trap_subprocess() to control input and output.

Note that in contrast with g_test_trap_fork(), the default is to
not show stdout and stderr.

</description>
<parameters>
<parameter name="G_TEST_SUBPROCESS_INHERIT_STDIN">
<parameter_description> If this flag is given, the child
process will inherit the parent's stdin. Otherwise, the child's
stdin is redirected to `/dev/null`.
</parameter_description>
</parameter>
<parameter name="G_TEST_SUBPROCESS_INHERIT_STDOUT">
<parameter_description> If this flag is given, the child
process will inherit the parent's stdout. Otherwise, the child's
stdout will not be visible, but it will be captured to allow
later tests with g_test_trap_assert_stdout().
</parameter_description>
</parameter>
<parameter name="G_TEST_SUBPROCESS_INHERIT_STDERR">
<parameter_description> If this flag is given, the child
process will inherit the parent's stderr. Otherwise, the child's
stderr will not be visible, but it will be captured to allow
later tests with g_test_trap_assert_stderr().
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GTestTrapFlags">
<description>
Test traps are guards around forked tests.
These flags determine what traps to set.

Deprecated: #GTestTrapFlags is used only with g_test_trap_fork(),
which is deprecated. g_test_trap_subprocess() uses
#GTestSubprocessFlags.

</description>
<parameters>
<parameter name="G_TEST_TRAP_SILENCE_STDOUT">
<parameter_description> Redirect stdout of the test child to
`/dev/null` so it cannot be observed on the console during test
runs. The actual output is still captured though to allow later
tests with g_test_trap_assert_stdout().
</parameter_description>
</parameter>
<parameter name="G_TEST_TRAP_SILENCE_STDERR">
<parameter_description> Redirect stderr of the test child to
`/dev/null` so it cannot be observed on the console during test
runs. The actual output is still captured though to allow later
tests with g_test_trap_assert_stderr().
</parameter_description>
</parameter>
<parameter name="G_TEST_TRAP_INHERIT_STDIN">
<parameter_description> If this flag is given, stdin of the
child process is shared with stdin of its parent process.
It is redirected to `/dev/null` otherwise.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GThreadError">
<description>
Possible errors of thread related functions.

</description>
<parameters>
<parameter name="G_THREAD_ERROR_AGAIN">
<parameter_description> a thread couldn't be created due to resource
shortage. Try again later.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GThreadPriority">
<description>
Thread priorities.

Deprecated:2.32: Thread priorities no longer have any effect.

</description>
<parameters>
<parameter name="G_THREAD_PRIORITY_LOW">
<parameter_description> a priority lower than normal
</parameter_description>
</parameter>
<parameter name="G_THREAD_PRIORITY_NORMAL">
<parameter_description> the default priority
</parameter_description>
</parameter>
<parameter name="G_THREAD_PRIORITY_HIGH">
<parameter_description> a priority higher than normal
</parameter_description>
</parameter>
<parameter name="G_THREAD_PRIORITY_URGENT">
<parameter_description> the highest priority
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GTimeType">
<description>
Disambiguates a given time in two ways.

First, specifies if the given time is in universal or local time.

Second, if the time is in local time, specifies if it is local
standard time or local daylight time.  This is important for the case
where the same local time occurs twice (during daylight savings time
transitions, for example).

</description>
<parameters>
<parameter name="G_TIME_TYPE_STANDARD">
<parameter_description> the time is in local standard time
</parameter_description>
</parameter>
<parameter name="G_TIME_TYPE_DAYLIGHT">
<parameter_description> the time is in local daylight time
</parameter_description>
</parameter>
<parameter name="G_TIME_TYPE_UNIVERSAL">
<parameter_description> the time is in UTC
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GTokenType">
<description>
The possible types of token returned from each
g_scanner_get_next_token() call.

</description>
<parameters>
<parameter name="G_TOKEN_EOF">
<parameter_description> the end of the file
</parameter_description>
</parameter>
<parameter name="G_TOKEN_LEFT_PAREN">
<parameter_description> a '(' character
</parameter_description>
</parameter>
<parameter name="G_TOKEN_LEFT_CURLY">
<parameter_description> a '{' character
</parameter_description>
</parameter>
<parameter name="G_TOKEN_LEFT_BRACE">
<parameter_description> a '[' character
</parameter_description>
</parameter>
<parameter name="G_TOKEN_RIGHT_CURLY">
<parameter_description> a '}' character
</parameter_description>
</parameter>
<parameter name="G_TOKEN_RIGHT_PAREN">
<parameter_description> a ')' character
</parameter_description>
</parameter>
<parameter name="G_TOKEN_RIGHT_BRACE">
<parameter_description> a ']' character
</parameter_description>
</parameter>
<parameter name="G_TOKEN_EQUAL_SIGN">
<parameter_description> a '=' character
</parameter_description>
</parameter>
<parameter name="G_TOKEN_COMMA">
<parameter_description> a ',' character
</parameter_description>
</parameter>
<parameter name="G_TOKEN_NONE">
<parameter_description> not a token
</parameter_description>
</parameter>
<parameter name="G_TOKEN_ERROR">
<parameter_description> an error occurred
</parameter_description>
</parameter>
<parameter name="G_TOKEN_CHAR">
<parameter_description> a character
</parameter_description>
</parameter>
<parameter name="G_TOKEN_BINARY">
<parameter_description> a binary integer
</parameter_description>
</parameter>
<parameter name="G_TOKEN_OCTAL">
<parameter_description> an octal integer
</parameter_description>
</parameter>
<parameter name="G_TOKEN_INT">
<parameter_description> an integer
</parameter_description>
</parameter>
<parameter name="G_TOKEN_HEX">
<parameter_description> a hex integer
</parameter_description>
</parameter>
<parameter name="G_TOKEN_FLOAT">
<parameter_description> a floating point number
</parameter_description>
</parameter>
<parameter name="G_TOKEN_STRING">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="G_TOKEN_SYMBOL">
<parameter_description> a symbol
</parameter_description>
</parameter>
<parameter name="G_TOKEN_IDENTIFIER">
<parameter_description> an identifier
</parameter_description>
</parameter>
<parameter name="G_TOKEN_IDENTIFIER_NULL">
<parameter_description> a null identifier
</parameter_description>
</parameter>
<parameter name="G_TOKEN_COMMENT_SINGLE">
<parameter_description> one line comment
</parameter_description>
</parameter>
<parameter name="G_TOKEN_COMMENT_MULTI">
<parameter_description> multi line comment
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GTraverseFlags">
<description>
Specifies which nodes are visited during several of the tree
functions, including g_node_traverse() and g_node_find().

</description>
<parameters>
<parameter name="G_TRAVERSE_LEAVES">
<parameter_description> only leaf nodes should be visited. This name has
been introduced in 2.6, for older version use
%G_TRAVERSE_LEAFS.
</parameter_description>
</parameter>
<parameter name="G_TRAVERSE_NON_LEAVES">
<parameter_description> only non-leaf nodes should be visited. This
name has been introduced in 2.6, for older
version use %G_TRAVERSE_NON_LEAFS.
</parameter_description>
</parameter>
<parameter name="G_TRAVERSE_ALL">
<parameter_description> all nodes should be visited.
</parameter_description>
</parameter>
<parameter name="G_TRAVERSE_MASK">
<parameter_description> a mask of all traverse flags.
</parameter_description>
</parameter>
<parameter name="G_TRAVERSE_LEAFS">
<parameter_description> identical to %G_TRAVERSE_LEAVES.
</parameter_description>
</parameter>
<parameter name="G_TRAVERSE_NON_LEAFS">
<parameter_description> identical to %G_TRAVERSE_NON_LEAVES.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GTraverseType">
<description>
Specifies the type of traveral performed by g_tree_traverse(),
g_node_traverse() and g_node_find(). The different orders are
illustrated here:
- In order: A, B, C, D, E, F, G, H, I
![](Sorted_binary_tree_inorder.svg)
- Pre order: F, B, A, D, C, E, G, I, H
![](Sorted_binary_tree_preorder.svg)
- Post order: A, C, E, D, B, H, I, G, F
![](Sorted_binary_tree_postorder.svg)
- Level order: F, B, G, A, D, I, C, E, H
![](Sorted_binary_tree_breadth-first_traversal.svg)

</description>
<parameters>
<parameter name="G_IN_ORDER">
<parameter_description> vists a node's left child first, then the node itself,
then its right child. This is the one to use if you
want the output sorted according to the compare
function.
</parameter_description>
</parameter>
<parameter name="G_PRE_ORDER">
<parameter_description> visits a node, then its children.
</parameter_description>
</parameter>
<parameter name="G_POST_ORDER">
<parameter_description> visits the node's children, then the node itself.
</parameter_description>
</parameter>
<parameter name="G_LEVEL_ORDER">
<parameter_description> is not implemented for
[balanced binary trees][glib-Balanced-Binary-Trees].
For [n-ary trees][glib-N-ary-Trees], it
vists the root node first, then its children, then
its grandchildren, and so on. Note that this is less
efficient than the other orders.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GTypeDebugFlags">
<description>
These flags used to be passed to g_type_init_with_debug_flags() which
is now deprecated.

If you need to enable debugging features, use the GOBJECT_DEBUG
environment variable.

Deprecated: 2.36: g_type_init() is now done automatically

</description>
<parameters>
<parameter name="G_TYPE_DEBUG_NONE">
<parameter_description> Print no messages
</parameter_description>
</parameter>
<parameter name="G_TYPE_DEBUG_OBJECTS">
<parameter_description> Print messages about object bookkeeping
</parameter_description>
</parameter>
<parameter name="G_TYPE_DEBUG_SIGNALS">
<parameter_description> Print messages about signal emissions
</parameter_description>
</parameter>
<parameter name="G_TYPE_DEBUG_MASK">
<parameter_description> Mask covering all debug flags
</parameter_description>
</parameter>
<parameter name="G_TYPE_DEBUG_INSTANCE_COUNT">
<parameter_description> Keep a count of instances of each type
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GTypeFlags">
<description>
Bit masks used to check or determine characteristics of a type.

</description>
<parameters>
<parameter name="G_TYPE_FLAG_ABSTRACT">
<parameter_description> Indicates an abstract type. No instances can be
created for an abstract type
</parameter_description>
</parameter>
<parameter name="G_TYPE_FLAG_VALUE_ABSTRACT">
<parameter_description> Indicates an abstract value type, i.e. a type
that introduces a value table, but can't be used for
g_value_init()
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GTypeFundamentalFlags">
<description>
Bit masks used to check or determine specific characteristics of a
fundamental type.

</description>
<parameters>
<parameter name="G_TYPE_FLAG_CLASSED">
<parameter_description> Indicates a classed type
</parameter_description>
</parameter>
<parameter name="G_TYPE_FLAG_INSTANTIATABLE">
<parameter_description> Indicates an instantiable type (implies classed)
</parameter_description>
</parameter>
<parameter name="G_TYPE_FLAG_DERIVABLE">
<parameter_description> Indicates a flat derivable type
</parameter_description>
</parameter>
<parameter name="G_TYPE_FLAG_DEEP_DERIVABLE">
<parameter_description> Indicates a deep derivable type (implies derivable)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GUnicodeBreakType">
<description>
These are the possible line break classifications.

Since new unicode versions may add new types here, applications should be ready 
to handle unknown values. They may be regarded as %G_UNICODE_BREAK_UNKNOWN.

See [Unicode Line Breaking Algorithm](http://www.unicode.org/unicode/reports/tr14/).

</description>
<parameters>
<parameter name="G_UNICODE_BREAK_MANDATORY">
<parameter_description> Mandatory Break (BK)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_CARRIAGE_RETURN">
<parameter_description> Carriage Return (CR)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_LINE_FEED">
<parameter_description> Line Feed (LF)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_COMBINING_MARK">
<parameter_description> Attached Characters and Combining Marks (CM)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_SURROGATE">
<parameter_description> Surrogates (SG)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_ZERO_WIDTH_SPACE">
<parameter_description> Zero Width Space (ZW)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_INSEPARABLE">
<parameter_description> Inseparable (IN)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_NON_BREAKING_GLUE">
<parameter_description> Non-breaking (&quot;Glue&quot;) (GL)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_CONTINGENT">
<parameter_description> Contingent Break Opportunity (CB)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_SPACE">
<parameter_description> Space (SP)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_AFTER">
<parameter_description> Break Opportunity After (BA)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_BEFORE">
<parameter_description> Break Opportunity Before (BB)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_BEFORE_AND_AFTER">
<parameter_description> Break Opportunity Before and After (B2)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_HYPHEN">
<parameter_description> Hyphen (HY)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_NON_STARTER">
<parameter_description> Nonstarter (NS)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_OPEN_PUNCTUATION">
<parameter_description> Opening Punctuation (OP)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_CLOSE_PUNCTUATION">
<parameter_description> Closing Punctuation (CL)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_QUOTATION">
<parameter_description> Ambiguous Quotation (QU)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_EXCLAMATION">
<parameter_description> Exclamation/Interrogation (EX)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_IDEOGRAPHIC">
<parameter_description> Ideographic (ID)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_NUMERIC">
<parameter_description> Numeric (NU)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_INFIX_SEPARATOR">
<parameter_description> Infix Separator (Numeric) (IS)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_SYMBOL">
<parameter_description> Symbols Allowing Break After (SY)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_ALPHABETIC">
<parameter_description> Ordinary Alphabetic and Symbol Characters (AL)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_PREFIX">
<parameter_description> Prefix (Numeric) (PR)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_POSTFIX">
<parameter_description> Postfix (Numeric) (PO)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_COMPLEX_CONTEXT">
<parameter_description> Complex Content Dependent (South East Asian) (SA)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_AMBIGUOUS">
<parameter_description> Ambiguous (Alphabetic or Ideographic) (AI)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_UNKNOWN">
<parameter_description> Unknown (XX)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_NEXT_LINE">
<parameter_description> Next Line (NL)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_WORD_JOINER">
<parameter_description> Word Joiner (WJ)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_HANGUL_L_JAMO">
<parameter_description> Hangul L Jamo (JL)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_HANGUL_V_JAMO">
<parameter_description> Hangul V Jamo (JV)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_HANGUL_T_JAMO">
<parameter_description> Hangul T Jamo (JT)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_HANGUL_LV_SYLLABLE">
<parameter_description> Hangul LV Syllable (H2)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE">
<parameter_description> Hangul LVT Syllable (H3)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_CLOSE_PARANTHESIS">
<parameter_description> Closing Parenthesis (CP). Since 2.28
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER">
<parameter_description> Conditional Japanese Starter (CJ). Since: 2.32
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_HEBREW_LETTER">
<parameter_description> Hebrew Letter (HL). Since: 2.32
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_REGIONAL_INDICATOR">
<parameter_description> Regional Indicator (RI). Since: 2.36
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_EMOJI_BASE">
<parameter_description> Emoji Base (EB). Since: 2.50
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_EMOJI_MODIFIER">
<parameter_description> Emoji Modifier (EM). Since: 2.50
</parameter_description>
</parameter>
<parameter name="G_UNICODE_BREAK_ZERO_WIDTH_JOINER">
<parameter_description> Zero Width Joiner (ZWJ). Since: 2.50
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GUnicodeScript">
<description>
The #GUnicodeScript enumeration identifies different writing
systems. The values correspond to the names as defined in the
Unicode standard. The enumeration has been added in GLib 2.14,
and is interchangeable with #PangoScript.

Note that new types may be added in the future. Applications
should be ready to handle unknown values.
See [Unicode Standard Annex #24: Script names](http://www.unicode.org/reports/tr24/).

</description>
<parameters>
<parameter name="G_UNICODE_SCRIPT_INVALID_CODE">
<parameter_description>
a value never returned from g_unichar_get_script()
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_COMMON">
<parameter_description>     a character used by multiple different scripts
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_INHERITED">
<parameter_description>  a mark glyph that takes its script from the
base glyph to which it is attached
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_ARABIC">
<parameter_description>     Arabic
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_ARMENIAN">
<parameter_description>   Armenian
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BENGALI">
<parameter_description>    Bengali
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BOPOMOFO">
<parameter_description>   Bopomofo
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_CHEROKEE">
<parameter_description>   Cherokee
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_COPTIC">
<parameter_description>     Coptic
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_CYRILLIC">
<parameter_description>   Cyrillic
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_DESERET">
<parameter_description>    Deseret
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_DEVANAGARI">
<parameter_description> Devanagari
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_ETHIOPIC">
<parameter_description>   Ethiopic
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_GEORGIAN">
<parameter_description>   Georgian
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_GOTHIC">
<parameter_description>     Gothic
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_GREEK">
<parameter_description>      Greek
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_GUJARATI">
<parameter_description>   Gujarati
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_GURMUKHI">
<parameter_description>   Gurmukhi
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_HAN">
<parameter_description>        Han
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_HANGUL">
<parameter_description>     Hangul
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_HEBREW">
<parameter_description>     Hebrew
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_HIRAGANA">
<parameter_description>   Hiragana
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_KANNADA">
<parameter_description>    Kannada
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_KATAKANA">
<parameter_description>   Katakana
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_KHMER">
<parameter_description>      Khmer
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_LAO">
<parameter_description>        Lao
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_LATIN">
<parameter_description>      Latin
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MALAYALAM">
<parameter_description>  Malayalam
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MONGOLIAN">
<parameter_description>  Mongolian
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MYANMAR">
<parameter_description>    Myanmar
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OGHAM">
<parameter_description>      Ogham
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OLD_ITALIC">
<parameter_description> Old Italic
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_ORIYA">
<parameter_description>      Oriya
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_RUNIC">
<parameter_description>      Runic
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SINHALA">
<parameter_description>    Sinhala
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SYRIAC">
<parameter_description>     Syriac
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TAMIL">
<parameter_description>      Tamil
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TELUGU">
<parameter_description>     Telugu
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_THAANA">
<parameter_description>     Thaana
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_THAI">
<parameter_description>       Thai
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TIBETAN">
<parameter_description>    Tibetan
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL">
<parameter_description>
Canadian Aboriginal
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_YI">
<parameter_description>         Yi
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TAGALOG">
<parameter_description>    Tagalog
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_HANUNOO">
<parameter_description>    Hanunoo
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BUHID">
<parameter_description>      Buhid
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TAGBANWA">
<parameter_description>   Tagbanwa
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BRAILLE">
<parameter_description>    Braille
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_CYPRIOT">
<parameter_description>    Cypriot
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_LIMBU">
<parameter_description>      Limbu
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OSMANYA">
<parameter_description>    Osmanya
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SHAVIAN">
<parameter_description>    Shavian
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_LINEAR_B">
<parameter_description>   Linear B
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TAI_LE">
<parameter_description>     Tai Le
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_UGARITIC">
<parameter_description>   Ugaritic
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_NEW_TAI_LUE">
<parameter_description>
New Tai Lue
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BUGINESE">
<parameter_description>   Buginese
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_GLAGOLITIC">
<parameter_description> Glagolitic
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TIFINAGH">
<parameter_description>   Tifinagh
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SYLOTI_NAGRI">
<parameter_description>
Syloti Nagri
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OLD_PERSIAN">
<parameter_description>
Old Persian
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_KHAROSHTHI">
<parameter_description> Kharoshthi
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_UNKNOWN">
<parameter_description>    an unassigned code point
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BALINESE">
<parameter_description>   Balinese
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_CUNEIFORM">
<parameter_description>  Cuneiform
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_PHOENICIAN">
<parameter_description> Phoenician
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_PHAGS_PA">
<parameter_description>   Phags-pa
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_NKO">
<parameter_description>        N'Ko
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_KAYAH_LI">
<parameter_description>   Kayah Li. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_LEPCHA">
<parameter_description>     Lepcha. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_REJANG">
<parameter_description>     Rejang. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SUNDANESE">
<parameter_description>  Sundanese. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SAURASHTRA">
<parameter_description> Saurashtra. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_CHAM">
<parameter_description>       Cham. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OL_CHIKI">
<parameter_description>   Ol Chiki. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_VAI">
<parameter_description>        Vai. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_CARIAN">
<parameter_description>     Carian. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_LYCIAN">
<parameter_description>     Lycian. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_LYDIAN">
<parameter_description>     Lydian. Since 2.16.3
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_AVESTAN">
<parameter_description>    Avestan. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BAMUM">
<parameter_description>      Bamum. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS">
<parameter_description>
Egyptian Hieroglpyhs. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC">
<parameter_description>
Imperial Aramaic. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI">
<parameter_description>
Inscriptional Pahlavi. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN">
<parameter_description>
Inscriptional Parthian. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_JAVANESE">
<parameter_description>   Javanese. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_KAITHI">
<parameter_description>     Kaithi. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_LISU">
<parameter_description>       Lisu. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MEETEI_MAYEK">
<parameter_description>
Meetei Mayek. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN">
<parameter_description>
Old South Arabian. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OLD_TURKIC">
<parameter_description> Old Turkic. Since 2.28
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SAMARITAN">
<parameter_description>  Samaritan. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TAI_THAM">
<parameter_description>   Tai Tham. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TAI_VIET">
<parameter_description>   Tai Viet. Since 2.26
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BATAK">
<parameter_description>      Batak. Since 2.28
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BRAHMI">
<parameter_description>     Brahmi. Since 2.28
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MANDAIC">
<parameter_description>    Mandaic. Since 2.28
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_CHAKMA">
<parameter_description>               Chakma. Since: 2.32
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MEROITIC_CURSIVE">
<parameter_description>     Meroitic Cursive. Since: 2.32
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS">
<parameter_description> Meroitic Hieroglyphs. Since: 2.32
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MIAO">
<parameter_description>                 Miao. Since: 2.32
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SHARADA">
<parameter_description>              Sharada. Since: 2.32
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SORA_SOMPENG">
<parameter_description>         Sora Sompeng. Since: 2.32
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TAKRI">
<parameter_description>                Takri. Since: 2.32
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BASSA_VAH">
<parameter_description>            Bassa. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN">
<parameter_description>   Caucasian Albanian. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_DUPLOYAN">
<parameter_description>             Duployan. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_ELBASAN">
<parameter_description>              Elbasan. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_GRANTHA">
<parameter_description>              Grantha. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_KHOJKI">
<parameter_description>               Kjohki. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_KHUDAWADI">
<parameter_description>            Khudawadi, Sindhi. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_LINEAR_A">
<parameter_description>             Linear A. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MAHAJANI">
<parameter_description>             Mahajani. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MANICHAEAN">
<parameter_description>           Manichaean. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MENDE_KIKAKUI">
<parameter_description>        Mende Kikakui. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MODI">
<parameter_description>                 Modi. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MRO">
<parameter_description>                  Mro. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_NABATAEAN">
<parameter_description>            Nabataean. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN">
<parameter_description>    Old North Arabian. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OLD_PERMIC">
<parameter_description>           Old Permic. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_PAHAWH_HMONG">
<parameter_description>         Pahawh Hmong. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_PALMYRENE">
<parameter_description>            Palmyrene. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_PAU_CIN_HAU">
<parameter_description>          Pau Cin Hau. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_PSALTER_PAHLAVI">
<parameter_description>      Psalter Pahlavi. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SIDDHAM">
<parameter_description>              Siddham. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TIRHUTA">
<parameter_description>              Tirhuta. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_WARANG_CITI">
<parameter_description>          Warang Citi. Since: 2.42
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_AHOM">
<parameter_description>                 Ahom. Since: 2.48
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS">
<parameter_description> Anatolian Hieroglyphs. Since: 2.48
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_HATRAN">
<parameter_description>               Hatran. Since: 2.48
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MULTANI">
<parameter_description>              Multani. Since: 2.48
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OLD_HUNGARIAN">
<parameter_description>        Old Hungarian. Since: 2.48
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SIGNWRITING">
<parameter_description>          Signwriting. Since: 2.48
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_ADLAM">
<parameter_description>                Adlam. Since: 2.50
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_BHAIKSUKI">
<parameter_description>            Bhaiksuki. Since: 2.50
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MARCHEN">
<parameter_description>              Marchen. Since: 2.50
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_NEWA">
<parameter_description>                 Newa. Since: 2.50
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_OSAGE">
<parameter_description>                Osage. Since: 2.50
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_TANGUT">
<parameter_description>               Tangut. Since: 2.50
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_MASARAM_GONDI">
<parameter_description>        Masaram Gondi. Since: 2.54
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_NUSHU">
<parameter_description>                Nushu. Since: 2.54
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_SOYOMBO">
<parameter_description>              Soyombo. Since: 2.54
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SCRIPT_ZANABAZAR_SQUARE">
<parameter_description>     Zanabazar Square. Since: 2.54
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GUnicodeType">
<description>
These are the possible character classifications from the
Unicode specification.
See [Unicode Character Database](http://www.unicode.org/reports/tr44/#General_Category_Values).

</description>
<parameters>
<parameter name="G_UNICODE_CONTROL">
<parameter_description> General category &quot;Other, Control&quot; (Cc)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_FORMAT">
<parameter_description> General category &quot;Other, Format&quot; (Cf)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_UNASSIGNED">
<parameter_description> General category &quot;Other, Not Assigned&quot; (Cn)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_PRIVATE_USE">
<parameter_description> General category &quot;Other, Private Use&quot; (Co)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SURROGATE">
<parameter_description> General category &quot;Other, Surrogate&quot; (Cs)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_LOWERCASE_LETTER">
<parameter_description> General category &quot;Letter, Lowercase&quot; (Ll)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_MODIFIER_LETTER">
<parameter_description> General category &quot;Letter, Modifier&quot; (Lm)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_OTHER_LETTER">
<parameter_description> General category &quot;Letter, Other&quot; (Lo)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_TITLECASE_LETTER">
<parameter_description> General category &quot;Letter, Titlecase&quot; (Lt)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_UPPERCASE_LETTER">
<parameter_description> General category &quot;Letter, Uppercase&quot; (Lu)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SPACING_MARK">
<parameter_description> General category &quot;Mark, Spacing&quot; (Mc)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_ENCLOSING_MARK">
<parameter_description> General category &quot;Mark, Enclosing&quot; (Me)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_NON_SPACING_MARK">
<parameter_description> General category &quot;Mark, Nonspacing&quot; (Mn)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_DECIMAL_NUMBER">
<parameter_description> General category &quot;Number, Decimal Digit&quot; (Nd)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_LETTER_NUMBER">
<parameter_description> General category &quot;Number, Letter&quot; (Nl)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_OTHER_NUMBER">
<parameter_description> General category &quot;Number, Other&quot; (No)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_CONNECT_PUNCTUATION">
<parameter_description> General category &quot;Punctuation, Connector&quot; (Pc)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_DASH_PUNCTUATION">
<parameter_description> General category &quot;Punctuation, Dash&quot; (Pd)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_CLOSE_PUNCTUATION">
<parameter_description> General category &quot;Punctuation, Close&quot; (Pe)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_FINAL_PUNCTUATION">
<parameter_description> General category &quot;Punctuation, Final quote&quot; (Pf)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_INITIAL_PUNCTUATION">
<parameter_description> General category &quot;Punctuation, Initial quote&quot; (Pi)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_OTHER_PUNCTUATION">
<parameter_description> General category &quot;Punctuation, Other&quot; (Po)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_OPEN_PUNCTUATION">
<parameter_description> General category &quot;Punctuation, Open&quot; (Ps)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_CURRENCY_SYMBOL">
<parameter_description> General category &quot;Symbol, Currency&quot; (Sc)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_MODIFIER_SYMBOL">
<parameter_description> General category &quot;Symbol, Modifier&quot; (Sk)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_MATH_SYMBOL">
<parameter_description> General category &quot;Symbol, Math&quot; (Sm)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_OTHER_SYMBOL">
<parameter_description> General category &quot;Symbol, Other&quot; (So)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_LINE_SEPARATOR">
<parameter_description> General category &quot;Separator, Line&quot; (Zl)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_PARAGRAPH_SEPARATOR">
<parameter_description> General category &quot;Separator, Paragraph&quot; (Zp)
</parameter_description>
</parameter>
<parameter name="G_UNICODE_SPACE_SEPARATOR">
<parameter_description> General category &quot;Separator, Space&quot; (Zs)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GUserDirectory">
<description>
These are logical ids for special directories which are defined
depending on the platform used. You should use g_get_user_special_dir()
to retrieve the full path associated to the logical id.

The #GUserDirectory enumeration can be extended at later date. Not
every platform has a directory for every logical id in this
enumeration.

Since: 2.14

</description>
<parameters>
<parameter name="G_USER_DIRECTORY_DESKTOP">
<parameter_description> the user's Desktop directory
</parameter_description>
</parameter>
<parameter name="G_USER_DIRECTORY_DOCUMENTS">
<parameter_description> the user's Documents directory
</parameter_description>
</parameter>
<parameter name="G_USER_DIRECTORY_DOWNLOAD">
<parameter_description> the user's Downloads directory
</parameter_description>
</parameter>
<parameter name="G_USER_DIRECTORY_MUSIC">
<parameter_description> the user's Music directory
</parameter_description>
</parameter>
<parameter name="G_USER_DIRECTORY_PICTURES">
<parameter_description> the user's Pictures directory
</parameter_description>
</parameter>
<parameter name="G_USER_DIRECTORY_PUBLIC_SHARE">
<parameter_description> the user's shared directory
</parameter_description>
</parameter>
<parameter name="G_USER_DIRECTORY_TEMPLATES">
<parameter_description> the user's Templates directory
</parameter_description>
</parameter>
<parameter name="G_USER_DIRECTORY_VIDEOS">
<parameter_description> the user's Movies directory
</parameter_description>
</parameter>
<parameter name="G_USER_N_DIRECTORIES">
<parameter_description> the number of enum values
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GVariantClass">
<description>
The range of possible top-level types of #GVariant instances.

Since: 2.24

</description>
<parameters>
<parameter name="G_VARIANT_CLASS_BOOLEAN">
<parameter_description> The #GVariant is a boolean.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_BYTE">
<parameter_description> The #GVariant is a byte.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_INT16">
<parameter_description> The #GVariant is a signed 16 bit integer.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_UINT16">
<parameter_description> The #GVariant is an unsigned 16 bit integer.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_INT32">
<parameter_description> The #GVariant is a signed 32 bit integer.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_UINT32">
<parameter_description> The #GVariant is an unsigned 32 bit integer.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_INT64">
<parameter_description> The #GVariant is a signed 64 bit integer.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_UINT64">
<parameter_description> The #GVariant is an unsigned 64 bit integer.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_HANDLE">
<parameter_description> The #GVariant is a file handle index.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_DOUBLE">
<parameter_description> The #GVariant is a double precision floating 
point value.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_STRING">
<parameter_description> The #GVariant is a normal string.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_OBJECT_PATH">
<parameter_description> The #GVariant is a D-Bus object path 
string.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_SIGNATURE">
<parameter_description> The #GVariant is a D-Bus signature string.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_VARIANT">
<parameter_description> The #GVariant is a variant.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_MAYBE">
<parameter_description> The #GVariant is a maybe-typed value.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_ARRAY">
<parameter_description> The #GVariant is an array.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_TUPLE">
<parameter_description> The #GVariant is a tuple.
</parameter_description>
</parameter>
<parameter name="G_VARIANT_CLASS_DICT_ENTRY">
<parameter_description> The #GVariant is a dictionary entry.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GVariantParseError">
<description>
Error codes returned by parsing text-format GVariants.

</description>
<parameters>
<parameter name="G_VARIANT_PARSE_ERROR_FAILED">
<parameter_description> generic error (unused)
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED">
<parameter_description> a non-basic #GVariantType was given where a basic type was expected
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE">
<parameter_description> cannot infer the #GVariantType
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED">
<parameter_description> an indefinite #GVariantType was given where a definite type was expected
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END">
<parameter_description> extra data after parsing finished
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_INVALID_CHARACTER">
<parameter_description> invalid character in number or unicode escape
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING">
<parameter_description> not a valid #GVariant format string
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH">
<parameter_description> not a valid object path
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE">
<parameter_description> not a valid type signature
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING">
<parameter_description> not a valid #GVariant type string
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE">
<parameter_description> could not find a common type for array entries
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE">
<parameter_description> the numerical value is out of range of the given type
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG">
<parameter_description> the numerical value is out of range for any type
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_TYPE_ERROR">
<parameter_description> cannot parse as variant of the specified type
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN">
<parameter_description> an unexpected token was encountered
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD">
<parameter_description> an unknown keyword was encountered
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT">
<parameter_description> unterminated string constant
</parameter_description>
</parameter>
<parameter name="G_VARIANT_PARSE_ERROR_VALUE_EXPECTED">
<parameter_description> no value given
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GWin32OSType">
<description>
Type of Windows edition to check for at run-time.

</description>
<parameters>
<parameter name="G_WIN32_OS_ANY">
<parameter_description> The running system can be a workstation or a server edition of
Windows.  The type of the running system is therefore not checked.
</parameter_description>
</parameter>
<parameter name="G_WIN32_OS_WORKSTATION">
<parameter_description> The running system is a workstation edition of Windows,
such as Windows 7 Professional.
</parameter_description>
</parameter>
<parameter name="G_WIN32_OS_SERVER">
<parameter_description> The running system is a server edition of Windows, such as
Windows Server 2008 R2.
</parameter_description>
</parameter>
</parameters>
</enum>

<function name="g_abort">
<description>
A wrapper for the POSIX abort() function.

On Windows it is a function that makes extra effort (including a call
to abort()) to ensure that a debugger-catchable exception is thrown
before the program terminates.

See your C library manual for more details about abort().

Since: 2.50

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_access">
<description>
A wrapper for the POSIX access() function. This function is used to
test a pathname for one or several of read, write or execute
permissions, or just existence.

On Windows, the file protection mechanism is not at all POSIX-like,
and the underlying function in the C library only checks the
FAT-style READONLY attribute, and does not look at the ACL of a
file at all. This function is this in practise almost useless on
Windows. Software that needs to handle file permissions on Windows
more exactly should use the Win32 API.

See your C library manual for more details about access().

Since: 2.8

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> as in access()
</parameter_description>
</parameter>
</parameters>
<return> zero if the pathname refers to an existing file system
object that has all the tested permissions, or -1 otherwise
or on error.

</return>
</function>

<function name="g_alloca">
<description>
Allocates @size bytes on the stack; these bytes will be freed when the current
stack frame is cleaned up. This macro essentially just wraps the alloca()
function present on most UNIX variants.
Thus it provides the same advantages and pitfalls as alloca():

- alloca() is very fast, as on most systems it's implemented by just adjusting
the stack pointer register.

- It doesn't cause any memory fragmentation, within its scope, separate alloca()
blocks just build up and are released together at function end.

- Allocation sizes have to fit into the current stack frame. For instance in a
threaded environment on Linux, the per-thread stack size is limited to 2 Megabytes,
so be sparse with alloca() uses.

- Allocation failure due to insufficient stack space is not indicated with a %NULL
return like e.g. with malloc(). Instead, most systems probably handle it the same
way as out of stack space situations from infinite function recursion, i.e.
with a segmentation fault.

- Special care has to be taken when mixing alloca() with GNU C variable sized arrays.
Stack space allocated with alloca() in the same scope as a variable sized array
will be freed together with the variable sized array upon exit of that scope, and
not upon exit of the enclosing function scope.


</description>
<parameters>
<parameter name="size">
<parameter_description> number of bytes to allocate.
</parameter_description>
</parameter>
</parameters>
<return> space for @size bytes, allocated on the stack
</return>
</function>

<function name="g_array_append_val">
<description>
Adds the value on to the end of the array. The array will grow in
size automatically if necessary.

g_array_append_val() is a macro which uses a reference to the value
parameter @v. This means that you cannot use it with literal values
such as &quot;27&quot;. You must use variables.


</description>
<parameters>
<parameter name="a">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="v">
<parameter_description> the value to append to the #GArray
</parameter_description>
</parameter>
</parameters>
<return> the #GArray
</return>
</function>

<function name="g_array_append_vals">
<description>
Adds @len elements onto the end of the array.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a pointer to the elements to append to the end of the array
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of elements to append
</parameter_description>
</parameter>
</parameters>
<return> the #GArray
</return>
</function>

<function name="g_array_free">
<description>
Frees the memory allocated for the #GArray. If @free_segment is
%TRUE it frees the memory block holding the elements as well and
also each element if @array has a @element_free_func set. Pass
%FALSE if you want to free the #GArray wrapper but preserve the
underlying array for use elsewhere. If the reference count of @array
is greater than one, the #GArray wrapper is preserved but the size
of @array will be set to zero.

If array elements contain dynamically-allocated memory, they should
be freed separately.

This function is not thread-safe. If using a #GArray from multiple
threads, use only the atomic g_array_ref() and g_array_unref()
functions.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="free_segment">
<parameter_description> if %TRUE the actual element data is freed as well
</parameter_description>
</parameter>
</parameters>
<return> the element data if @free_segment is %FALSE, otherwise
%NULL. The element data should be freed using g_free().
</return>
</function>

<function name="g_array_get_element_size">
<description>
Gets the size of the elements in @array.

Since: 2.22

</description>
<parameters>
<parameter name="array">
<parameter_description> A #GArray
</parameter_description>
</parameter>
</parameters>
<return> Size of each element, in bytes

</return>
</function>

<function name="g_array_index">
<description>
Returns the element of a #GArray at the given index. The return
value is cast to the given type.

This example gets a pointer to an element in a #GArray:
|[&lt;!-- language=&quot;C&quot; --&gt;
EDayViewEvent *event;
// This gets a pointer to the 4th element in the array of
// EDayViewEvent structs.
event = &amp;g_array_index (events, EDayViewEvent, 3);
]|


</description>
<parameters>
<parameter name="a">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="t">
<parameter_description> the type of the elements
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> the index of the element to return
</parameter_description>
</parameter>
</parameters>
<return> the element of the #GArray at the index given by @i
</return>
</function>

<function name="g_array_insert_val">
<description>
Inserts an element into an array at the given index.

g_array_insert_val() is a macro which uses a reference to the value
parameter @v. This means that you cannot use it with literal values
such as &quot;27&quot;. You must use variables.


</description>
<parameters>
<parameter name="a">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> the index to place the element at
</parameter_description>
</parameter>
<parameter name="v">
<parameter_description> the value to insert into the array
</parameter_description>
</parameter>
</parameters>
<return> the #GArray
</return>
</function>

<function name="g_array_insert_vals">
<description>
Inserts @len elements into a #GArray at the given index.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index to place the elements at
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a pointer to the elements to insert
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of elements to insert
</parameter_description>
</parameter>
</parameters>
<return> the #GArray
</return>
</function>

<function name="g_array_new">
<description>
Creates a new #GArray with a reference count of 1.


</description>
<parameters>
<parameter name="zero_terminated">
<parameter_description> %TRUE if the array should have an extra element at
the end which is set to 0
</parameter_description>
</parameter>
<parameter name="clear_">
<parameter_description> %TRUE if #GArray elements should be automatically cleared
to 0 when they are allocated
</parameter_description>
</parameter>
<parameter name="element_size">
<parameter_description> the size of each element in bytes
</parameter_description>
</parameter>
</parameters>
<return> the new #GArray
</return>
</function>

<function name="g_array_prepend_val">
<description>
Adds the value on to the start of the array. The array will grow in
size automatically if necessary.

This operation is slower than g_array_append_val() since the
existing elements in the array have to be moved to make space for
the new element.

g_array_prepend_val() is a macro which uses a reference to the value
parameter @v. This means that you cannot use it with literal values
such as &quot;27&quot;. You must use variables.


</description>
<parameters>
<parameter name="a">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="v">
<parameter_description> the value to prepend to the #GArray
</parameter_description>
</parameter>
</parameters>
<return> the #GArray
</return>
</function>

<function name="g_array_prepend_vals">
<description>
Adds @len elements onto the start of the array.

This operation is slower than g_array_append_vals() since the
existing elements in the array have to be moved to make space for
the new elements.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a pointer to the elements to prepend to the start of the array
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of elements to prepend
</parameter_description>
</parameter>
</parameters>
<return> the #GArray
</return>
</function>

<function name="g_array_ref">
<description>
Atomically increments the reference count of @array by one.
This function is thread-safe and may be called from any thread.

Since: 2.22

</description>
<parameters>
<parameter name="array">
<parameter_description> A #GArray
</parameter_description>
</parameter>
</parameters>
<return> The passed in #GArray

</return>
</function>

<function name="g_array_remove_index">
<description>
Removes the element at the given index from a #GArray. The following
elements are moved down one place.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to remove
</parameter_description>
</parameter>
</parameters>
<return> the #GArray
</return>
</function>

<function name="g_array_remove_index_fast">
<description>
Removes the element at the given index from a #GArray. The last
element in the array is used to fill in the space, so this function
does not preserve the order of the #GArray. But it is faster than
g_array_remove_index().


</description>
<parameters>
<parameter name="array">
<parameter_description> a @GArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the element to remove
</parameter_description>
</parameter>
</parameters>
<return> the #GArray
</return>
</function>

<function name="g_array_remove_range">
<description>
Removes the given number of elements starting at the given index
from a #GArray.  The following elements are moved to close the gap.

Since: 2.4

</description>
<parameters>
<parameter name="array">
<parameter_description> a @GArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the first element to remove
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the number of elements to remove
</parameter_description>
</parameter>
</parameters>
<return> the #GArray

</return>
</function>

<function name="g_array_set_clear_func">
<description>
Sets a function to clear an element of @array.

The @clear_func will be called when an element in the array
data segment is removed and when the array is freed and data
segment is deallocated as well. @clear_func will be passed a
pointer to the element to clear, rather than the element itself.

Note that in contrast with other uses of #GDestroyNotify
functions, @clear_func is expected to clear the contents of
the array element it is given, but not free the element itself.

Since: 2.32

</description>
<parameters>
<parameter name="array">
<parameter_description> A #GArray
</parameter_description>
</parameter>
<parameter name="clear_func">
<parameter_description> a function to clear an element of @array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_array_set_size">
<description>
Sets the size of the array, expanding it if necessary. If the array
was created with @clear_ set to %TRUE, the new elements are set to 0.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the new size of the #GArray
</parameter_description>
</parameter>
</parameters>
<return> the #GArray
</return>
</function>

<function name="g_array_sized_new">
<description>
Creates a new #GArray with @reserved_size elements preallocated and
a reference count of 1. This avoids frequent reallocation, if you
are going to add many elements to the array. Note however that the
size of the array is still 0.


</description>
<parameters>
<parameter name="zero_terminated">
<parameter_description> %TRUE if the array should have an extra element at
the end with all bits cleared
</parameter_description>
</parameter>
<parameter name="clear_">
<parameter_description> %TRUE if all bits in the array should be cleared to 0 on
allocation
</parameter_description>
</parameter>
<parameter name="element_size">
<parameter_description> size of each element in the array
</parameter_description>
</parameter>
<parameter name="reserved_size">
<parameter_description> number of elements preallocated
</parameter_description>
</parameter>
</parameters>
<return> the new #GArray
</return>
</function>

<function name="g_array_sort">
<description>
Sorts a #GArray using @compare_func which should be a qsort()-style
comparison function (returns less than zero for first arg is less
than second arg, zero for equal, greater zero if first arg is
greater than second arg).

This is guaranteed to be a stable sort since version 2.32.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> comparison function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_array_sort_with_data">
<description>
Like g_array_sort(), but the comparison function receives an extra
user data argument.

This is guaranteed to be a stable sort since version 2.32.

There used to be a comment here about making the sort stable by
using the addresses of the elements in the comparison function.
This did not actually work, so any such code should be removed.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GArray
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> comparison function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @compare_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_array_unref">
<description>
Atomically decrements the reference count of @array by one. If the
reference count drops to 0, all memory allocated by the array is
released. This function is thread-safe and may be called from any
thread.

Since: 2.22

</description>
<parameters>
<parameter name="array">
<parameter_description> A #GArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_ascii_digit_value">
<description>
Determines the numeric value of a character as a decimal digit.
Differs from g_unichar_digit_value() because it takes a char, so
there's no worry about sign extension if characters are signed.


</description>
<parameters>
<parameter name="c">
<parameter_description> an ASCII character
</parameter_description>
</parameter>
</parameters>
<return> If @c is a decimal digit (according to g_ascii_isdigit()),
its numeric value. Otherwise, -1.
</return>
</function>

<function name="g_ascii_dtostr">
<description>
Converts a #gdouble to a string, using the '.' as
decimal point.

This function generates enough precision that converting
the string back using g_ascii_strtod() gives the same machine-number
(on machines with IEEE compatible 64bit doubles). It is
guaranteed that the size of the resulting string will never
be larger than @G_ASCII_DTOSTR_BUF_SIZE bytes, including the terminating
nul character, which is always added.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> A buffer to place the resulting string in
</parameter_description>
</parameter>
<parameter name="buf_len">
<parameter_description> The length of the buffer.
</parameter_description>
</parameter>
<parameter name="d">
<parameter_description> The #gdouble to convert
</parameter_description>
</parameter>
</parameters>
<return> The pointer to the buffer with the converted string.
</return>
</function>

<function name="g_ascii_formatd">
<description>
Converts a #gdouble to a string, using the '.' as
decimal point. To format the number you pass in
a printf()-style format string. Allowed conversion
specifiers are 'e', 'E', 'f', 'F', 'g' and 'G'.

The returned buffer is guaranteed to be nul-terminated.

If you just want to want to serialize the value into a
string, use g_ascii_dtostr().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> A buffer to place the resulting string in
</parameter_description>
</parameter>
<parameter name="buf_len">
<parameter_description> The length of the buffer.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> The printf()-style format to use for the
code to use for converting.
</parameter_description>
</parameter>
<parameter name="d">
<parameter_description> The #gdouble to convert
</parameter_description>
</parameter>
</parameters>
<return> The pointer to the buffer with the converted string.
</return>
</function>

<function name="g_ascii_isalnum">
<description>
Determines whether a character is alphanumeric.

Unlike the standard C library isalnum() function, this only
recognizes standard ASCII letters and ignores the locale,
returning %FALSE for all non-ASCII characters. Also, unlike
the standard library function, this takes a char, not an int,
so don't call it on %EOF, but no need to cast to #guchar before
passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII alphanumeric character
</return>
</function>

<function name="g_ascii_isalpha">
<description>
Determines whether a character is alphabetic (i.e. a letter).

Unlike the standard C library isalpha() function, this only
recognizes standard ASCII letters and ignores the locale,
returning %FALSE for all non-ASCII characters. Also, unlike
the standard library function, this takes a char, not an int,
so don't call it on %EOF, but no need to cast to #guchar before
passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII alphabetic character
</return>
</function>

<function name="g_ascii_iscntrl">
<description>
Determines whether a character is a control character.

Unlike the standard C library iscntrl() function, this only
recognizes standard ASCII control characters and ignores the
locale, returning %FALSE for all non-ASCII characters. Also,
unlike the standard library function, this takes a char, not
an int, so don't call it on %EOF, but no need to cast to #guchar
before passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII control character.
</return>
</function>

<function name="g_ascii_isdigit">
<description>
Determines whether a character is digit (0-9).

Unlike the standard C library isdigit() function, this takes
a char, not an int, so don't call it  on %EOF, but no need to
cast to #guchar before passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII digit.
</return>
</function>

<function name="g_ascii_isgraph">
<description>
Determines whether a character is a printing character and not a space.

Unlike the standard C library isgraph() function, this only
recognizes standard ASCII characters and ignores the locale,
returning %FALSE for all non-ASCII characters. Also, unlike
the standard library function, this takes a char, not an int,
so don't call it on %EOF, but no need to cast to #guchar before
passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII printing character other than space.
</return>
</function>

<function name="g_ascii_islower">
<description>
Determines whether a character is an ASCII lower case letter.

Unlike the standard C library islower() function, this only
recognizes standard ASCII letters and ignores the locale,
returning %FALSE for all non-ASCII characters. Also, unlike
the standard library function, this takes a char, not an int,
so don't call it on %EOF, but no need to worry about casting
to #guchar before passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII lower case letter
</return>
</function>

<function name="g_ascii_isprint">
<description>
Determines whether a character is a printing character.

Unlike the standard C library isprint() function, this only
recognizes standard ASCII characters and ignores the locale,
returning %FALSE for all non-ASCII characters. Also, unlike
the standard library function, this takes a char, not an int,
so don't call it on %EOF, but no need to cast to #guchar before
passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII printing character.
</return>
</function>

<function name="g_ascii_ispunct">
<description>
Determines whether a character is a punctuation character.

Unlike the standard C library ispunct() function, this only
recognizes standard ASCII letters and ignores the locale,
returning %FALSE for all non-ASCII characters. Also, unlike
the standard library function, this takes a char, not an int,
so don't call it on %EOF, but no need to cast to #guchar before
passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII punctuation character.
</return>
</function>

<function name="g_ascii_isspace">
<description>
Determines whether a character is a white-space character.

Unlike the standard C library isspace() function, this only
recognizes standard ASCII white-space and ignores the locale,
returning %FALSE for all non-ASCII characters. Also, unlike
the standard library function, this takes a char, not an int,
so don't call it on %EOF, but no need to cast to #guchar before
passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII white-space character
</return>
</function>

<function name="g_ascii_isupper">
<description>
Determines whether a character is an ASCII upper case letter.

Unlike the standard C library isupper() function, this only
recognizes standard ASCII letters and ignores the locale,
returning %FALSE for all non-ASCII characters. Also, unlike
the standard library function, this takes a char, not an int,
so don't call it on %EOF, but no need to worry about casting
to #guchar before passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII upper case letter
</return>
</function>

<function name="g_ascii_isxdigit">
<description>
Determines whether a character is a hexadecimal-digit character.

Unlike the standard C library isxdigit() function, this takes
a char, not an int, so don't call it on %EOF, but no need to
cast to #guchar before passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an ASCII hexadecimal-digit character.
</return>
</function>

<function name="g_ascii_strcasecmp">
<description>
Compare two strings, ignoring the case of ASCII characters.

Unlike the BSD strcasecmp() function, this only recognizes standard
ASCII letters and ignores the locale, treating all non-ASCII
bytes as if they are not letters.

This function should be used only on strings that are known to be
in encodings where the bytes corresponding to ASCII letters always
represent themselves. This includes UTF-8 and the ISO-8859-*
charsets, but not for instance double-byte encodings like the
Windows Codepage 932, where the trailing bytes of double-byte
characters include all ASCII letters. If you compare two CP932
strings using this function, you will get false matches.

Both @s1 and @s2 must be non-%NULL.


</description>
<parameters>
<parameter name="s1">
<parameter_description> string to compare with @s2
</parameter_description>
</parameter>
<parameter name="s2">
<parameter_description> string to compare with @s1
</parameter_description>
</parameter>
</parameters>
<return> 0 if the strings match, a negative value if @s1 &lt; @s2,
or a positive value if @s1 &gt; @s2.
</return>
</function>

<function name="g_ascii_strdown">
<description>
Converts all upper case ASCII letters to lower case ASCII letters.


</description>
<parameters>
<parameter name="str">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @str in bytes, or -1 if @str is nul-terminated
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string, with all the upper case
characters in @str converted to lower case, with semantics that
exactly match g_ascii_tolower(). (Note that this is unlike the
old g_strdown(), which modified the string in place.)
</return>
</function>

<function name="g_ascii_string_to_signed">
<description>
A convenience function for converting a string to a signed number.

This function assumes that @str contains only a number of the given
@base that is within inclusive bounds limited by @min and @max. If
this is true, then the converted number is stored in @out_num. An
empty string is not a valid input. A string with leading or
trailing whitespace is also an invalid input.

@base can be between 2 and 36 inclusive. Hexadecimal numbers must
not be prefixed with &quot;0x&quot; or &quot;0X&quot;. Such a problem does not exist
for octal numbers, since they were usually prefixed with a zero
which does not change the value of the parsed number.

Parsing failures result in an error with the %G_NUMBER_PARSER_ERROR
domain. If the input is invalid, the error code will be
%G_NUMBER_PARSER_ERROR_INVALID. If the parsed number is out of
bounds - %G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS.

See g_ascii_strtoll() if you have more complex needs such as
parsing a string which starts with a number, but then has other
characters.

Since: 2.54

</description>
<parameters>
<parameter name="str">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="base">
<parameter_description> base of a parsed number
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> a lower bound (inclusive)
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> an upper bound (inclusive)
</parameter_description>
</parameter>
<parameter name="out_num">
<parameter_description> a return location for a number
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @str was a number, otherwise %FALSE.

</return>
</function>

<function name="g_ascii_string_to_unsigned">
<description>
A convenience function for converting a string to an unsigned number.

This function assumes that @str contains only a number of the given
@base that is within inclusive bounds limited by @min and @max. If
this is true, then the converted number is stored in @out_num. An
empty string is not a valid input. A string with leading or
trailing whitespace is also an invalid input.

@base can be between 2 and 36 inclusive. Hexadecimal numbers must
not be prefixed with &quot;0x&quot; or &quot;0X&quot;. Such a problem does not exist
for octal numbers, since they were usually prefixed with a zero
which does not change the value of the parsed number.

Parsing failures result in an error with the %G_NUMBER_PARSER_ERROR
domain. If the input is invalid, the error code will be
%G_NUMBER_PARSER_ERROR_INVALID. If the parsed number is out of
bounds - %G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS.

See g_ascii_strtoull() if you have more complex needs such as
parsing a string which starts with a number, but then has other
characters.

Since: 2.54

</description>
<parameters>
<parameter name="str">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="base">
<parameter_description> base of a parsed number
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> a lower bound (inclusive)
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> an upper bound (inclusive)
</parameter_description>
</parameter>
<parameter name="out_num">
<parameter_description> a return location for a number
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @str was a number, otherwise %FALSE.

</return>
</function>

<function name="g_ascii_strncasecmp">
<description>
Compare @s1 and @s2, ignoring the case of ASCII characters and any
characters after the first @n in each string.

Unlike the BSD strcasecmp() function, this only recognizes standard
ASCII letters and ignores the locale, treating all non-ASCII
characters as if they are not letters.

The same warning as in g_ascii_strcasecmp() applies: Use this
function only on strings known to be in encodings where bytes
corresponding to ASCII letters always represent themselves.


</description>
<parameters>
<parameter name="s1">
<parameter_description> string to compare with @s2
</parameter_description>
</parameter>
<parameter name="s2">
<parameter_description> string to compare with @s1
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> number of characters to compare
</parameter_description>
</parameter>
</parameters>
<return> 0 if the strings match, a negative value if @s1 &lt; @s2,
or a positive value if @s1 &gt; @s2.
</return>
</function>

<function name="g_ascii_strtod">
<description>
Converts a string to a #gdouble value.

This function behaves like the standard strtod() function
does in the C locale. It does this without actually changing
the current locale, since that would not be thread-safe.
A limitation of the implementation is that this function
will still accept localized versions of infinities and NANs.

This function is typically used when reading configuration
files or other non-user input that should be locale independent.
To handle input from the user you should normally use the
locale-sensitive system strtod() function.

To convert from a #gdouble to a string in a locale-insensitive
way, use g_ascii_dtostr().

If the correct value would cause overflow, plus or minus %HUGE_VAL
is returned (according to the sign of the value), and %ERANGE is
stored in %errno. If the correct value would cause underflow,
zero is returned and %ERANGE is stored in %errno.

This function resets %errno before calling strtod() so that
you can reliably detect overflow and underflow.


</description>
<parameters>
<parameter name="nptr">
<parameter_description>    the string to convert to a numeric value.
</parameter_description>
</parameter>
<parameter name="endptr">
<parameter_description> if non-%NULL, it returns the
character after the last character used in the conversion.
</parameter_description>
</parameter>
</parameters>
<return> the #gdouble value.
</return>
</function>

<function name="g_ascii_strtoll">
<description>
Converts a string to a #gint64 value.
This function behaves like the standard strtoll() function
does in the C locale. It does this without actually
changing the current locale, since that would not be
thread-safe.

This function is typically used when reading configuration
files or other non-user input that should be locale independent.
To handle input from the user you should normally use the
locale-sensitive system strtoll() function.

If the correct value would cause overflow, %G_MAXINT64 or %G_MININT64
is returned, and `ERANGE` is stored in `errno`.
If the base is outside the valid range, zero is returned, and
`EINVAL` is stored in `errno`. If the
string conversion fails, zero is returned, and @endptr returns @nptr
(if @endptr is non-%NULL).

Since: 2.12

</description>
<parameters>
<parameter name="nptr">
<parameter_description>    the string to convert to a numeric value.
</parameter_description>
</parameter>
<parameter name="endptr">
<parameter_description> if non-%NULL, it returns the
character after the last character used in the conversion.
</parameter_description>
</parameter>
<parameter name="base">
<parameter_description>    to be used for the conversion, 2..36 or 0
</parameter_description>
</parameter>
</parameters>
<return> the #gint64 value or zero on error.

</return>
</function>

<function name="g_ascii_strtoull">
<description>
Converts a string to a #guint64 value.
This function behaves like the standard strtoull() function
does in the C locale. It does this without actually
changing the current locale, since that would not be
thread-safe.

This function is typically used when reading configuration
files or other non-user input that should be locale independent.
To handle input from the user you should normally use the
locale-sensitive system strtoull() function.

If the correct value would cause overflow, %G_MAXUINT64
is returned, and `ERANGE` is stored in `errno`.
If the base is outside the valid range, zero is returned, and
`EINVAL` is stored in `errno`.
If the string conversion fails, zero is returned, and @endptr returns
@nptr (if @endptr is non-%NULL).

Since: 2.2

</description>
<parameters>
<parameter name="nptr">
<parameter_description>    the string to convert to a numeric value.
</parameter_description>
</parameter>
<parameter name="endptr">
<parameter_description> if non-%NULL, it returns the
character after the last character used in the conversion.
</parameter_description>
</parameter>
<parameter name="base">
<parameter_description>    to be used for the conversion, 2..36 or 0
</parameter_description>
</parameter>
</parameters>
<return> the #guint64 value or zero on error.

</return>
</function>

<function name="g_ascii_strup">
<description>
Converts all lower case ASCII letters to upper case ASCII letters.


</description>
<parameters>
<parameter name="str">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @str in bytes, or -1 if @str is nul-terminated
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string, with all the lower case
characters in @str converted to upper case, with semantics that
exactly match g_ascii_toupper(). (Note that this is unlike the
old g_strup(), which modified the string in place.)
</return>
</function>

<function name="g_ascii_tolower">
<description>
Convert a character to ASCII lower case.

Unlike the standard C library tolower() function, this only
recognizes standard ASCII letters and ignores the locale, returning
all non-ASCII characters unchanged, even if they are lower case
letters in a particular character set. Also unlike the standard
library function, this takes and returns a char, not an int, so
don't call it on %EOF but no need to worry about casting to #guchar
before passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> the result of converting @c to lower case. If @c is
not an ASCII upper case letter, @c is returned unchanged.
</return>
</function>

<function name="g_ascii_toupper">
<description>
Convert a character to ASCII upper case.

Unlike the standard C library toupper() function, this only
recognizes standard ASCII letters and ignores the locale, returning
all non-ASCII characters unchanged, even if they are upper case
letters in a particular character set. Also unlike the standard
library function, this takes and returns a char, not an int, so
don't call it on %EOF but no need to worry about casting to #guchar
before passing a possibly non-ASCII character in.


</description>
<parameters>
<parameter name="c">
<parameter_description> any character
</parameter_description>
</parameter>
</parameters>
<return> the result of converting @c to upper case. If @c is not
an ASCII lower case letter, @c is returned unchanged.
</return>
</function>

<function name="g_ascii_xdigit_value">
<description>
Determines the numeric value of a character as a hexidecimal
digit. Differs from g_unichar_xdigit_value() because it takes
a char, so there's no worry about sign extension if characters
are signed.


</description>
<parameters>
<parameter name="c">
<parameter_description> an ASCII character.
</parameter_description>
</parameter>
</parameters>
<return> If @c is a hex digit (according to g_ascii_isxdigit()),
its numeric value. Otherwise, -1.
</return>
</function>

<function name="g_assert">
<description>
Debugging macro to terminate the application if the assertion
fails. If the assertion fails (i.e. the expression is not true),
an error message is logged and the application is terminated.

The macro can be turned off in final releases of code by defining
`G_DISABLE_ASSERT` when compiling the application, so code must
not depend on any side effects from @expr.

</description>
<parameters>
<parameter name="expr">
<parameter_description> the expression to check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_cmpfloat">
<description>
Debugging macro to compare two floating point numbers.

The effect of `g_assert_cmpfloat (n1, op, n2)` is
the same as `g_assert_true (n1 op n2)`. The advantage
of this macro is that it can produce a message that includes the
actual values of @n1 and @n2.

Since: 2.16

</description>
<parameters>
<parameter name="n1">
<parameter_description> an floating point number
</parameter_description>
</parameter>
<parameter name="cmp">
<parameter_description> The comparison operator to use.
One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.
</parameter_description>
</parameter>
<parameter name="n2">
<parameter_description> another floating point number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_cmphex">
<description>
Debugging macro to compare to unsigned integers.

This is a variant of g_assert_cmpuint() that displays the numbers
in hexadecimal notation in the message.

Since: 2.16

</description>
<parameters>
<parameter name="n1">
<parameter_description> an unsigned integer
</parameter_description>
</parameter>
<parameter name="cmp">
<parameter_description> The comparison operator to use.
One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.
</parameter_description>
</parameter>
<parameter name="n2">
<parameter_description> another unsigned integer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_cmpint">
<description>
Debugging macro to compare two integers.

The effect of `g_assert_cmpint (n1, op, n2)` is
the same as `g_assert_true (n1 op n2)`. The advantage
of this macro is that it can produce a message that includes the
actual values of @n1 and @n2.

Since: 2.16

</description>
<parameters>
<parameter name="n1">
<parameter_description> an integer
</parameter_description>
</parameter>
<parameter name="cmp">
<parameter_description> The comparison operator to use.
One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.
</parameter_description>
</parameter>
<parameter name="n2">
<parameter_description> another integer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_cmpmem">
<description>
Debugging macro to compare memory regions. If the comparison fails,
an error message is logged and the application is either terminated
or the testcase marked as failed.

The effect of `g_assert_cmpmem (m1, l1, m2, l2)` is
the same as `g_assert_true (l1 == l2 &amp;&amp; memcmp (m1, m2, l1) == 0)`.
The advantage of this macro is that it can produce a message that
includes the actual values of @l1 and @l2.

|[&lt;!-- language=&quot;C&quot; --&gt;
g_assert_cmpmem (buf-&gt;data, buf-&gt;len, expected, sizeof (expected));
]|

Since: 2.46

</description>
<parameters>
<parameter name="m1">
<parameter_description> pointer to a buffer
</parameter_description>
</parameter>
<parameter name="l1">
<parameter_description> length of @m1
</parameter_description>
</parameter>
<parameter name="m2">
<parameter_description> pointer to another buffer
</parameter_description>
</parameter>
<parameter name="l2">
<parameter_description> length of @m2
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_cmpstr">
<description>
Debugging macro to compare two strings. If the comparison fails,
an error message is logged and the application is either terminated
or the testcase marked as failed.
The strings are compared using g_strcmp0().

The effect of `g_assert_cmpstr (s1, op, s2)` is
the same as `g_assert_true (g_strcmp0 (s1, s2) op 0)`.
The advantage of this macro is that it can produce a message that
includes the actual values of @s1 and @s2.

|[&lt;!-- language=&quot;C&quot; --&gt; 
g_assert_cmpstr (mystring, ==, &quot;fubar&quot;);
]|

Since: 2.16

</description>
<parameters>
<parameter name="s1">
<parameter_description> a string (may be %NULL)
</parameter_description>
</parameter>
<parameter name="cmp">
<parameter_description> The comparison operator to use.
One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.
</parameter_description>
</parameter>
<parameter name="s2">
<parameter_description> another string (may be %NULL)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_cmpuint">
<description>
Debugging macro to compare two unsigned integers.

The effect of `g_assert_cmpuint (n1, op, n2)` is
the same as `g_assert_true (n1 op n2)`. The advantage
of this macro is that it can produce a message that includes the
actual values of @n1 and @n2.

Since: 2.16

</description>
<parameters>
<parameter name="n1">
<parameter_description> an unsigned integer
</parameter_description>
</parameter>
<parameter name="cmp">
<parameter_description> The comparison operator to use.
One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.
</parameter_description>
</parameter>
<parameter name="n2">
<parameter_description> another unsigned integer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_error">
<description>
Debugging macro to check that a method has returned
the correct #GError.

The effect of `g_assert_error (err, dom, c)` is
the same as `g_assert_true (err != NULL &amp;&amp; err-&gt;domain
== dom &amp;&amp; err-&gt;code == c)`. The advantage of this
macro is that it can produce a message that includes the incorrect
error message and code.

This can only be used to test for a specific error. If you want to
test that @err is set, but don't care what it's set to, just use
`g_assert (err != NULL)`

Since: 2.20

</description>
<parameters>
<parameter name="err">
<parameter_description> a #GError, possibly %NULL
</parameter_description>
</parameter>
<parameter name="dom">
<parameter_description> the expected error domain (a #GQuark)
</parameter_description>
</parameter>
<parameter name="c">
<parameter_description> the expected error code
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_false">
<description>
Debugging macro to check an expression is false.

If the assertion fails (i.e. the expression is not false),
an error message is logged and the application is either
terminated or the testcase marked as failed.

See g_test_set_nonfatal_assertions().

Since: 2.38

</description>
<parameters>
<parameter name="expr">
<parameter_description> the expression to check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_no_error">
<description>
Debugging macro to check that a #GError is not set.

The effect of `g_assert_no_error (err)` is
the same as `g_assert_true (err == NULL)`. The advantage
of this macro is that it can produce a message that includes
the error message and code.

Since: 2.20

</description>
<parameters>
<parameter name="err">
<parameter_description> a #GError, possibly %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_nonnull">
<description>
Debugging macro to check an expression is not %NULL.

If the assertion fails (i.e. the expression is %NULL),
an error message is logged and the application is either
terminated or the testcase marked as failed.

See g_test_set_nonfatal_assertions().

Since: 2.40

</description>
<parameters>
<parameter name="expr">
<parameter_description> the expression to check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_not_reached">
<description>
Debugging macro to terminate the application if it is ever
reached. If it is reached, an error message is logged and the
application is terminated.

The macro can be turned off in final releases of code by defining
`G_DISABLE_ASSERT` when compiling the application.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_assert_null">
<description>
Debugging macro to check an expression is %NULL.

If the assertion fails (i.e. the expression is not %NULL),
an error message is logged and the application is either
terminated or the testcase marked as failed.

See g_test_set_nonfatal_assertions().

Since: 2.38

</description>
<parameters>
<parameter name="expr">
<parameter_description> the expression to check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assert_true">
<description>
Debugging macro to check that an expression is true.

If the assertion fails (i.e. the expression is not true),
an error message is logged and the application is either
terminated or the testcase marked as failed.

See g_test_set_nonfatal_assertions().

Since: 2.38

</description>
<parameters>
<parameter name="expr">
<parameter_description> the expression to check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_assertion_message_expr">
<description>

</description>
<parameters>
<parameter name="domain">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="expr">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_length">
<description>
Returns the length of the queue.

Actually this function returns the number of data items in
the queue minus the number of waiting threads, so a negative
value means waiting threads, and a positive value means available
entries in the @queue. A return value of 0 could mean n entries
in the queue and n threads waiting. This can happen due to locking
of the queue or due to scheduling.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue.
</parameter_description>
</parameter>
</parameters>
<return> the length of the @queue
</return>
</function>

<function name="g_async_queue_length_unlocked">
<description>
Returns the length of the queue.

Actually this function returns the number of data items in
the queue minus the number of waiting threads, so a negative
value means waiting threads, and a positive value means available
entries in the @queue. A return value of 0 could mean n entries
in the queue and n threads waiting. This can happen due to locking
of the queue or due to scheduling.

This function must be called while holding the @queue's lock.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
</parameters>
<return> the length of the @queue.
</return>
</function>

<function name="g_async_queue_lock">
<description>
Acquires the @queue's lock. If another thread is already
holding the lock, this call will block until the lock
becomes available.

Call g_async_queue_unlock() to drop the lock again.

While holding the lock, you can only call the
g_async_queue_*_unlocked() functions on @queue. Otherwise,
deadlock may occur.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_new">
<description>
Creates a new asynchronous queue.


</description>
<parameters>
</parameters>
<return> a new #GAsyncQueue. Free with g_async_queue_unref()
</return>
</function>

<function name="g_async_queue_new_full">
<description>
Creates a new asynchronous queue and sets up a destroy notify
function that is used to free any remaining queue items when
the queue is destroyed after the final unref.

Since: 2.16

</description>
<parameters>
<parameter name="item_free_func">
<parameter_description> function to free queue elements
</parameter_description>
</parameter>
</parameters>
<return> a new #GAsyncQueue. Free with g_async_queue_unref()

</return>
</function>

<function name="g_async_queue_pop">
<description>
Pops data from the @queue. If @queue is empty, this function
blocks until data becomes available.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
</parameters>
<return> data from the queue
</return>
</function>

<function name="g_async_queue_pop_unlocked">
<description>
Pops data from the @queue. If @queue is empty, this function
blocks until data becomes available.

This function must be called while holding the @queue's lock.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
</parameters>
<return> data from the queue.
</return>
</function>

<function name="g_async_queue_push">
<description>
Pushes the @data into the @queue. @data must not be %NULL.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> @data to push into the @queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_push_front">
<description>
Pushes the @item into the @queue. @item must not be %NULL.
In contrast to g_async_queue_push(), this function
pushes the new item ahead of the items already in the queue,
so that it will be the next one to be popped off the queue.

Since: 2.46

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> data to push into the @queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_push_front_unlocked">
<description>
Pushes the @item into the @queue. @item must not be %NULL.
In contrast to g_async_queue_push_unlocked(), this function
pushes the new item ahead of the items already in the queue,
so that it will be the next one to be popped off the queue.

This function must be called while holding the @queue's lock.

Since: 2.46

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> data to push into the @queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_push_sorted">
<description>
Inserts @data into @queue using @func to determine the new
position.

This function requires that the @queue is sorted before pushing on
new elements, see g_async_queue_sort().

This function will lock @queue before it sorts the queue and unlock
it when it is finished.

For an example of @func see g_async_queue_sort().

Since: 2.10

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the @data to push into the @queue
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GCompareDataFunc is used to sort @queue
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_push_sorted_unlocked">
<description>
Inserts @data into @queue using @func to determine the new
position.

The sort function @func is passed two elements of the @queue.
It should return 0 if they are equal, a negative value if the
first element should be higher in the @queue or a positive value
if the first element should be lower in the @queue than the second
element.

This function requires that the @queue is sorted before pushing on
new elements, see g_async_queue_sort().

This function must be called while holding the @queue's lock.

For an example of @func see g_async_queue_sort().

Since: 2.10

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the @data to push into the @queue
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GCompareDataFunc is used to sort @queue
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_push_unlocked">
<description>
Pushes the @data into the @queue. @data must not be %NULL.

This function must be called while holding the @queue's lock.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> @data to push into the @queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_ref">
<description>
Increases the reference count of the asynchronous @queue by 1.
You do not need to hold the lock to call this function.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
</parameters>
<return> the @queue that was passed in (since 2.6)
</return>
</function>

<function name="g_async_queue_ref_unlocked">
<description>
Increases the reference count of the asynchronous @queue by 1.

Deprecated: 2.8: Reference counting is done atomically.
so g_async_queue_ref() can be used regardless of the @queue's
lock.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_remove">
<description>
Remove an item from the queue.

Since: 2.46

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> the data to remove from the @queue
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the item was removed

</return>
</function>

<function name="g_async_queue_remove_unlocked">
<description>
Remove an item from the queue.

This function must be called while holding the @queue's lock.

Since: 2.46

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> the data to remove from the @queue
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the item was removed

</return>
</function>

<function name="g_async_queue_sort">
<description>
Sorts @queue using @func.

The sort function @func is passed two elements of the @queue.
It should return 0 if they are equal, a negative value if the
first element should be higher in the @queue or a positive value
if the first element should be lower in the @queue than the second
element.

This function will lock @queue before it sorts the queue and unlock
it when it is finished.

If you were sorting a list of priority numbers to make sure the
lowest priority would be at the top of the queue, you could use:
|[&lt;!-- language=&quot;C&quot; --&gt;
gint32 id1;
gint32 id2;

id1 = GPOINTER_TO_INT (element1);
id2 = GPOINTER_TO_INT (element2);

return (id1 &gt; id2 ? +1 : id1 == id2 ? 0 : -1);
]|

Since: 2.10

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GCompareDataFunc is used to sort @queue
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_sort_unlocked">
<description>
Sorts @queue using @func.

The sort function @func is passed two elements of the @queue.
It should return 0 if they are equal, a negative value if the
first element should be higher in the @queue or a positive value
if the first element should be lower in the @queue than the second
element.

This function must be called while holding the @queue's lock.

Since: 2.10

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GCompareDataFunc is used to sort @queue
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_timed_pop">
<description>
Pops data from the @queue. If the queue is empty, blocks until
@end_time or until data becomes available.

If no data is received before @end_time, %NULL is returned.

To easily calculate @end_time, a combination of g_get_current_time()
and g_time_val_add() can be used.

Deprecated: use g_async_queue_timeout_pop().

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="end_time">
<parameter_description> a #GTimeVal, determining the final time
</parameter_description>
</parameter>
</parameters>
<return> data from the queue or %NULL, when no data is
received before @end_time.

</return>
</function>

<function name="g_async_queue_timed_pop_unlocked">
<description>
Pops data from the @queue. If the queue is empty, blocks until
@end_time or until data becomes available.

If no data is received before @end_time, %NULL is returned.

To easily calculate @end_time, a combination of g_get_current_time()
and g_time_val_add() can be used.

This function must be called while holding the @queue's lock.

Deprecated: use g_async_queue_timeout_pop_unlocked().

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="end_time">
<parameter_description> a #GTimeVal, determining the final time
</parameter_description>
</parameter>
</parameters>
<return> data from the queue or %NULL, when no data is
received before @end_time.

</return>
</function>

<function name="g_async_queue_timeout_pop">
<description>
Pops data from the @queue. If the queue is empty, blocks for
@timeout microseconds, or until data becomes available.

If no data is received before the timeout, %NULL is returned.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> the number of microseconds to wait
</parameter_description>
</parameter>
</parameters>
<return> data from the queue or %NULL, when no data is
received before the timeout.
</return>
</function>

<function name="g_async_queue_timeout_pop_unlocked">
<description>
Pops data from the @queue. If the queue is empty, blocks for
@timeout microseconds, or until data becomes available.

If no data is received before the timeout, %NULL is returned.

This function must be called while holding the @queue's lock.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> the number of microseconds to wait
</parameter_description>
</parameter>
</parameters>
<return> data from the queue or %NULL, when no data is
received before the timeout.
</return>
</function>

<function name="g_async_queue_try_pop">
<description>
Tries to pop data from the @queue. If no data is available,
%NULL is returned.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
</parameters>
<return> data from the queue or %NULL, when no data is
available immediately.
</return>
</function>

<function name="g_async_queue_try_pop_unlocked">
<description>
Tries to pop data from the @queue. If no data is available,
%NULL is returned.

This function must be called while holding the @queue's lock.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
</parameters>
<return> data from the queue or %NULL, when no data is
available immediately.
</return>
</function>

<function name="g_async_queue_unlock">
<description>
Releases the queue's lock.

Calling this function when you have not acquired
the with g_async_queue_lock() leads to undefined
behaviour.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_unref">
<description>
Decreases the reference count of the asynchronous @queue by 1.

If the reference count went to 0, the @queue will be destroyed
and the memory allocated will be freed. So you are not allowed
to use the @queue afterwards, as it might have disappeared.
You do not need to hold the lock to call this function.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_queue_unref_and_unlock">
<description>
Decreases the reference count of the asynchronous @queue by 1
and releases the lock. This function must be called while holding
the @queue's lock. If the reference count went to 0, the @queue
will be destroyed and the memory allocated will be freed.

Deprecated: 2.8: Reference counting is done atomically.
so g_async_queue_unref() can be used regardless of the @queue's
lock.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GAsyncQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_atexit">
<description>
Specifies a function to be called at normal program termination.

Since GLib 2.8.2, on Windows g_atexit() actually is a preprocessor
macro that maps to a call to the atexit() function in the C
library. This means that in case the code that calls g_atexit(),
i.e. atexit(), is in a DLL, the function will be called when the
DLL is detached from the program. This typically makes more sense
than that the function is called when the GLib DLL is detached,
which happened earlier when g_atexit() was a function in the GLib
DLL.

The behaviour of atexit() in the context of dynamically loaded
modules is not formally specified and varies wildly.

On POSIX systems, calling g_atexit() (or atexit()) in a dynamically
loaded module which is unloaded before the program terminates might
well cause a crash at program exit.

Some POSIX systems implement atexit() like Windows, and have each
dynamically loaded module maintain an own atexit chain that is
called when the module is unloaded.

On other POSIX systems, before a dynamically loaded module is
unloaded, the registered atexit functions (if any) residing in that
module are called, regardless where the code that registered them
resided. This is presumably the most robust approach.

As can be seen from the above, for portability it's best to avoid
calling g_atexit() (or atexit()) except in the main executable of a
program.

Deprecated:2.32: It is best to avoid g_atexit().

</description>
<parameters>
<parameter name="func">
<parameter_description> the function to call on normal program termination.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_atomic_int_add">
<description>
Atomically adds @val to the value of @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic += val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.

Before version 2.30, this function did not return a value
(but g_atomic_int_exchange_and_add() did, and had the same meaning).

Since: 2.4

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gint or #guint
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to add
</parameter_description>
</parameter>
</parameters>
<return> the value of @atomic before the add, signed

</return>
</function>

<function name="g_atomic_int_and">
<description>
Performs an atomic bitwise 'and' of the value of @atomic and @val,
storing the result back in @atomic.

This call acts as a full compiler and hardware memory barrier.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic &amp;= val; return tmp; }`.

Since: 2.30

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gint or #guint
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to 'and'
</parameter_description>
</parameter>
</parameters>
<return> the value of @atomic before the operation, unsigned

</return>
</function>

<function name="g_atomic_int_compare_and_exchange">
<description>
Compares @atomic to @oldval and, if equal, sets it to @newval.
If @atomic was not equal to @oldval then no change occurs.

This compare and exchange is done atomically.

Think of this operation as an atomic version of
`{ if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }`.

This call acts as a full compiler and hardware memory barrier.

Since: 2.4

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gint or #guint
</parameter_description>
</parameter>
<parameter name="oldval">
<parameter_description> the value to compare with
</parameter_description>
</parameter>
<parameter name="newval">
<parameter_description> the value to conditionally replace with
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the exchange took place

</return>
</function>

<function name="g_atomic_int_dec_and_test">
<description>
Decrements the value of @atomic by 1.

Think of this operation as an atomic version of
`{ *atomic -= 1; return (*atomic == 0); }`.

This call acts as a full compiler and hardware memory barrier.

Since: 2.4

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gint or #guint
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the resultant value is zero

</return>
</function>

<function name="g_atomic_int_exchange_and_add">
<description>
This function existed before g_atomic_int_add() returned the prior
value of the integer (which it now does).  It is retained only for
compatibility reasons.  Don't use this function in new code.

Since: 2.4
Deprecated: 2.30: Use g_atomic_int_add() instead.

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gint
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to add
</parameter_description>
</parameter>
</parameters>
<return> the value of @atomic before the add, signed
</return>
</function>

<function name="g_atomic_int_get">
<description>
Gets the current value of @atomic.

This call acts as a full compiler and hardware
memory barrier (before the get).

Since: 2.4

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gint or #guint
</parameter_description>
</parameter>
</parameters>
<return> the value of the integer

</return>
</function>

<function name="g_atomic_int_inc">
<description>
Increments the value of @atomic by 1.

Think of this operation as an atomic version of `{ *atomic += 1; }`.

This call acts as a full compiler and hardware memory barrier.

Since: 2.4

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gint or #guint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_atomic_int_or">
<description>
Performs an atomic bitwise 'or' of the value of @atomic and @val,
storing the result back in @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic |= val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.

Since: 2.30

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gint or #guint
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to 'or'
</parameter_description>
</parameter>
</parameters>
<return> the value of @atomic before the operation, unsigned

</return>
</function>

<function name="g_atomic_int_set">
<description>
Sets the value of @atomic to @newval.

This call acts as a full compiler and hardware
memory barrier (after the set).

Since: 2.4

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gint or #guint
</parameter_description>
</parameter>
<parameter name="newval">
<parameter_description> a new value to store
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_atomic_int_xor">
<description>
Performs an atomic bitwise 'xor' of the value of @atomic and @val,
storing the result back in @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic ^= val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.

Since: 2.30

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gint or #guint
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to 'xor'
</parameter_description>
</parameter>
</parameters>
<return> the value of @atomic before the operation, unsigned

</return>
</function>

<function name="g_atomic_pointer_add">
<description>
Atomically adds @val to the value of @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic += val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.

Since: 2.30

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gpointer-sized value
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to add
</parameter_description>
</parameter>
</parameters>
<return> the value of @atomic before the add, signed

</return>
</function>

<function name="g_atomic_pointer_and">
<description>
Performs an atomic bitwise 'and' of the value of @atomic and @val,
storing the result back in @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic &amp;= val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.

Since: 2.30

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gpointer-sized value
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to 'and'
</parameter_description>
</parameter>
</parameters>
<return> the value of @atomic before the operation, unsigned

</return>
</function>

<function name="g_atomic_pointer_compare_and_exchange">
<description>
Compares @atomic to @oldval and, if equal, sets it to @newval.
If @atomic was not equal to @oldval then no change occurs.

This compare and exchange is done atomically.

Think of this operation as an atomic version of
`{ if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }`.

This call acts as a full compiler and hardware memory barrier.

Since: 2.4

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gpointer-sized value
</parameter_description>
</parameter>
<parameter name="oldval">
<parameter_description> the value to compare with
</parameter_description>
</parameter>
<parameter name="newval">
<parameter_description> the value to conditionally replace with
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the exchange took place

</return>
</function>

<function name="g_atomic_pointer_get">
<description>
Gets the current value of @atomic.

This call acts as a full compiler and hardware
memory barrier (before the get).

Since: 2.4

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gpointer-sized value
</parameter_description>
</parameter>
</parameters>
<return> the value of the pointer

</return>
</function>

<function name="g_atomic_pointer_or">
<description>
Performs an atomic bitwise 'or' of the value of @atomic and @val,
storing the result back in @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic |= val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.

Since: 2.30

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gpointer-sized value
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to 'or'
</parameter_description>
</parameter>
</parameters>
<return> the value of @atomic before the operation, unsigned

</return>
</function>

<function name="g_atomic_pointer_set">
<description>
Sets the value of @atomic to @newval.

This call acts as a full compiler and hardware
memory barrier (after the set).

Since: 2.4

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gpointer-sized value
</parameter_description>
</parameter>
<parameter name="newval">
<parameter_description> a new value to store
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_atomic_pointer_xor">
<description>
Performs an atomic bitwise 'xor' of the value of @atomic and @val,
storing the result back in @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic ^= val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.

Since: 2.30

</description>
<parameters>
<parameter name="atomic">
<parameter_description> a pointer to a #gpointer-sized value
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to 'xor'
</parameter_description>
</parameter>
</parameters>
<return> the value of @atomic before the operation, unsigned

</return>
</function>

<function name="g_auto">
<description>
Helper to declare a variable with automatic cleanup.

The variable is cleaned up in a way appropriate to its type when the
variable goes out of scope.  The type must support this.

This feature is only supported on GCC and clang.  This macro is not
defined on other compilers and should not be used in programs that
are intended to be portable to those compilers.

This is meant to be used with stack-allocated structures and
non-pointer types.  For the (more commonly used) pointer version, see
g_autoptr().

This macro can be used to avoid having to do explicit cleanups of
local variables when exiting functions.  It often vastly simplifies
handling of error conditions, removing the need for various tricks
such as 'goto out' or repeating of cleanup code.  It is also helpful
for non-error cases.

Consider the following example:

|[
GVariant *
my_func(void)
{
g_auto(GQueue) queue = G_QUEUE_INIT;
g_auto(GVariantBuilder) builder;
g_auto(GStrv) strv;

g_variant_builder_init (&amp;builder, G_VARIANT_TYPE_VARDICT);
strv = g_strsplit(&quot;a:b:c&quot;, &quot;:&quot;, -1);

...

if (error_condition)
return NULL;

...

return g_variant_builder_end (&amp;builder);
}
]|

You must initialize the variable in some way -- either by use of an
initialiser or by ensuring that an _init function will be called on
it unconditionally before it goes out of scope.

Since: 2.44

</description>
<parameters>
<parameter name="TypeName">
<parameter_description> a supported variable type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_autofree">
<description>
Macro to add an attribute to pointer variable to ensure automatic
cleanup using g_free().

This macro differs from g_autoptr() in that it is an attribute supplied
before the type name, rather than wrapping the type definition.  Instead
of using a type-specific lookup, this macro always calls g_free() directly.

This means it's useful for any type that is returned from
g_malloc().

Otherwise, this macro has similar constraints as g_autoptr() - only
supported on GCC and clang, the variable must be initialized, etc.

|[
gboolean
operate_on_malloc_buf (void)
{
g_autofree guint8* membuf = NULL;

membuf = g_malloc (8192);

// Some computation on membuf

// membuf will be automatically freed here
return TRUE;
}
]|

Since: 2.44

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_autolist">
<description>
Helper to declare a list variable with automatic deep cleanup.

The list is deeply freed, in a way appropriate to the specified type, when the
variable goes out of scope.  The type must support this.

This feature is only supported on GCC and clang.  This macro is not
defined on other compilers and should not be used in programs that
are intended to be portable to those compilers.

This is meant to be used to declare lists of a type with a cleanup
function.  The type of the variable is a GList *.  You
must not add your own '*'.

This macro can be used to avoid having to do explicit cleanups of
local variables when exiting functions.  It often vastly simplifies
handling of error conditions, removing the need for various tricks
such as 'goto out' or repeating of cleanup code.  It is also helpful
for non-error cases.

See also g_autoslist(), g_autoptr() and g_steal_pointer().

Since: 2.56

</description>
<parameters>
<parameter name="TypeName">
<parameter_description> a supported variable type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_autoptr">
<description>
Helper to declare a pointer variable with automatic cleanup.

The variable is cleaned up in a way appropriate to its type when the
variable goes out of scope.  The type must support this.

This feature is only supported on GCC and clang.  This macro is not
defined on other compilers and should not be used in programs that
are intended to be portable to those compilers.

This is meant to be used to declare pointers to types with cleanup
functions.  The type of the variable is a pointer to @TypeName.  You
must not add your own '*'.

This macro can be used to avoid having to do explicit cleanups of
local variables when exiting functions.  It often vastly simplifies
handling of error conditions, removing the need for various tricks
such as 'goto out' or repeating of cleanup code.  It is also helpful
for non-error cases.

Consider the following example:

|[
gboolean
check_exists(GVariant *dict)
{
g_autoptr(GVariant) dirname, basename = NULL;
g_autofree gchar *path = NULL;

dirname = g_variant_lookup_value (dict, &quot;dirname&quot;, G_VARIANT_TYPE_STRING);

if (dirname == NULL)
return FALSE;

basename = g_variant_lookup_value (dict, &quot;basename&quot;, G_VARIANT_TYPE_STRING);

if (basename == NULL)
return FALSE;

path = g_build_filename (g_variant_get_string (dirname, NULL),
g_variant_get_string (basename, NULL),
NULL);

return g_access (path, R_OK) == 0;
}
]|

You must initialise the variable in some way -- either by use of an
initialiser or by ensuring that it is assigned to unconditionally
before it goes out of scope.

See also g_auto(), g_autofree() and g_steal_pointer().

Since: 2.44

</description>
<parameters>
<parameter name="TypeName">
<parameter_description> a supported variable type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_autoslist">
<description>
Helper to declare a singly linked list variable with automatic deep cleanup.

The list is deeply freed, in a way appropriate to the specified type, when the
variable goes out of scope.  The type must support this.

This feature is only supported on GCC and clang.  This macro is not
defined on other compilers and should not be used in programs that
are intended to be portable to those compilers.

This is meant to be used to declare lists of a type with a cleanup
function.  The type of the variable is a GSList *.  You
must not add your own '*'.

This macro can be used to avoid having to do explicit cleanups of
local variables when exiting functions.  It often vastly simplifies
handling of error conditions, removing the need for various tricks
such as 'goto out' or repeating of cleanup code.  It is also helpful
for non-error cases.

See also g_autolist(), g_autoptr() and g_steal_pointer().

Since: 2.56

</description>
<parameters>
<parameter name="TypeName">
<parameter_description> a supported variable type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_base64_decode">
<description>
Decode a sequence of Base-64 encoded text into binary data.  Note
that the returned binary data is not necessarily zero-terminated,
so it should not be used as a character string.

Since: 2.12

</description>
<parameters>
<parameter name="text">
<parameter_description> zero-terminated string with base64 text to decode
</parameter_description>
</parameter>
<parameter name="out_len">
<parameter_description> The length of the decoded data is written here
</parameter_description>
</parameter>
</parameters>
<return>
newly allocated buffer containing the binary data
that @text represents. The returned buffer must
be freed with g_free().

</return>
</function>

<function name="g_base64_decode_inplace">
<description>
Decode a sequence of Base-64 encoded text into binary data
by overwriting the input data.

Since: 2.20

</description>
<parameters>
<parameter name="text">
<parameter_description> zero-terminated
string with base64 text to decode
</parameter_description>
</parameter>
<parameter name="out_len">
<parameter_description> The length of the decoded data is written here
</parameter_description>
</parameter>
</parameters>
<return> The binary data that @text responds. This pointer
is the same as the input @text.

</return>
</function>

<function name="g_base64_decode_step">
<description>
Incrementally decode a sequence of binary data from its Base-64 stringified
representation. By calling this function multiple times you can convert
data in chunks to avoid having to have the full encoded data in memory.

The output buffer must be large enough to fit all the data that will
be written to it. Since base64 encodes 3 bytes in 4 chars you need
at least: (@len / 4) * 3 + 3 bytes (+ 3 may be needed in case of non-zero
state).

Since: 2.12

</description>
<parameters>
<parameter name="in">
<parameter_description> binary input data
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> max length of @in data to decode
</parameter_description>
</parameter>
<parameter name="out">
<parameter_description> output buffer
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> Saved state between steps, initialize to 0
</parameter_description>
</parameter>
<parameter name="save">
<parameter_description> Saved state between steps, initialize to 0
</parameter_description>
</parameter>
</parameters>
<return> The number of bytes of output that was written

</return>
</function>

<function name="g_base64_encode">
<description>
Encode a sequence of binary data into its Base-64 stringified
representation.

Since: 2.12

</description>
<parameters>
<parameter name="data">
<parameter_description> the binary data to encode
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @data
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated, zero-terminated Base-64
encoded string representing @data. The returned string must
be freed with g_free().

</return>
</function>

<function name="g_base64_encode_close">
<description>
Flush the status from a sequence of calls to g_base64_encode_step().

The output buffer must be large enough to fit all the data that will
be written to it. It will need up to 4 bytes, or up to 5 bytes if
line-breaking is enabled.

The @out array will not be automatically nul-terminated.

Since: 2.12

</description>
<parameters>
<parameter name="break_lines">
<parameter_description> whether to break long lines
</parameter_description>
</parameter>
<parameter name="out">
<parameter_description> pointer to destination buffer
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> Saved state from g_base64_encode_step()
</parameter_description>
</parameter>
<parameter name="save">
<parameter_description> Saved state from g_base64_encode_step()
</parameter_description>
</parameter>
</parameters>
<return> The number of bytes of output that was written

</return>
</function>

<function name="g_base64_encode_step">
<description>
Incrementally encode a sequence of binary data into its Base-64 stringified
representation. By calling this function multiple times you can convert
data in chunks to avoid having to have the full encoded data in memory.

When all of the data has been converted you must call
g_base64_encode_close() to flush the saved state.

The output buffer must be large enough to fit all the data that will
be written to it. Due to the way base64 encodes you will need
at least: (@len / 3 + 1) * 4 + 4 bytes (+ 4 may be needed in case of
non-zero state). If you enable line-breaking you will need at least:
((@len / 3 + 1) * 4 + 4) / 72 + 1 bytes of extra space.

@break_lines is typically used when putting base64-encoded data in emails.
It breaks the lines at 72 columns instead of putting all of the text on
the same line. This avoids problems with long lines in the email system.
Note however that it breaks the lines with `LF` characters, not
`CR LF` sequences, so the result cannot be passed directly to SMTP
or certain other protocols.

Since: 2.12

</description>
<parameters>
<parameter name="in">
<parameter_description> the binary data to encode
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @in
</parameter_description>
</parameter>
<parameter name="break_lines">
<parameter_description> whether to break long lines
</parameter_description>
</parameter>
<parameter name="out">
<parameter_description> pointer to destination buffer
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> Saved state between steps, initialize to 0
</parameter_description>
</parameter>
<parameter name="save">
<parameter_description> Saved state between steps, initialize to 0
</parameter_description>
</parameter>
</parameters>
<return> The number of bytes of output that was written

</return>
</function>

<function name="g_basename">
<description>
Gets the name of the file without any leading directory
components. It returns a pointer into the given file name
string.

Deprecated:2.2: Use g_path_get_basename() instead, but notice
that g_path_get_basename() allocates new memory for the
returned string, unlike this function which returns a pointer
into the argument.

</description>
<parameters>
<parameter name="file_name">
<parameter_description> the name of the file
</parameter_description>
</parameter>
</parameters>
<return> the name of the file without any leading
directory components

</return>
</function>

<function name="g_binding_get_flags">
<description>
Retrieves the flags passed when constructing the #GBinding.

Since: 2.26

</description>
<parameters>
<parameter name="binding">
<parameter_description> a #GBinding
</parameter_description>
</parameter>
</parameters>
<return> the #GBindingFlags used by the #GBinding

</return>
</function>

<function name="g_binding_get_source">
<description>
Retrieves the #GObject instance used as the source of the binding.

Since: 2.26

</description>
<parameters>
<parameter name="binding">
<parameter_description> a #GBinding
</parameter_description>
</parameter>
</parameters>
<return> the source #GObject

</return>
</function>

<function name="g_binding_get_source_property">
<description>
Retrieves the name of the property of #GBinding:source used as the source
of the binding.

Since: 2.26

</description>
<parameters>
<parameter name="binding">
<parameter_description> a #GBinding
</parameter_description>
</parameter>
</parameters>
<return> the name of the source property

</return>
</function>

<function name="g_binding_get_target">
<description>
Retrieves the #GObject instance used as the target of the binding.

Since: 2.26

</description>
<parameters>
<parameter name="binding">
<parameter_description> a #GBinding
</parameter_description>
</parameter>
</parameters>
<return> the target #GObject

</return>
</function>

<function name="g_binding_get_target_property">
<description>
Retrieves the name of the property of #GBinding:target used as the target
of the binding.

Since: 2.26

</description>
<parameters>
<parameter name="binding">
<parameter_description> a #GBinding
</parameter_description>
</parameter>
</parameters>
<return> the name of the target property

</return>
</function>

<function name="g_binding_unbind">
<description>
Explicitly releases the binding between the source and the target
property expressed by @binding.

This function will release the reference that is being held on
the @binding instance; if you want to hold on to the #GBinding instance
after calling g_binding_unbind(), you will need to hold a reference
to it.

Since: 2.38

</description>
<parameters>
<parameter name="binding">
<parameter_description> a #GBinding
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bit_lock">
<description>
Sets the indicated @lock_bit in @address.  If the bit is already
set, this call will block until g_bit_unlock() unsets the
corresponding bit.

Attempting to lock on two different bits within the same integer is
not supported and will very probably cause deadlocks.

The value of the bit that is set is (1u &lt;&lt; @bit).  If @bit is not
between 0 and 31 then the result is undefined.

This function accesses @address atomically.  All other accesses to
@address must be atomic in order for this function to work
reliably.

Since: 2.24

</description>
<parameters>
<parameter name="address">
<parameter_description> a pointer to an integer
</parameter_description>
</parameter>
<parameter name="lock_bit">
<parameter_description> a bit value between 0 and 31
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bit_nth_lsf">
<description>
Find the position of the first bit set in @mask, searching
from (but not including) @nth_bit upwards. Bits are numbered
from 0 (least significant) to sizeof(#gulong) * 8 - 1 (31 or 63,
usually). To start searching from the 0th bit, set @nth_bit to -1.


</description>
<parameters>
<parameter name="mask">
<parameter_description> a #gulong containing flags
</parameter_description>
</parameter>
<parameter name="nth_bit">
<parameter_description> the index of the bit to start the search from
</parameter_description>
</parameter>
</parameters>
<return> the index of the first bit set which is higher than @nth_bit, or -1
if no higher bits are set
</return>
</function>

<function name="g_bit_nth_msf">
<description>
Find the position of the first bit set in @mask, searching
from (but not including) @nth_bit downwards. Bits are numbered
from 0 (least significant) to sizeof(#gulong) * 8 - 1 (31 or 63,
usually). To start searching from the last bit, set @nth_bit to
-1 or GLIB_SIZEOF_LONG * 8.


</description>
<parameters>
<parameter name="mask">
<parameter_description> a #gulong containing flags
</parameter_description>
</parameter>
<parameter name="nth_bit">
<parameter_description> the index of the bit to start the search from
</parameter_description>
</parameter>
</parameters>
<return> the index of the first bit set which is lower than @nth_bit, or -1
if no lower bits are set
</return>
</function>

<function name="g_bit_storage">
<description>
Gets the number of bits used to hold @number,
e.g. if @number is 4, 3 bits are needed.


</description>
<parameters>
<parameter name="number">
<parameter_description> a #guint
</parameter_description>
</parameter>
</parameters>
<return> the number of bits used to hold @number
</return>
</function>

<function name="g_bit_trylock">
<description>
Sets the indicated @lock_bit in @address, returning %TRUE if
successful.  If the bit is already set, returns %FALSE immediately.

Attempting to lock on two different bits within the same integer is
not supported.

The value of the bit that is set is (1u &lt;&lt; @bit).  If @bit is not
between 0 and 31 then the result is undefined.

This function accesses @address atomically.  All other accesses to
@address must be atomic in order for this function to work
reliably.

Since: 2.24

</description>
<parameters>
<parameter name="address">
<parameter_description> a pointer to an integer
</parameter_description>
</parameter>
<parameter name="lock_bit">
<parameter_description> a bit value between 0 and 31
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the lock was acquired

</return>
</function>

<function name="g_bit_unlock">
<description>
Clears the indicated @lock_bit in @address.  If another thread is
currently blocked in g_bit_lock() on this same bit then it will be
woken up.

This function accesses @address atomically.  All other accesses to
@address must be atomic in order for this function to work
reliably.

Since: 2.24

</description>
<parameters>
<parameter name="address">
<parameter_description> a pointer to an integer
</parameter_description>
</parameter>
<parameter name="lock_bit">
<parameter_description> a bit value between 0 and 31
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_add_application">
<description>
Adds the application with @name and @exec to the list of
applications that have registered a bookmark for @uri into
@bookmark.

Every bookmark inside a #GBookmarkFile must have at least an
application registered.  Each application must provide a name, a
command line useful for launching the bookmark, the number of times
the bookmark has been registered by the application and the last
time the application registered this bookmark.

If @name is %NULL, the name of the application will be the
same returned by g_get_application_name(); if @exec is %NULL, the
command line will be a composition of the program name as
returned by g_get_prgname() and the &quot;\%u&quot; modifier, which will be
expanded to the bookmark's URI.

This function will automatically take care of updating the
registrations count and timestamping in case an application
with the same @name had already registered a bookmark for
@uri inside @bookmark.

If no bookmark for @uri is found, one is created.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the application registering the bookmark
or %NULL
</parameter_description>
</parameter>
<parameter name="exec">
<parameter_description> command line to be used to launch the bookmark or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_add_group">
<description>
Adds @group to the list of groups to which the bookmark for @uri
belongs to.

If no bookmark for @uri is found then it is created.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> the group name to be added
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_free">
<description>
Frees a #GBookmarkFile.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_get_added">
<description>
Gets the time the bookmark for @uri was added to @bookmark

In the event the URI cannot be found, -1 is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a timestamp

</return>
</function>

<function name="g_bookmark_file_get_app_info">
<description>
Gets the registration informations of @app_name for the bookmark for
@uri.  See g_bookmark_file_set_app_info() for more informations about
the returned data.

The string returned in @app_exec must be freed.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
event that no application with name @app_name has registered a bookmark
for @uri,  %FALSE is returned and error is set to
#G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED. In the event that unquoting
the command line fails, an error of the #G_SHELL_ERROR domain is
set and %FALSE is returned.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> an application's name
</parameter_description>
</parameter>
<parameter name="exec">
<parameter_description> return location for the command line of the application, or %NULL
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> return location for the registration count, or %NULL
</parameter_description>
</parameter>
<parameter name="stamp">
<parameter_description> return location for the last registration time, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success.

</return>
</function>

<function name="g_bookmark_file_get_applications">
<description>
Retrieves the names of the applications that have registered the
bookmark for @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location of the length of the returned list, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated %NULL-terminated array of strings.
Use g_strfreev() to free it.

</return>
</function>

<function name="g_bookmark_file_get_description">
<description>
Retrieves the description of the bookmark for @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string or %NULL if the specified
URI cannot be found.

</return>
</function>

<function name="g_bookmark_file_get_groups">
<description>
Retrieves the list of group names of the bookmark for @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

The returned array is %NULL terminated, so @length may optionally
be %NULL.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the length of the returned string, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated %NULL-terminated array of group names.
Use g_strfreev() to free it.

</return>
</function>

<function name="g_bookmark_file_get_icon">
<description>
Gets the icon of the bookmark for @uri.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="href">
<parameter_description> return location for the icon's location or %NULL
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> return location for the icon's MIME type or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the icon for the bookmark for the URI was found.
You should free the returned strings.

</return>
</function>

<function name="g_bookmark_file_get_is_private">
<description>
Gets whether the private flag of the bookmark for @uri is set.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
event that the private flag cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_INVALID_VALUE.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the private flag is set, %FALSE otherwise.

</return>
</function>

<function name="g_bookmark_file_get_mime_type">
<description>
Retrieves the MIME type of the resource pointed by @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
event that the MIME type cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_INVALID_VALUE.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string or %NULL if the specified
URI cannot be found.

</return>
</function>

<function name="g_bookmark_file_get_modified">
<description>
Gets the time when the bookmark for @uri was last modified.

In the event the URI cannot be found, -1 is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a timestamp

</return>
</function>

<function name="g_bookmark_file_get_size">
<description>
Gets the number of bookmarks inside @bookmark.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
</parameters>
<return> the number of bookmarks

</return>
</function>

<function name="g_bookmark_file_get_title">
<description>
Returns the title of the bookmark for @uri.

If @uri is %NULL, the title of @bookmark is returned.

In the event the URI cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string or %NULL if the specified
URI cannot be found.

</return>
</function>

<function name="g_bookmark_file_get_uris">
<description>
Returns all URIs of the bookmarks in the bookmark file @bookmark.
The array of returned URIs will be %NULL-terminated, so @length may
optionally be %NULL.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of returned URIs, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated %NULL-terminated array of strings.
Use g_strfreev() to free it.

</return>
</function>

<function name="g_bookmark_file_get_visited">
<description>
Gets the time the bookmark for @uri was last visited.

In the event the URI cannot be found, -1 is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a timestamp.

</return>
</function>

<function name="g_bookmark_file_has_application">
<description>
Checks whether the bookmark for @uri inside @bookmark has been
registered by application @name.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the application
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the application @name was found

</return>
</function>

<function name="g_bookmark_file_has_group">
<description>
Checks whether @group appears in the list of groups to which
the bookmark for @uri belongs to.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> the group name to be searched
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @group was found.

</return>
</function>

<function name="g_bookmark_file_has_item">
<description>
Looks whether the desktop bookmark has an item with its URI set to @uri.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @uri is inside @bookmark, %FALSE otherwise

</return>
</function>

<function name="g_bookmark_file_load_from_data">
<description>
Loads a bookmark file from memory into an empty #GBookmarkFile
structure.  If the object cannot be created then @error is set to a
#GBookmarkFileError.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> an empty #GBookmarkFile struct
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> desktop bookmarks
loaded in memory
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @data in bytes
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a desktop bookmark could be loaded.

</return>
</function>

<function name="g_bookmark_file_load_from_data_dirs">
<description>
This function looks for a desktop bookmark file named @file in the
paths returned from g_get_user_data_dir() and g_get_system_data_dirs(), 
loads the file into @bookmark and returns the file's full path in 
@full_path.  If the file could not be loaded then an %error is
set to either a #GFileError or #GBookmarkFileError.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> a relative path to a filename to open and parse
</parameter_description>
</parameter>
<parameter name="full_path">
<parameter_description> return location for a string
containing the full path of the file, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a key file could be loaded, %FALSE otherwise

</return>
</function>

<function name="g_bookmark_file_load_from_file">
<description>
Loads a desktop bookmark file into an empty #GBookmarkFile structure.
If the file could not be loaded then @error is set to either a #GFileError
or #GBookmarkFileError.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> an empty #GBookmarkFile struct
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the path of a filename to load, in the
GLib file name encoding
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a desktop bookmark file could be loaded

</return>
</function>

<function name="g_bookmark_file_move_item">
<description>
Changes the URI of a bookmark item from @old_uri to @new_uri.  Any
existing bookmark for @new_uri will be overwritten.  If @new_uri is
%NULL, then the bookmark is removed.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="old_uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="new_uri">
<parameter_description> a valid URI, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the URI was successfully changed

</return>
</function>

<function name="g_bookmark_file_new">
<description>
Creates a new empty #GBookmarkFile object.

Use g_bookmark_file_load_from_file(), g_bookmark_file_load_from_data()
or g_bookmark_file_load_from_data_dirs() to read an existing bookmark
file.

Since: 2.12

</description>
<parameters>
</parameters>
<return> an empty #GBookmarkFile

</return>
</function>

<function name="g_bookmark_file_remove_application">
<description>
Removes application registered with @name from the list of applications
that have registered a bookmark for @uri inside @bookmark.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
In the event that no application with name @app_name has registered
a bookmark for @uri,  %FALSE is returned and error is set to
#G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the application
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the application was successfully removed.

</return>
</function>

<function name="g_bookmark_file_remove_group">
<description>
Removes @group from the list of groups to which the bookmark
for @uri belongs to.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
In the event no group was defined, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_INVALID_VALUE.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> the group name to be removed
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @group was successfully removed.

</return>
</function>

<function name="g_bookmark_file_remove_item">
<description>
Removes the bookmark for @uri from the bookmark file @bookmark.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the bookmark was removed successfully.

</return>
</function>

<function name="g_bookmark_file_set_added">
<description>
Sets the time the bookmark for @uri was added into @bookmark.

If no bookmark for @uri is found then it is created.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="added">
<parameter_description> a timestamp or -1 to use the current time
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_set_app_info">
<description>
Sets the meta-data of application @name inside the list of
applications that have registered a bookmark for @uri inside
@bookmark.

You should rarely use this function; use g_bookmark_file_add_application()
and g_bookmark_file_remove_application() instead.

@name can be any UTF-8 encoded string used to identify an
application.
@exec can have one of these two modifiers: &quot;\%f&quot;, which will
be expanded as the local file name retrieved from the bookmark's
URI; &quot;\%u&quot;, which will be expanded as the bookmark's URI.
The expansion is done automatically when retrieving the stored
command line using the g_bookmark_file_get_app_info() function.
@count is the number of times the application has registered the
bookmark; if is &lt; 0, the current registration count will be increased
by one, if is 0, the application with @name will be removed from
the list of registered applications.
@stamp is the Unix time of the last registration; if it is -1, the
current time will be used.

If you try to remove an application by setting its registration count to
zero, and no bookmark for @uri is found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND; similarly,
in the event that no application @name has registered a bookmark
for @uri,  %FALSE is returned and error is set to
#G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED.  Otherwise, if no bookmark
for @uri is found, one is created.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> an application's name
</parameter_description>
</parameter>
<parameter name="exec">
<parameter_description> an application's command line
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of registrations done for this application
</parameter_description>
</parameter>
<parameter name="stamp">
<parameter_description> the time of the last registration for this application
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the application's meta-data was successfully
changed.

</return>
</function>

<function name="g_bookmark_file_set_description">
<description>
Sets @description as the description of the bookmark for @uri.

If @uri is %NULL, the description of @bookmark is set.

If a bookmark for @uri cannot be found then it is created.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI or %NULL
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_set_groups">
<description>
Sets a list of group names for the item with URI @uri.  Each previously
set group name list is removed.

If @uri cannot be found then an item for it is created.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> an item's URI
</parameter_description>
</parameter>
<parameter name="groups">
<parameter_description> an array of
group names, or %NULL to remove all groups
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> number of group name values in @groups
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_set_icon">
<description>
Sets the icon for the bookmark for @uri. If @href is %NULL, unsets
the currently set icon. @href can either be a full URL for the icon
file or the icon name following the Icon Naming specification.

If no bookmark for @uri is found one is created.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="href">
<parameter_description> the URI of the icon for the bookmark, or %NULL
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> the MIME type of the icon for the bookmark
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_set_is_private">
<description>
Sets the private flag of the bookmark for @uri.

If a bookmark for @uri cannot be found then it is created.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="is_private">
<parameter_description> %TRUE if the bookmark should be marked as private
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_set_mime_type">
<description>
Sets @mime_type as the MIME type of the bookmark for @uri.

If a bookmark for @uri cannot be found then it is created.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> a MIME type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_set_modified">
<description>
Sets the last time the bookmark for @uri was last modified.

If no bookmark for @uri is found then it is created.

The &quot;modified&quot; time should only be set when the bookmark's meta-data
was actually changed.  Every function of #GBookmarkFile that
modifies a bookmark also changes the modification time, except for
g_bookmark_file_set_visited().

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="modified">
<parameter_description> a timestamp or -1 to use the current time
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_set_title">
<description>
Sets @title as the title of the bookmark for @uri inside the
bookmark file @bookmark.

If @uri is %NULL, the title of @bookmark is set.

If a bookmark for @uri cannot be found then it is created.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI or %NULL
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_set_visited">
<description>
Sets the time the bookmark for @uri was last visited.

If no bookmark for @uri is found then it is created.

The &quot;visited&quot; time should only be set if the bookmark was launched, 
either using the command line retrieved by g_bookmark_file_get_app_info()
or by the default application for the bookmark's MIME type, retrieved
using g_bookmark_file_get_mime_type().  Changing the &quot;visited&quot; time
does not affect the &quot;modified&quot; time.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="visited">
<parameter_description> a timestamp or -1 to use the current time
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bookmark_file_to_data">
<description>
This function outputs @bookmark as a string.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the length of the returned string, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return>
a newly allocated string holding the contents of the #GBookmarkFile

</return>
</function>

<function name="g_bookmark_file_to_file">
<description>
This function outputs @bookmark into a file.  The write process is
guaranteed to be atomic by using g_file_set_contents() internally.

Since: 2.12

</description>
<parameters>
<parameter name="bookmark">
<parameter_description> a #GBookmarkFile
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> path of the output file
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file was successfully written.

</return>
</function>

<function name="g_boxed_copy">
<description>
Provide a copy of a boxed structure @src_boxed which is of type @boxed_type.


</description>
<parameters>
<parameter name="boxed_type">
<parameter_description> The type of @src_boxed.
</parameter_description>
</parameter>
<parameter name="src_boxed">
<parameter_description> The boxed structure to be copied.
</parameter_description>
</parameter>
</parameters>
<return> The newly created copy of the boxed
structure.
</return>
</function>

<function name="g_boxed_free">
<description>
Free the boxed structure @boxed which is of type @boxed_type.

</description>
<parameters>
<parameter name="boxed_type">
<parameter_description> The type of @boxed.
</parameter_description>
</parameter>
<parameter name="boxed">
<parameter_description> The boxed structure to be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_boxed_type_register_static">
<description>
This function creates a new %G_TYPE_BOXED derived type id for a new
boxed type with name @name. Boxed type handling functions have to be
provided to copy and free opaque boxed structures of this type.


</description>
<parameters>
<parameter name="name">
<parameter_description> Name of the new boxed type.
</parameter_description>
</parameter>
<parameter name="boxed_copy">
<parameter_description> Boxed structure copy function.
</parameter_description>
</parameter>
<parameter name="boxed_free">
<parameter_description> Boxed structure free function.
</parameter_description>
</parameter>
</parameters>
<return> New %G_TYPE_BOXED derived type id for @name.
</return>
</function>

<function name="g_build_filename">
<description>
Creates a filename from a series of elements using the correct
separator for filenames.

On Unix, this function behaves identically to `g_build_path
(G_DIR_SEPARATOR_S, first_element, ....)`.

On Windows, it takes into account that either the backslash
(`\` or slash (`/`) can be used as separator in filenames, but
otherwise behaves as on UNIX. When file pathname separators need
to be inserted, the one that last previously occurred in the
parameters (reading from left to right) is used.

No attempt is made to force the resulting filename to be an absolute
path. If the first element is a relative path, the result will
be a relative path. 


</description>
<parameters>
<parameter name="first_element">
<parameter_description> the first element in the path
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> remaining elements in path, terminated by %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string that must be freed with
g_free().
</return>
</function>

<function name="g_build_filename_valist">
<description>
Behaves exactly like g_build_filename(), but takes the path elements
as a va_list. This function is mainly meant for language bindings.

Since: 2.56

</description>
<parameters>
<parameter name="first_element">
<parameter_description> the first element in the path
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of remaining elements in path
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string that must be freed
with g_free().

</return>
</function>

<function name="g_build_filenamev">
<description>
Behaves exactly like g_build_filename(), but takes the path elements 
as a string array, instead of varargs. This function is mainly
meant for language bindings.

Since: 2.8

</description>
<parameters>
<parameter name="args">
<parameter_description> %NULL-terminated
array of strings containing the path elements.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string that must be freed
with g_free().

</return>
</function>

<function name="g_build_path">
<description>
Creates a path from a series of elements using @separator as the
separator between elements. At the boundary between two elements,
any trailing occurrences of separator in the first element, or
leading occurrences of separator in the second element are removed
and exactly one copy of the separator is inserted.

Empty elements are ignored.

The number of leading copies of the separator on the result is
the same as the number of leading copies of the separator on
the first non-empty element.

The number of trailing copies of the separator on the result is
the same as the number of trailing copies of the separator on
the last non-empty element. (Determination of the number of
trailing copies is done without stripping leading copies, so
if the separator is `ABA`, then `ABABA` has 1 trailing copy.)

However, if there is only a single non-empty element, and there
are no characters in that element not part of the leading or
trailing separators, then the result is exactly the original value
of that element.

Other than for determination of the number of leading and trailing
copies of the separator, elements consisting only of copies
of the separator are ignored.


</description>
<parameters>
<parameter name="separator">
<parameter_description> a string used to separator the elements of the path.
</parameter_description>
</parameter>
<parameter name="first_element">
<parameter_description> the first element in the path
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> remaining elements in path, terminated by %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string that must be freed with
g_free().
</return>
</function>

<function name="g_build_pathv">
<description>
Behaves exactly like g_build_path(), but takes the path elements 
as a string array, instead of varargs. This function is mainly
meant for language bindings.

Since: 2.8

</description>
<parameters>
<parameter name="separator">
<parameter_description> a string used to separator the elements of the path.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> %NULL-terminated
array of strings containing the path elements.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string that must be freed
with g_free().

</return>
</function>

<function name="g_byte_array_append">
<description>
Adds the given bytes to the end of the #GByteArray.
The array will grow in size automatically if necessary.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GByteArray
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the byte data to be added
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of bytes to add
</parameter_description>
</parameter>
</parameters>
<return> the #GByteArray
</return>
</function>

<function name="g_byte_array_free">
<description>
Frees the memory allocated by the #GByteArray. If @free_segment is
%TRUE it frees the actual byte data. If the reference count of
@array is greater than one, the #GByteArray wrapper is preserved but
the size of @array will be set to zero.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GByteArray
</parameter_description>
</parameter>
<parameter name="free_segment">
<parameter_description> if %TRUE the actual byte data is freed as well
</parameter_description>
</parameter>
</parameters>
<return> the element data if @free_segment is %FALSE, otherwise
%NULL.  The element data should be freed using g_free().
</return>
</function>

<function name="g_byte_array_free_to_bytes">
<description>
Transfers the data from the #GByteArray into a new immutable #GBytes.

The #GByteArray is freed unless the reference count of @array is greater
than one, the #GByteArray wrapper is preserved but the size of @array
will be set to zero.

This is identical to using g_bytes_new_take() and g_byte_array_free()
together.

Since: 2.32


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GByteArray
</parameter_description>
</parameter>
</parameters>
<return> a new immutable #GBytes representing same
byte data that was in the array
</return>
</function>

<function name="g_byte_array_new">
<description>
Creates a new #GByteArray with a reference count of 1.


</description>
<parameters>
</parameters>
<return> the new #GByteArray
</return>
</function>

<function name="g_byte_array_new_take">
<description>
Create byte array containing the data. The data will be owned by the array
and will be freed with g_free(), i.e. it could be allocated using g_strdup().

Since: 2.32


</description>
<parameters>
<parameter name="data">
<parameter_description> byte data for the array
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @data
</parameter_description>
</parameter>
</parameters>
<return> a new #GByteArray
</return>
</function>

<function name="g_byte_array_prepend">
<description>
Adds the given data to the start of the #GByteArray.
The array will grow in size automatically if necessary.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GByteArray
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the byte data to be added
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of bytes to add
</parameter_description>
</parameter>
</parameters>
<return> the #GByteArray
</return>
</function>

<function name="g_byte_array_ref">
<description>
Atomically increments the reference count of @array by one.
This function is thread-safe and may be called from any thread.

Since: 2.22

</description>
<parameters>
<parameter name="array">
<parameter_description> A #GByteArray
</parameter_description>
</parameter>
</parameters>
<return> The passed in #GByteArray

</return>
</function>

<function name="g_byte_array_remove_index">
<description>
Removes the byte at the given index from a #GByteArray.
The following bytes are moved down one place.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GByteArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the byte to remove
</parameter_description>
</parameter>
</parameters>
<return> the #GByteArray
</return>
</function>

<function name="g_byte_array_remove_index_fast">
<description>
Removes the byte at the given index from a #GByteArray. The last
element in the array is used to fill in the space, so this function
does not preserve the order of the #GByteArray. But it is faster
than g_byte_array_remove_index().


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GByteArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the byte to remove
</parameter_description>
</parameter>
</parameters>
<return> the #GByteArray
</return>
</function>

<function name="g_byte_array_remove_range">
<description>
Removes the given number of bytes starting at the given index from a
#GByteArray.  The following elements are moved to close the gap.

Since: 2.4

</description>
<parameters>
<parameter name="array">
<parameter_description> a @GByteArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the first byte to remove
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the number of bytes to remove
</parameter_description>
</parameter>
</parameters>
<return> the #GByteArray

</return>
</function>

<function name="g_byte_array_set_size">
<description>
Sets the size of the #GByteArray, expanding it if necessary.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GByteArray
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the new size of the #GByteArray
</parameter_description>
</parameter>
</parameters>
<return> the #GByteArray
</return>
</function>

<function name="g_byte_array_sized_new">
<description>
Creates a new #GByteArray with @reserved_size bytes preallocated.
This avoids frequent reallocation, if you are going to add many
bytes to the array. Note however that the size of the array is still
0.


</description>
<parameters>
<parameter name="reserved_size">
<parameter_description> number of bytes preallocated
</parameter_description>
</parameter>
</parameters>
<return> the new #GByteArray
</return>
</function>

<function name="g_byte_array_sort">
<description>
Sorts a byte array, using @compare_func which should be a
qsort()-style comparison function (returns less than zero for first
arg is less than second arg, zero for equal, greater than zero if
first arg is greater than second arg).

If two array elements compare equal, their order in the sorted array
is undefined. If you want equal elements to keep their order (i.e.
you want a stable sort) you can write a comparison function that,
if two elements would otherwise compare equal, compares them by
their addresses.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GByteArray
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> comparison function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_byte_array_sort_with_data">
<description>
Like g_byte_array_sort(), but the comparison function takes an extra
user data argument.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GByteArray
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> comparison function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @compare_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_byte_array_unref">
<description>
Atomically decrements the reference count of @array by one. If the
reference count drops to 0, all memory allocated by the array is
released. This function is thread-safe and may be called from any
thread.

Since: 2.22

</description>
<parameters>
<parameter name="array">
<parameter_description> A #GByteArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bytes_compare">
<description>
Compares the two #GBytes values.

This function can be used to sort GBytes instances in lexographical order.

Since: 2.32

</description>
<parameters>
<parameter name="bytes1">
<parameter_description> a pointer to a #GBytes
</parameter_description>
</parameter>
<parameter name="bytes2">
<parameter_description> a pointer to a #GBytes to compare with @bytes1
</parameter_description>
</parameter>
</parameters>
<return> a negative value if bytes2 is lesser, a positive value if bytes2 is
greater, and zero if bytes2 is equal to bytes1

</return>
</function>

<function name="g_bytes_equal">
<description>
Compares the two #GBytes values being pointed to and returns
%TRUE if they are equal.

This function can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using non-%NULL #GBytes pointers as keys in a #GHashTable.

Since: 2.32

</description>
<parameters>
<parameter name="bytes1">
<parameter_description> a pointer to a #GBytes
</parameter_description>
</parameter>
<parameter name="bytes2">
<parameter_description> a pointer to a #GBytes to compare with @bytes1
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two keys match.

</return>
</function>

<function name="g_bytes_get_data">
<description>
Get the byte data in the #GBytes. This data should not be modified.

This function will always return the same pointer for a given #GBytes.

%NULL may be returned if @size is 0. This is not guaranteed, as the #GBytes
may represent an empty string with @data non-%NULL and @size as 0. %NULL will
not be returned if @size is non-zero.

Since: 2.32

</description>
<parameters>
<parameter name="bytes">
<parameter_description> a #GBytes
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> location to return size of byte data
</parameter_description>
</parameter>
</parameters>
<return>
a pointer to the byte data, or %NULL

</return>
</function>

<function name="g_bytes_get_size">
<description>
Get the size of the byte data in the #GBytes.

This function will always return the same value for a given #GBytes.

Since: 2.32

</description>
<parameters>
<parameter name="bytes">
<parameter_description> a #GBytes
</parameter_description>
</parameter>
</parameters>
<return> the size

</return>
</function>

<function name="g_bytes_hash">
<description>
Creates an integer hash code for the byte data in the #GBytes.

This function can be passed to g_hash_table_new() as the @key_hash_func
parameter, when using non-%NULL #GBytes pointers as keys in a #GHashTable.

Since: 2.32

</description>
<parameters>
<parameter name="bytes">
<parameter_description> a pointer to a #GBytes key
</parameter_description>
</parameter>
</parameters>
<return> a hash value corresponding to the key.

</return>
</function>

<function name="g_bytes_new">
<description>
Creates a new #GBytes from @data.

@data is copied. If @size is 0, @data may be %NULL.

Since: 2.32

</description>
<parameters>
<parameter name="data">
<parameter_description>
the data to be used for the bytes
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
</parameters>
<return> a new #GBytes

</return>
</function>

<function name="g_bytes_new_from_bytes">
<description>
Creates a #GBytes which is a subsection of another #GBytes. The @offset +
@length may not be longer than the size of @bytes.

A reference to @bytes will be held by the newly created #GBytes until
the byte data is no longer needed.

Since 2.56, if @offset is 0 and @length matches the size of @bytes, then
@bytes will be returned with the reference count incremented by 1. If @bytes
is a slice of another #GBytes, then the resulting #GBytes will reference
the same #GBytes instead of @bytes. This allows consumers to simplify the
usage of #GBytes when asynchronously writing to streams.

Since: 2.32

</description>
<parameters>
<parameter name="bytes">
<parameter_description> a #GBytes
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset which subsection starts at
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of subsection
</parameter_description>
</parameter>
</parameters>
<return> a new #GBytes

</return>
</function>

<function name="g_bytes_new_static">
<description>
Creates a new #GBytes from static data.

@data must be static (ie: never modified or freed). It may be %NULL if @size
is 0.

Since: 2.32

</description>
<parameters>
<parameter name="data">
<parameter_description>
the data to be used for the bytes
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
</parameters>
<return> a new #GBytes

</return>
</function>

<function name="g_bytes_new_take">
<description>
Creates a new #GBytes from @data.

After this call, @data belongs to the bytes and may no longer be
modified by the caller.  g_free() will be called on @data when the
bytes is no longer in use. Because of this @data must have been created by
a call to g_malloc(), g_malloc0() or g_realloc() or by one of the many
functions that wrap these calls (such as g_new(), g_strdup(), etc).

For creating #GBytes with memory from other allocators, see
g_bytes_new_with_free_func().

@data may be %NULL if @size is 0.

Since: 2.32

</description>
<parameters>
<parameter name="data">
<parameter_description>
the data to be used for the bytes
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
</parameters>
<return> a new #GBytes

</return>
</function>

<function name="g_bytes_new_with_free_func">
<description>
Creates a #GBytes from @data.

When the last reference is dropped, @free_func will be called with the
@user_data argument.

@data must not be modified after this call is made until @free_func has
been called to indicate that the bytes is no longer in use.

@data may be %NULL if @size is 0.

Since: 2.32

</description>
<parameters>
<parameter name="data">
<parameter_description>
the data to be used for the bytes
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="free_func">
<parameter_description> the function to call to release the data
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @free_func
</parameter_description>
</parameter>
</parameters>
<return> a new #GBytes

</return>
</function>

<function name="g_bytes_ref">
<description>
Increase the reference count on @bytes.

Since: 2.32

</description>
<parameters>
<parameter name="bytes">
<parameter_description> a #GBytes
</parameter_description>
</parameter>
</parameters>
<return> the #GBytes

</return>
</function>

<function name="g_bytes_unref">
<description>
Releases a reference on @bytes.  This may result in the bytes being
freed. If @bytes is %NULL, it will return immediately.

Since: 2.32

</description>
<parameters>
<parameter name="bytes">
<parameter_description> a #GBytes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_bytes_unref_to_array">
<description>
Unreferences the bytes, and returns a new mutable #GByteArray containing
the same byte data.

As an optimization, the byte data is transferred to the array without copying
if this was the last reference to bytes and bytes was created with
g_bytes_new(), g_bytes_new_take() or g_byte_array_free_to_bytes(). In all
other cases the data is copied.

Since: 2.32

</description>
<parameters>
<parameter name="bytes">
<parameter_description> a #GBytes
</parameter_description>
</parameter>
</parameters>
<return> a new mutable #GByteArray containing the same byte data

</return>
</function>

<function name="g_bytes_unref_to_data">
<description>
Unreferences the bytes, and returns a pointer the same byte data
contents.

As an optimization, the byte data is returned without copying if this was
the last reference to bytes and bytes was created with g_bytes_new(),
g_bytes_new_take() or g_byte_array_free_to_bytes(). In all other cases the
data is copied.

Since: 2.32

</description>
<parameters>
<parameter name="bytes">
<parameter_description> a #GBytes
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> location to place the length of the returned data
</parameter_description>
</parameter>
</parameters>
<return> (transfer full) (array length=size) (element-type guint8)
(not nullable): a pointer to the same byte data, which should be
freed with g_free()

</return>
</function>

<function name="g_cache_destroy">
<description>
Frees the memory allocated for the #GCache.

Note that it does not destroy the keys and values which were
contained in the #GCache.

Deprecated:2.32: Use a #GHashTable instead

</description>
<parameters>
<parameter name="cache">
<parameter_description> a #GCache
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cache_insert">
<description>
Gets the value corresponding to the given key, creating it if
necessary. It first checks if the value already exists in the
#GCache, by using the @key_equal_func function passed to
g_cache_new(). If it does already exist it is returned, and its
reference count is increased by one. If the value does not currently
exist, if is created by calling the @value_new_func. The key is
duplicated by calling @key_dup_func and the duplicated key and value
are inserted into the #GCache.

Deprecated:2.32: Use a #GHashTable instead

</description>
<parameters>
<parameter name="cache">
<parameter_description> a #GCache
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key describing a #GCache object
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #GCache value

</return>
</function>

<function name="g_cache_key_foreach">
<description>
Calls the given function for each of the keys in the #GCache.

NOTE @func is passed three parameters, the value and key of a cache
entry and the @user_data. The order of value and key is different
from the order in which g_hash_table_foreach() passes key-value
pairs to its callback function !

Deprecated:2.32: Use a #GHashTable instead

</description>
<parameters>
<parameter name="cache">
<parameter_description> a #GCache
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call with each #GCache key
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cache_new">
<description>
Creates a new #GCache.

Deprecated:2.32: Use a #GHashTable instead

</description>
<parameters>
<parameter name="value_new_func">
<parameter_description> a function to create a new object given a key.
This is called by g_cache_insert() if an object
with the given key does not already exist
</parameter_description>
</parameter>
<parameter name="value_destroy_func">
<parameter_description> a function to destroy an object. It is called
by g_cache_remove() when the object is no
longer needed (i.e. its reference count drops
to 0)
</parameter_description>
</parameter>
<parameter name="key_dup_func">
<parameter_description> a function to copy a key. It is called by
g_cache_insert() if the key does not already exist in
the #GCache
</parameter_description>
</parameter>
<parameter name="key_destroy_func">
<parameter_description> a function to destroy a key. It is called by
g_cache_remove() when the object is no longer
needed (i.e. its reference count drops to 0)
</parameter_description>
</parameter>
<parameter name="hash_key_func">
<parameter_description> a function to create a hash value from a key
</parameter_description>
</parameter>
<parameter name="hash_value_func">
<parameter_description> a function to create a hash value from a value
</parameter_description>
</parameter>
<parameter name="key_equal_func">
<parameter_description> a function to compare two keys. It should return
%TRUE if the two keys are equivalent
</parameter_description>
</parameter>
</parameters>
<return> a new #GCache

</return>
</function>

<function name="g_cache_remove">
<description>
Decreases the reference count of the given value. If it drops to 0
then the value and its corresponding key are destroyed, using the
@value_destroy_func and @key_destroy_func passed to g_cache_new().

Deprecated:2.32: Use a #GHashTable instead

</description>
<parameters>
<parameter name="cache">
<parameter_description> a #GCache
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cache_value_foreach">
<description>
Calls the given function for each of the values in the #GCache.

Deprecated:2.10: The reason is that it passes pointers to internal
data structures to @func; use g_cache_key_foreach() instead

</description>
<parameters>
<parameter name="cache">
<parameter_description> a #GCache
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call with each #GCache value
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_BOOLEAN__BOXED_BOXED">
<description>
A #GClosureMarshal function for use with signals with handlers that
take two boxed pointers as arguments and return a boolean.  If you
have such a signal, you will probably also need to use an
accumulator, such as g_signal_accumulator_true_handled().

</description>
<parameters>
<parameter name="closure">
<parameter_description> A #GClosure.
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> A #GValue to store the return value. May be %NULL
if the callback of closure doesn't return a value.
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> The length of the @param_values array.
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> An array of #GValues holding the arguments
on which to invoke the callback of closure.
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> The invocation hint given as the last argument to
g_closure_invoke().
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> Additional data specified when registering the
marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__BOXED_BOXED().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_BOOLEAN__FLAGS">
<description>
A marshaller for a #GCClosure with a callback of type
`gboolean (*callback) (gpointer instance, gint arg1, gpointer user_data)` where the #gint parameter
denotes a flags type.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue which can store the returned #gboolean
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding instance and arg1
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_BOOLEAN__FLAGSv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__FLAGS().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_BOOLEAN__OBJECT_BOXED_BOXED">
<description>
A marshaller for a #GCClosure with a callback of type
`gboolean (*callback) (gpointer instance, GBoxed *arg1, GBoxed *arg2, gpointer user_data)`.

Since: 2.26

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue, which can store the returned string
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 3
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding instance, arg1 and arg2
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_BOOL__BOXED_BOXED">
<description>
An old alias for g_cclosure_marshal_BOOLEAN__BOXED_BOXED().

</description>
<parameters>
<parameter name="closure">
<parameter_description> A #GClosure.
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> A #GValue to store the return value. May be %NULL
if the callback of closure doesn't return a value.
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> The length of the @param_values array.
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> An array of #GValues holding the arguments
on which to invoke the callback of closure.
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> The invocation hint given as the last argument to
g_closure_invoke().
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> Additional data specified when registering the
marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_BOOL__FLAGS">
<description>
Another name for g_cclosure_marshal_BOOLEAN__FLAGS().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_STRING__OBJECT_POINTER">
<description>
A marshaller for a #GCClosure with a callback of type
`gchar* (*callback) (gpointer instance, GObject *arg1, gpointer arg2, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue, which can store the returned string
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 3
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding instance, arg1 and arg2
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_STRING__OBJECT_POINTERv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_STRING__OBJECT_POINTER().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__BOOLEAN">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gboolean arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #gboolean parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__BOOLEANv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOOLEAN().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__BOXED">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GBoxed *arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #GBoxed* parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__BOXEDv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOXED().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__CHAR">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gchar arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #gchar parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__CHARv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__CHAR().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__DOUBLE">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gdouble arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #gdouble parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__DOUBLEv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__DOUBLE().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__ENUM">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gint arg1, gpointer user_data)` where the #gint parameter denotes an enumeration type..

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the enumeration parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__ENUMv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ENUM().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__FLAGS">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gint arg1, gpointer user_data)` where the #gint parameter denotes a flags type.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the flags parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__FLAGSv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLAGS().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__FLOAT">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gfloat arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #gfloat parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__FLOATv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLOAT().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__INT">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gint arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #gint parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__INTv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__INT().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__LONG">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, glong arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #glong parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__LONGv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__LONG().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__OBJECT">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GObject *arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #GObject* parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__OBJECTv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__OBJECT().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__PARAM">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GParamSpec *arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #GParamSpec* parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__PARAMv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__PARAM().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__POINTER">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gpointer arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #gpointer parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__POINTERv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__POINTER().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__STRING">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, const gchar *arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #gchar* parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__STRINGv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__STRING().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__UCHAR">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, guchar arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #guchar parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__UCHARv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UCHAR().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__UINT">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, guint arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #guint parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__UINT_POINTER">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, guint arg1, gpointer arg2, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 3
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding instance, arg1 and arg2
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__UINT_POINTERv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT_POINTER().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__UINTv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__ULONG">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gulong arg1, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #gulong parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__ULONGv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ULONG().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__VARIANT">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, GVariant *arg1, gpointer user_data)`.

Since: 2.26

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 2
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding the instance and the #GVariant* parameter
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__VARIANTv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VARIANT().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__VOID">
<description>
A marshaller for a #GCClosure with a callback of type
`void (*callback) (gpointer instance, gpointer user_data)`.

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> 1
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> a #GValue array holding only the instance
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> the invocation hint given as the last argument
to g_closure_invoke()
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when registering the marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_VOID__VOIDv">
<description>
The #GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VOID().

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is invoked.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_generic">
<description>
A generic marshaller function implemented via
[libffi](http://sourceware.org/libffi/).

Normally this function is not passed explicitly to g_signal_new(),
but used automatically by GLib when specifying a %NULL marshaller.

Since: 2.30

</description>
<parameters>
<parameter name="closure">
<parameter_description> A #GClosure.
</parameter_description>
</parameter>
<parameter name="return_gvalue">
<parameter_description> A #GValue to store the return value. May be %NULL
if the callback of closure doesn't return a value.
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> The length of the @param_values array.
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> An array of #GValues holding the arguments
on which to invoke the callback of closure.
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> The invocation hint given as the last argument to
g_closure_invoke().
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> Additional data specified when registering the
marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_marshal_generic_va">
<description>
A generic #GVaClosureMarshal function implemented via
[libffi](http://sourceware.org/libffi/).

Since: 2.30

</description>
<parameters>
<parameter name="closure">
<parameter_description> the #GClosure to which the marshaller belongs
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure doesn't return a
value.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance on which the closure is
invoked.
</parameter_description>
</parameter>
<parameter name="args_list">
<parameter_description> va_list of arguments to be passed to the closure.
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> additional data specified when
registering the marshaller, see g_closure_set_marshal() and
g_closure_set_meta_marshal()
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of the @param_types array
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> the #GType of each argument from
@args_list.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cclosure_new">
<description>
Creates a new closure which invokes @callback_func with @user_data as
the last parameter.


</description>
<parameters>
<parameter name="callback_func">
<parameter_description> the function to invoke
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback_func
</parameter_description>
</parameter>
<parameter name="destroy_data">
<parameter_description> destroy notify to be called when @user_data is no longer used
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new #GCClosure
</return>
</function>

<function name="g_cclosure_new_object">
<description>
A variant of g_cclosure_new() which uses @object as @user_data and
calls g_object_watch_closure() on @object and the created
closure. This function is useful when you have a callback closely
associated with a #GObject, and want the callback to no longer run
after the object is is freed.


</description>
<parameters>
<parameter name="callback_func">
<parameter_description> the function to invoke
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject pointer to pass to @callback_func
</parameter_description>
</parameter>
</parameters>
<return> a new #GCClosure
</return>
</function>

<function name="g_cclosure_new_object_swap">
<description>
A variant of g_cclosure_new_swap() which uses @object as @user_data
and calls g_object_watch_closure() on @object and the created
closure. This function is useful when you have a callback closely
associated with a #GObject, and want the callback to no longer run
after the object is is freed.


</description>
<parameters>
<parameter name="callback_func">
<parameter_description> the function to invoke
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject pointer to pass to @callback_func
</parameter_description>
</parameter>
</parameters>
<return> a new #GCClosure
</return>
</function>

<function name="g_cclosure_new_swap">
<description>
Creates a new closure which invokes @callback_func with @user_data as
the first parameter.


</description>
<parameters>
<parameter name="callback_func">
<parameter_description> the function to invoke
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback_func
</parameter_description>
</parameter>
<parameter name="destroy_data">
<parameter_description> destroy notify to be called when @user_data is no longer used
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new #GCClosure
</return>
</function>

<function name="g_chdir">
<description>
A wrapper for the POSIX chdir() function. The function changes the
current directory of the process to @path.

See your C library manual for more details about chdir().

Since: 2.8

</description>
<parameters>
<parameter name="path">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
</parameters>
<return> 0 on success, -1 if an error occurred.

</return>
</function>

<function name="g_checksum_copy">
<description>
Copies a #GChecksum. If @checksum has been closed, by calling
g_checksum_get_string() or g_checksum_get_digest(), the copied
checksum will be closed as well.

Since: 2.16

</description>
<parameters>
<parameter name="checksum">
<parameter_description> the #GChecksum to copy
</parameter_description>
</parameter>
</parameters>
<return> the copy of the passed #GChecksum. Use g_checksum_free()
when finished using it.

</return>
</function>

<function name="g_checksum_free">
<description>
Frees the memory allocated for @checksum.

Since: 2.16

</description>
<parameters>
<parameter name="checksum">
<parameter_description> a #GChecksum
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_checksum_get_digest">
<description>
Gets the digest from @checksum as a raw binary vector and places it
into @buffer. The size of the digest depends on the type of checksum.

Once this function has been called, the #GChecksum is closed and can
no longer be updated with g_checksum_update().

Since: 2.16

</description>
<parameters>
<parameter name="checksum">
<parameter_description> a #GChecksum
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> output buffer
</parameter_description>
</parameter>
<parameter name="digest_len">
<parameter_description> an inout parameter. The caller initializes it to the size of @buffer.
After the call it contains the length of the digest.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_checksum_get_string">
<description>
Gets the digest as an hexadecimal string.

Once this function has been called the #GChecksum can no longer be
updated with g_checksum_update().

The hexadecimal characters will be lower case.

Since: 2.16

</description>
<parameters>
<parameter name="checksum">
<parameter_description> a #GChecksum
</parameter_description>
</parameter>
</parameters>
<return> the hexadecimal representation of the checksum. The
returned string is owned by the checksum and should not be modified
or freed.

</return>
</function>

<function name="g_checksum_new">
<description>
Creates a new #GChecksum, using the checksum algorithm @checksum_type.
If the @checksum_type is not known, %NULL is returned.
A #GChecksum can be used to compute the checksum, or digest, of an
arbitrary binary blob, using different hashing algorithms.

A #GChecksum works by feeding a binary blob through g_checksum_update()
until there is data to be checked; the digest can then be extracted
using g_checksum_get_string(), which will return the checksum as a
hexadecimal string; or g_checksum_get_digest(), which will return a
vector of raw bytes. Once either g_checksum_get_string() or
g_checksum_get_digest() have been called on a #GChecksum, the checksum
will be closed and it won't be possible to call g_checksum_update()
on it anymore.

Since: 2.16

</description>
<parameters>
<parameter name="checksum_type">
<parameter_description> the desired type of checksum
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GChecksum, or %NULL.
Use g_checksum_free() to free the memory allocated by it.

</return>
</function>

<function name="g_checksum_reset">
<description>
Resets the state of the @checksum back to its initial state.

Since: 2.18

</description>
<parameters>
<parameter name="checksum">
<parameter_description> the #GChecksum to reset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_checksum_type_get_length">
<description>
Gets the length in bytes of digests of type @checksum_type

Since: 2.16

</description>
<parameters>
<parameter name="checksum_type">
<parameter_description> a #GChecksumType
</parameter_description>
</parameter>
</parameters>
<return> the checksum length, or -1 if @checksum_type is
not supported.

</return>
</function>

<function name="g_checksum_update">
<description>
Feeds @data into an existing #GChecksum. The checksum must still be
open, that is g_checksum_get_string() or g_checksum_get_digest() must
not have been called on @checksum.

Since: 2.16

</description>
<parameters>
<parameter name="checksum">
<parameter_description> a #GChecksum
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> buffer used to compute the checksum
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> size of the buffer, or -1 if it is a null-terminated string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_child_watch_add">
<description>
Sets a function to be called when the child indicated by @pid 
exits, at a default priority, #G_PRIORITY_DEFAULT.

If you obtain @pid from g_spawn_async() or g_spawn_async_with_pipes() 
you will need to pass #G_SPAWN_DO_NOT_REAP_CHILD as flag to 
the spawn function for the child watching to work.

Note that on platforms where #GPid must be explicitly closed
(see g_spawn_close_pid()) @pid must not be closed while the
source is still active. Typically, you will want to call
g_spawn_close_pid() in the callback function for the source.

GLib supports only a single callback per process id.
On POSIX platforms, the same restrictions mentioned for
g_child_watch_source_new() apply to this function.

This internally creates a main loop source using 
g_child_watch_source_new() and attaches it to the main loop context 
using g_source_attach(). You can do these steps manually if you 
need greater control.

Since: 2.4

</description>
<parameters>
<parameter name="pid">
<parameter_description>      process id to watch. On POSIX the positive pid of a child
process. On Windows a handle for a process (which doesn't have to be
a child).
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="g_child_watch_add_full">
<description>
Sets a function to be called when the child indicated by @pid 
exits, at the priority @priority.

If you obtain @pid from g_spawn_async() or g_spawn_async_with_pipes() 
you will need to pass #G_SPAWN_DO_NOT_REAP_CHILD as flag to 
the spawn function for the child watching to work.

In many programs, you will want to call g_spawn_check_exit_status()
in the callback to determine whether or not the child exited
successfully.

Also, note that on platforms where #GPid must be explicitly closed
(see g_spawn_close_pid()) @pid must not be closed while the source
is still active.  Typically, you should invoke g_spawn_close_pid()
in the callback function for the source.

GLib supports only a single callback per process id.
On POSIX platforms, the same restrictions mentioned for
g_child_watch_source_new() apply to this function.

This internally creates a main loop source using 
g_child_watch_source_new() and attaches it to the main loop context 
using g_source_attach(). You can do these steps manually if you 
need greater control.

Since: 2.4

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the idle source. Typically this will be in the
range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
</parameter_description>
</parameter>
<parameter name="pid">
<parameter_description>      process to watch. On POSIX the positive pid of a child process. On
Windows a handle for a process (which doesn't have to be a child).
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the idle is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="g_child_watch_source_new">
<description>
Creates a new child_watch source.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed.

Note that child watch sources can only be used in conjunction with
`g_spawn...` when the %G_SPAWN_DO_NOT_REAP_CHILD flag is used.

Note that on platforms where #GPid must be explicitly closed
(see g_spawn_close_pid()) @pid must not be closed while the
source is still active. Typically, you will want to call
g_spawn_close_pid() in the callback function for the source.

On POSIX platforms, the following restrictions apply to this API
due to limitations in POSIX process interfaces:

* @pid must be a child of this process
* @pid must be positive
* the application must not call `waitpid` with a non-positive
first argument, for instance in another thread
* the application must not wait for @pid to exit by any other
mechanism, including `waitpid(pid, ...)` or a second child-watch
source for the same @pid
* the application must not ignore SIGCHILD

If any of those conditions are not met, this and related APIs will
not work correctly. This can often be diagnosed via a GLib warning
stating that `ECHILD` was received by `waitpid`.

Calling `waitpid` for specific processes other than @pid remains a
valid thing to do.

Since: 2.4

</description>
<parameters>
<parameter name="pid">
<parameter_description> process to watch. On POSIX the positive pid of a child process. On
Windows a handle for a process (which doesn't have to be a child).
</parameter_description>
</parameter>
</parameters>
<return> the newly-created child watch source

</return>
</function>

<function name="g_chmod">
<description>
A wrapper for the POSIX chmod() function. The chmod() function is
used to set the permissions of a file system object.

On Windows the file protection mechanism is not at all POSIX-like,
and the underlying chmod() function in the C library just sets or
clears the FAT-style READONLY attribute. It does not touch any
ACL. Software that needs to manage file permissions on Windows
exactly should use the Win32 API.

See your C library manual for more details about chmod().

Since: 2.8

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> as in chmod()
</parameter_description>
</parameter>
</parameters>
<return> 0 if the operation succeeded, -1 on error

</return>
</function>

<function name="g_clear_error">
<description>
If @err or *@err is %NULL, does nothing. Otherwise,
calls g_error_free() on *@err and sets *@err to %NULL.

</description>
<parameters>
<parameter name="err">
<parameter_description> a #GError return location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_clear_handle_id">
<description>
Clears a numeric handler, such as a #GSource ID.

@tag_ptr must be a valid pointer to the variable holding the handler.

If the ID is zero then this function does nothing.
Otherwise, clear_func() is called with the ID as a parameter, and the tag is
set to zero.

A macro is also included that allows this function to be used without
pointer casts.

Since: 2.56

</description>
<parameters>
<parameter name="tag_ptr">
<parameter_description> a pointer to the handler ID
</parameter_description>
</parameter>
<parameter name="clear_func">
<parameter_description> the function to call to clear the handler
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_clear_object">
<description>
Clears a reference to a #GObject.

@object_ptr must not be %NULL.

If the reference is %NULL then this function does nothing.
Otherwise, the reference count of the object is decreased and the
pointer is set to %NULL.

A macro is also included that allows this function to be used without
pointer casts.

Since: 2.28

</description>
<parameters>
<parameter name="object_ptr">
<parameter_description> a pointer to a #GObject reference
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_clear_pointer">
<description>
Clears a reference to a variable.

@pp must not be %NULL.

If the reference is %NULL then this function does nothing.
Otherwise, the variable is destroyed using @destroy and the
pointer is set to %NULL.

A macro is also included that allows this function to be used without
pointer casts.

Since: 2.34

</description>
<parameters>
<parameter name="pp">
<parameter_description> a pointer to a variable, struct member etc. holding a
pointer
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a function to which a gpointer can be passed, to destroy *@pp
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_clear_weak_pointer">
<description>
Clears a weak reference to a #GObject.

@weak_pointer_location must not be %NULL.

If the weak reference is %NULL then this function does nothing.
Otherwise, the weak reference to the object is removed for that location
and the pointer is set to %NULL.

A macro is also included that allows this function to be used without
pointer casts. The function itself is static inline, so its address may vary
between compilation units.

Since: 2.56

</description>
<parameters>
<parameter name="weak_pointer_location">
<parameter_description> The memory address of a pointer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_close">
<description>
This wraps the close() call; in case of error, %errno will be
preserved, but the error will also be stored as a #GError in @error.

Besides using #GError, there is another major reason to prefer this
function over the call provided by the system; on Unix, it will
attempt to correctly handle %EINTR, which has platform-specific
semantics.

Since: 2.36

</description>
<parameters>
<parameter name="fd">
<parameter_description> A file descriptor
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if there was an error.

</return>
</function>

<function name="g_closure_add_finalize_notifier">
<description>
Registers a finalization notifier which will be called when the
reference count of @closure goes down to 0. Multiple finalization
notifiers on a single closure are invoked in unspecified order. If
a single call to g_closure_unref() results in the closure being
both invalidated and finalized, then the invalidate notifiers will
be run before the finalize notifiers.

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
<parameter name="notify_data">
<parameter_description> data to pass to @notify_func
</parameter_description>
</parameter>
<parameter name="notify_func">
<parameter_description> the callback function to register
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_closure_add_invalidate_notifier">
<description>
Registers an invalidation notifier which will be called when the
@closure is invalidated with g_closure_invalidate(). Invalidation
notifiers are invoked before finalization notifiers, in an
unspecified order.

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
<parameter name="notify_data">
<parameter_description> data to pass to @notify_func
</parameter_description>
</parameter>
<parameter name="notify_func">
<parameter_description> the callback function to register
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_closure_add_marshal_guards">
<description>
Adds a pair of notifiers which get invoked before and after the
closure callback, respectively. This is typically used to protect
the extra arguments for the duration of the callback. See
g_object_watch_closure() for an example of marshal guards.

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
<parameter name="pre_marshal_data">
<parameter_description> data to pass
to @pre_marshal_notify
</parameter_description>
</parameter>
<parameter name="pre_marshal_notify">
<parameter_description> a function to call before the closure callback
</parameter_description>
</parameter>
<parameter name="post_marshal_data">
<parameter_description> data to pass
to @post_marshal_notify
</parameter_description>
</parameter>
<parameter name="post_marshal_notify">
<parameter_description> a function to call after the closure callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_closure_invalidate">
<description>
Sets a flag on the closure to indicate that its calling
environment has become invalid, and thus causes any future
invocations of g_closure_invoke() on this @closure to be
ignored. Also, invalidation notifiers installed on the closure will
be called at this point. Note that unless you are holding a
reference to the closure yourself, the invalidation notifiers may
unref the closure and cause it to be destroyed, so if you need to
access the closure after calling g_closure_invalidate(), make sure
that you've previously called g_closure_ref().

Note that g_closure_invalidate() will also be called when the
reference count of a closure drops to zero (unless it has already
been invalidated before).

</description>
<parameters>
<parameter name="closure">
<parameter_description> GClosure to invalidate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_closure_invoke">
<description>
Invokes the closure, i.e. executes the callback represented by the @closure.

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> a #GValue to store the return
value. May be %NULL if the callback of @closure
doesn't return a value.
</parameter_description>
</parameter>
<parameter name="n_param_values">
<parameter_description> the length of the @param_values array
</parameter_description>
</parameter>
<parameter name="param_values">
<parameter_description> an array of
#GValues holding the arguments on which to
invoke the callback of @closure
</parameter_description>
</parameter>
<parameter name="invocation_hint">
<parameter_description> a context-dependent invocation hint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_closure_new_object">
<description>
A variant of g_closure_new_simple() which stores @object in the
@data field of the closure and calls g_object_watch_closure() on
@object and the created closure. This function is mainly useful
when implementing new types of closures.


</description>
<parameters>
<parameter name="sizeof_closure">
<parameter_description> the size of the structure to allocate, must be at least
`sizeof (GClosure)`
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject pointer to store in the @data field of the newly
allocated #GClosure
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GClosure
</return>
</function>

<function name="g_closure_new_simple">
<description>
Allocates a struct of the given size and initializes the initial
part as a #GClosure. This function is mainly useful when
implementing new types of closures.

|[&lt;!-- language=&quot;C&quot; --&gt; 
typedef struct _MyClosure MyClosure;
struct _MyClosure
{
GClosure closure;
// extra data goes here
};

static void
my_closure_finalize (gpointer  notify_data,
GClosure *closure)
{
MyClosure *my_closure = (MyClosure *)closure;

// free extra data here
}

MyClosure *my_closure_new (gpointer data)
{
GClosure *closure;
MyClosure *my_closure;

closure = g_closure_new_simple (sizeof (MyClosure), data);
my_closure = (MyClosure *) closure;

// initialize extra data here

g_closure_add_finalize_notifier (closure, notify_data,
my_closure_finalize);
return my_closure;
}
]|


</description>
<parameters>
<parameter name="sizeof_closure">
<parameter_description> the size of the structure to allocate, must be at least
`sizeof (GClosure)`
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to store in the @data field of the newly allocated #GClosure
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new #GClosure
</return>
</function>

<function name="g_closure_ref">
<description>
Increments the reference count on a closure to force it staying
alive while the caller holds a pointer to it.


</description>
<parameters>
<parameter name="closure">
<parameter_description> #GClosure to increment the reference count on
</parameter_description>
</parameter>
</parameters>
<return> The @closure passed in, for convenience
</return>
</function>

<function name="g_closure_remove_finalize_notifier">
<description>
Removes a finalization notifier.

Notice that notifiers are automatically removed after they are run.

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
<parameter name="notify_data">
<parameter_description> data which was passed to g_closure_add_finalize_notifier()
when registering @notify_func
</parameter_description>
</parameter>
<parameter name="notify_func">
<parameter_description> the callback function to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_closure_remove_invalidate_notifier">
<description>
Removes an invalidation notifier.

Notice that notifiers are automatically removed after they are run.

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
<parameter name="notify_data">
<parameter_description> data which was passed to g_closure_add_invalidate_notifier()
when registering @notify_func
</parameter_description>
</parameter>
<parameter name="notify_func">
<parameter_description> the callback function to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_closure_set_marshal">
<description>
Sets the marshaller of @closure. The `marshal_data`
of @marshal provides a way for a meta marshaller to provide additional
information to the marshaller. (See g_closure_set_meta_marshal().) For
GObject's C predefined marshallers (the g_cclosure_marshal_*()
functions), what it provides is a callback function to use instead of
@closure-&gt;callback.

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
<parameter name="marshal">
<parameter_description> a #GClosureMarshal function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_closure_set_meta_marshal">
<description>
Sets the meta marshaller of @closure.  A meta marshaller wraps
@closure-&gt;marshal and modifies the way it is called in some
fashion. The most common use of this facility is for C callbacks.
The same marshallers (generated by [glib-genmarshal][glib-genmarshal]),
are used everywhere, but the way that we get the callback function
differs. In most cases we want to use @closure-&gt;callback, but in
other cases we want to use some different technique to retrieve the
callback function.

For example, class closures for signals (see
g_signal_type_cclosure_new()) retrieve the callback function from a
fixed offset in the class structure.  The meta marshaller retrieves
the right callback and passes it to the marshaller as the
@marshal_data argument.

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> context-dependent data to pass
to @meta_marshal
</parameter_description>
</parameter>
<parameter name="meta_marshal">
<parameter_description> a #GClosureMarshal function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_closure_sink">
<description>
Takes over the initial ownership of a closure.  Each closure is
initially created in a &quot;floating&quot; state, which means that the initial
reference count is not owned by any caller. g_closure_sink() checks
to see if the object is still floating, and if so, unsets the
floating state and decreases the reference count. If the closure
is not floating, g_closure_sink() does nothing. The reason for the
existence of the floating state is to prevent cumbersome code
sequences like:
|[&lt;!-- language=&quot;C&quot; --&gt; 
closure = g_cclosure_new (cb_func, cb_data);
g_source_set_closure (source, closure);
g_closure_unref (closure); // GObject doesn't really need this
]|
Because g_source_set_closure() (and similar functions) take ownership of the
initial reference count, if it is unowned, we instead can write:
|[&lt;!-- language=&quot;C&quot; --&gt; 
g_source_set_closure (source, g_cclosure_new (cb_func, cb_data));
]|

Generally, this function is used together with g_closure_ref(). Ane example
of storing a closure for later notification looks like:
|[&lt;!-- language=&quot;C&quot; --&gt; 
static GClosure *notify_closure = NULL;
void
foo_notify_set_closure (GClosure *closure)
{
if (notify_closure)
g_closure_unref (notify_closure);
notify_closure = closure;
if (notify_closure)
{
g_closure_ref (notify_closure);
g_closure_sink (notify_closure);
}
}
]|

Because g_closure_sink() may decrement the reference count of a closure
(if it hasn't been called on @closure yet) just like g_closure_unref(),
g_closure_ref() should be called prior to this function.

</description>
<parameters>
<parameter name="closure">
<parameter_description> #GClosure to decrement the initial reference count on, if it's
still being held
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_closure_unref">
<description>
Decrements the reference count of a closure after it was previously
incremented by the same caller. If no other callers are using the
closure, then the closure will be destroyed and freed.

</description>
<parameters>
<parameter name="closure">
<parameter_description> #GClosure to decrement the reference count on
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_completion_add_items">
<description>
Adds items to the #GCompletion.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="cmp">
<parameter_description> the #GCompletion.
</parameter_description>
</parameter>
<parameter name="items">
<parameter_description> the list of items to add.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_completion_clear_items">
<description>
Removes all items from the #GCompletion. The items are not freed, so if the
memory was dynamically allocated, it should be freed after calling this
function.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="cmp">
<parameter_description> the #GCompletion.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_completion_complete">
<description>
Attempts to complete the string @prefix using the #GCompletion
target items.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="cmp">
<parameter_description> the #GCompletion.
</parameter_description>
</parameter>
<parameter name="prefix">
<parameter_description> the prefix string, typically typed by the user, which is
compared with each of the items.
</parameter_description>
</parameter>
<parameter name="new_prefix">
<parameter_description> if non-%NULL, returns the longest prefix which is
common to all items that matched @prefix, or %NULL if
no items matched @prefix.  This string should be freed
when no longer needed.
</parameter_description>
</parameter>
</parameters>
<return> the list of items whose strings begin with
@prefix. This should not be changed.

</return>
</function>

<function name="g_completion_complete_utf8">
<description>
Attempts to complete the string @prefix using the #GCompletion target items.
In contrast to g_completion_complete(), this function returns the largest common
prefix that is a valid UTF-8 string, omitting a possible common partial 
character.

You should use this function instead of g_completion_complete() if your 
items are UTF-8 strings.

Since: 2.4

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="cmp">
<parameter_description> the #GCompletion
</parameter_description>
</parameter>
<parameter name="prefix">
<parameter_description> the prefix string, typically used by the user, which is compared
with each of the items
</parameter_description>
</parameter>
<parameter name="new_prefix">
<parameter_description> if non-%NULL, returns the longest prefix which is common to all
items that matched @prefix, or %NULL if no items matched @prefix.
This string should be freed when no longer needed.
</parameter_description>
</parameter>
</parameters>
<return> the list of items whose strings begin with @prefix. This should
not be changed.

</return>
</function>

<function name="g_completion_free">
<description>
Frees all memory used by the #GCompletion. The items are not freed, so if
the memory was dynamically allocated, it should be freed after calling this
function.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="cmp">
<parameter_description> the #GCompletion.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_completion_new">
<description>
Creates a new #GCompletion.


</description>
<parameters>
<parameter name="func">
<parameter_description> the function to be called to return the string representing
an item in the #GCompletion, or %NULL if strings are going to
be used as the #GCompletion items.
</parameter_description>
</parameter>
</parameters>
<return> the new #GCompletion.
</return>
</function>

<function name="g_completion_remove_items">
<description>
Removes items from a #GCompletion. The items are not freed, so if the memory
was dynamically allocated, free @items with g_list_free_full() after calling
this function.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="cmp">
<parameter_description> the #GCompletion.
</parameter_description>
</parameter>
<parameter name="items">
<parameter_description> the items to remove.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_completion_set_compare">
<description>
Sets the function to use for string comparisons. The default string
comparison function is strncmp().

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="cmp">
<parameter_description> a #GCompletion.
</parameter_description>
</parameter>
<parameter name="strncmp_func">
<parameter_description> the string comparison function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_compute_checksum_for_bytes">
<description>
Computes the checksum for a binary @data. This is a
convenience wrapper for g_checksum_new(), g_checksum_get_string()
and g_checksum_free().

The hexadecimal string returned will be in lower case.

Since: 2.34

</description>
<parameters>
<parameter name="checksum_type">
<parameter_description> a #GChecksumType
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> binary blob to compute the digest of
</parameter_description>
</parameter>
</parameters>
<return> the digest of the binary data as a string in hexadecimal.
The returned string should be freed with g_free() when done using it.

</return>
</function>

<function name="g_compute_checksum_for_data">
<description>
Computes the checksum for a binary @data of @length. This is a
convenience wrapper for g_checksum_new(), g_checksum_get_string()
and g_checksum_free().

The hexadecimal string returned will be in lower case.

Since: 2.16

</description>
<parameters>
<parameter name="checksum_type">
<parameter_description> a #GChecksumType
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> binary blob to compute the digest of
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of @data
</parameter_description>
</parameter>
</parameters>
<return> the digest of the binary data as a string in hexadecimal.
The returned string should be freed with g_free() when done using it.

</return>
</function>

<function name="g_compute_checksum_for_string">
<description>
Computes the checksum of a string.

The hexadecimal string returned will be in lower case.

Since: 2.16

</description>
<parameters>
<parameter name="checksum_type">
<parameter_description> a #GChecksumType
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> the string to compute the checksum of
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the string, or -1 if the string is null-terminated.
</parameter_description>
</parameter>
</parameters>
<return> the checksum as a hexadecimal string. The returned string
should be freed with g_free() when done using it.

</return>
</function>

<function name="g_compute_hmac_for_bytes">
<description>
Computes the HMAC for a binary @data. This is a
convenience wrapper for g_hmac_new(), g_hmac_get_string()
and g_hmac_unref().

The hexadecimal string returned will be in lower case.

Since: 2.50

</description>
<parameters>
<parameter name="digest_type">
<parameter_description> a #GChecksumType to use for the HMAC
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to use in the HMAC
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> binary blob to compute the HMAC of
</parameter_description>
</parameter>
</parameters>
<return> the HMAC of the binary data as a string in hexadecimal.
The returned string should be freed with g_free() when done using it.

</return>
</function>

<function name="g_compute_hmac_for_data">
<description>
Computes the HMAC for a binary @data of @length. This is a
convenience wrapper for g_hmac_new(), g_hmac_get_string()
and g_hmac_unref().

The hexadecimal string returned will be in lower case.

Since: 2.30

</description>
<parameters>
<parameter name="digest_type">
<parameter_description> a #GChecksumType to use for the HMAC
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to use in the HMAC
</parameter_description>
</parameter>
<parameter name="key_len">
<parameter_description> the length of the key
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> binary blob to compute the HMAC of
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of @data
</parameter_description>
</parameter>
</parameters>
<return> the HMAC of the binary data as a string in hexadecimal.
The returned string should be freed with g_free() when done using it.

</return>
</function>

<function name="g_compute_hmac_for_string">
<description>
Computes the HMAC for a string.

The hexadecimal string returned will be in lower case.

Since: 2.30

</description>
<parameters>
<parameter name="digest_type">
<parameter_description> a #GChecksumType to use for the HMAC
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to use in the HMAC
</parameter_description>
</parameter>
<parameter name="key_len">
<parameter_description> the length of the key
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> the string to compute the HMAC for
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the string, or -1 if the string is nul-terminated
</parameter_description>
</parameter>
</parameters>
<return> the HMAC as a hexadecimal string.
The returned string should be freed with g_free()
when done using it.

</return>
</function>

<function name="g_cond_broadcast">
<description>
If threads are waiting for @cond, all of them are unblocked.
If no threads are waiting for @cond, this function has no effect.
It is good practice to lock the same mutex as the waiting threads
while calling this function, though not required.

</description>
<parameters>
<parameter name="cond">
<parameter_description> a #GCond
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cond_clear">
<description>
Frees the resources allocated to a #GCond with g_cond_init().

This function should not be used with a #GCond that has been
statically allocated.

Calling g_cond_clear() for a #GCond on which threads are
blocking leads to undefined behaviour.

Since: 2.32

</description>
<parameters>
<parameter name="cond">
<parameter_description> an initialised #GCond
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cond_free">
<description>
Destroys a #GCond that has been created with g_cond_new().

Calling g_cond_free() for a #GCond on which threads are
blocking leads to undefined behaviour.

Deprecated: 2.32: GCond can now be statically allocated, or embedded
in structures and initialised with g_cond_init().

</description>
<parameters>
<parameter name="cond">
<parameter_description> a #GCond
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cond_init">
<description>
Initialises a #GCond so that it can be used.

This function is useful to initialise a #GCond that has been
allocated as part of a larger structure.  It is not necessary to
initialise a #GCond that has been statically allocated.

To undo the effect of g_cond_init() when a #GCond is no longer
needed, use g_cond_clear().

Calling g_cond_init() on an already-initialised #GCond leads
to undefined behaviour.

Since: 2.32

</description>
<parameters>
<parameter name="cond">
<parameter_description> an uninitialized #GCond
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cond_new">
<description>
Allocates and initializes a new #GCond.

Deprecated: 2.32: GCond can now be statically allocated, or embedded
in structures and initialised with g_cond_init().

</description>
<parameters>
</parameters>
<return> a newly allocated #GCond. Free with g_cond_free()

</return>
</function>

<function name="g_cond_signal">
<description>
If threads are waiting for @cond, at least one of them is unblocked.
If no threads are waiting for @cond, this function has no effect.
It is good practice to hold the same lock as the waiting thread
while calling this function, though not required.

</description>
<parameters>
<parameter name="cond">
<parameter_description> a #GCond
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cond_timed_wait">
<description>
Waits until this thread is woken up on @cond, but not longer than
until the time specified by @abs_time. The @mutex is unlocked before
falling asleep and locked again before resuming.

If @abs_time is %NULL, g_cond_timed_wait() acts like g_cond_wait().

This function can be used even if g_thread_init() has not yet been
called, and, in that case, will immediately return %TRUE.

To easily calculate @abs_time a combination of g_get_current_time()
and g_time_val_add() can be used.

Deprecated:2.32: Use g_cond_wait_until() instead.

</description>
<parameters>
<parameter name="cond">
<parameter_description> a #GCond
</parameter_description>
</parameter>
<parameter name="mutex">
<parameter_description> a #GMutex that is currently locked
</parameter_description>
</parameter>
<parameter name="abs_time">
<parameter_description> a #GTimeVal, determining the final time
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @cond was signalled, or %FALSE on timeout

</return>
</function>

<function name="g_cond_wait">
<description>
Atomically releases @mutex and waits until @cond is signalled.
When this function returns, @mutex is locked again and owned by the
calling thread.

When using condition variables, it is possible that a spurious wakeup
may occur (ie: g_cond_wait() returns even though g_cond_signal() was
not called).  It's also possible that a stolen wakeup may occur.
This is when g_cond_signal() is called, but another thread acquires
@mutex before this thread and modifies the state of the program in
such a way that when g_cond_wait() is able to return, the expected
condition is no longer met.

For this reason, g_cond_wait() must always be used in a loop.  See
the documentation for #GCond for a complete example.

</description>
<parameters>
<parameter name="cond">
<parameter_description> a #GCond
</parameter_description>
</parameter>
<parameter name="mutex">
<parameter_description> a #GMutex that is currently locked
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cond_wait_until">
<description>
Waits until either @cond is signalled or @end_time has passed.

As with g_cond_wait() it is possible that a spurious or stolen wakeup
could occur.  For that reason, waiting on a condition variable should
always be in a loop, based on an explicitly-checked predicate.

%TRUE is returned if the condition variable was signalled (or in the
case of a spurious wakeup).  %FALSE is returned if @end_time has
passed.

The following code shows how to correctly perform a timed wait on a
condition variable (extending the example presented in the
documentation for #GCond):

|[&lt;!-- language=&quot;C&quot; --&gt; 
gpointer
pop_data_timed (void)
{
gint64 end_time;
gpointer data;

g_mutex_lock (&amp;data_mutex);

end_time = g_get_monotonic_time () + 5 * G_TIME_SPAN_SECOND;
while (!current_data)
if (!g_cond_wait_until (&amp;data_cond, &amp;data_mutex, end_time))
{
// timeout has passed.
g_mutex_unlock (&amp;data_mutex);
return NULL;
}

// there is data for us
data = current_data;
current_data = NULL;

g_mutex_unlock (&amp;data_mutex);

return data;
}
]|

Notice that the end time is calculated once, before entering the
loop and reused.  This is the motivation behind the use of absolute
time on this API -- if a relative time of 5 seconds were passed
directly to the call and a spurious wakeup occurred, the program would
have to start over waiting again (which would lead to a total wait
time of more than 5 seconds).

Since: 2.32

</description>
<parameters>
<parameter name="cond">
<parameter_description> a #GCond
</parameter_description>
</parameter>
<parameter name="mutex">
<parameter_description> a #GMutex that is currently locked
</parameter_description>
</parameter>
<parameter name="end_time">
<parameter_description> the monotonic time to wait until
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on a signal, %FALSE on a timeout
</return>
</function>

<function name="g_convert">
<description>
Converts a string from one character set to another.

Note that you should use g_iconv() for streaming conversions. 
Despite the fact that @bytes_read can return information about partial
characters, the g_convert_... functions are not generally suitable
for streaming. If the underlying converter maintains internal state,
then this won't be preserved across successive calls to g_convert(),
g_convert_with_iconv() or g_convert_with_fallback(). (An example of
this is the GNU C converter for CP1255 which does not emit a base
character until it knows that the next character is not a mark that
could combine with the base character.)

Using extensions such as &quot;//TRANSLIT&quot; may not work (or may not work
well) on many platforms.  Consider using g_str_to_ascii() instead.


</description>
<parameters>
<parameter name="str">
<parameter_description>
the string to convert.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description>           the length of the string in bytes, or -1 if the string is
nul-terminated (Note that some encodings may allow nul
bytes to occur inside strings. In that case, using -1
for the @len parameter is unsafe)
</parameter_description>
</parameter>
<parameter name="to_codeset">
<parameter_description>    name of character set into which to convert @str
</parameter_description>
</parameter>
<parameter name="from_codeset">
<parameter_description>  character set of @str.
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> location to store the number of bytes in
the input string that were successfully converted, or %NULL.
Even if the conversion was successful, this may be 
less than @len if there were partial characters
at the end of the input. If the error
#G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
stored will be the byte offset after the last valid
input sequence.
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> the number of bytes stored in
the output buffer (not including the terminating nul).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>         location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError may occur.
</parameter_description>
</parameter>
</parameters>
<return>
If the conversion was successful, a newly allocated buffer
containing the converted string, which must be freed with g_free().
Otherwise %NULL and @error will be set.
</return>
</function>

<function name="g_convert_with_fallback">
<description>
Converts a string from one character set to another, possibly
including fallback sequences for characters not representable
in the output. Note that it is not guaranteed that the specification
for the fallback sequences in @fallback will be honored. Some
systems may do an approximate conversion from @from_codeset
to @to_codeset in their iconv() functions, 
in which case GLib will simply return that approximate conversion.

Note that you should use g_iconv() for streaming conversions. 
Despite the fact that @bytes_read can return information about partial
characters, the g_convert_... functions are not generally suitable
for streaming. If the underlying converter maintains internal state,
then this won't be preserved across successive calls to g_convert(),
g_convert_with_iconv() or g_convert_with_fallback(). (An example of
this is the GNU C converter for CP1255 which does not emit a base
character until it knows that the next character is not a mark that
could combine with the base character.)


</description>
<parameters>
<parameter name="str">
<parameter_description>
the string to convert.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description>          the length of the string in bytes, or -1 if the string is
nul-terminated (Note that some encodings may allow nul
bytes to occur inside strings. In that case, using -1
for the @len parameter is unsafe)
</parameter_description>
</parameter>
<parameter name="to_codeset">
<parameter_description>   name of character set into which to convert @str
</parameter_description>
</parameter>
<parameter name="from_codeset">
<parameter_description> character set of @str.
</parameter_description>
</parameter>
<parameter name="fallback">
<parameter_description>     UTF-8 string to use in place of characters not
present in the target encoding. (The string must be
representable in the target encoding). 
If %NULL, characters not in the target encoding will 
be represented as Unicode escapes \uxxxx or \Uxxxxyyyy.
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> location to store the number of bytes in
the input string that were successfully converted, or %NULL.
Even if the conversion was successful, this may be 
less than @len if there were partial characters
at the end of the input.
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> the number of bytes stored in
the output buffer (not including the terminating nul).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>        location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError may occur.
</parameter_description>
</parameter>
</parameters>
<return>
If the conversion was successful, a newly allocated buffer
containing the converted string, which must be freed with g_free().
Otherwise %NULL and @error will be set.
</return>
</function>

<function name="g_convert_with_iconv">
<description>
Converts a string from one character set to another. 

Note that you should use g_iconv() for streaming conversions. 
Despite the fact that @bytes_read can return information about partial
characters, the g_convert_... functions are not generally suitable
for streaming. If the underlying converter maintains internal state,
then this won't be preserved across successive calls to g_convert(),
g_convert_with_iconv() or g_convert_with_fallback(). (An example of
this is the GNU C converter for CP1255 which does not emit a base
character until it knows that the next character is not a mark that
could combine with the base character.)

Characters which are valid in the input character set, but which have no
representation in the output character set will result in a
%G_CONVERT_ERROR_ILLEGAL_SEQUENCE error. This is in contrast to the iconv()
specification, which leaves this behaviour implementation defined. Note that
this is the same error code as is returned for an invalid byte sequence in
the input character set. To get defined behaviour for conversion of
unrepresentable characters, use g_convert_with_fallback().


</description>
<parameters>
<parameter name="str">
<parameter_description>
the string to convert.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description>           the length of the string in bytes, or -1 if the string is
nul-terminated (Note that some encodings may allow nul
bytes to occur inside strings. In that case, using -1
for the @len parameter is unsafe)
</parameter_description>
</parameter>
<parameter name="converter">
<parameter_description>     conversion descriptor from g_iconv_open()
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> location to store the number of bytes in
the input string that were successfully converted, or %NULL.
Even if the conversion was successful, this may be 
less than @len if there were partial characters
at the end of the input. If the error
#G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
stored will be the byte offset after the last valid
input sequence.
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> the number of bytes stored in
the output buffer (not including the terminating nul).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>         location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError may occur.
</parameter_description>
</parameter>
</parameters>
<return>
If the conversion was successful, a newly allocated buffer
containing the converted string, which must be freed with
g_free(). Otherwise %NULL and @error will be set.
</return>
</function>

<function name="g_creat">
<description>
A wrapper for the POSIX creat() function. The creat() function is
used to convert a pathname into a file descriptor, creating a file
if necessary.

On POSIX systems file descriptors are implemented by the operating
system. On Windows, it's the C library that implements creat() and
file descriptors. The actual Windows API for opening files is
different, see MSDN documentation for CreateFile(). The Win32 API
uses file handles, which are more randomish integers, not small
integers like file descriptors.

Because file descriptors are specific to the C library on Windows,
the file descriptor returned by this function makes sense only to
functions in the same C library. Thus if the GLib-using code uses a
different C library than GLib does, the file descriptor returned by
this function cannot be passed to C library functions like write()
or read().

See your C library manual for more details about creat().

Since: 2.8

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> as in creat()
</parameter_description>
</parameter>
</parameters>
<return> a new file descriptor, or -1 if an error occurred.
The return value can be used exactly like the return value
from creat().

</return>
</function>

<function name="g_critical">
<description>
Logs a &quot;critical warning&quot; (#G_LOG_LEVEL_CRITICAL).
It's more or less application-defined what constitutes
a critical vs. a regular warning. You could call
g_log_set_always_fatal() to make critical warnings exit
the program, then use g_critical() for fatal errors, for
example.

You can also make critical warnings fatal at runtime by
setting the `G_DEBUG` environment variable (see
[Running GLib Applications](glib-running.html)):

|[
G_DEBUG=fatal-warnings gdb ./my-program
]|

Any unrelated failures can be skipped over in
[gdb](https://www.gnu.org/software/gdb/) using the `continue` command.

The message should typically *not* be translated to the
user's language.

If g_log_default_handler() is used as the log handler function, a new-line
character will automatically be appended to @..., and need not be entered
manually.

If structured logging is enabled, this will use g_log_structured();
otherwise it will use g_log(). See
[Using Structured Logging][using-structured-logging].

</description>
<parameters>
<parameter name="Varargs">
<parameter_description> format string, followed by parameters to insert
into the format string (as with printf())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_clear">
<description>
Frees all the data elements of the datalist.
The data elements' destroy functions are called
if they have been set.

</description>
<parameters>
<parameter name="datalist">
<parameter_description> a datalist.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_foreach">
<description>
Calls the given function for each data element of the datalist. The
function is called with each data element's #GQuark id and data,
together with the given @user_data parameter. Note that this
function is NOT thread-safe. So unless @datalist can be protected
from any modifications during invocation of this function, it should
not be called.

@func can make changes to @datalist, but the iteration will not
reflect changes made during the g_datalist_foreach() call, other
than skipping over elements that are removed.

</description>
<parameters>
<parameter name="datalist">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each data element.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_get_data">
<description>
Gets a data element, using its string identifier. This is slower than
g_datalist_id_get_data() because it compares strings.


</description>
<parameters>
<parameter name="datalist">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the string identifying a data element.
</parameter_description>
</parameter>
</parameters>
<return> the data element, or %NULL if it
is not found.
</return>
</function>

<function name="g_datalist_get_flags">
<description>
Gets flags values packed in together with the datalist.
See g_datalist_set_flags().

Since: 2.8

</description>
<parameters>
<parameter name="datalist">
<parameter_description> pointer to the location that holds a list
</parameter_description>
</parameter>
</parameters>
<return> the flags of the datalist

</return>
</function>

<function name="g_datalist_id_dup_data">
<description>
This is a variant of g_datalist_id_get_data() which
returns a 'duplicate' of the value. @dup_func defines the
meaning of 'duplicate' in this context, it could e.g.
take a reference on a ref-counted object.

If the @key_id is not set in the datalist then @dup_func
will be called with a %NULL argument.

Note that @dup_func is called while the datalist is locked, so it
is not allowed to read or modify the datalist.

This function can be useful to avoid races when multiple
threads are using the same datalist and the same key.

Since: 2.34

</description>
<parameters>
<parameter name="datalist">
<parameter_description> location of a datalist
</parameter_description>
</parameter>
<parameter name="key_id">
<parameter_description> the #GQuark identifying a data element
</parameter_description>
</parameter>
<parameter name="dup_func">
<parameter_description> function to duplicate the old value
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> passed as user_data to @dup_func
</parameter_description>
</parameter>
</parameters>
<return> the result of calling @dup_func on the value
associated with @key_id in @datalist, or %NULL if not set.
If @dup_func is %NULL, the value is returned unmodified.

</return>
</function>

<function name="g_datalist_id_get_data">
<description>
Retrieves the data element corresponding to @key_id.


</description>
<parameters>
<parameter name="datalist">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="key_id">
<parameter_description> the #GQuark identifying a data element.
</parameter_description>
</parameter>
</parameters>
<return> the data element, or %NULL if
it is not found.
</return>
</function>

<function name="g_datalist_id_remove_data">
<description>
Removes an element, using its #GQuark identifier.

</description>
<parameters>
<parameter name="dl">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="q">
<parameter_description> the #GQuark identifying the data element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_id_remove_no_notify">
<description>
Removes an element, without calling its destroy notification
function.


</description>
<parameters>
<parameter name="datalist">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="key_id">
<parameter_description> the #GQuark identifying a data element.
</parameter_description>
</parameter>
</parameters>
<return> the data previously stored at @key_id,
or %NULL if none.
</return>
</function>

<function name="g_datalist_id_replace_data">
<description>
Compares the member that is associated with @key_id in
@datalist to @oldval, and if they are the same, replace
@oldval with @newval.

This is like a typical atomic compare-and-exchange
operation, for a member of @datalist.

If the previous value was replaced then ownership of the
old value (@oldval) is passed to the caller, including
the registered destroy notify for it (passed out in @old_destroy).
Its up to the caller to free this as he wishes, which may
or may not include using @old_destroy as sometimes replacement
should not destroy the object in the normal way.

Since: 2.34

</description>
<parameters>
<parameter name="datalist">
<parameter_description> location of a datalist
</parameter_description>
</parameter>
<parameter name="key_id">
<parameter_description> the #GQuark identifying a data element
</parameter_description>
</parameter>
<parameter name="oldval">
<parameter_description> the old value to compare against
</parameter_description>
</parameter>
<parameter name="newval">
<parameter_description> the new value to replace it with
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> destroy notify for the new value
</parameter_description>
</parameter>
<parameter name="old_destroy">
<parameter_description> destroy notify for the existing value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the existing value for @key_id was replaced
by @newval, %FALSE otherwise.

</return>
</function>

<function name="g_datalist_id_set_data">
<description>
Sets the data corresponding to the given #GQuark id. Any previous
data with the same key is removed, and its destroy function is
called.

</description>
<parameters>
<parameter name="dl">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="q">
<parameter_description> the #GQuark to identify the data element.
</parameter_description>
</parameter>
<parameter name="d">
<parameter_description> the data element, or %NULL to remove any previous element
corresponding to @q.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_id_set_data_full">
<description>
Sets the data corresponding to the given #GQuark id, and the
function to be called when the element is removed from the datalist.
Any previous data with the same key is removed, and its destroy
function is called.

</description>
<parameters>
<parameter name="datalist">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="key_id">
<parameter_description> the #GQuark to identify the data element.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data element or %NULL to remove any previous element
corresponding to @key_id.
</parameter_description>
</parameter>
<parameter name="destroy_func">
<parameter_description> the function to call when the data element is
removed. This function will be called with the data
element and can be used to free any memory allocated
for it. If @data is %NULL, then @destroy_func must
also be %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_init">
<description>
Resets the datalist to %NULL. It does not free any memory or call
any destroy functions.

</description>
<parameters>
<parameter name="datalist">
<parameter_description> a pointer to a pointer to a datalist.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_remove_data">
<description>
Removes an element using its string identifier. The data element's
destroy function is called if it has been set.

</description>
<parameters>
<parameter name="dl">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the string identifying the data element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_remove_no_notify">
<description>
Removes an element, without calling its destroy notifier.

</description>
<parameters>
<parameter name="dl">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the string identifying the data element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_set_data">
<description>
Sets the data element corresponding to the given string identifier.

</description>
<parameters>
<parameter name="dl">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the string to identify the data element.
</parameter_description>
</parameter>
<parameter name="d">
<parameter_description> the data element, or %NULL to remove any previous element
corresponding to @k.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_set_data_full">
<description>
Sets the data element corresponding to the given string identifier,
and the function to be called when the data element is removed.

</description>
<parameters>
<parameter name="dl">
<parameter_description> a datalist.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the string to identify the data element.
</parameter_description>
</parameter>
<parameter name="d">
<parameter_description> the data element, or %NULL to remove any previous element
corresponding to @k.
</parameter_description>
</parameter>
<parameter name="f">
<parameter_description> the function to call when the data element is removed.
This function will be called with the data element and can be used to
free any memory allocated for it. If @d is %NULL, then @f must
also be %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_set_flags">
<description>
Turns on flag values for a data list. This function is used
to keep a small number of boolean flags in an object with
a data list without using any additional space. It is
not generally useful except in circumstances where space
is very tight. (It is used in the base #GObject type, for
example.)

Since: 2.8

</description>
<parameters>
<parameter name="datalist">
<parameter_description> pointer to the location that holds a list
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags to turn on. The values of the flags are
restricted by %G_DATALIST_FLAGS_MASK (currently
3; giving two possible boolean flags).
A value for @flags that doesn't fit within the mask is
an error.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_datalist_unset_flags">
<description>
Turns off flag values for a data list. See g_datalist_unset_flags()

Since: 2.8

</description>
<parameters>
<parameter name="datalist">
<parameter_description> pointer to the location that holds a list
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags to turn off. The values of the flags are
restricted by %G_DATALIST_FLAGS_MASK (currently
3: giving two possible boolean flags).
A value for @flags that doesn't fit within the mask is
an error.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dataset_destroy">
<description>
Destroys the dataset, freeing all memory allocated, and calling any
destroy functions set for data elements.

</description>
<parameters>
<parameter name="dataset_location">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dataset_foreach">
<description>
Calls the given function for each data element which is associated
with the given location. Note that this function is NOT thread-safe.
So unless @dataset_location can be protected from any modifications
during invocation of this function, it should not be called.

@func can make changes to the dataset, but the iteration will not
reflect changes made during the g_dataset_foreach() call, other
than skipping over elements that are removed.

</description>
<parameters>
<parameter name="dataset_location">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each data element.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dataset_get_data">
<description>
Gets the data element corresponding to a string.


</description>
<parameters>
<parameter name="l">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the string identifying the data element.
</parameter_description>
</parameter>
</parameters>
<return> the data element corresponding to
the string, or %NULL if it is not found.
</return>
</function>

<function name="g_dataset_id_get_data">
<description>
Gets the data element corresponding to a #GQuark.


</description>
<parameters>
<parameter name="dataset_location">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="key_id">
<parameter_description> the #GQuark id to identify the data element.
</parameter_description>
</parameter>
</parameters>
<return> the data element corresponding to
the #GQuark, or %NULL if it is not found.
</return>
</function>

<function name="g_dataset_id_remove_data">
<description>
Removes a data element from a dataset. The data element's destroy
function is called if it has been set.

</description>
<parameters>
<parameter name="l">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the #GQuark id identifying the data element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dataset_id_remove_no_notify">
<description>
Removes an element, without calling its destroy notification
function.


</description>
<parameters>
<parameter name="dataset_location">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="key_id">
<parameter_description> the #GQuark ID identifying the data element.
</parameter_description>
</parameter>
</parameters>
<return> the data previously stored at @key_id,
or %NULL if none.
</return>
</function>

<function name="g_dataset_id_set_data">
<description>
Sets the data element associated with the given #GQuark id. Any
previous data with the same key is removed, and its destroy function
is called.

</description>
<parameters>
<parameter name="l">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the #GQuark id to identify the data element.
</parameter_description>
</parameter>
<parameter name="d">
<parameter_description> the data element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dataset_id_set_data_full">
<description>
Sets the data element associated with the given #GQuark id, and also
the function to call when the data element is destroyed. Any
previous data with the same key is removed, and its destroy function
is called.

</description>
<parameters>
<parameter name="dataset_location">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="key_id">
<parameter_description> the #GQuark id to identify the data element.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data element.
</parameter_description>
</parameter>
<parameter name="destroy_func">
<parameter_description> the function to call when the data element is
removed. This function will be called with the data
element and can be used to free any memory allocated
for it.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dataset_remove_data">
<description>
Removes a data element corresponding to a string. Its destroy
function is called if it has been set.

</description>
<parameters>
<parameter name="l">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the string identifying the data element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dataset_remove_no_notify">
<description>
Removes an element, without calling its destroy notifier.

</description>
<parameters>
<parameter name="l">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the string identifying the data element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dataset_set_data">
<description>
Sets the data corresponding to the given string identifier.

</description>
<parameters>
<parameter name="l">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the string to identify the data element.
</parameter_description>
</parameter>
<parameter name="d">
<parameter_description> the data element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dataset_set_data_full">
<description>
Sets the data corresponding to the given string identifier, and the
function to call when the data element is destroyed.

</description>
<parameters>
<parameter name="l">
<parameter_description> the location identifying the dataset.
</parameter_description>
</parameter>
<parameter name="k">
<parameter_description> the string to identify the data element.
</parameter_description>
</parameter>
<parameter name="d">
<parameter_description> the data element.
</parameter_description>
</parameter>
<parameter name="f">
<parameter_description> the function to call when the data element is removed. This
function will be called with the data element and can be used to
free any memory allocated for it.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_add_days">
<description>
Increments a date some number of days.
To move forward by weeks, add weeks*7 days.
The date must be valid.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to increment
</parameter_description>
</parameter>
<parameter name="n_days">
<parameter_description> number of days to move the date forward
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_add_months">
<description>
Increments a date by some number of months.
If the day of the month is greater than 28,
this routine may change the day of the month
(because the destination month may not have
the current day in it). The date must be valid.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to increment
</parameter_description>
</parameter>
<parameter name="n_months">
<parameter_description> number of months to move forward
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_add_years">
<description>
Increments a date by some number of years.
If the date is February 29, and the destination
year is not a leap year, the date will be changed
to February 28. The date must be valid.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to increment
</parameter_description>
</parameter>
<parameter name="n_years">
<parameter_description> number of years to move forward
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_clamp">
<description>
If @date is prior to @min_date, sets @date equal to @min_date.
If @date falls after @max_date, sets @date equal to @max_date.
Otherwise, @date is unchanged.
Either of @min_date and @max_date may be %NULL.
All non-%NULL dates must be valid.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to clamp
</parameter_description>
</parameter>
<parameter name="min_date">
<parameter_description> minimum accepted value for @date
</parameter_description>
</parameter>
<parameter name="max_date">
<parameter_description> maximum accepted value for @date
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_clear">
<description>
Initializes one or more #GDate structs to a sane but invalid
state. The cleared dates will not represent an existing date, but will
not contain garbage. Useful to init a date declared on the stack.
Validity can be tested with g_date_valid().

</description>
<parameters>
<parameter name="date">
<parameter_description> pointer to one or more dates to clear
</parameter_description>
</parameter>
<parameter name="n_dates">
<parameter_description> number of dates to clear
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_compare">
<description>
qsort()-style comparison function for dates.
Both dates must be valid.


</description>
<parameters>
<parameter name="lhs">
<parameter_description> first date to compare
</parameter_description>
</parameter>
<parameter name="rhs">
<parameter_description> second date to compare
</parameter_description>
</parameter>
</parameters>
<return> 0 for equal, less than zero if @lhs is less than @rhs,
greater than zero if @lhs is greater than @rhs
</return>
</function>

<function name="g_date_copy">
<description>
Copies a GDate to a newly-allocated GDate. If the input was invalid
(as determined by g_date_valid()), the invalid state will be copied
as is into the new object.

Since: 2.56

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to copy
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GDate initialized from @date

</return>
</function>

<function name="g_date_days_between">
<description>
Computes the number of days between two dates.
If @date2 is prior to @date1, the returned value is negative.
Both dates must be valid.


</description>
<parameters>
<parameter name="date1">
<parameter_description> the first date
</parameter_description>
</parameter>
<parameter name="date2">
<parameter_description> the second date
</parameter_description>
</parameter>
</parameters>
<return> the number of days between @date1 and @date2
</return>
</function>

<function name="g_date_free">
<description>
Frees a #GDate returned from g_date_new().

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_get_day">
<description>
Returns the day of the month. The date must be valid.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to extract the day of the month from
</parameter_description>
</parameter>
</parameters>
<return> day of the month
</return>
</function>

<function name="g_date_get_day_of_year">
<description>
Returns the day of the year, where Jan 1 is the first day of the
year. The date must be valid.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to extract day of year from
</parameter_description>
</parameter>
</parameters>
<return> day of the year
</return>
</function>

<function name="g_date_get_days_in_month">
<description>
Returns the number of days in a month, taking leap
years into account.


</description>
<parameters>
<parameter name="month">
<parameter_description> month
</parameter_description>
</parameter>
<parameter name="year">
<parameter_description> year
</parameter_description>
</parameter>
</parameters>
<return> number of days in @month during the @year
</return>
</function>

<function name="g_date_get_iso8601_week_of_year">
<description>
Returns the week of the year, where weeks are interpreted according
to ISO 8601. 

Since: 2.6

</description>
<parameters>
<parameter name="date">
<parameter_description> a valid #GDate
</parameter_description>
</parameter>
</parameters>
<return> ISO 8601 week number of the year.

</return>
</function>

<function name="g_date_get_julian">
<description>
Returns the Julian day or &quot;serial number&quot; of the #GDate. The
Julian day is simply the number of days since January 1, Year 1; i.e.,
January 1, Year 1 is Julian day 1; January 2, Year 1 is Julian day 2,
etc. The date must be valid.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to extract the Julian day from
</parameter_description>
</parameter>
</parameters>
<return> Julian day
</return>
</function>

<function name="g_date_get_monday_week_of_year">
<description>
Returns the week of the year, where weeks are understood to start on
Monday. If the date is before the first Monday of the year, return 0.
The date must be valid.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate
</parameter_description>
</parameter>
</parameters>
<return> week of the year
</return>
</function>

<function name="g_date_get_monday_weeks_in_year">
<description>
Returns the number of weeks in the year, where weeks
are taken to start on Monday. Will be 52 or 53. The
date must be valid. (Years always have 52 7-day periods,
plus 1 or 2 extra days depending on whether it's a leap
year. This function is basically telling you how many
Mondays are in the year, i.e. there are 53 Mondays if
one of the extra days happens to be a Monday.)


</description>
<parameters>
<parameter name="year">
<parameter_description> a year
</parameter_description>
</parameter>
</parameters>
<return> number of Mondays in the year
</return>
</function>

<function name="g_date_get_month">
<description>
Returns the month of the year. The date must be valid.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to get the month from
</parameter_description>
</parameter>
</parameters>
<return> month of the year as a #GDateMonth
</return>
</function>

<function name="g_date_get_sunday_week_of_year">
<description>
Returns the week of the year during which this date falls, if
weeks are understood to begin on Sunday. The date must be valid.
Can return 0 if the day is before the first Sunday of the year.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate
</parameter_description>
</parameter>
</parameters>
<return> week number
</return>
</function>

<function name="g_date_get_sunday_weeks_in_year">
<description>
Returns the number of weeks in the year, where weeks
are taken to start on Sunday. Will be 52 or 53. The
date must be valid. (Years always have 52 7-day periods,
plus 1 or 2 extra days depending on whether it's a leap
year. This function is basically telling you how many
Sundays are in the year, i.e. there are 53 Sundays if
one of the extra days happens to be a Sunday.)


</description>
<parameters>
<parameter name="year">
<parameter_description> year to count weeks in
</parameter_description>
</parameter>
</parameters>
<return> the number of weeks in @year
</return>
</function>

<function name="g_date_get_weekday">
<description>
Returns the day of the week for a #GDate. The date must be valid.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate
</parameter_description>
</parameter>
</parameters>
<return> day of the week as a #GDateWeekday.
</return>
</function>

<function name="g_date_get_year">
<description>
Returns the year of a #GDate. The date must be valid.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate
</parameter_description>
</parameter>
</parameters>
<return> year in which the date falls
</return>
</function>

<function name="g_date_is_first_of_month">
<description>
Returns %TRUE if the date is on the first of a month.
The date must be valid.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the date is the first of the month
</return>
</function>

<function name="g_date_is_last_of_month">
<description>
Returns %TRUE if the date is the last day of the month.
The date must be valid.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the date is the last day of the month
</return>
</function>

<function name="g_date_is_leap_year">
<description>
Returns %TRUE if the year is a leap year.

For the purposes of this function, leap year is every year
divisible by 4 unless that year is divisible by 100. If it
is divisible by 100 it would be a leap year only if that year
is also divisible by 400.


</description>
<parameters>
<parameter name="year">
<parameter_description> year to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the year is a leap year
</return>
</function>

<function name="g_date_new">
<description>
Allocates a #GDate and initializes
it to a sane state. The new date will
be cleared (as if you'd called g_date_clear()) but invalid (it won't
represent an existing day). Free the return value with g_date_free().


</description>
<parameters>
</parameters>
<return> a newly-allocated #GDate
</return>
</function>

<function name="g_date_new_dmy">
<description>
Like g_date_new(), but also sets the value of the date. Assuming the
day-month-year triplet you pass in represents an existing day, the
returned date will be valid.


</description>
<parameters>
<parameter name="day">
<parameter_description> day of the month
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> month of the year
</parameter_description>
</parameter>
<parameter name="year">
<parameter_description> year
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GDate initialized with @day, @month, and @year
</return>
</function>

<function name="g_date_new_julian">
<description>
Like g_date_new(), but also sets the value of the date. Assuming the
Julian day number you pass in is valid (greater than 0, less than an
unreasonably large number), the returned date will be valid.


</description>
<parameters>
<parameter name="julian_day">
<parameter_description> days since January 1, Year 1
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GDate initialized with @julian_day
</return>
</function>

<function name="g_date_order">
<description>
Checks if @date1 is less than or equal to @date2,
and swap the values if this is not the case.

</description>
<parameters>
<parameter name="date1">
<parameter_description> the first date
</parameter_description>
</parameter>
<parameter name="date2">
<parameter_description> the second date
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_set_day">
<description>
Sets the day of the month for a #GDate. If the resulting
day-month-year triplet is invalid, the date will be invalid.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> day to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_set_dmy">
<description>
Sets the value of a #GDate from a day, month, and year.
The day-month-year triplet must be valid; if you aren't
sure it is, call g_date_valid_dmy() to check before you
set it.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> day
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> month
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> year
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_set_julian">
<description>
Sets the value of a #GDate from a Julian day number.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate
</parameter_description>
</parameter>
<parameter name="julian_date">
<parameter_description> Julian day number (days since January 1, Year 1)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_set_month">
<description>
Sets the month of the year for a #GDate.  If the resulting
day-month-year triplet is invalid, the date will be invalid.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> month to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_set_parse">
<description>
Parses a user-inputted string @str, and try to figure out what date it
represents, taking the [current locale][setlocale] into account. If the
string is successfully parsed, the date will be valid after the call.
Otherwise, it will be invalid. You should check using g_date_valid()
to see whether the parsing succeeded.

This function is not appropriate for file formats and the like; it
isn't very precise, and its exact behavior varies with the locale.
It's intended to be a heuristic routine that guesses what the user
means by a given string (and it does work pretty well in that
capacity).

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to fill in
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> string to parse
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_set_time">
<description>
Sets the value of a date from a #GTime value.
The time to date conversion is done using the user's current timezone.

Deprecated: 2.10: Use g_date_set_time_t() instead.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> #GTime value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_set_time_t">
<description>
Sets the value of a date to the date corresponding to a time 
specified as a time_t. The time to date conversion is done using 
the user's current timezone.

To set the value of a date to the current day, you could write:
|[&lt;!-- language=&quot;C&quot; --&gt;
g_date_set_time_t (date, time (NULL)); 
]|

Since: 2.10

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate 
</parameter_description>
</parameter>
<parameter name="timet">
<parameter_description> time_t value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_set_time_val">
<description>
Sets the value of a date from a #GTimeVal value.  Note that the
@tv_usec member is ignored, because #GDate can't make use of the
additional precision.

The time to date conversion is done using the user's current timezone.

Since: 2.10

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate 
</parameter_description>
</parameter>
<parameter name="timeval">
<parameter_description> #GTimeVal value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_set_year">
<description>
Sets the year for a #GDate. If the resulting day-month-year
triplet is invalid, the date will be invalid.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate
</parameter_description>
</parameter>
<parameter name="year">
<parameter_description> year to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_strftime">
<description>
Generates a printed representation of the date, in a
[locale][setlocale]-specific way.
Works just like the platform's C library strftime() function,
but only accepts date-related formats; time-related formats
give undefined results. Date must be valid. Unlike strftime()
(which uses the locale encoding), works on a UTF-8 format
string and stores a UTF-8 result.

This function does not provide any conversion specifiers in
addition to those implemented by the platform's C library.
For example, don't expect that using g_date_strftime() would
make the \%F provided by the C99 strftime() work on Windows
where the C library only complies to C89.


</description>
<parameters>
<parameter name="s">
<parameter_description> destination buffer
</parameter_description>
</parameter>
<parameter name="slen">
<parameter_description> buffer size
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> format string
</parameter_description>
</parameter>
<parameter name="date">
<parameter_description> valid #GDate
</parameter_description>
</parameter>
</parameters>
<return> number of characters written to the buffer, or 0 the buffer was too small
</return>
</function>

<function name="g_date_subtract_days">
<description>
Moves a date some number of days into the past.
To move by weeks, just move by weeks*7 days.
The date must be valid.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to decrement
</parameter_description>
</parameter>
<parameter name="n_days">
<parameter_description> number of days to move
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_subtract_months">
<description>
Moves a date some number of months into the past.
If the current day of the month doesn't exist in
the destination month, the day of the month
may change. The date must be valid.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to decrement
</parameter_description>
</parameter>
<parameter name="n_months">
<parameter_description> number of months to move
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_subtract_years">
<description>
Moves a date some number of years into the past.
If the current day doesn't exist in the destination
year (i.e. it's February 29 and you move to a non-leap-year)
then the day is changed to February 29. The date
must be valid.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to decrement
</parameter_description>
</parameter>
<parameter name="n_years">
<parameter_description> number of years to move
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_time_add">
<description>
Creates a copy of @datetime and adds the specified timespan to the copy.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="timespan">
<parameter_description> a #GTimeSpan
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime which should be freed with
g_date_time_unref().

</return>
</function>

<function name="g_date_time_add_days">
<description>
Creates a copy of @datetime and adds the specified number of days to the
copy. Add negative values to subtract days.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="days">
<parameter_description> the number of days
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime which should be freed with
g_date_time_unref().

</return>
</function>

<function name="g_date_time_add_full">
<description>
Creates a new #GDateTime adding the specified values to the current date and
time in @datetime. Add negative values to subtract.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="years">
<parameter_description> the number of years to add
</parameter_description>
</parameter>
<parameter name="months">
<parameter_description> the number of months to add
</parameter_description>
</parameter>
<parameter name="days">
<parameter_description> the number of days to add
</parameter_description>
</parameter>
<parameter name="hours">
<parameter_description> the number of hours to add
</parameter_description>
</parameter>
<parameter name="minutes">
<parameter_description> the number of minutes to add
</parameter_description>
</parameter>
<parameter name="seconds">
<parameter_description> the number of seconds to add
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime that should be freed with
g_date_time_unref().

</return>
</function>

<function name="g_date_time_add_hours">
<description>
Creates a copy of @datetime and adds the specified number of hours.
Add negative values to subtract hours.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="hours">
<parameter_description> the number of hours to add
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime which should be freed with
g_date_time_unref().

</return>
</function>

<function name="g_date_time_add_minutes">
<description>
Creates a copy of @datetime adding the specified number of minutes.
Add negative values to subtract minutes.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="minutes">
<parameter_description> the number of minutes to add
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime which should be freed with
g_date_time_unref().

</return>
</function>

<function name="g_date_time_add_months">
<description>
Creates a copy of @datetime and adds the specified number of months to the
copy. Add negative values to subtract months.

The day of the month of the resulting #GDateTime is clamped to the number
of days in the updated calendar month. For example, if adding 1 month to
31st January 2018, the result would be 28th February 2018. In 2020 (a leap
year), the result would be 29th February.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="months">
<parameter_description> the number of months
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime which should be freed with
g_date_time_unref().

</return>
</function>

<function name="g_date_time_add_seconds">
<description>
Creates a copy of @datetime and adds the specified number of seconds.
Add negative values to subtract seconds.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="seconds">
<parameter_description> the number of seconds to add
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime which should be freed with
g_date_time_unref().

</return>
</function>

<function name="g_date_time_add_weeks">
<description>
Creates a copy of @datetime and adds the specified number of weeks to the
copy. Add negative values to subtract weeks.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="weeks">
<parameter_description> the number of weeks
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime which should be freed with
g_date_time_unref().

</return>
</function>

<function name="g_date_time_add_years">
<description>
Creates a copy of @datetime and adds the specified number of years to the
copy. Add negative values to subtract years.

As with g_date_time_add_months(), if the resulting date would be 29th
February on a non-leap year, the day will be clamped to 28th February.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="years">
<parameter_description> the number of years
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime which should be freed with
g_date_time_unref().

</return>
</function>

<function name="g_date_time_compare">
<description>
A comparison function for #GDateTimes that is suitable
as a #GCompareFunc. Both #GDateTimes must be non-%NULL.

Since: 2.26

</description>
<parameters>
<parameter name="dt1">
<parameter_description> first #GDateTime to compare
</parameter_description>
</parameter>
<parameter name="dt2">
<parameter_description> second #GDateTime to compare
</parameter_description>
</parameter>
</parameters>
<return> -1, 0 or 1 if @dt1 is less than, equal to or greater
than @dt2.

</return>
</function>

<function name="g_date_time_difference">
<description>
Calculates the difference in time between @end and @begin.  The
#GTimeSpan that is returned is effectively @end - @begin (ie:
positive if the first parameter is larger).

Since: 2.26

</description>
<parameters>
<parameter name="end">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="begin">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the difference between the two #GDateTime, as a time
span expressed in microseconds.

</return>
</function>

<function name="g_date_time_equal">
<description>
Checks to see if @dt1 and @dt2 are equal.

Equal here means that they represent the same moment after converting
them to the same time zone.

Since: 2.26

</description>
<parameters>
<parameter name="dt1">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="dt2">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @dt1 and @dt2 are equal

</return>
</function>

<function name="g_date_time_format">
<description>
Creates a newly allocated string representing the requested @format.

The format strings understood by this function are a subset of the
strftime() format language as specified by C99.  The \%D, \%U and \%W
conversions are not supported, nor is the 'E' modifier.  The GNU
extensions \%k, \%l, \%s and \%P are supported, however, as are the
'0', '_' and '-' modifiers.

In contrast to strftime(), this function always produces a UTF-8
string, regardless of the current locale.  Note that the rendering of
many formats is locale-dependent and may not match the strftime()
output exactly.

The following format specifiers are supported:

- \%a: the abbreviated weekday name according to the current locale
- \%A: the full weekday name according to the current locale
- \%b: the abbreviated month name according to the current locale
- \%B: the full month name according to the current locale
- \%c: the preferred date and time representation for the current locale
- \%C: the century number (year/100) as a 2-digit integer (00-99)
- \%d: the day of the month as a decimal number (range 01 to 31)
- \%e: the day of the month as a decimal number (range  1 to 31)
- \%F: equivalent to `%Y-%m-%d` (the ISO 8601 date format)
- \%g: the last two digits of the ISO 8601 week-based year as a
decimal number (00-99). This works well with \%V and \%u.
- \%G: the ISO 8601 week-based year as a decimal number. This works
well with \%V and \%u.
- \%h: equivalent to \%b
- \%H: the hour as a decimal number using a 24-hour clock (range 00 to 23)
- \%I: the hour as a decimal number using a 12-hour clock (range 01 to 12)
- \%j: the day of the year as a decimal number (range 001 to 366)
- \%k: the hour (24-hour clock) as a decimal number (range 0 to 23);
single digits are preceded by a blank
- \%l: the hour (12-hour clock) as a decimal number (range 1 to 12);
single digits are preceded by a blank
- \%m: the month as a decimal number (range 01 to 12)
- \%M: the minute as a decimal number (range 00 to 59)
- \%p: either &quot;AM&quot; or &quot;PM&quot; according to the given time value, or the
corresponding  strings for the current locale.  Noon is treated as
&quot;PM&quot; and midnight as &quot;AM&quot;.
- \%P: like \%p but lowercase: &quot;am&quot; or &quot;pm&quot; or a corresponding string for
the current locale
- \%r: the time in a.m. or p.m. notation
- \%R: the time in 24-hour notation (\%H:\%M)
- \%s: the number of seconds since the Epoch, that is, since 1970-01-01
00:00:00 UTC
- \%S: the second as a decimal number (range 00 to 60)
- \%t: a tab character
- \%T: the time in 24-hour notation with seconds (\%H:\%M:\%S)
- \%u: the ISO 8601 standard day of the week as a decimal, range 1 to 7,
Monday being 1. This works well with \%G and \%V.
- \%V: the ISO 8601 standard week number of the current year as a decimal
number, range 01 to 53, where week 1 is the first week that has at
least 4 days in the new year. See g_date_time_get_week_of_year().
This works well with \%G and \%u.
- \%w: the day of the week as a decimal, range 0 to 6, Sunday being 0.
This is not the ISO 8601 standard format -- use \%u instead.
- \%x: the preferred date representation for the current locale without
the time
- \%X: the preferred time representation for the current locale without
the date
- \%y: the year as a decimal number without the century
- \%Y: the year as a decimal number including the century
- \%z: the time zone as an offset from UTC (+hhmm)
- \%:z: the time zone as an offset from UTC (+hh:mm).
This is a gnulib strftime() extension. Since: 2.38
- \%::z: the time zone as an offset from UTC (+hh:mm:ss). This is a
gnulib strftime() extension. Since: 2.38
- \%:::z: the time zone as an offset from UTC, with : to necessary
precision (e.g., -04, +05:30). This is a gnulib strftime() extension. Since: 2.38
- \%Z: the time zone or name or abbreviation
- \%\%: a literal \% character

Some conversion specifications can be modified by preceding the
conversion specifier by one or more modifier characters. The
following modifiers are supported for many of the numeric
conversions:

- O: Use alternative numeric symbols, if the current locale supports those.
- _: Pad a numeric result with spaces. This overrides the default padding
for the specifier.
- -: Do not pad a numeric result. This overrides the default padding
for the specifier.
- 0: Pad a numeric result with zeros. This overrides the default padding
for the specifier.

Additionally, when O is used with B, b, or h, it produces the alternative
form of a month name. The alternative form should be used when the month
name is used without a day number (e.g., standalone). It is required in
some languages (Baltic, Slavic, Greek, and more) due to their grammatical
rules. For other languages there is no difference. \%OB is a GNU and BSD
strftime() extension expected to be added to the future POSIX specification,
\%Ob and \%Oh are GNU strftime() extensions. Since: 2.56

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> A #GDateTime
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a valid UTF-8 string, containing the format for the
#GDateTime
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string formatted to the requested format
or %NULL in the case that there was an error (such as a format specifier
not being supported in the current locale). The string
should be freed with g_free().

</return>
</function>

<function name="g_date_time_get_day_of_month">
<description>
Retrieves the day of the month represented by @datetime in the gregorian
calendar.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the day of the month

</return>
</function>

<function name="g_date_time_get_day_of_week">
<description>
Retrieves the ISO 8601 day of the week on which @datetime falls (1 is
Monday, 2 is Tuesday... 7 is Sunday).

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the day of the week

</return>
</function>

<function name="g_date_time_get_day_of_year">
<description>
Retrieves the day of the year represented by @datetime in the Gregorian
calendar.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the day of the year

</return>
</function>

<function name="g_date_time_get_hour">
<description>
Retrieves the hour of the day represented by @datetime

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the hour of the day

</return>
</function>

<function name="g_date_time_get_microsecond">
<description>
Retrieves the microsecond of the date represented by @datetime

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the microsecond of the second

</return>
</function>

<function name="g_date_time_get_minute">
<description>
Retrieves the minute of the hour represented by @datetime

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the minute of the hour

</return>
</function>

<function name="g_date_time_get_month">
<description>
Retrieves the month of the year represented by @datetime in the Gregorian
calendar.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the month represented by @datetime

</return>
</function>

<function name="g_date_time_get_second">
<description>
Retrieves the second of the minute represented by @datetime

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the second represented by @datetime

</return>
</function>

<function name="g_date_time_get_seconds">
<description>
Retrieves the number of seconds since the start of the last minute,
including the fractional part.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the number of seconds

</return>
</function>

<function name="g_date_time_get_timezone_abbreviation">
<description>
Determines the time zone abbreviation to be used at the time and in
the time zone of @datetime.

For example, in Toronto this is currently &quot;EST&quot; during the winter
months and &quot;EDT&quot; during the summer months when daylight savings
time is in effect.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the time zone abbreviation. The returned
string is owned by the #GDateTime and it should not be
modified or freed

</return>
</function>

<function name="g_date_time_get_utc_offset">
<description>
Determines the offset to UTC in effect at the time and in the time
zone of @datetime.

The offset is the number of microseconds that you add to UTC time to
arrive at local time for the time zone (ie: negative numbers for time
zones west of GMT, positive numbers for east).

If @datetime represents UTC time, then the offset is always zero.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the number of microseconds that should be added to UTC to
get the local time

</return>
</function>

<function name="g_date_time_get_week_numbering_year">
<description>
Returns the ISO 8601 week-numbering year in which the week containing
@datetime falls.

This function, taken together with g_date_time_get_week_of_year() and
g_date_time_get_day_of_week() can be used to determine the full ISO
week date on which @datetime falls.

This is usually equal to the normal Gregorian year (as returned by
g_date_time_get_year()), except as detailed below:

For Thursday, the week-numbering year is always equal to the usual
calendar year.  For other days, the number is such that every day
within a complete week (Monday to Sunday) is contained within the
same week-numbering year.

For Monday, Tuesday and Wednesday occurring near the end of the year,
this may mean that the week-numbering year is one greater than the
calendar year (so that these days have the same week-numbering year
as the Thursday occurring early in the next year).

For Friday, Saturday and Sunday occurring near the start of the year,
this may mean that the week-numbering year is one less than the
calendar year (so that these days have the same week-numbering year
as the Thursday occurring late in the previous year).

An equivalent description is that the week-numbering year is equal to
the calendar year containing the majority of the days in the current
week (Monday to Sunday).

Note that January 1 0001 in the proleptic Gregorian calendar is a
Monday, so this function never returns 0.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the ISO 8601 week-numbering year for @datetime

</return>
</function>

<function name="g_date_time_get_week_of_year">
<description>
Returns the ISO 8601 week number for the week containing @datetime.
The ISO 8601 week number is the same for every day of the week (from
Moday through Sunday).  That can produce some unusual results
(described below).

The first week of the year is week 1.  This is the week that contains
the first Thursday of the year.  Equivalently, this is the first week
that has more than 4 of its days falling within the calendar year.

The value 0 is never returned by this function.  Days contained
within a year but occurring before the first ISO 8601 week of that
year are considered as being contained in the last week of the
previous year.  Similarly, the final days of a calendar year may be
considered as being part of the first ISO 8601 week of the next year
if 4 or more days of that week are contained within the new year.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the ISO 8601 week number for @datetime.

</return>
</function>

<function name="g_date_time_get_year">
<description>
Retrieves the year represented by @datetime in the Gregorian calendar.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> A #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the year represented by @datetime

</return>
</function>

<function name="g_date_time_get_ymd">
<description>
Retrieves the Gregorian day, month, and year of a given #GDateTime.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime.
</parameter_description>
</parameter>
<parameter name="year">
<parameter_description> the return location for the gregorian year, or %NULL.
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> the return location for the month of the year, or %NULL.
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> the return location for the day of the month, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_time_hash">
<description>
Hashes @datetime into a #guint, suitable for use within #GHashTable.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> a #guint containing the hash

</return>
</function>

<function name="g_date_time_is_daylight_savings">
<description>
Determines if daylight savings time is in effect at the time and in
the time zone of @datetime.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if daylight savings time is in effect

</return>
</function>

<function name="g_date_time_new">
<description>
Creates a new #GDateTime corresponding to the given date and time in
the time zone @tz.

The @year must be between 1 and 9999, @month between 1 and 12 and @day
between 1 and 28, 29, 30 or 31 depending on the month and the year.

@hour must be between 0 and 23 and @minute must be between 0 and 59.

@seconds must be at least 0.0 and must be strictly less than 60.0.
It will be rounded down to the nearest microsecond.

If the given time is not representable in the given time zone (for
example, 02:30 on March 14th 2010 in Toronto, due to daylight savings
time) then the time will be rounded up to the nearest existing time
(in this case, 03:00).  If this matters to you then you should verify
the return value for containing the same as the numbers you gave.

In the case that the given time is ambiguous in the given time zone
(for example, 01:30 on November 7th 2010 in Toronto, due to daylight
savings time) then the time falling within standard (ie:
non-daylight) time is taken.

It not considered a programmer error for the values to this function
to be out of range, but in the case that they are, the function will
return %NULL.

You should release the return value by calling g_date_time_unref()
when you are done with it.

Since: 2.26

</description>
<parameters>
<parameter name="tz">
<parameter_description> a #GTimeZone
</parameter_description>
</parameter>
<parameter name="year">
<parameter_description> the year component of the date
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> the month component of the date
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> the day component of the date
</parameter_description>
</parameter>
<parameter name="hour">
<parameter_description> the hour component of the date
</parameter_description>
</parameter>
<parameter name="minute">
<parameter_description> the minute component of the date
</parameter_description>
</parameter>
<parameter name="seconds">
<parameter_description> the number of seconds past the minute
</parameter_description>
</parameter>
</parameters>
<return> a new #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_new_from_iso8601">
<description>
Creates a #GDateTime corresponding to the given
[ISO 8601 formatted string](https://en.wikipedia.org/wiki/ISO_8601)
@text. ISO 8601 strings of the form &lt;date&gt;&lt;sep&gt;&lt;time&gt;&lt;tz&gt; are supported.

&lt;sep&gt; is the separator and can be either 'T', 't' or ' '.

&lt;date&gt; is in the form:

- `YYYY-MM-DD` - Year/month/day, e.g. 2016-08-24.
- `YYYYMMDD` - Same as above without dividers.
- `YYYY-DDD` - Ordinal day where DDD is from 001 to 366, e.g. 2016-237.
- `YYYYDDD` - Same as above without dividers.
- `YYYY-Www-D` - Week day where ww is from 01 to 52 and D from 1-7,
e.g. 2016-W34-3.
- `YYYYWwwD` - Same as above without dividers.

&lt;time&gt; is in the form:

- `hh:mm:ss(.sss)` - Hours, minutes, seconds (subseconds), e.g. 22:10:42.123.
- `hhmmss(.sss)` - Same as above without dividers.

&lt;tz&gt; is an optional timezone suffix of the form:

- `Z` - UTC.
- `+hh:mm` or `-hh:mm` - Offset from UTC in hours and minutes, e.g. +12:00.
- `+hh` or `-hh` - Offset from UTC in hours, e.g. +12.

If the timezone is not provided in @text it must be provided in @default_tz
(this field is otherwise ignored).

This call can fail (returning %NULL) if @text is not a valid ISO 8601
formatted string.

You should release the return value by calling g_date_time_unref()
when you are done with it.

Since: 2.56

</description>
<parameters>
<parameter name="text">
<parameter_description> an ISO 8601 formatted time string.
</parameter_description>
</parameter>
<parameter name="default_tz">
<parameter_description> a #GTimeZone to use if the text doesn't contain a
timezone, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a new #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_new_from_timeval_local">
<description>
Creates a #GDateTime corresponding to the given #GTimeVal @tv in the
local time zone.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC, regardless of the
local time offset.

This call can fail (returning %NULL) if @tv represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.

Since: 2.26

</description>
<parameters>
<parameter name="tv">
<parameter_description> a #GTimeVal
</parameter_description>
</parameter>
</parameters>
<return> a new #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_new_from_timeval_utc">
<description>
Creates a #GDateTime corresponding to the given #GTimeVal @tv in UTC.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC.

This call can fail (returning %NULL) if @tv represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.

Since: 2.26

</description>
<parameters>
<parameter name="tv">
<parameter_description> a #GTimeVal
</parameter_description>
</parameter>
</parameters>
<return> a new #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_new_from_unix_local">
<description>
Creates a #GDateTime corresponding to the given Unix time @t in the
local time zone.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC, regardless of the local time offset.

This call can fail (returning %NULL) if @t represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.

Since: 2.26

</description>
<parameters>
<parameter name="t">
<parameter_description> the Unix time
</parameter_description>
</parameter>
</parameters>
<return> a new #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_new_from_unix_utc">
<description>
Creates a #GDateTime corresponding to the given Unix time @t in UTC.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC.

This call can fail (returning %NULL) if @t represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.

Since: 2.26

</description>
<parameters>
<parameter name="t">
<parameter_description> the Unix time
</parameter_description>
</parameter>
</parameters>
<return> a new #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_new_local">
<description>
Creates a new #GDateTime corresponding to the given date and time in
the local time zone.

This call is equivalent to calling g_date_time_new() with the time
zone returned by g_time_zone_new_local().

Since: 2.26

</description>
<parameters>
<parameter name="year">
<parameter_description> the year component of the date
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> the month component of the date
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> the day component of the date
</parameter_description>
</parameter>
<parameter name="hour">
<parameter_description> the hour component of the date
</parameter_description>
</parameter>
<parameter name="minute">
<parameter_description> the minute component of the date
</parameter_description>
</parameter>
<parameter name="seconds">
<parameter_description> the number of seconds past the minute
</parameter_description>
</parameter>
</parameters>
<return> a #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_new_now">
<description>
Creates a #GDateTime corresponding to this exact instant in the given
time zone @tz.  The time is as accurate as the system allows, to a
maximum accuracy of 1 microsecond.

This function will always succeed unless the system clock is set to
truly insane values (or unless GLib is still being used after the
year 9999).

You should release the return value by calling g_date_time_unref()
when you are done with it.

Since: 2.26

</description>
<parameters>
<parameter name="tz">
<parameter_description> a #GTimeZone
</parameter_description>
</parameter>
</parameters>
<return> a new #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_new_now_local">
<description>
Creates a #GDateTime corresponding to this exact instant in the local
time zone.

This is equivalent to calling g_date_time_new_now() with the time
zone returned by g_time_zone_new_local().

Since: 2.26

</description>
<parameters>
</parameters>
<return> a new #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_new_now_utc">
<description>
Creates a #GDateTime corresponding to this exact instant in UTC.

This is equivalent to calling g_date_time_new_now() with the time
zone returned by g_time_zone_new_utc().

Since: 2.26

</description>
<parameters>
</parameters>
<return> a new #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_new_utc">
<description>
Creates a new #GDateTime corresponding to the given date and time in
UTC.

This call is equivalent to calling g_date_time_new() with the time
zone returned by g_time_zone_new_utc().

Since: 2.26

</description>
<parameters>
<parameter name="year">
<parameter_description> the year component of the date
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> the month component of the date
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> the day component of the date
</parameter_description>
</parameter>
<parameter name="hour">
<parameter_description> the hour component of the date
</parameter_description>
</parameter>
<parameter name="minute">
<parameter_description> the minute component of the date
</parameter_description>
</parameter>
<parameter name="seconds">
<parameter_description> the number of seconds past the minute
</parameter_description>
</parameter>
</parameters>
<return> a #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_ref">
<description>
Atomically increments the reference count of @datetime by one.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the #GDateTime with the reference count increased

</return>
</function>

<function name="g_date_time_to_local">
<description>
Creates a new #GDateTime corresponding to the same instant in time as
@datetime, but in the local time zone.

This call is equivalent to calling g_date_time_to_timezone() with the
time zone returned by g_time_zone_new_local().

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime

</return>
</function>

<function name="g_date_time_to_timeval">
<description>
Stores the instant in time that @datetime represents into @tv.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC, regardless of the time
zone associated with @datetime.

On systems where 'long' is 32bit (ie: all 32bit systems and all
Windows systems), a #GTimeVal is incapable of storing the entire
range of values that #GDateTime is capable of expressing.  On those
systems, this function returns %FALSE to indicate that the time is
out of range.

On systems where 'long' is 64bit, this function never fails.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="tv">
<parameter_description> a #GTimeVal to modify
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, else %FALSE

</return>
</function>

<function name="g_date_time_to_timezone">
<description>
Create a new #GDateTime corresponding to the same instant in time as
@datetime, but in the time zone @tz.

This call can fail in the case that the time goes out of bounds.  For
example, converting 0001-01-01 00:00:00 UTC to a time zone west of
Greenwich will fail (due to the year 0 being out of range).

You should release the return value by calling g_date_time_unref()
when you are done with it.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
<parameter name="tz">
<parameter_description> the new #GTimeZone
</parameter_description>
</parameter>
</parameters>
<return> a new #GDateTime, or %NULL

</return>
</function>

<function name="g_date_time_to_unix">
<description>
Gives the Unix time corresponding to @datetime, rounding down to the
nearest second.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC, regardless of the time zone associated with @datetime.

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the Unix time corresponding to @datetime

</return>
</function>

<function name="g_date_time_to_utc">
<description>
Creates a new #GDateTime corresponding to the same instant in time as
@datetime, but in UTC.

This call is equivalent to calling g_date_time_to_timezone() with the
time zone returned by g_time_zone_new_utc().

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GDateTime

</return>
</function>

<function name="g_date_time_unref">
<description>
Atomically decrements the reference count of @datetime by one.

When the reference count reaches zero, the resources allocated by
@datetime are freed

Since: 2.26

</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GDateTime
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_to_struct_tm">
<description>
Fills in the date-related bits of a struct tm using the @date value.
Initializes the non-date parts with something sane but meaningless.

</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to set the struct tm from
</parameter_description>
</parameter>
<parameter name="tm">
<parameter_description> struct tm to fill
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_date_valid">
<description>
Returns %TRUE if the #GDate represents an existing day. The date must not
contain garbage; it should have been initialized with g_date_clear()
if it wasn't allocated by one of the g_date_new() variants.


</description>
<parameters>
<parameter name="date">
<parameter_description> a #GDate to check
</parameter_description>
</parameter>
</parameters>
<return> Whether the date is valid
</return>
</function>

<function name="g_date_valid_day">
<description>
Returns %TRUE if the day of the month is valid (a day is valid if it's
between 1 and 31 inclusive).


</description>
<parameters>
<parameter name="day">
<parameter_description> day to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the day is valid
</return>
</function>

<function name="g_date_valid_dmy">
<description>
Returns %TRUE if the day-month-year triplet forms a valid, existing day
in the range of days #GDate understands (Year 1 or later, no more than
a few thousand years in the future).


</description>
<parameters>
<parameter name="day">
<parameter_description> day
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> month
</parameter_description>
</parameter>
<parameter name="year">
<parameter_description> year
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the date is a valid one
</return>
</function>

<function name="g_date_valid_julian">
<description>
Returns %TRUE if the Julian day is valid. Anything greater than zero
is basically a valid Julian, though there is a 32-bit limit.


</description>
<parameters>
<parameter name="julian_date">
<parameter_description> Julian day to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the Julian day is valid
</return>
</function>

<function name="g_date_valid_month">
<description>
Returns %TRUE if the month value is valid. The 12 #GDateMonth
enumeration values are the only valid months.


</description>
<parameters>
<parameter name="month">
<parameter_description> month
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the month is valid
</return>
</function>

<function name="g_date_valid_weekday">
<description>
Returns %TRUE if the weekday is valid. The seven #GDateWeekday enumeration
values are the only valid weekdays.


</description>
<parameters>
<parameter name="weekday">
<parameter_description> weekday
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the weekday is valid
</return>
</function>

<function name="g_date_valid_year">
<description>
Returns %TRUE if the year is valid. Any year greater than 0 is valid,
though there is a 16-bit limit to what #GDate will understand.


</description>
<parameters>
<parameter name="year">
<parameter_description> year
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the year is valid
</return>
</function>

<function name="g_dcgettext">
<description>
This is a variant of g_dgettext() that allows specifying a locale
category instead of always using `LC_MESSAGES`. See g_dgettext() for
more information about how this functions differs from calling
dcgettext() directly.

Since: 2.26

</description>
<parameters>
<parameter name="domain">
<parameter_description> the translation domain to use, or %NULL to use
the domain set with textdomain()
</parameter_description>
</parameter>
<parameter name="msgid">
<parameter_description> message to translate
</parameter_description>
</parameter>
<parameter name="category">
<parameter_description> a locale category
</parameter_description>
</parameter>
</parameters>
<return> the translated string for the given locale category

</return>
</function>

<function name="g_debug">
<description>
A convenience function/macro to log a debug message. The message should
typically *not* be translated to the user's language.

If g_log_default_handler() is used as the log handler function, a new-line
character will automatically be appended to @..., and need not be entered
manually.

Such messages are suppressed by the g_log_default_handler() and
g_log_writer_default() unless the `G_MESSAGES_DEBUG` environment variable is
set appropriately.

If structured logging is enabled, this will use g_log_structured();
otherwise it will use g_log(). See
[Using Structured Logging][using-structured-logging].

Since: 2.6

</description>
<parameters>
<parameter name="Varargs">
<parameter_description> format string, followed by parameters to insert
into the format string (as with printf())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dgettext">
<description>
This function is a wrapper of dgettext() which does not translate
the message if the default domain as set with textdomain() has no
translations for the current locale.

The advantage of using this function over dgettext() proper is that
libraries using this function (like GTK+) will not use translations
if the application using the library does not have translations for
the current locale.  This results in a consistent English-only
interface instead of one having partial translations.  For this
feature to work, the call to textdomain() and setlocale() should
precede any g_dgettext() invocations.  For GTK+, it means calling
textdomain() before gtk_init or its variants.

This function disables translations if and only if upon its first
call all the following conditions hold:

- @domain is not %NULL

- textdomain() has been called to set a default text domain

- there is no translations available for the default text domain
and the current locale

- current locale is not &quot;C&quot; or any English locales (those
starting with &quot;en_&quot;)

Note that this behavior may not be desired for example if an application
has its untranslated messages in a language other than English. In those
cases the application should call textdomain() after initializing GTK+.

Applications should normally not use this function directly,
but use the _() macro for translations.

Since: 2.18

</description>
<parameters>
<parameter name="domain">
<parameter_description> the translation domain to use, or %NULL to use
the domain set with textdomain()
</parameter_description>
</parameter>
<parameter name="msgid">
<parameter_description> message to translate
</parameter_description>
</parameter>
</parameters>
<return> The translated string

</return>
</function>

<function name="g_dir_close">
<description>
Closes the directory and deallocates all related resources.

</description>
<parameters>
<parameter name="dir">
<parameter_description> a #GDir* created by g_dir_open()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_dir_make_tmp">
<description>
Creates a subdirectory in the preferred directory for temporary
files (as returned by g_get_tmp_dir()).

@tmpl should be a string in the GLib file name encoding containing
a sequence of six 'X' characters, as the parameter to g_mkstemp().
However, unlike these functions, the template should only be a
basename, no directory components are allowed. If template is
%NULL, a default template is used.

Note that in contrast to g_mkdtemp() (and mkdtemp()) @tmpl is not
modified, and might thus be a read-only literal string.

Since: 2.30

</description>
<parameters>
<parameter name="tmpl">
<parameter_description> Template for directory name,
as in g_mkdtemp(), basename only, or %NULL for a default template
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> The actual name used. This string
should be freed with g_free() when not needed any longer and is
is in the GLib file name encoding. In case of errors, %NULL is
returned and @error will be set.

</return>
</function>

<function name="g_dir_open">
<description>
Opens a directory for reading. The names of the files in the
directory can then be retrieved using g_dir_read_name().  Note
that the ordering is not defined.


</description>
<parameters>
<parameter name="path">
<parameter_description> the path to the directory you are interested in. On Unix
in the on-disk encoding. On Windows in UTF-8
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Currently must be set to 0. Reserved for future use.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL.
If non-%NULL, an error will be set if and only if
g_dir_open() fails.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GDir on success, %NULL on failure.
If non-%NULL, you must free the result with g_dir_close()
when you are finished with it.
</return>
</function>

<function name="g_dir_read_name">
<description>
Retrieves the name of another entry in the directory, or %NULL.
The order of entries returned from this function is not defined,
and may vary by file system or other operating-system dependent
factors.

%NULL may also be returned in case of errors. On Unix, you can
check `errno` to find out if %NULL was returned because of an error.

On Unix, the '.' and '..' entries are omitted, and the returned
name is in the on-disk encoding.

On Windows, as is true of all GLib functions which operate on
filenames, the returned name is in UTF-8.


</description>
<parameters>
<parameter name="dir">
<parameter_description> a #GDir* created by g_dir_open()
</parameter_description>
</parameter>
</parameters>
<return> The entry's name or %NULL if there are no
more entries. The return value is owned by GLib and
must not be modified or freed.
</return>
</function>

<function name="g_dir_rewind">
<description>
Resets the given directory. The next call to g_dir_read_name()
will return the first entry again.

</description>
<parameters>
<parameter name="dir">
<parameter_description> a #GDir* created by g_dir_open()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_direct_equal">
<description>
Compares two #gpointer arguments and returns %TRUE if they are equal.
It can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using opaque pointers compared by pointer value as
keys in a #GHashTable.

This equality function is also appropriate for keys that are integers
stored in pointers, such as `GINT_TO_POINTER (n)`.


</description>
<parameters>
<parameter name="v1">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="v2">
<parameter_description> a key to compare with @v1
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two keys match.
</return>
</function>

<function name="g_direct_hash">
<description>
Converts a gpointer to a hash value.
It can be passed to g_hash_table_new() as the @hash_func parameter,
when using opaque pointers compared by pointer value as keys in a
#GHashTable.

This hash function is also appropriate for keys that are integers
stored in pointers, such as `GINT_TO_POINTER (n)`.


</description>
<parameters>
<parameter name="v">
<parameter_description> a #gpointer key
</parameter_description>
</parameter>
</parameters>
<return> a hash value corresponding to the key.
</return>
</function>

<function name="g_dirname">
<description>
Gets the directory components of a file name.

If the file name has no directory components &quot;.&quot; is returned.
The returned string should be freed when no longer needed.

Deprecated: use g_path_get_dirname() instead

</description>
<parameters>
<parameter name="file_name">
<parameter_description> the name of the file
</parameter_description>
</parameter>
</parameters>
<return> the directory components of the file

</return>
</function>

<function name="g_dngettext">
<description>
This function is a wrapper of dngettext() which does not translate
the message if the default domain as set with textdomain() has no
translations for the current locale.

See g_dgettext() for details of how this differs from dngettext()
proper.

Since: 2.18

</description>
<parameters>
<parameter name="domain">
<parameter_description> the translation domain to use, or %NULL to use
the domain set with textdomain()
</parameter_description>
</parameter>
<parameter name="msgid">
<parameter_description> message to translate
</parameter_description>
</parameter>
<parameter name="msgid_plural">
<parameter_description> plural form of the message
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the quantity for which translation is needed
</parameter_description>
</parameter>
</parameters>
<return> The translated string

</return>
</function>

<function name="g_double_equal">
<description>
Compares the two #gdouble values being pointed to and returns
%TRUE if they are equal.
It can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using non-%NULL pointers to doubles as keys in a
#GHashTable.

Since: 2.22

</description>
<parameters>
<parameter name="v1">
<parameter_description> a pointer to a #gdouble key
</parameter_description>
</parameter>
<parameter name="v2">
<parameter_description> a pointer to a #gdouble key to compare with @v1
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two keys match.

</return>
</function>

<function name="g_double_hash">
<description>
Converts a pointer to a #gdouble to a hash value.
It can be passed to g_hash_table_new() as the @hash_func parameter,
It can be passed to g_hash_table_new() as the @hash_func parameter,
when using non-%NULL pointers to doubles as keys in a #GHashTable.

Since: 2.22

</description>
<parameters>
<parameter name="v">
<parameter_description> a pointer to a #gdouble key
</parameter_description>
</parameter>
</parameters>
<return> a hash value corresponding to the key.

</return>
</function>

<function name="g_dpgettext">
<description>
This function is a variant of g_dgettext() which supports
a disambiguating message context. GNU gettext uses the
'\004' character to separate the message context and
message id in @msgctxtid.
If 0 is passed as @msgidoffset, this function will fall back to
trying to use the deprecated convention of using &quot;|&quot; as a separation
character.

This uses g_dgettext() internally. See that functions for differences
with dgettext() proper.

Applications should normally not use this function directly,
but use the C_() macro for translations with context.

Since: 2.16

</description>
<parameters>
<parameter name="domain">
<parameter_description> the translation domain to use, or %NULL to use
the domain set with textdomain()
</parameter_description>
</parameter>
<parameter name="msgctxtid">
<parameter_description> a combined message context and message id, separated
by a \004 character
</parameter_description>
</parameter>
<parameter name="msgidoffset">
<parameter_description> the offset of the message id in @msgctxid
</parameter_description>
</parameter>
</parameters>
<return> The translated string

</return>
</function>

<function name="g_dpgettext2">
<description>
This function is a variant of g_dgettext() which supports
a disambiguating message context. GNU gettext uses the
'\004' character to separate the message context and
message id in @msgctxtid.

This uses g_dgettext() internally. See that functions for differences
with dgettext() proper.

This function differs from C_() in that it is not a macro and
thus you may use non-string-literals as context and msgid arguments.

Since: 2.18

</description>
<parameters>
<parameter name="domain">
<parameter_description> the translation domain to use, or %NULL to use
the domain set with textdomain()
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> the message context
</parameter_description>
</parameter>
<parameter name="msgid">
<parameter_description> the message
</parameter_description>
</parameter>
</parameters>
<return> The translated string

</return>
</function>

<function name="g_enum_complete_type_info">
<description>
This function is meant to be called from the `complete_type_info`
function of a #GTypePlugin implementation, as in the following
example:

|[&lt;!-- language=&quot;C&quot; --&gt; 
static void
my_enum_complete_type_info (GTypePlugin     *plugin,
GType            g_type,
GTypeInfo       *info,
GTypeValueTable *value_table)
{
static const GEnumValue values[] = {
{ MY_ENUM_FOO, &quot;MY_ENUM_FOO&quot;, &quot;foo&quot; },
{ MY_ENUM_BAR, &quot;MY_ENUM_BAR&quot;, &quot;bar&quot; },
{ 0, NULL, NULL }
};

g_enum_complete_type_info (type, info, values);
}
]|

</description>
<parameters>
<parameter name="g_enum_type">
<parameter_description> the type identifier of the type being completed
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> the #GTypeInfo struct to be filled in
</parameter_description>
</parameter>
<parameter name="const_values">
<parameter_description> An array of #GEnumValue structs for the possible
enumeration values. The array is terminated by a struct with all
members being 0.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_enum_get_value">
<description>
Returns the #GEnumValue for a value.


</description>
<parameters>
<parameter name="enum_class">
<parameter_description> a #GEnumClass
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to look up
</parameter_description>
</parameter>
</parameters>
<return> the #GEnumValue for @value, or %NULL
if @value is not a member of the enumeration
</return>
</function>

<function name="g_enum_get_value_by_name">
<description>
Looks up a #GEnumValue by name.


</description>
<parameters>
<parameter name="enum_class">
<parameter_description> a #GEnumClass
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to look up
</parameter_description>
</parameter>
</parameters>
<return> the #GEnumValue with name @name,
or %NULL if the enumeration doesn't have a member
with that name
</return>
</function>

<function name="g_enum_get_value_by_nick">
<description>
Looks up a #GEnumValue by nickname.


</description>
<parameters>
<parameter name="enum_class">
<parameter_description> a #GEnumClass
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> the nickname to look up
</parameter_description>
</parameter>
</parameters>
<return> the #GEnumValue with nickname @nick,
or %NULL if the enumeration doesn't have a member
with that nickname
</return>
</function>

<function name="g_enum_register_static">
<description>
Registers a new static enumeration type with the name @name.

It is normally more convenient to let [glib-mkenums][glib-mkenums],
generate a my_enum_get_type() function from a usual C enumeration
definition  than to write one yourself using g_enum_register_static().


</description>
<parameters>
<parameter name="name">
<parameter_description> A nul-terminated string used as the name of the new type.
</parameter_description>
</parameter>
<parameter name="const_static_values">
<parameter_description> An array of #GEnumValue structs for the possible
enumeration values. The array is terminated by a struct with all
members being 0. GObject keeps a reference to the data, so it cannot
be stack-allocated.
</parameter_description>
</parameter>
</parameters>
<return> The new type identifier.
</return>
</function>

<function name="g_enum_to_string">
<description>
Pretty-prints @value in the form of the enum’s name.

This is intended to be used for debugging purposes. The format of the output
may change in the future.

Since: 2.54

</description>
<parameters>
<parameter name="g_enum_type">
<parameter_description> the type identifier of a #GEnumClass type
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated text string

</return>
</function>

<function name="g_environ_getenv">
<description>
Returns the value of the environment variable @variable in the
provided list @envp.

Since: 2.32

</description>
<parameters>
<parameter name="envp">
<parameter_description>
an environment list (eg, as returned from g_get_environ()), or %NULL
for an empty environment list
</parameter_description>
</parameter>
<parameter name="variable">
<parameter_description> the environment variable to get
</parameter_description>
</parameter>
</parameters>
<return> the value of the environment variable, or %NULL if
the environment variable is not set in @envp. The returned
string is owned by @envp, and will be freed if @variable is
set or unset again.

</return>
</function>

<function name="g_environ_setenv">
<description>
Sets the environment variable @variable in the provided list
@envp to @value.

Since: 2.32

</description>
<parameters>
<parameter name="envp">
<parameter_description>
an environment list that can be freed using g_strfreev() (e.g., as
returned from g_get_environ()), or %NULL for an empty
environment list
</parameter_description>
</parameter>
<parameter name="variable">
<parameter_description> the environment variable to set, must not
contain '='
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value for to set the variable to
</parameter_description>
</parameter>
<parameter name="overwrite">
<parameter_description> whether to change the variable if it already exists
</parameter_description>
</parameter>
</parameters>
<return>
the updated environment list. Free it using g_strfreev().

</return>
</function>

<function name="g_environ_unsetenv">
<description>
Removes the environment variable @variable from the provided
environment @envp.

Since: 2.32

</description>
<parameters>
<parameter name="envp">
<parameter_description>
an environment list that can be freed using g_strfreev() (e.g., as
returned from g_get_environ()), or %NULL for an empty environment list
</parameter_description>
</parameter>
<parameter name="variable">
<parameter_description> the environment variable to remove, must not
contain '='
</parameter_description>
</parameter>
</parameters>
<return>
the updated environment list. Free it using g_strfreev().

</return>
</function>

<function name="g_error">
<description>
A convenience function/macro to log an error message. The message should
typically *not* be translated to the user's language.

This is not intended for end user error reporting. Use of #GError is
preferred for that instead, as it allows calling functions to perform actions
conditional on the type of error.

Error messages are always fatal, resulting in a call to
abort() to terminate the application. This function will
result in a core dump; don't use it for errors you expect.
Using this function indicates a bug in your program, i.e.
an assertion failure.

If g_log_default_handler() is used as the log handler function, a new-line
character will automatically be appended to @..., and need not be entered
manually.

If structured logging is enabled, this will use g_log_structured();
otherwise it will use g_log(). See
[Using Structured Logging][using-structured-logging].

</description>
<parameters>
<parameter name="Varargs">
<parameter_description> format string, followed by parameters to insert
into the format string (as with printf())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_error_copy">
<description>
Makes a copy of @error.


</description>
<parameters>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> a new #GError
</return>
</function>

<function name="g_error_free">
<description>
Frees a #GError and associated resources.

</description>
<parameters>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_error_matches">
<description>
Returns %TRUE if @error matches @domain and @code, %FALSE
otherwise. In particular, when @error is %NULL, %FALSE will
be returned.

If @domain contains a `FAILED` (or otherwise generic) error code,
you should generally not check for it explicitly, but should
instead treat any not-explicitly-recognized error code as being
equivalent to the `FAILED` code. This way, if the domain is
extended in the future to provide a more specific error code for
a certain case, your code will still work.


</description>
<parameters>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> an error domain
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> an error code
</parameter_description>
</parameter>
</parameters>
<return> whether @error has @domain and @code
</return>
</function>

<function name="g_error_new">
<description>
Creates a new #GError with the given @domain and @code,
and a message formatted with @format.


</description>
<parameters>
<parameter name="domain">
<parameter_description> error domain
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> error code
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> printf()-style format for error message
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> parameters for message format
</parameter_description>
</parameter>
</parameters>
<return> a new #GError
</return>
</function>

<function name="g_error_new_literal">
<description>
Creates a new #GError; unlike g_error_new(), @message is
not a printf()-style format string. Use this function if
@message contains text you don't have control over,
that could include printf() escape sequences.


</description>
<parameters>
<parameter name="domain">
<parameter_description> error domain
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> error code
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> error message
</parameter_description>
</parameter>
</parameters>
<return> a new #GError
</return>
</function>

<function name="g_error_new_valist">
<description>
Creates a new #GError with the given @domain and @code,
and a message formatted with @format.

Since: 2.22

</description>
<parameters>
<parameter name="domain">
<parameter_description> error domain
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> error code
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> printf()-style format for error message
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> #va_list of parameters for the message format
</parameter_description>
</parameter>
</parameters>
<return> a new #GError

</return>
</function>

<function name="g_file_error_from_errno">
<description>
Gets a #GFileError constant based on the passed-in @err_no.
For example, if you pass in `EEXIST` this function returns
#G_FILE_ERROR_EXIST. Unlike `errno` values, you can portably
assume that all #GFileError values will exist.

Normally a #GFileError value goes into a #GError returned
from a function that manipulates files. So you would use
g_file_error_from_errno() when constructing a #GError.


</description>
<parameters>
<parameter name="err_no">
<parameter_description> an &quot;errno&quot; value
</parameter_description>
</parameter>
</parameters>
<return> #GFileError corresponding to the given @errno
</return>
</function>

<function name="g_file_get_contents">
<description>
Reads an entire file into allocated memory, with good error
checking.

If the call was successful, it returns %TRUE and sets @contents to the file
contents and @length to the length of the file contents in bytes. The string
stored in @contents will be nul-terminated, so for text files you can pass
%NULL for the @length argument. If the call was not successful, it returns
%FALSE and sets @error. The error domain is #G_FILE_ERROR. Possible error
codes are those in the #GFileError enumeration. In the error case,
@contents is set to %NULL and @length is set to zero.


</description>
<parameters>
<parameter name="filename">
<parameter_description> name of a file to read contents from, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> location to store an allocated string, use g_free() to free
the returned string
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> location to store length in bytes of the contents, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if an error occurred
</return>
</function>

<function name="g_file_open_tmp">
<description>
Opens a file for writing in the preferred directory for temporary
files (as returned by g_get_tmp_dir()).

@tmpl should be a string in the GLib file name encoding containing
a sequence of six 'X' characters, as the parameter to g_mkstemp().
However, unlike these functions, the template should only be a
basename, no directory components are allowed. If template is
%NULL, a default template is used.

Note that in contrast to g_mkstemp() (and mkstemp()) @tmpl is not
modified, and might thus be a read-only literal string.

Upon success, and if @name_used is non-%NULL, the actual name used
is returned in @name_used. This string should be freed with g_free()
when not needed any longer. The returned name is in the GLib file
name encoding.


</description>
<parameters>
<parameter name="tmpl">
<parameter_description> Template for file name, as in
g_mkstemp(), basename only, or %NULL for a default template
</parameter_description>
</parameter>
<parameter name="name_used">
<parameter_description> location to store actual name used,
or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> A file handle (as from open()) to the file opened for
reading and writing. The file is opened in binary mode on platforms
where there is a difference. The file handle should be closed with
close(). In case of errors, -1 is returned and @error will be set.
</return>
</function>

<function name="g_file_read_link">
<description>
Reads the contents of the symbolic link @filename like the POSIX
readlink() function.  The returned string is in the encoding used
for filenames. Use g_filename_to_utf8() to convert it to UTF-8.

Since: 2.4

</description>
<parameters>
<parameter name="filename">
<parameter_description> the symbolic link
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> A newly-allocated string with the contents of
the symbolic link, or %NULL if an error occurred.

</return>
</function>

<function name="g_file_set_contents">
<description>
Writes all of @contents to a file named @filename, with good error checking.
If a file called @filename already exists it will be overwritten.

This write is atomic in the sense that it is first written to a temporary
file which is then renamed to the final name. Notes:

- On UNIX, if @filename already exists hard links to @filename will break.
Also since the file is recreated, existing permissions, access control
lists, metadata etc. may be lost. If @filename is a symbolic link,
the link itself will be replaced, not the linked file.

- On Windows renaming a file will not remove an existing file with the
new name, so on Windows there is a race condition between the existing
file being removed and the temporary file being renamed.

- On Windows there is no way to remove a file that is open to some
process, or mapped into memory. Thus, this function will fail if
@filename already exists and is open.

If the call was successful, it returns %TRUE. If the call was not successful,
it returns %FALSE and sets @error. The error domain is #G_FILE_ERROR.
Possible error codes are those in the #GFileError enumeration.

Note that the name for the temporary file is constructed by appending up
to 7 characters to @filename.

Since: 2.8

</description>
<parameters>
<parameter name="filename">
<parameter_description> name of a file to write @contents to, in the GLib file name
encoding
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> string to write to the file
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of @contents, or -1 if @contents is a nul-terminated string
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if an error occurred

</return>
</function>

<function name="g_file_test">
<description>
Returns %TRUE if any of the tests in the bitfield @test are
%TRUE. For example, `(G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR)`
will return %TRUE if the file exists; the check whether it's a
directory doesn't matter since the existence test is %TRUE. With
the current set of available tests, there's no point passing in
more than one test at a time.

Apart from %G_FILE_TEST_IS_SYMLINK all tests follow symbolic links,
so for a symbolic link to a regular file g_file_test() will return
%TRUE for both %G_FILE_TEST_IS_SYMLINK and %G_FILE_TEST_IS_REGULAR.

Note, that for a dangling symbolic link g_file_test() will return
%TRUE for %G_FILE_TEST_IS_SYMLINK and %FALSE for all other flags.

You should never use g_file_test() to test whether it is safe
to perform an operation, because there is always the possibility
of the condition changing before you actually perform the operation.
For example, you might think you could use %G_FILE_TEST_IS_SYMLINK
to know whether it is safe to write to a file without being
tricked into writing into a different location. It doesn't work!
|[&lt;!-- language=&quot;C&quot; --&gt;
// DON'T DO THIS
if (!g_file_test (filename, G_FILE_TEST_IS_SYMLINK)) 
{
fd = g_open (filename, O_WRONLY);
// write to fd
}
]|

Another thing to note is that %G_FILE_TEST_EXISTS and
%G_FILE_TEST_IS_EXECUTABLE are implemented using the access()
system call. This usually doesn't matter, but if your program
is setuid or setgid it means that these tests will give you
the answer for the real user ID and group ID, rather than the
effective user ID and group ID.

On Windows, there are no symlinks, so testing for
%G_FILE_TEST_IS_SYMLINK will always return %FALSE. Testing for
%G_FILE_TEST_IS_EXECUTABLE will just check that the file exists and
its name indicates that it is executable, checking for well-known
extensions and those listed in the `PATHEXT` environment variable.


</description>
<parameters>
<parameter name="filename">
<parameter_description> a filename to test in the
GLib file name encoding
</parameter_description>
</parameter>
<parameter name="test">
<parameter_description> bitfield of #GFileTest flags
</parameter_description>
</parameter>
</parameters>
<return> whether a test was %TRUE
</return>
</function>

<function name="g_filename_display_basename">
<description>
Returns the display basename for the particular filename, guaranteed
to be valid UTF-8. The display name might not be identical to the filename,
for instance there might be problems converting it to UTF-8, and some files
can be translated in the display.

If GLib cannot make sense of the encoding of @filename, as a last resort it 
replaces unknown characters with U+FFFD, the Unicode replacement character.
You can search the result for the UTF-8 encoding of this character (which is
&quot;\357\277\275&quot; in octal notation) to find out if @filename was in an invalid
encoding.

You must pass the whole absolute pathname to this functions so that
translation of well known locations can be done.

This function is preferred over g_filename_display_name() if you know the
whole path, as it allows translation.

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> an absolute pathname in the
GLib file name encoding
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing
a rendition of the basename of the filename in valid UTF-8

</return>
</function>

<function name="g_filename_display_name">
<description>
Converts a filename into a valid UTF-8 string. The conversion is 
not necessarily reversible, so you should keep the original around 
and use the return value of this function only for display purposes.
Unlike g_filename_to_utf8(), the result is guaranteed to be non-%NULL 
even if the filename actually isn't in the GLib file name encoding.

If GLib cannot make sense of the encoding of @filename, as a last resort it 
replaces unknown characters with U+FFFD, the Unicode replacement character.
You can search the result for the UTF-8 encoding of this character (which is
&quot;\357\277\275&quot; in octal notation) to find out if @filename was in an invalid
encoding.

If you know the whole pathname of the file you should use
g_filename_display_basename(), since that allows location-based
translation of filenames.

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname hopefully in the
GLib file name encoding
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing
a rendition of the filename in valid UTF-8

</return>
</function>

<function name="g_filename_from_uri">
<description>
Converts an escaped ASCII-encoded URI to a local filename in the
encoding used for filenames. 


</description>
<parameters>
<parameter name="uri">
<parameter_description> a uri describing a filename (escaped, encoded in ASCII).
</parameter_description>
</parameter>
<parameter name="hostname">
<parameter_description> Location to store hostname for the URI.
If there is no hostname in the URI, %NULL will be
stored in this location.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError may occur.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string holding
the resulting filename, or %NULL on an error.
</return>
</function>

<function name="g_filename_from_utf8">
<description>
Converts a string from UTF-8 to the encoding GLib uses for
filenames. Note that on Windows GLib uses UTF-8 for filenames;
on other platforms, this function indirectly depends on the 
[current locale][setlocale].

The input string shall not contain nul characters even if the @len
argument is positive. A nul character found inside the string will result
in error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE. If the filename encoding is
not UTF-8 and the conversion output contains a nul character, the error
%G_CONVERT_ERROR_EMBEDDED_NUL is set and the function returns %NULL.


</description>
<parameters>
<parameter name="utf8string">
<parameter_description> a UTF-8 encoded string.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description>           the length of the string, or -1 if the string is
nul-terminated.
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> location to store the number of bytes in
the input string that were successfully converted, or %NULL.
Even if the conversion was successful, this may be 
less than @len if there were partial characters
at the end of the input. If the error
%G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
stored will be the byte offset after the last valid
input sequence.
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> the number of bytes stored in
the output buffer (not including the terminating nul).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>         location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError may occur.
</parameter_description>
</parameter>
</parameters>
<return>
The converted string, or %NULL on an error.
</return>
</function>

<function name="g_filename_to_uri">
<description>
Converts an absolute filename to an escaped ASCII-encoded URI, with the path
component following Section 3.3. of RFC 2396.


</description>
<parameters>
<parameter name="filename">
<parameter_description> an absolute filename specified in the GLib file
name encoding, which is the on-disk file name bytes on Unix, and UTF-8
on Windows
</parameter_description>
</parameter>
<parameter name="hostname">
<parameter_description> A UTF-8 encoded hostname, or %NULL for none.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError may occur.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string holding the resulting
URI, or %NULL on an error.
</return>
</function>

<function name="g_filename_to_utf8">
<description>
Converts a string which is in the encoding used by GLib for
filenames into a UTF-8 string. Note that on Windows GLib uses UTF-8
for filenames; on other platforms, this function indirectly depends on 
the [current locale][setlocale].

The input string shall not contain nul characters even if the @len
argument is positive. A nul character found inside the string will result
in error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE.
If the source encoding is not UTF-8 and the conversion output contains a
nul character, the error %G_CONVERT_ERROR_EMBEDDED_NUL is set and the
function returns %NULL. Use g_convert() to produce output that
may contain embedded nul characters.


</description>
<parameters>
<parameter name="opsysstring">
<parameter_description> a string in the encoding for filenames
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description>           the length of the string, or -1 if the string is
nul-terminated (Note that some encodings may allow nul
bytes to occur inside strings. In that case, using -1
for the @len parameter is unsafe)
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> location to store the number of bytes in the
input string that were successfully converted, or %NULL.
Even if the conversion was successful, this may be 
less than @len if there were partial characters
at the end of the input. If the error
%G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
stored will be the byte offset after the last valid
input sequence.
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> the number of bytes stored in the output
buffer (not including the terminating nul).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>         location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError may occur.
</parameter_description>
</parameter>
</parameters>
<return> The converted string, or %NULL on an error.
</return>
</function>

<function name="g_find_program_in_path">
<description>
Locates the first executable named @program in the user's path, in the
same way that execvp() would locate it. Returns an allocated string
with the absolute path name, or %NULL if the program is not found in
the path. If @program is already an absolute path, returns a copy of
@program if @program exists and is executable, and %NULL otherwise.

On Windows, if @program does not have a file type suffix, tries
with the suffixes .exe, .cmd, .bat and .com, and the suffixes in
the `PATHEXT` environment variable. 

On Windows, it looks for the file in the same way as CreateProcess() 
would. This means first in the directory where the executing
program was loaded from, then in the current directory, then in the
Windows 32-bit system directory, then in the Windows directory, and
finally in the directories in the `PATH` environment variable. If
the program is found, the return value contains the full name
including the type suffix.


</description>
<parameters>
<parameter name="program">
<parameter_description> a program name in the GLib file name encoding
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string with the absolute path,
or %NULL
</return>
</function>

<function name="g_flags_complete_type_info">
<description>
This function is meant to be called from the complete_type_info()
function of a #GTypePlugin implementation, see the example for
g_enum_complete_type_info() above.

</description>
<parameters>
<parameter name="g_flags_type">
<parameter_description> the type identifier of the type being completed
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> the #GTypeInfo struct to be filled in
</parameter_description>
</parameter>
<parameter name="const_values">
<parameter_description> An array of #GFlagsValue structs for the possible
enumeration values. The array is terminated by a struct with all
members being 0.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_flags_get_first_value">
<description>
Returns the first #GFlagsValue which is set in @value.


</description>
<parameters>
<parameter name="flags_class">
<parameter_description> a #GFlagsClass
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value
</parameter_description>
</parameter>
</parameters>
<return> the first #GFlagsValue which is set in
@value, or %NULL if none is set
</return>
</function>

<function name="g_flags_get_value_by_name">
<description>
Looks up a #GFlagsValue by name.


</description>
<parameters>
<parameter name="flags_class">
<parameter_description> a #GFlagsClass
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to look up
</parameter_description>
</parameter>
</parameters>
<return> the #GFlagsValue with name @name,
or %NULL if there is no flag with that name
</return>
</function>

<function name="g_flags_get_value_by_nick">
<description>
Looks up a #GFlagsValue by nickname.


</description>
<parameters>
<parameter name="flags_class">
<parameter_description> a #GFlagsClass
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> the nickname to look up
</parameter_description>
</parameter>
</parameters>
<return> the #GFlagsValue with nickname @nick,
or %NULL if there is no flag with that nickname
</return>
</function>

<function name="g_flags_register_static">
<description>
Registers a new static flags type with the name @name.

It is normally more convenient to let [glib-mkenums][glib-mkenums]
generate a my_flags_get_type() function from a usual C enumeration
definition than to write one yourself using g_flags_register_static().


</description>
<parameters>
<parameter name="name">
<parameter_description> A nul-terminated string used as the name of the new type.
</parameter_description>
</parameter>
<parameter name="const_static_values">
<parameter_description> An array of #GFlagsValue structs for the possible
flags values. The array is terminated by a struct with all members being 0.
GObject keeps a reference to the data, so it cannot be stack-allocated.
</parameter_description>
</parameter>
</parameters>
<return> The new type identifier.
</return>
</function>

<function name="g_flags_to_string">
<description>
Pretty-prints @value in the form of the flag names separated by ` | ` and
sorted. Any extra bits will be shown at the end as a hexadecimal number.

This is intended to be used for debugging purposes. The format of the output
may change in the future.

Since: 2.54

</description>
<parameters>
<parameter name="flags_type">
<parameter_description> the type identifier of a #GFlagsClass type
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated text string

</return>
</function>

<function name="g_fopen">
<description>
A wrapper for the stdio fopen() function. The fopen() function
opens a file and associates a new stream with it.

Because file descriptors are specific to the C library on Windows,
and a file descriptor is part of the FILE struct, the FILE* returned
by this function makes sense only to functions in the same C library.
Thus if the GLib-using code uses a different C library than GLib does,
the FILE* returned by this function cannot be passed to C library
functions like fprintf() or fread().

See your C library manual for more details about fopen().

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a string describing the mode in which the file should be opened
</parameter_description>
</parameter>
</parameters>
<return> A FILE* if the file was successfully opened, or %NULL if
an error occurred

</return>
</function>

<function name="g_format_size">
<description>
Formats a size (for example the size of a file) into a human readable
string.  Sizes are rounded to the nearest size prefix (kB, MB, GB)
and are displayed rounded to the nearest tenth. E.g. the file size
3292528 bytes will be converted into the string &quot;3.2 MB&quot;.

The prefix units base is 1000 (i.e. 1 kB is 1000 bytes).

This string should be freed with g_free() when not needed any longer.

See g_format_size_full() for more options about how the size might be
formatted.

Since: 2.30

</description>
<parameters>
<parameter name="size">
<parameter_description> a size in bytes
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated formatted string containing a human readable
file size

</return>
</function>

<function name="g_format_size_for_display">
<description>
Formats a size (for example the size of a file) into a human
readable string. Sizes are rounded to the nearest size prefix
(KB, MB, GB) and are displayed rounded to the nearest tenth.
E.g. the file size 3292528 bytes will be converted into the
string &quot;3.1 MB&quot;.

The prefix units base is 1024 (i.e. 1 KB is 1024 bytes).

This string should be freed with g_free() when not needed any longer.

Since: 2.16

Deprecated:2.30: This function is broken due to its use of SI
suffixes to denote IEC units. Use g_format_size() instead.

</description>
<parameters>
<parameter name="size">
<parameter_description> a size in bytes
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated formatted string containing a human
readable file size

</return>
</function>

<function name="g_format_size_full">
<description>
Formats a size.

This function is similar to g_format_size() but allows for flags
that modify the output. See #GFormatSizeFlags.

Since: 2.30

</description>
<parameters>
<parameter name="size">
<parameter_description> a size in bytes
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFormatSizeFlags to modify the output
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated formatted string containing a human
readable file size

</return>
</function>

<function name="g_fprintf">
<description>
An implementation of the standard fprintf() function which supports 
positional parameters, as specified in the Single Unix Specification.

`glib/gprintf.h` must be explicitly included in order to use this function.

Since: 2.2

</description>
<parameters>
<parameter name="file">
<parameter_description> the stream to write to.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice 
[string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to insert in the output.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes printed.

</return>
</function>

<function name="g_free">
<description>
Frees the memory pointed to by @mem.

If @mem is %NULL it simply returns, so there is no need to check @mem
against %NULL before calling this function.

</description>
<parameters>
<parameter name="mem">
<parameter_description> the memory to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_freopen">
<description>
A wrapper for the POSIX freopen() function. The freopen() function
opens a file and associates it with an existing stream.

See your C library manual for more details about freopen().

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a string describing the mode in which the file should be  opened
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> an existing stream which will be reused, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A FILE* if the file was successfully opened, or %NULL if
an error occurred.

</return>
</function>

<function name="g_get_application_name">
<description>
Gets a human-readable name for the application, as set by
g_set_application_name(). This name should be localized if
possible, and is intended for display to the user.  Contrast with
g_get_prgname(), which gets a non-localized name. If
g_set_application_name() has not been called, returns the result of
g_get_prgname() (which may be %NULL if g_set_prgname() has also not
been called).

Since: 2.2

</description>
<parameters>
</parameters>
<return> human-readable application name. may return %NULL

</return>
</function>

<function name="g_get_charset">
<description>
Obtains the character set for the [current locale][setlocale]; you
might use this character set as an argument to g_convert(), to convert
from the current locale's encoding to some other encoding. (Frequently
g_locale_to_utf8() and g_locale_from_utf8() are nice shortcuts, though.)

On Windows the character set returned by this function is the
so-called system default ANSI code-page. That is the character set
used by the &quot;narrow&quot; versions of C library and Win32 functions that
handle file names. It might be different from the character set
used by the C library's current locale.

On Linux, the character set is found by consulting nl_langinfo() if
available. If not, the environment variables `LC_ALL`, `LC_CTYPE`, `LANG`
and `CHARSET` are queried in order.

The return value is %TRUE if the locale's encoding is UTF-8, in that
case you can perhaps avoid calling g_convert().

The string returned in @charset is not allocated, and should not be
freed.


</description>
<parameters>
<parameter name="charset">
<parameter_description> return location for character set
name, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the returned charset is UTF-8
</return>
</function>

<function name="g_get_codeset">
<description>
Gets the character set for the current locale.


</description>
<parameters>
</parameters>
<return> a newly allocated string containing the name
of the character set. This string must be freed with g_free().
</return>
</function>

<function name="g_get_current_dir">
<description>
Gets the current directory.

The returned string should be freed when no longer needed.
The encoding of the returned string is system defined.
On Windows, it is always UTF-8.

Since GLib 2.40, this function will return the value of the &quot;PWD&quot;
environment variable if it is set and it happens to be the same as
the current directory.  This can make a difference in the case that
the current directory is the target of a symbolic link.


</description>
<parameters>
</parameters>
<return> the current directory
</return>
</function>

<function name="g_get_current_time">
<description>
Equivalent to the UNIX gettimeofday() function, but portable.

You may find g_get_real_time() to be more convenient.

</description>
<parameters>
<parameter name="result">
<parameter_description> #GTimeVal structure in which to store current time.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_get_environ">
<description>
Gets the list of environment variables for the current process.

The list is %NULL terminated and each item in the list is of the
form 'NAME=VALUE'.

This is equivalent to direct access to the 'environ' global variable,
except portable.

The return value is freshly allocated and it should be freed with
g_strfreev() when it is no longer needed.

Since: 2.28

</description>
<parameters>
</parameters>
<return>
the list of environment variables

</return>
</function>

<function name="g_get_filename_charsets">
<description>
Determines the preferred character sets used for filenames.
The first character set from the @charsets is the filename encoding, the
subsequent character sets are used when trying to generate a displayable
representation of a filename, see g_filename_display_name().

On Unix, the character sets are determined by consulting the
environment variables `G_FILENAME_ENCODING` and `G_BROKEN_FILENAMES`.
On Windows, the character set used in the GLib API is always UTF-8
and said environment variables have no effect.

`G_FILENAME_ENCODING` may be set to a comma-separated list of
character set names. The special token &quot;\@locale&quot; is taken
to  mean the character set for the [current locale][setlocale].
If `G_FILENAME_ENCODING` is not set, but `G_BROKEN_FILENAMES` is,
the character set of the current locale is taken as the filename
encoding. If neither environment variable  is set, UTF-8 is taken
as the filename encoding, but the character set of the current locale
is also put in the list of encodings.

The returned @charsets belong to GLib and must not be freed.

Note that on Unix, regardless of the locale character set or
`G_FILENAME_ENCODING` value, the actual file names present 
on a system might be in any random encoding or just gibberish.

Since: 2.6

</description>
<parameters>
<parameter name="filename_charsets">
<parameter_description>
return location for the %NULL-terminated list of encoding names
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the filename encoding is UTF-8.

</return>
</function>

<function name="g_get_home_dir">
<description>
Gets the current user's home directory.

As with most UNIX tools, this function will return the value of the
`HOME` environment variable if it is set to an existing absolute path
name, falling back to the `passwd` file in the case that it is unset.

If the path given in `HOME` is non-absolute, does not exist, or is
not a directory, the result is undefined.

Before version 2.36 this function would ignore the `HOME` environment
variable, taking the value from the `passwd` database instead. This was
changed to increase the compatibility of GLib with other programs (and
the XDG basedir specification) and to increase testability of programs
based on GLib (by making it easier to run them from test frameworks).

If your program has a strong requirement for either the new or the
old behaviour (and if you don't wish to increase your GLib
dependency to ensure that the new behaviour is in effect) then you
should either directly check the `HOME` environment variable yourself
or unset it before calling any functions in GLib.


</description>
<parameters>
</parameters>
<return> the current user's home directory
</return>
</function>

<function name="g_get_host_name">
<description>
Return a name for the machine. 

The returned name is not necessarily a fully-qualified domain name,
or even present in DNS or some other name service at all. It need
not even be unique on your local network or site, but usually it
is. Callers should not rely on the return value having any specific
properties like uniqueness for security purposes. Even if the name
of the machine is changed while an application is running, the
return value from this function does not change. The returned
string is owned by GLib and should not be modified or freed. If no
name can be determined, a default fixed string &quot;localhost&quot; is
returned.

The encoding of the returned string is UTF-8.

Since: 2.8

</description>
<parameters>
</parameters>
<return> the host name of the machine.

</return>
</function>

<function name="g_get_language_names">
<description>
Computes a list of applicable locale names, which can be used to
e.g. construct locale-dependent filenames or search paths. The returned
list is sorted from most desirable to least desirable and always contains
the default locale &quot;C&quot;.

For example, if LANGUAGE=de:en_US, then the returned list is
&quot;de&quot;, &quot;en_US&quot;, &quot;en&quot;, &quot;C&quot;.

This function consults the environment variables `LANGUAGE`, `LC_ALL`,
`LC_MESSAGES` and `LANG` to find the list of locales specified by the
user.

Since: 2.6

</description>
<parameters>
</parameters>
<return> a %NULL-terminated array of strings owned by GLib
that must not be modified or freed.

</return>
</function>

<function name="g_get_language_names_with_category">
<description>
Computes a list of applicable locale names with a locale category name,
which can be used to construct the fallback locale-dependent filenames
or search paths. The returned list is sorted from most desirable to
least desirable and always contains the default locale &quot;C&quot;.

This function consults the environment variables `LANGUAGE`, `LC_ALL`,
@category_name, and `LANG` to find the list of locales specified by the
user.

g_get_language_names() returns g_get_language_names_with_category(&quot;LC_MESSAGES&quot;).

Since: 2.58

</description>
<parameters>
<parameter name="category_name">
<parameter_description> a locale category name
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of strings owned by GLib
that must not be modified or freed.

</return>
</function>

<function name="g_get_locale_variants">
<description>
Returns a list of derived variants of @locale, which can be used to
e.g. construct locale-dependent filenames or search paths. The returned
list is sorted from most desirable to least desirable.
This function handles territory, charset and extra locale modifiers.

For example, if @locale is &quot;fr_BE&quot;, then the returned list
is &quot;fr_BE&quot;, &quot;fr&quot;.

If you need the list of variants for the current locale,
use g_get_language_names().

Since: 2.28

</description>
<parameters>
<parameter name="locale">
<parameter_description> a locale identifier
</parameter_description>
</parameter>
</parameters>
<return> a newly
allocated array of newly allocated strings with the locale variants. Free with
g_strfreev().

</return>
</function>

<function name="g_get_monotonic_time">
<description>
Queries the system monotonic time.

The monotonic clock will always increase and doesn't suffer
discontinuities when the user (or NTP) changes the system time.  It
may or may not continue to tick during times where the machine is
suspended.

We try to use the clock that corresponds as closely as possible to
the passage of time as measured by system calls such as poll() but it
may not always be possible to do this.

Since: 2.28

</description>
<parameters>
</parameters>
<return> the monotonic time, in microseconds

</return>
</function>

<function name="g_get_num_processors">
<description>
Determine the approximate number of threads that the system will
schedule simultaneously for this process.  This is intended to be
used as a parameter to g_thread_pool_new() for CPU bound tasks and
similar cases.

Since: 2.36

</description>
<parameters>
</parameters>
<return> Number of schedulable threads, always greater than 0

</return>
</function>

<function name="g_get_prgname">
<description>
Gets the name of the program. This name should not be localized,
in contrast to g_get_application_name().

If you are using #GApplication the program name is set in
g_application_run(). In case of GDK or GTK+ it is set in
gdk_init(), which is called by gtk_init() and the
#GtkApplication::startup handler. The program name is found by
taking the last component of @argv[0].


</description>
<parameters>
</parameters>
<return> the name of the program. The returned string belongs 
to GLib and must not be modified or freed.
</return>
</function>

<function name="g_get_real_name">
<description>
Gets the real name of the user. This usually comes from the user's
entry in the `passwd` file. The encoding of the returned string is
system-defined. (On Windows, it is, however, always UTF-8.) If the
real user name cannot be determined, the string &quot;Unknown&quot; is 
returned.


</description>
<parameters>
</parameters>
<return> the user's real name.
</return>
</function>

<function name="g_get_real_time">
<description>
Queries the system wall-clock time.

This call is functionally equivalent to g_get_current_time() except
that the return value is often more convenient than dealing with a
#GTimeVal.

You should only use this call if you are actually interested in the real
wall-clock time.  g_get_monotonic_time() is probably more useful for
measuring intervals.

Since: 2.28

</description>
<parameters>
</parameters>
<return> the number of microseconds since January 1, 1970 UTC.

</return>
</function>

<function name="g_get_system_config_dirs">
<description>
Returns an ordered list of base directories in which to access 
system-wide configuration information.

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
In this case the list of directories retrieved will be `XDG_CONFIG_DIRS`.

On Windows it follows XDG Base Directory Specification if `XDG_CONFIG_DIRS` is defined.
If `XDG_CONFIG_DIRS` is undefined, the directory that contains application
data for all users is used instead. A typical path is
`C:\Documents and Settings\All Users\Application Data`.
This folder is used for application data
that is not user specific. For example, an application can store
a spell-check dictionary, a database of clip art, or a log file in the
CSIDL_COMMON_APPDATA folder. This information will not roam and is available
to anyone using the computer.

Since: 2.6

</description>
<parameters>
</parameters>
<return>
a %NULL-terminated array of strings owned by GLib that must not be
modified or freed.

</return>
</function>

<function name="g_get_system_data_dirs">
<description>
Returns an ordered list of base directories in which to access 
system-wide application data.

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec)
In this case the list of directories retrieved will be `XDG_DATA_DIRS`.

On Windows it follows XDG Base Directory Specification if `XDG_DATA_DIRS` is defined.
If `XDG_DATA_DIRS` is undefined,
the first elements in the list are the Application Data
and Documents folders for All Users. (These can be determined only
on Windows 2000 or later and are not present in the list on other
Windows versions.) See documentation for CSIDL_COMMON_APPDATA and
CSIDL_COMMON_DOCUMENTS.

Then follows the &quot;share&quot; subfolder in the installation folder for
the package containing the DLL that calls this function, if it can
be determined.

Finally the list contains the &quot;share&quot; subfolder in the installation
folder for GLib, and in the installation folder for the package the
application's .exe file belongs to.

The installation folders above are determined by looking up the
folder where the module (DLL or EXE) in question is located. If the
folder's name is &quot;bin&quot;, its parent is used, otherwise the folder
itself.

Note that on Windows the returned list can vary depending on where
this function is called.

Since: 2.6

</description>
<parameters>
</parameters>
<return>
a %NULL-terminated array of strings owned by GLib that must not be
modified or freed.

</return>
</function>

<function name="g_get_tmp_dir">
<description>
Gets the directory to use for temporary files.

On UNIX, this is taken from the `TMPDIR` environment variable.
If the variable is not set, `P_tmpdir` is
used, as defined by the system C library. Failing that, a
hard-coded default of &quot;/tmp&quot; is returned.

On Windows, the `TEMP` environment variable is used, with the
root directory of the Windows installation (eg: &quot;C:\&quot;) used
as a default.

The encoding of the returned string is system-defined. On Windows,
it is always UTF-8. The return value is never %NULL or the empty
string.


</description>
<parameters>
</parameters>
<return> the directory to use for temporary files.
</return>
</function>

<function name="g_get_user_cache_dir">
<description>
Returns a base directory in which to store non-essential, cached
data specific to particular user.

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
In this case the directory retrieved will be `XDG_CACHE_HOME`.

On Windows it follows XDG Base Directory Specification if `XDG_CACHE_HOME` is defined.
If `XDG_CACHE_HOME` is undefined, the directory that serves as a common
repository for temporary Internet files is used instead. A typical path is
`C:\Documents and Settings\username\Local Settings\Temporary Internet Files`.
See the [documentation for `CSIDL_INTERNET_CACHE`](https://msdn.microsoft.com/en-us/library/windows/desktop/bb762494%28v=vs.85%29.aspx#csidl_internet_cache).

Since: 2.6

</description>
<parameters>
</parameters>
<return> a string owned by GLib that must not be modified
or freed.
</return>
</function>

<function name="g_get_user_config_dir">
<description>
Returns a base directory in which to store user-specific application 
configuration information such as user preferences and settings. 

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
In this case the directory retrieved will be `XDG_CONFIG_HOME`.

On Windows it follows XDG Base Directory Specification if `XDG_CONFIG_HOME` is defined.
If `XDG_CONFIG_HOME` is undefined, the folder to use for local (as opposed
to roaming) application data is used instead. See the
[documentation for `CSIDL_LOCAL_APPDATA`](https://msdn.microsoft.com/en-us/library/windows/desktop/bb762494%28v=vs.85%29.aspx#csidl_local_appdata).
Note that in this case on Windows it will be  the same
as what g_get_user_data_dir() returns.

Since: 2.6

</description>
<parameters>
</parameters>
<return> a string owned by GLib that must not be modified
or freed.
</return>
</function>

<function name="g_get_user_data_dir">
<description>
Returns a base directory in which to access application data such
as icons that is customized for a particular user.  

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
In this case the directory retrieved will be `XDG_DATA_HOME`.

On Windows it follows XDG Base Directory Specification if `XDG_DATA_HOME`
is defined. If `XDG_DATA_HOME` is undefined, the folder to use for local (as
opposed to roaming) application data is used instead. See the
[documentation for `CSIDL_LOCAL_APPDATA`](https://msdn.microsoft.com/en-us/library/windows/desktop/bb762494%28v=vs.85%29.aspx#csidl_local_appdata).
Note that in this case on Windows it will be the same
as what g_get_user_config_dir() returns.

Since: 2.6

</description>
<parameters>
</parameters>
<return> a string owned by GLib that must not be modified
or freed.
</return>
</function>

<function name="g_get_user_name">
<description>
Gets the user name of the current user. The encoding of the returned
string is system-defined. On UNIX, it might be the preferred file name
encoding, or something else, and there is no guarantee that it is even
consistent on a machine. On Windows, it is always UTF-8.


</description>
<parameters>
</parameters>
<return> the user name of the current user.
</return>
</function>

<function name="g_get_user_runtime_dir">
<description>
Returns a directory that is unique to the current user on the local
system.

This is determined using the mechanisms described
in the 
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
This is the directory
specified in the `XDG_RUNTIME_DIR` environment variable.
In the case that this variable is not set, we return the value of
g_get_user_cache_dir(), after verifying that it exists.

Since: 2.28

</description>
<parameters>
</parameters>
<return> a string owned by GLib that must not be
modified or freed.

</return>
</function>

<function name="g_get_user_special_dir">
<description>
Returns the full path of a special directory using its logical id.

On UNIX this is done using the XDG special user directories.
For compatibility with existing practise, %G_USER_DIRECTORY_DESKTOP
falls back to `$HOME/Desktop` when XDG special user directories have
not been set up. 

Depending on the platform, the user might be able to change the path
of the special directory without requiring the session to restart; GLib
will not reflect any change once the special directories are loaded.

Since: 2.14

</description>
<parameters>
<parameter name="directory">
<parameter_description> the logical id of special directory
</parameter_description>
</parameter>
</parameters>
<return> the path to the specified special directory, or
%NULL if the logical id was not found. The returned string is owned by
GLib and should not be modified or freed.

</return>
</function>

<function name="g_getenv">
<description>
Returns the value of an environment variable.

On UNIX, the name and value are byte strings which might or might not
be in some consistent character set and encoding. On Windows, they are
in UTF-8.
On Windows, in case the environment variable's value contains
references to other environment variables, they are expanded.


</description>
<parameters>
<parameter name="variable">
<parameter_description> the environment variable to get
</parameter_description>
</parameter>
</parameters>
<return> the value of the environment variable, or %NULL if
the environment variable is not found. The returned string
may be overwritten by the next call to g_getenv(), g_setenv()
or g_unsetenv().
</return>
</function>

<function name="g_hash_table_add">
<description>
This is a convenience function for using a #GHashTable as a set.  It
is equivalent to calling g_hash_table_replace() with @key as both the
key and the value.

When a hash table only ever contains keys that have themselves as the
corresponding value it is able to be stored more efficiently.  See
the discussion in the section description.

Starting from GLib 2.40, this function returns a boolean value to
indicate whether the newly added value was already in the hash table
or not.

Since: 2.32

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key to insert
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key did not exist yet

</return>
</function>

<function name="g_hash_table_contains">
<description>
Checks if @key is in @hash_table.

Since: 2.32

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @key is in @hash_table, %FALSE otherwise.

</return>
</function>

<function name="g_hash_table_destroy">
<description>
Destroys all keys and values in the #GHashTable and decrements its
reference count by 1. If keys and/or values are dynamically allocated,
you should either free them first or create the #GHashTable with destroy
notifiers using g_hash_table_new_full(). In the latter case the destroy
functions you supplied will be called on all keys and values during the
destruction phase.

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hash_table_find">
<description>
Calls the given function for key/value pairs in the #GHashTable
until @predicate returns %TRUE. The function is passed the key
and value of each pair, and the given @user_data parameter. The
hash table may not be modified while iterating over it (you can't
add/remove items).

Note, that hash tables are really only optimized for forward
lookups, i.e. g_hash_table_lookup(). So code that frequently issues
g_hash_table_find() or g_hash_table_foreach() (e.g. in the order of
once per every entry in a hash table) should probably be reworked
to use additional or different data structures for reverse lookups
(keep in mind that an O(n) find/foreach operation issued for all n
values in a hash table ends up needing O(n*n) operations).

Since: 2.4

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="predicate">
<parameter_description> function to test the key/value pairs for a certain property
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> The value of the first key/value pair is returned,
for which @predicate evaluates to %TRUE. If no pair with the
requested property is found, %NULL is returned.

</return>
</function>

<function name="g_hash_table_foreach">
<description>
Calls the given function for each of the key/value pairs in the
#GHashTable.  The function is passed the key and value of each
pair, and the given @user_data parameter.  The hash table may not
be modified while iterating over it (you can't add/remove
items). To remove all items matching a predicate, use
g_hash_table_foreach_remove().

See g_hash_table_find() for performance caveats for linear
order searches in contrast to g_hash_table_lookup().

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each key/value pair
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hash_table_foreach_remove">
<description>
Calls the given function for each key/value pair in the
#GHashTable. If the function returns %TRUE, then the key/value
pair is removed from the #GHashTable. If you supplied key or
value destroy functions when creating the #GHashTable, they are
used to free the memory allocated for the removed keys and values.

See #GHashTableIter for an alternative way to loop over the
key/value pairs in the hash table.


</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each key/value pair
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the number of key/value pairs removed
</return>
</function>

<function name="g_hash_table_foreach_steal">
<description>
Calls the given function for each key/value pair in the
#GHashTable. If the function returns %TRUE, then the key/value
pair is removed from the #GHashTable, but no key or value
destroy functions are called.

See #GHashTableIter for an alternative way to loop over the
key/value pairs in the hash table.


</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each key/value pair
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return> the number of key/value pairs removed.
</return>
</function>

<function name="g_hash_table_freeze">
<description>
This function is deprecated and will be removed in the next major
release of GLib. It does nothing.

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hash_table_get_keys">
<description>
Retrieves every key inside @hash_table. The returned data is valid
until changes to the hash release those keys.

This iterates over every entry in the hash table to build its return value.
To iterate over the entries in a #GHashTable more efficiently, use a
#GHashTableIter.

Since: 2.14

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return> a #GList containing all the keys
inside the hash table. The content of the list is owned by the
hash table and should not be modified or freed. Use g_list_free()
when done using the list.

</return>
</function>

<function name="g_hash_table_get_keys_as_array">
<description>
Retrieves every key inside @hash_table, as an array.

The returned array is %NULL-terminated but may contain %NULL as a
key.  Use @length to determine the true length if it's possible that
%NULL was used as the value for a key.

Note: in the common case of a string-keyed #GHashTable, the return
value of this function can be conveniently cast to (const gchar **).

This iterates over every entry in the hash table to build its return value.
To iterate over the entries in a #GHashTable more efficiently, use a
#GHashTableIter.

You should always free the return result with g_free().  In the
above-mentioned case of a string-keyed hash table, it may be
appropriate to use g_strfreev() if you call g_hash_table_steal_all()
first to transfer ownership of the keys.

Since: 2.40

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the returned array
</parameter_description>
</parameter>
</parameters>
<return> a
%NULL-terminated array containing each key from the table.

</return>
</function>

<function name="g_hash_table_get_values">
<description>
Retrieves every value inside @hash_table. The returned data
is valid until @hash_table is modified.

This iterates over every entry in the hash table to build its return value.
To iterate over the entries in a #GHashTable more efficiently, use a
#GHashTableIter.

Since: 2.14

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return> a #GList containing all the values
inside the hash table. The content of the list is owned by the
hash table and should not be modified or freed. Use g_list_free()
when done using the list.

</return>
</function>

<function name="g_hash_table_insert">
<description>
Inserts a new key and value into a #GHashTable.

If the key already exists in the #GHashTable its current
value is replaced with the new value. If you supplied a
@value_destroy_func when creating the #GHashTable, the old
value is freed using that function. If you supplied a
@key_destroy_func when creating the #GHashTable, the passed
key is freed using that function.

Starting from GLib 2.40, this function returns a boolean value to
indicate whether the newly added value was already in the hash table
or not.


</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key to insert
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to associate with the key
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key did not exist yet
</return>
</function>

<function name="g_hash_table_iter_get_hash_table">
<description>
Returns the #GHashTable associated with @iter.

Since: 2.16

</description>
<parameters>
<parameter name="iter">
<parameter_description> an initialized #GHashTableIter
</parameter_description>
</parameter>
</parameters>
<return> the #GHashTable associated with @iter.

</return>
</function>

<function name="g_hash_table_iter_init">
<description>
Initializes a key/value pair iterator and associates it with
@hash_table. Modifying the hash table after calling this function
invalidates the returned iterator.
|[&lt;!-- language=&quot;C&quot; --&gt;
GHashTableIter iter;
gpointer key, value;

g_hash_table_iter_init (&amp;iter, hash_table);
while (g_hash_table_iter_next (&amp;iter, &amp;key, &amp;value))
{
// do something with key and value
}
]|

Since: 2.16

</description>
<parameters>
<parameter name="iter">
<parameter_description> an uninitialized #GHashTableIter
</parameter_description>
</parameter>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hash_table_iter_next">
<description>
Advances @iter and retrieves the key and/or value that are now
pointed to as a result of this advancement. If %FALSE is returned,
@key and @value are not set, and the iterator becomes invalid.

Since: 2.16

</description>
<parameters>
<parameter name="iter">
<parameter_description> an initialized #GHashTableIter
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a location to store the key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a location to store the value
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if the end of the #GHashTable has been reached.

</return>
</function>

<function name="g_hash_table_iter_remove">
<description>
Removes the key/value pair currently pointed to by the iterator
from its associated #GHashTable. Can only be called after
g_hash_table_iter_next() returned %TRUE, and cannot be called
more than once for the same key/value pair.

If the #GHashTable was created using g_hash_table_new_full(),
the key and value are freed using the supplied destroy functions,
otherwise you have to make sure that any dynamically allocated
values are freed yourself.

It is safe to continue iterating the #GHashTable afterward:
|[&lt;!-- language=&quot;C&quot; --&gt;
while (g_hash_table_iter_next (&amp;iter, &amp;key, &amp;value))
{
if (condition)
g_hash_table_iter_remove (&amp;iter);
}
]|

Since: 2.16

</description>
<parameters>
<parameter name="iter">
<parameter_description> an initialized #GHashTableIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hash_table_iter_replace">
<description>
Replaces the value currently pointed to by the iterator
from its associated #GHashTable. Can only be called after
g_hash_table_iter_next() returned %TRUE.

If you supplied a @value_destroy_func when creating the
#GHashTable, the old value is freed using that function.

Since: 2.30

</description>
<parameters>
<parameter name="iter">
<parameter_description> an initialized #GHashTableIter
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to replace with
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hash_table_iter_steal">
<description>
Removes the key/value pair currently pointed to by the
iterator from its associated #GHashTable, without calling
the key and value destroy functions. Can only be called
after g_hash_table_iter_next() returned %TRUE, and cannot
be called more than once for the same key/value pair.

Since: 2.16

</description>
<parameters>
<parameter name="iter">
<parameter_description> an initialized #GHashTableIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hash_table_lookup">
<description>
Looks up a key in a #GHashTable. Note that this function cannot
distinguish between a key that is not present and one which is present
and has the value %NULL. If you need this distinction, use
g_hash_table_lookup_extended().


</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to look up
</parameter_description>
</parameter>
</parameters>
<return> the associated value, or %NULL if the key is not found
</return>
</function>

<function name="g_hash_table_lookup_extended">
<description>
Looks up a key in the #GHashTable, returning the original key and the
associated value and a #gboolean which is %TRUE if the key was found. This
is useful if you need to free the memory allocated for the original key,
for example before calling g_hash_table_remove().

You can actually pass %NULL for @lookup_key to test
whether the %NULL key exists, provided the hash and equal functions
of @hash_table are %NULL-safe.


</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="lookup_key">
<parameter_description> the key to look up
</parameter_description>
</parameter>
<parameter name="orig_key">
<parameter_description> return location for the original key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for the value associated
with the key
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key was found in the #GHashTable
</return>
</function>

<function name="g_hash_table_new">
<description>
Creates a new #GHashTable with a reference count of 1.

Hash values returned by @hash_func are used to determine where keys
are stored within the #GHashTable data structure. The g_direct_hash(),
g_int_hash(), g_int64_hash(), g_double_hash() and g_str_hash()
functions are provided for some common types of keys.
If @hash_func is %NULL, g_direct_hash() is used.

@key_equal_func is used when looking up keys in the #GHashTable.
The g_direct_equal(), g_int_equal(), g_int64_equal(), g_double_equal()
and g_str_equal() functions are provided for the most common types
of keys. If @key_equal_func is %NULL, keys are compared directly in
a similar fashion to g_direct_equal(), but without the overhead of
a function call. @key_equal_func is called with the key from the hash table
as its first parameter, and the user-provided key to check against as
its second.


</description>
<parameters>
<parameter name="hash_func">
<parameter_description> a function to create a hash value from a key
</parameter_description>
</parameter>
<parameter name="key_equal_func">
<parameter_description> a function to check two keys for equality
</parameter_description>
</parameter>
</parameters>
<return> a new #GHashTable
</return>
</function>

<function name="g_hash_table_new_full">
<description>
Creates a new #GHashTable like g_hash_table_new() with a reference
count of 1 and allows to specify functions to free the memory
allocated for the key and value that get called when removing the
entry from the #GHashTable.

Since version 2.42 it is permissible for destroy notify functions to
recursively remove further items from the hash table. This is only
permissible if the application still holds a reference to the hash table.
This means that you may need to ensure that the hash table is empty by
calling g_hash_table_remove_all() before releasing the last reference using
g_hash_table_unref().


</description>
<parameters>
<parameter name="hash_func">
<parameter_description> a function to create a hash value from a key
</parameter_description>
</parameter>
<parameter name="key_equal_func">
<parameter_description> a function to check two keys for equality
</parameter_description>
</parameter>
<parameter name="key_destroy_func">
<parameter_description> a function to free the memory allocated for the key
used when removing the entry from the #GHashTable, or %NULL
if you don't want to supply such a function.
</parameter_description>
</parameter>
<parameter name="value_destroy_func">
<parameter_description> a function to free the memory allocated for the
value used when removing the entry from the #GHashTable, or %NULL
if you don't want to supply such a function.
</parameter_description>
</parameter>
</parameters>
<return> a new #GHashTable
</return>
</function>

<function name="g_hash_table_ref">
<description>
Atomically increments the reference count of @hash_table by one.
This function is MT-safe and may be called from any thread.

Since: 2.10

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a valid #GHashTable
</parameter_description>
</parameter>
</parameters>
<return> the passed in #GHashTable

</return>
</function>

<function name="g_hash_table_remove">
<description>
Removes a key and its associated value from a #GHashTable.

If the #GHashTable was created using g_hash_table_new_full(), the
key and value are freed using the supplied destroy functions, otherwise
you have to make sure that any dynamically allocated values are freed
yourself.


</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key was found and removed from the #GHashTable
</return>
</function>

<function name="g_hash_table_remove_all">
<description>
Removes all keys and their associated values from a #GHashTable.

If the #GHashTable was created using g_hash_table_new_full(),
the keys and values are freed using the supplied destroy functions,
otherwise you have to make sure that any dynamically allocated
values are freed yourself.

Since: 2.12

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hash_table_replace">
<description>
Inserts a new key and value into a #GHashTable similar to
g_hash_table_insert(). The difference is that if the key
already exists in the #GHashTable, it gets replaced by the
new key. If you supplied a @value_destroy_func when creating
the #GHashTable, the old value is freed using that function.
If you supplied a @key_destroy_func when creating the
#GHashTable, the old key is freed using that function.

Starting from GLib 2.40, this function returns a boolean value to
indicate whether the newly added value was already in the hash table
or not.


</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key to insert
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to associate with the key
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key did not exist yet
</return>
</function>

<function name="g_hash_table_size">
<description>
Returns the number of elements contained in the #GHashTable.


</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return> the number of key/value pairs in the #GHashTable.
</return>
</function>

<function name="g_hash_table_steal">
<description>
Removes a key and its associated value from a #GHashTable without
calling the key and value destroy functions.


</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key was found and removed from the #GHashTable
</return>
</function>

<function name="g_hash_table_steal_all">
<description>
Removes all keys and their associated values from a #GHashTable
without calling the key and value destroy functions.

Since: 2.12

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hash_table_thaw">
<description>
This function is deprecated and will be removed in the next major
release of GLib. It does nothing.

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a #GHashTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hash_table_unref">
<description>
Atomically decrements the reference count of @hash_table by one.
If the reference count drops to 0, all keys and values will be
destroyed, and all memory allocated by the hash table is released.
This function is MT-safe and may be called from any thread.

Since: 2.10

</description>
<parameters>
<parameter name="hash_table">
<parameter_description> a valid #GHashTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hmac_copy">
<description>
Copies a #GHmac. If @hmac has been closed, by calling
g_hmac_get_string() or g_hmac_get_digest(), the copied
HMAC will be closed as well.

Since: 2.30

</description>
<parameters>
<parameter name="hmac">
<parameter_description> the #GHmac to copy
</parameter_description>
</parameter>
</parameters>
<return> the copy of the passed #GHmac. Use g_hmac_unref()
when finished using it.

</return>
</function>

<function name="g_hmac_get_digest">
<description>
Gets the digest from @checksum as a raw binary array and places it
into @buffer. The size of the digest depends on the type of checksum.

Once this function has been called, the #GHmac is closed and can
no longer be updated with g_checksum_update().

Since: 2.30

</description>
<parameters>
<parameter name="hmac">
<parameter_description> a #GHmac
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> output buffer
</parameter_description>
</parameter>
<parameter name="digest_len">
<parameter_description> an inout parameter. The caller initializes it to the
size of @buffer. After the call it contains the length of the digest
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hmac_get_string">
<description>
Gets the HMAC as an hexadecimal string.

Once this function has been called the #GHmac can no longer be
updated with g_hmac_update().

The hexadecimal characters will be lower case.

Since: 2.30

</description>
<parameters>
<parameter name="hmac">
<parameter_description> a #GHmac
</parameter_description>
</parameter>
</parameters>
<return> the hexadecimal representation of the HMAC. The
returned string is owned by the HMAC and should not be modified
or freed.

</return>
</function>

<function name="g_hmac_new">
<description>
Creates a new #GHmac, using the digest algorithm @digest_type.
If the @digest_type is not known, %NULL is returned.
A #GHmac can be used to compute the HMAC of a key and an
arbitrary binary blob, using different hashing algorithms.

A #GHmac works by feeding a binary blob through g_hmac_update()
until the data is complete; the digest can then be extracted
using g_hmac_get_string(), which will return the checksum as a
hexadecimal string; or g_hmac_get_digest(), which will return a
array of raw bytes. Once either g_hmac_get_string() or
g_hmac_get_digest() have been called on a #GHmac, the HMAC
will be closed and it won't be possible to call g_hmac_update()
on it anymore.

Support for digests of type %G_CHECKSUM_SHA512 has been added in GLib 2.42.
Support for %G_CHECKSUM_SHA384 was added in GLib 2.52.

Since: 2.30

</description>
<parameters>
<parameter name="digest_type">
<parameter_description> the desired type of digest
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key for the HMAC
</parameter_description>
</parameter>
<parameter name="key_len">
<parameter_description> the length of the keys
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GHmac, or %NULL.
Use g_hmac_unref() to free the memory allocated by it.

</return>
</function>

<function name="g_hmac_ref">
<description>
Atomically increments the reference count of @hmac by one.

This function is MT-safe and may be called from any thread.

Since: 2.30

</description>
<parameters>
<parameter name="hmac">
<parameter_description> a valid #GHmac
</parameter_description>
</parameter>
</parameters>
<return> the passed in #GHmac.

</return>
</function>

<function name="g_hmac_unref">
<description>
Atomically decrements the reference count of @hmac by one.

If the reference count drops to 0, all keys and values will be
destroyed, and all memory allocated by the hash table is released.
This function is MT-safe and may be called from any thread.
Frees the memory allocated for @hmac.

Since: 2.30

</description>
<parameters>
<parameter name="hmac">
<parameter_description> a #GHmac
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hmac_update">
<description>
Feeds @data into an existing #GHmac.

The HMAC must still be open, that is g_hmac_get_string() or
g_hmac_get_digest() must not have been called on @hmac.

Since: 2.30

</description>
<parameters>
<parameter name="hmac">
<parameter_description> a #GHmac
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> buffer used to compute the checksum
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> size of the buffer, or -1 if it is a nul-terminated string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_alloc">
<description>
Allocates space for a #GHook and initializes it.


</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
</parameters>
<return> a new #GHook
</return>
</function>

<function name="g_hook_append">
<description>
Appends a #GHook onto the end of a #GHookList.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook">
<parameter_description> the #GHook to add to the end of @hook_list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_compare_ids">
<description>
Compares the ids of two #GHook elements, returning a negative value
if the second id is greater than the first.


</description>
<parameters>
<parameter name="new_hook">
<parameter_description> a #GHook
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #GHook to compare with @new_hook
</parameter_description>
</parameter>
</parameters>
<return> a value &lt;= 0 if the id of @sibling is &gt;= the id of @new_hook
</return>
</function>

<function name="g_hook_destroy">
<description>
Destroys a #GHook, given its ID.


</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook_id">
<parameter_description> a hook ID
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #GHook was found in the #GHookList and destroyed
</return>
</function>

<function name="g_hook_destroy_link">
<description>
Removes one #GHook from a #GHookList, marking it
inactive and calling g_hook_unref() on it.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook">
<parameter_description> the #GHook to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_find">
<description>
Finds a #GHook in a #GHookList using the given function to
test for a match.


</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="need_valids">
<parameter_description> %TRUE if #GHook elements which have been destroyed
should be skipped
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each #GHook, which should return
%TRUE when the #GHook has been found
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to pass to @func
</parameter_description>
</parameter>
</parameters>
<return> the found #GHook or %NULL if no matching #GHook is found
</return>
</function>

<function name="g_hook_find_data">
<description>
Finds a #GHook in a #GHookList with the given data.


</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="need_valids">
<parameter_description> %TRUE if #GHook elements which have been destroyed
should be skipped
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to find
</parameter_description>
</parameter>
</parameters>
<return> the #GHook with the given @data or %NULL if no matching
#GHook is found
</return>
</function>

<function name="g_hook_find_func">
<description>
Finds a #GHook in a #GHookList with the given function.


</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="need_valids">
<parameter_description> %TRUE if #GHook elements which have been destroyed
should be skipped
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to find
</parameter_description>
</parameter>
</parameters>
<return> the #GHook with the given @func or %NULL if no matching
#GHook is found
</return>
</function>

<function name="g_hook_find_func_data">
<description>
Finds a #GHook in a #GHookList with the given function and data.


</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="need_valids">
<parameter_description> %TRUE if #GHook elements which have been destroyed
should be skipped
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to find
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to find
</parameter_description>
</parameter>
</parameters>
<return> the #GHook with the given @func and @data or %NULL if
no matching #GHook is found
</return>
</function>

<function name="g_hook_first_valid">
<description>
Returns the first #GHook in a #GHookList which has not been destroyed.
The reference count for the #GHook is incremented, so you must call
g_hook_unref() to restore it when no longer needed. (Or call
g_hook_next_valid() if you are stepping through the #GHookList.)


</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="may_be_in_call">
<parameter_description> %TRUE if hooks which are currently running
(e.g. in another thread) are considered valid. If set to %FALSE,
these are skipped
</parameter_description>
</parameter>
</parameters>
<return> the first valid #GHook, or %NULL if none are valid
</return>
</function>

<function name="g_hook_free">
<description>
Calls the #GHookList @finalize_hook function if it exists,
and frees the memory allocated for the #GHook.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook">
<parameter_description> the #GHook to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_get">
<description>
Returns the #GHook with the given id, or %NULL if it is not found.


</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook_id">
<parameter_description> a hook id
</parameter_description>
</parameter>
</parameters>
<return> the #GHook with the given id, or %NULL if it is not found
</return>
</function>

<function name="g_hook_insert_before">
<description>
Inserts a #GHook into a #GHookList, before a given #GHook.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the #GHook to insert the new #GHook before
</parameter_description>
</parameter>
<parameter name="hook">
<parameter_description> the #GHook to insert
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_insert_sorted">
<description>
Inserts a #GHook into a #GHookList, sorted by the given function.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook">
<parameter_description> the #GHook to insert
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the comparison function used to sort the #GHook elements
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_list_clear">
<description>
Removes all the #GHook elements from a #GHookList.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_list_init">
<description>
Initializes a #GHookList.
This must be called before the #GHookList is used.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook_size">
<parameter_description> the size of each element in the #GHookList,
typically `sizeof (GHook)`.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_list_invoke">
<description>
Calls all of the #GHook functions in a #GHookList.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="may_recurse">
<parameter_description> %TRUE if functions which are already running
(e.g. in another thread) can be called. If set to %FALSE,
these are skipped
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_list_invoke_check">
<description>
Calls all of the #GHook functions in a #GHookList.
Any function which returns %FALSE is removed from the #GHookList.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="may_recurse">
<parameter_description> %TRUE if functions which are already running
(e.g. in another thread) can be called. If set to %FALSE,
these are skipped
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_list_marshal">
<description>
Calls a function on each valid #GHook.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="may_recurse">
<parameter_description> %TRUE if hooks which are currently running
(e.g. in another thread) are considered valid. If set to %FALSE,
these are skipped
</parameter_description>
</parameter>
<parameter name="marshaller">
<parameter_description> the function to call for each #GHook
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> data to pass to @marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_list_marshal_check">
<description>
Calls a function on each valid #GHook and destroys it if the
function returns %FALSE.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="may_recurse">
<parameter_description> %TRUE if hooks which are currently running
(e.g. in another thread) are considered valid. If set to %FALSE,
these are skipped
</parameter_description>
</parameter>
<parameter name="marshaller">
<parameter_description> the function to call for each #GHook
</parameter_description>
</parameter>
<parameter name="marshal_data">
<parameter_description> data to pass to @marshaller
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_next_valid">
<description>
Returns the next #GHook in a #GHookList which has not been destroyed.
The reference count for the #GHook is incremented, so you must call
g_hook_unref() to restore it when no longer needed. (Or continue to call
g_hook_next_valid() until %NULL is returned.)


</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook">
<parameter_description> the current #GHook
</parameter_description>
</parameter>
<parameter name="may_be_in_call">
<parameter_description> %TRUE if hooks which are currently running
(e.g. in another thread) are considered valid. If set to %FALSE,
these are skipped
</parameter_description>
</parameter>
</parameters>
<return> the next valid #GHook, or %NULL if none are valid
</return>
</function>

<function name="g_hook_prepend">
<description>
Prepends a #GHook on the start of a #GHookList.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook">
<parameter_description> the #GHook to add to the start of @hook_list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hook_ref">
<description>
Increments the reference count for a #GHook.


</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook">
<parameter_description> the #GHook to increment the reference count of
</parameter_description>
</parameter>
</parameters>
<return> the @hook that was passed in (since 2.6)
</return>
</function>

<function name="g_hook_unref">
<description>
Decrements the reference count of a #GHook.
If the reference count falls to 0, the #GHook is removed
from the #GHookList and g_hook_free() is called to free it.

</description>
<parameters>
<parameter name="hook_list">
<parameter_description> a #GHookList
</parameter_description>
</parameter>
<parameter name="hook">
<parameter_description> the #GHook to unref
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_hostname_is_ascii_encoded">
<description>
Tests if @hostname contains segments with an ASCII-compatible
encoding of an Internationalized Domain Name. If this returns
%TRUE, you should decode the hostname with g_hostname_to_unicode()
before displaying it to the user.

Note that a hostname might contain a mix of encoded and unencoded
segments, and so it is possible for g_hostname_is_non_ascii() and
g_hostname_is_ascii_encoded() to both return %TRUE for a name.

Since: 2.22

</description>
<parameters>
<parameter name="hostname">
<parameter_description> a hostname
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @hostname contains any ASCII-encoded
segments.

</return>
</function>

<function name="g_hostname_is_ip_address">
<description>
Tests if @hostname is the string form of an IPv4 or IPv6 address.
(Eg, &quot;192.168.0.1&quot;.)

Since: 2.22

</description>
<parameters>
<parameter name="hostname">
<parameter_description> a hostname (or IP address in string form)
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @hostname is an IP address

</return>
</function>

<function name="g_hostname_is_non_ascii">
<description>
Tests if @hostname contains Unicode characters. If this returns
%TRUE, you need to encode the hostname with g_hostname_to_ascii()
before using it in non-IDN-aware contexts.

Note that a hostname might contain a mix of encoded and unencoded
segments, and so it is possible for g_hostname_is_non_ascii() and
g_hostname_is_ascii_encoded() to both return %TRUE for a name.

Since: 2.22

</description>
<parameters>
<parameter name="hostname">
<parameter_description> a hostname
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @hostname contains any non-ASCII characters

</return>
</function>

<function name="g_hostname_to_ascii">
<description>
Converts @hostname to its canonical ASCII form; an ASCII-only
string containing no uppercase letters and not ending with a
trailing dot.

Since: 2.22

</description>
<parameters>
<parameter name="hostname">
<parameter_description> a valid UTF-8 or ASCII hostname
</parameter_description>
</parameter>
</parameters>
<return> an ASCII hostname, which must be freed, or %NULL if
@hostname is in some way invalid.

</return>
</function>

<function name="g_hostname_to_unicode">
<description>
Converts @hostname to its canonical presentation form; a UTF-8
string in Unicode normalization form C, containing no uppercase
letters, no forbidden characters, and no ASCII-encoded segments,
and not ending with a trailing dot.

Of course if @hostname is not an internationalized hostname, then
the canonical presentation form will be entirely ASCII.

Since: 2.22

</description>
<parameters>
<parameter name="hostname">
<parameter_description> a valid UTF-8 or ASCII hostname
</parameter_description>
</parameter>
</parameters>
<return> a UTF-8 hostname, which must be freed, or %NULL if
@hostname is in some way invalid.

</return>
</function>

<function name="g_htonl">
<description>
Converts a 32-bit integer value from host to network byte order.


</description>
<parameters>
<parameter name="val">
<parameter_description> a 32-bit integer value in host byte order
</parameter_description>
</parameter>
</parameters>
<return> @val converted to network byte order
</return>
</function>

<function name="g_htons">
<description>
Converts a 16-bit integer value from host to network byte order.


</description>
<parameters>
<parameter name="val">
<parameter_description> a 16-bit integer value in host byte order
</parameter_description>
</parameter>
</parameters>
<return> @val converted to network byte order
</return>
</function>

<function name="g_iconv">
<description>
Same as the standard UNIX routine iconv(), but
may be implemented via libiconv on UNIX flavors that lack
a native implementation.

GLib provides g_convert() and g_locale_to_utf8() which are likely
more convenient than the raw iconv wrappers.

Note that the behaviour of iconv() for characters which are valid in the
input character set, but which have no representation in the output character
set, is implementation defined. This function may return success (with a
positive number of non-reversible conversions as replacement characters were
used), or it may return -1 and set an error such as %EILSEQ, in such a
situation.


</description>
<parameters>
<parameter name="converter">
<parameter_description> conversion descriptor from g_iconv_open()
</parameter_description>
</parameter>
<parameter name="inbuf">
<parameter_description> bytes to convert
</parameter_description>
</parameter>
<parameter name="inbytes_left">
<parameter_description> inout parameter, bytes remaining to convert in @inbuf
</parameter_description>
</parameter>
<parameter name="outbuf">
<parameter_description> converted output bytes
</parameter_description>
</parameter>
<parameter name="outbytes_left">
<parameter_description> inout parameter, bytes available to fill in @outbuf
</parameter_description>
</parameter>
</parameters>
<return> count of non-reversible conversions, or -1 on error
</return>
</function>

<function name="g_iconv_close">
<description>
Same as the standard UNIX routine iconv_close(), but
may be implemented via libiconv on UNIX flavors that lack
a native implementation. Should be called to clean up
the conversion descriptor from g_iconv_open() when
you are done converting things.

GLib provides g_convert() and g_locale_to_utf8() which are likely
more convenient than the raw iconv wrappers.


</description>
<parameters>
<parameter name="converter">
<parameter_description> a conversion descriptor from g_iconv_open()
</parameter_description>
</parameter>
</parameters>
<return> -1 on error, 0 on success
</return>
</function>

<function name="g_iconv_open">
<description>
Same as the standard UNIX routine iconv_open(), but
may be implemented via libiconv on UNIX flavors that lack
a native implementation.

GLib provides g_convert() and g_locale_to_utf8() which are likely
more convenient than the raw iconv wrappers.


</description>
<parameters>
<parameter name="to_codeset">
<parameter_description> destination codeset
</parameter_description>
</parameter>
<parameter name="from_codeset">
<parameter_description> source codeset
</parameter_description>
</parameter>
</parameters>
<return> a &quot;conversion descriptor&quot;, or (GIConv)-1 if
opening the converter failed.
</return>
</function>

<function name="g_idle_add">
<description>
Adds a function to be called whenever there are no higher priority
events pending to the default main loop. The function is given the
default idle priority, #G_PRIORITY_DEFAULT_IDLE.  If the function
returns %FALSE it is automatically removed from the list of event
sources and will not be called again.

See [memory management of sources][mainloop-memory-management] for details
on how to handle the return value and memory management of @data.

This internally creates a main loop source using g_idle_source_new()
and attaches it to the global #GMainContext using g_source_attach(), so
the callback will be invoked in whichever thread is running that main
context. You can do these steps manually if you need greater control or to
use a custom main context.


</description>
<parameters>
<parameter name="function">
<parameter_description> function to call 
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @function.
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.
</return>
</function>

<function name="g_idle_add_full">
<description>
Adds a function to be called whenever there are no higher priority
events pending.  If the function returns %FALSE it is automatically
removed from the list of event sources and will not be called again.

See [memory management of sources][mainloop-memory-management] for details
on how to handle the return value and memory management of @data.

This internally creates a main loop source using g_idle_source_new()
and attaches it to the global #GMainContext using g_source_attach(), so
the callback will be invoked in whichever thread is running that main
context. You can do these steps manually if you need greater control or to
use a custom main context.


</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the idle source. Typically this will be in the
range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the idle is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.
</return>
</function>

<function name="g_idle_remove_by_data">
<description>
Removes the idle function with the given data.


</description>
<parameters>
<parameter name="data">
<parameter_description> the data for the idle source's callback.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an idle source was found and removed.
</return>
</function>

<function name="g_idle_source_new">
<description>
Creates a new idle source.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed. Note that the default priority for idle sources is
%G_PRIORITY_DEFAULT_IDLE, as compared to other sources which
have a default priority of %G_PRIORITY_DEFAULT.


</description>
<parameters>
</parameters>
<return> the newly-created idle source
</return>
</function>

<function name="g_info">
<description>
A convenience function/macro to log an informational message. Seldom used.

If g_log_default_handler() is used as the log handler function, a new-line
character will automatically be appended to @..., and need not be entered
manually.

Such messages are suppressed by the g_log_default_handler() and
g_log_writer_default() unless the `G_MESSAGES_DEBUG` environment variable is
set appropriately.

If structured logging is enabled, this will use g_log_structured();
otherwise it will use g_log(). See
[Using Structured Logging][using-structured-logging].

Since: 2.40

</description>
<parameters>
<parameter name="Varargs">
<parameter_description> format string, followed by parameters to insert
into the format string (as with printf())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_int64_equal">
<description>
Compares the two #gint64 values being pointed to and returns
%TRUE if they are equal.
It can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using non-%NULL pointers to 64-bit integers as keys in a
#GHashTable.

Since: 2.22

</description>
<parameters>
<parameter name="v1">
<parameter_description> a pointer to a #gint64 key
</parameter_description>
</parameter>
<parameter name="v2">
<parameter_description> a pointer to a #gint64 key to compare with @v1
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two keys match.

</return>
</function>

<function name="g_int64_hash">
<description>
Converts a pointer to a #gint64 to a hash value.

It can be passed to g_hash_table_new() as the @hash_func parameter,
when using non-%NULL pointers to 64-bit integer values as keys in a
#GHashTable.

Since: 2.22

</description>
<parameters>
<parameter name="v">
<parameter_description> a pointer to a #gint64 key
</parameter_description>
</parameter>
</parameters>
<return> a hash value corresponding to the key.

</return>
</function>

<function name="g_int_equal">
<description>
Compares the two #gint values being pointed to and returns
%TRUE if they are equal.
It can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using non-%NULL pointers to integers as keys in a
#GHashTable.

Note that this function acts on pointers to #gint, not on #gint
directly: if your hash table's keys are of the form
`GINT_TO_POINTER (n)`, use g_direct_equal() instead.


</description>
<parameters>
<parameter name="v1">
<parameter_description> a pointer to a #gint key
</parameter_description>
</parameter>
<parameter name="v2">
<parameter_description> a pointer to a #gint key to compare with @v1
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two keys match.
</return>
</function>

<function name="g_int_hash">
<description>
Converts a pointer to a #gint to a hash value.
It can be passed to g_hash_table_new() as the @hash_func parameter,
when using non-%NULL pointers to integer values as keys in a #GHashTable.

Note that this function acts on pointers to #gint, not on #gint
directly: if your hash table's keys are of the form
`GINT_TO_POINTER (n)`, use g_direct_hash() instead.


</description>
<parameters>
<parameter name="v">
<parameter_description> a pointer to a #gint key
</parameter_description>
</parameter>
</parameters>
<return> a hash value corresponding to the key.
</return>
</function>

<function name="g_intern_static_string">
<description>
Returns a canonical representation for @string. Interned strings
can be compared for equality by comparing the pointers, instead of
using strcmp(). g_intern_static_string() does not copy the string,
therefore @string must not be freed or modified.

Since: 2.10

</description>
<parameters>
<parameter name="string">
<parameter_description> a static string
</parameter_description>
</parameter>
</parameters>
<return> a canonical representation for the string

</return>
</function>

<function name="g_intern_string">
<description>
Returns a canonical representation for @string. Interned strings
can be compared for equality by comparing the pointers, instead of
using strcmp().

Since: 2.10

</description>
<parameters>
<parameter name="string">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a canonical representation for the string

</return>
</function>

<function name="g_io_add_watch">
<description>
Adds the #GIOChannel into the default main loop context
with the default priority.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> the condition to watch for
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call when the condition is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func
</parameter_description>
</parameter>
</parameters>
<return> the event source id
</return>
</function>

<function name="g_io_add_watch_full">
<description>
Adds the #GIOChannel into the default main loop context
with the given priority.

This internally creates a main loop source using g_io_create_watch()
and attaches it to the main loop context with g_source_attach().
You can do these steps manually if you need greater control.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the priority of the #GIOChannel source
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> the condition to watch for
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call when the condition is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> the function to call when the source is removed
</parameter_description>
</parameter>
</parameters>
<return> the event source id
</return>
</function>

<function name="g_io_channel_close">
<description>
Close an IO channel. Any pending data to be written will be
flushed, ignoring errors. The channel will not be freed until the
last reference is dropped using g_io_channel_unref(). 

Deprecated:2.2: Use g_io_channel_shutdown() instead.

</description>
<parameters>
<parameter name="channel">
<parameter_description> A #GIOChannel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_channel_error_from_errno">
<description>
Converts an `errno` error number to a #GIOChannelError.


</description>
<parameters>
<parameter name="en">
<parameter_description> an `errno` error number, e.g. `EINVAL`
</parameter_description>
</parameter>
</parameters>
<return> a #GIOChannelError error number, e.g. 
%G_IO_CHANNEL_ERROR_INVAL.
</return>
</function>

<function name="g_io_channel_flush">
<description>
Flushes the write buffer for the GIOChannel.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store an error of type #GIOChannelError
</parameter_description>
</parameter>
</parameters>
<return> the status of the operation: One of
#G_IO_STATUS_NORMAL, #G_IO_STATUS_AGAIN, or
#G_IO_STATUS_ERROR.
</return>
</function>

<function name="g_io_channel_get_buffer_condition">
<description>
This function returns a #GIOCondition depending on whether there
is data to be read/space to write data in the internal buffers in 
the #GIOChannel. Only the flags %G_IO_IN and %G_IO_OUT may be set.


</description>
<parameters>
<parameter name="channel">
<parameter_description> A #GIOChannel
</parameter_description>
</parameter>
</parameters>
<return> A #GIOCondition
</return>
</function>

<function name="g_io_channel_get_buffer_size">
<description>
Gets the buffer size.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
</parameters>
<return> the size of the buffer.
</return>
</function>

<function name="g_io_channel_get_buffered">
<description>
Returns whether @channel is buffered.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @channel is buffered. 
</return>
</function>

<function name="g_io_channel_get_close_on_unref">
<description>
Returns whether the file/socket/whatever associated with @channel
will be closed when @channel receives its final unref and is
destroyed. The default value of this is %TRUE for channels created
by g_io_channel_new_file (), and %FALSE for all other channels.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the channel will be closed, %FALSE otherwise.
</return>
</function>

<function name="g_io_channel_get_encoding">
<description>
Gets the encoding for the input/output of the channel. 
The internal encoding is always UTF-8. The encoding %NULL 
makes the channel safe for binary data.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
</parameters>
<return> A string containing the encoding, this string is
owned by GLib and must not be freed.
</return>
</function>

<function name="g_io_channel_get_flags">
<description>
Gets the current flags for a #GIOChannel, including read-only
flags such as %G_IO_FLAG_IS_READABLE.

The values of the flags %G_IO_FLAG_IS_READABLE and %G_IO_FLAG_IS_WRITABLE
are cached for internal use by the channel when it is created.
If they should change at some later point (e.g. partial shutdown
of a socket with the UNIX shutdown() function), the user
should immediately call g_io_channel_get_flags() to update
the internal values of these flags.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
</parameters>
<return> the flags which are set on the channel
</return>
</function>

<function name="g_io_channel_get_line_term">
<description>
This returns the string that #GIOChannel uses to determine
where in the file a line break occurs. A value of %NULL
indicates autodetection.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a location to return the length of the line terminator
</parameter_description>
</parameter>
</parameters>
<return> The line termination string. This value
is owned by GLib and must not be freed.
</return>
</function>

<function name="g_io_channel_init">
<description>
Initializes a #GIOChannel struct. 

This is called by each of the above functions when creating a 
#GIOChannel, and so is not often needed by the application 
programmer (unless you are creating a new type of #GIOChannel).

</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_channel_new_file">
<description>
Open a file @filename as a #GIOChannel using mode @mode. This
channel will be closed when the last reference to it is dropped,
so there is no need to call g_io_channel_close() (though doing
so will not cause problems, as long as no attempt is made to
access the channel after it is closed).


</description>
<parameters>
<parameter name="filename">
<parameter_description> A string containing the name of a file
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> One of &quot;r&quot;, &quot;w&quot;, &quot;a&quot;, &quot;r+&quot;, &quot;w+&quot;, &quot;a+&quot;. These have
the same meaning as in fopen()
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> A location to return an error of type %G_FILE_ERROR
</parameter_description>
</parameter>
</parameters>
<return> A #GIOChannel on success, %NULL on failure.
</return>
</function>

<function name="g_io_channel_read">
<description>
Reads data from a #GIOChannel. 

Deprecated:2.2: Use g_io_channel_read_chars() instead.

</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> a buffer to read the data into (which should be at least 
count bytes long)
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to read from the #GIOChannel
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> returns the number of bytes actually read
</parameter_description>
</parameter>
</parameters>
<return> %G_IO_ERROR_NONE if the operation was successful. 

</return>
</function>

<function name="g_io_channel_read_chars">
<description>
Replacement for g_io_channel_read() with the new API.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description>
a buffer to read data into
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the size of the buffer. Note that the buffer may not be
complelely filled even if there is data in the buffer if the
remaining data is not a complete character.
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> The number of bytes read. This may be
zero even on success if count &lt; 6 and the channel's encoding
is non-%NULL. This indicates that the next UTF-8 character is
too wide for the buffer.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a location to return an error of type #GConvertError
or #GIOChannelError.
</parameter_description>
</parameter>
</parameters>
<return> the status of the operation.
</return>
</function>

<function name="g_io_channel_read_line">
<description>
Reads a line, including the terminating character(s),
from a #GIOChannel into a newly-allocated string.
@str_return will contain allocated memory if the return
is %G_IO_STATUS_NORMAL.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="str_return">
<parameter_description> The line read from the #GIOChannel, including the
line terminator. This data should be freed with g_free()
when no longer needed. This is a nul-terminated string. 
If a @length of zero is returned, this will be %NULL instead.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> location to store length of the read data, or %NULL
</parameter_description>
</parameter>
<parameter name="terminator_pos">
<parameter_description> location to store position of line terminator, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> A location to return an error of type #GConvertError
or #GIOChannelError
</parameter_description>
</parameter>
</parameters>
<return> the status of the operation.
</return>
</function>

<function name="g_io_channel_read_line_string">
<description>
Reads a line from a #GIOChannel, using a #GString as a buffer.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GString into which the line will be written.
If @buffer already contains data, the old data will
be overwritten.
</parameter_description>
</parameter>
<parameter name="terminator_pos">
<parameter_description> location to store position of line terminator, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a location to store an error of type #GConvertError
or #GIOChannelError
</parameter_description>
</parameter>
</parameters>
<return> the status of the operation.
</return>
</function>

<function name="g_io_channel_read_to_end">
<description>
Reads all the remaining data from the file.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="str_return">
<parameter_description> Location to
store a pointer to a string holding the remaining data in the
#GIOChannel. This data should be freed with g_free() when no
longer needed. This data is terminated by an extra nul
character, but there may be other nuls in the intervening data.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> location to store length of the data
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to return an error of type #GConvertError
or #GIOChannelError
</parameter_description>
</parameter>
</parameters>
<return> %G_IO_STATUS_NORMAL on success. 
This function never returns %G_IO_STATUS_EOF.
</return>
</function>

<function name="g_io_channel_read_unichar">
<description>
Reads a Unicode character from @channel.
This function cannot be called on a channel with %NULL encoding.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="thechar">
<parameter_description> a location to return a character
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a location to return an error of type #GConvertError
or #GIOChannelError
</parameter_description>
</parameter>
</parameters>
<return> a #GIOStatus
</return>
</function>

<function name="g_io_channel_ref">
<description>
Increments the reference count of a #GIOChannel.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
</parameters>
<return> the @channel that was passed in (since 2.6)
</return>
</function>

<function name="g_io_channel_seek">
<description>
Sets the current position in the #GIOChannel, similar to the standard 
library function fseek(). 

Deprecated:2.2: Use g_io_channel_seek_position() instead.

</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> an offset, in bytes, which is added to the position specified 
by @type
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the position in the file, which can be %G_SEEK_CUR (the current
position), %G_SEEK_SET (the start of the file), or %G_SEEK_END 
(the end of the file)
</parameter_description>
</parameter>
</parameters>
<return> %G_IO_ERROR_NONE if the operation was successful.

</return>
</function>

<function name="g_io_channel_seek_position">
<description>
Replacement for g_io_channel_seek() with the new API.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset in bytes from the position specified by @type
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSeekType. The type %G_SEEK_CUR is only allowed in those
cases where a call to g_io_channel_set_encoding ()
is allowed. See the documentation for
g_io_channel_set_encoding () for details.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> A location to return an error of type #GIOChannelError
</parameter_description>
</parameter>
</parameters>
<return> the status of the operation.
</return>
</function>

<function name="g_io_channel_set_buffer_size">
<description>
Sets the buffer size.

</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the buffer, or 0 to let GLib pick a good size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_channel_set_buffered">
<description>
The buffering state can only be set if the channel's encoding
is %NULL. For any other encoding, the channel must be buffered.

A buffered channel can only be set unbuffered if the channel's
internal buffers have been flushed. Newly created channels or
channels which have returned %G_IO_STATUS_EOF
not require such a flush. For write-only channels, a call to
g_io_channel_flush () is sufficient. For all other channels,
the buffers may be flushed by a call to g_io_channel_seek_position ().
This includes the possibility of seeking with seek type %G_SEEK_CUR
and an offset of zero. Note that this means that socket-based
channels cannot be set unbuffered once they have had data
read from them.

On unbuffered channels, it is safe to mix read and write
calls from the new and old APIs, if this is necessary for
maintaining old code.

The default state of the channel is buffered.

</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="buffered">
<parameter_description> whether to set the channel buffered or unbuffered
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_channel_set_close_on_unref">
<description>
Whether to close the channel on the final unref of the #GIOChannel
data structure. The default value of this is %TRUE for channels
created by g_io_channel_new_file (), and %FALSE for all other channels.

Setting this flag to %TRUE for a channel you have already closed
can cause problems when the final reference to the #GIOChannel is dropped.

</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="do_close">
<parameter_description> Whether to close the channel on the final unref of
the GIOChannel data structure.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_channel_set_encoding">
<description>
Sets the encoding for the input/output of the channel. 
The internal encoding is always UTF-8. The default encoding 
for the external file is UTF-8.

The encoding %NULL is safe to use with binary data.

The encoding can only be set if one of the following conditions
is true:

- The channel was just created, and has not been written to or read from yet.

- The channel is write-only.

- The channel is a file, and the file pointer was just repositioned
by a call to g_io_channel_seek_position(). (This flushes all the
internal buffers.)

- The current encoding is %NULL or UTF-8.

- One of the (new API) read functions has just returned %G_IO_STATUS_EOF
(or, in the case of g_io_channel_read_to_end(), %G_IO_STATUS_NORMAL).

-  One of the functions g_io_channel_read_chars() or 
g_io_channel_read_unichar() has returned %G_IO_STATUS_AGAIN or 
%G_IO_STATUS_ERROR. This may be useful in the case of 
%G_CONVERT_ERROR_ILLEGAL_SEQUENCE.
Returning one of these statuses from g_io_channel_read_line(),
g_io_channel_read_line_string(), or g_io_channel_read_to_end()
does not guarantee that the encoding can be changed.

Channels which do not meet one of the above conditions cannot call
g_io_channel_seek_position() with an offset of %G_SEEK_CUR, and, if 
they are &quot;seekable&quot;, cannot call g_io_channel_write_chars() after 
calling one of the API &quot;read&quot; functions.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> the encoding type
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store an error of type #GConvertError
</parameter_description>
</parameter>
</parameters>
<return> %G_IO_STATUS_NORMAL if the encoding was successfully set
</return>
</function>

<function name="g_io_channel_set_flags">
<description>
Sets the (writeable) flags in @channel to (@flags &amp; %G_IO_FLAG_SET_MASK).


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags to set on the IO channel
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> A location to return an error of type #GIOChannelError
</parameter_description>
</parameter>
</parameters>
<return> the status of the operation. 
</return>
</function>

<function name="g_io_channel_set_line_term">
<description>
This sets the string that #GIOChannel uses to determine
where in the file a line break occurs.

</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="line_term">
<parameter_description> The line termination string. Use %NULL for
autodetect.  Autodetection breaks on &quot;\n&quot;, &quot;\r\n&quot;, &quot;\r&quot;, &quot;\0&quot;,
and the Unicode paragraph separator. Autodetection should not be
used for anything other than file-based channels.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> The length of the termination string. If -1 is passed, the
string is assumed to be nul-terminated. This option allows
termination strings with embedded nuls.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_channel_shutdown">
<description>
Close an IO channel. Any pending data to be written will be
flushed if @flush is %TRUE. The channel will not be freed until the
last reference is dropped using g_io_channel_unref().


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="flush">
<parameter_description> if %TRUE, flush pending
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> location to store a #GIOChannelError
</parameter_description>
</parameter>
</parameters>
<return> the status of the operation.
</return>
</function>

<function name="g_io_channel_unix_get_fd">
<description>
Returns the file descriptor of the #GIOChannel.

On Windows this function returns the file descriptor or socket of
the #GIOChannel.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel, created with g_io_channel_unix_new().
</parameter_description>
</parameter>
</parameters>
<return> the file descriptor of the #GIOChannel.
</return>
</function>

<function name="g_io_channel_unix_new">
<description>
Creates a new #GIOChannel given a file descriptor. On UNIX systems
this works for plain files, pipes, and sockets.

The returned #GIOChannel has a reference count of 1.

The default encoding for #GIOChannel is UTF-8. If your application
is reading output from a command using via pipe, you may need to set
the encoding to the encoding of the current locale (see
g_get_charset()) with the g_io_channel_set_encoding() function.
By default, the fd passed will not be closed when the final reference
to the #GIOChannel data structure is dropped.

If you want to read raw binary data without interpretation, then
call the g_io_channel_set_encoding() function with %NULL for the
encoding argument.

This function is available in GLib on Windows, too, but you should
avoid using it on Windows. The domain of file descriptors and
sockets overlap. There is no way for GLib to know which one you mean
in case the argument you pass to this function happens to be both a
valid file descriptor and socket. If that happens a warning is
issued, and GLib assumes that it is the file descriptor you mean.


</description>
<parameters>
<parameter name="fd">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
</parameters>
<return> a new #GIOChannel.
</return>
</function>

<function name="g_io_channel_unref">
<description>
Decrements the reference count of a #GIOChannel.

</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_channel_win32_new_fd">
<description>
Creates a new #GIOChannel given a file descriptor on Windows. This
works for file descriptors from the C runtime.

This function works for file descriptors as returned by the open(),
creat(), pipe() and fileno() calls in the Microsoft C runtime. In
order to meaningfully use this function your code should use the
same C runtime as GLib uses, which is msvcrt.dll. Note that in
current Microsoft compilers it is near impossible to convince it to
build code that would use msvcrt.dll. The last Microsoft compiler
version that supported using msvcrt.dll as the C runtime was version 6.
The GNU compiler and toolchain for Windows, also known as Mingw,
fully supports msvcrt.dll.

If you have created a #GIOChannel for a file descriptor and started
watching (polling) it, you shouldn't call read() on the file
descriptor. This is because adding polling for a file descriptor is
implemented in GLib on Windows by starting a thread that sits
blocked in a read() from the file descriptor most of the time. All
reads from the file descriptor should be done by this internal GLib
thread. Your code should call only g_io_channel_read().

This function is available only in GLib on Windows.


</description>
<parameters>
<parameter name="fd">
<parameter_description> a C library file descriptor.
</parameter_description>
</parameter>
</parameters>
<return> a new #GIOChannel.
</return>
</function>

<function name="g_io_channel_win32_new_messages">
<description>
Creates a new #GIOChannel given a window handle on Windows.

This function creates a #GIOChannel that can be used to poll for
Windows messages for the window in question.


</description>
<parameters>
<parameter name="hwnd">
<parameter_description> a window handle.
</parameter_description>
</parameter>
</parameters>
<return> a new #GIOChannel.
</return>
</function>

<function name="g_io_channel_win32_new_socket">
<description>
Creates a new #GIOChannel given a socket on Windows.

This function works for sockets created by Winsock. It's available
only in GLib on Windows.

Polling a #GSource created to watch a channel for a socket puts the
socket in non-blocking mode. This is a side-effect of the
implementation and unavoidable.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a Winsock socket
</parameter_description>
</parameter>
</parameters>
<return> a new #GIOChannel
</return>
</function>

<function name="g_io_channel_write">
<description>
Writes data to a #GIOChannel. 

Deprecated:2.2: Use g_io_channel_write_chars() instead.

</description>
<parameters>
<parameter name="channel">
<parameter_description>  a #GIOChannel
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> the buffer containing the data to write
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to write
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> the number of bytes actually written
</parameter_description>
</parameter>
</parameters>
<return>  %G_IO_ERROR_NONE if the operation was successful.

</return>
</function>

<function name="g_io_channel_write_chars">
<description>
Replacement for g_io_channel_write() with the new API.

On seekable channels with encodings other than %NULL or UTF-8, generic
mixing of reading and writing is not allowed. A call to g_io_channel_write_chars ()
may only be made on a channel from which data has been read in the
cases described in the documentation for g_io_channel_set_encoding ().


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> a buffer to write data from
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the size of the buffer. If -1, the buffer
is taken to be a nul-terminated string.
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> The number of bytes written. This can be nonzero
even if the return value is not %G_IO_STATUS_NORMAL.
If the return value is %G_IO_STATUS_NORMAL and the
channel is blocking, this will always be equal
to @count if @count &gt;= 0.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a location to return an error of type #GConvertError
or #GIOChannelError
</parameter_description>
</parameter>
</parameters>
<return> the status of the operation.
</return>
</function>

<function name="g_io_channel_write_unichar">
<description>
Writes a Unicode character to @channel.
This function cannot be called on a channel with %NULL encoding.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel
</parameter_description>
</parameter>
<parameter name="thechar">
<parameter_description> a character
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to return an error of type #GConvertError
or #GIOChannelError
</parameter_description>
</parameter>
</parameters>
<return> a #GIOStatus
</return>
</function>

<function name="g_io_create_watch">
<description>
Creates a #GSource that's dispatched when @condition is met for the 
given @channel. For example, if condition is #G_IO_IN, the source will 
be dispatched when there's data available for reading.

g_io_add_watch() is a simpler interface to this same functionality, for 
the case where you want to add the source to the default main loop context 
at the default priority.

On Windows, polling a #GSource created to watch a channel for a socket
puts the socket in non-blocking mode. This is a side-effect of the
implementation and unavoidable.


</description>
<parameters>
<parameter name="channel">
<parameter_description> a #GIOChannel to watch
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> conditions to watch for
</parameter_description>
</parameter>
</parameters>
<return> a new #GSource
</return>
</function>

<function name="g_key_file_free">
<description>
Clears all keys and groups from @key_file, and decreases the
reference count by 1. If the reference count reaches zero,
frees the key file and all its allocated memory.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_get_boolean">
<description>
Returns the value associated with @key under @group_name as a
boolean. 

If @key cannot be found then %FALSE is returned and @error is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value
associated with @key cannot be interpreted as a boolean then %FALSE
is returned and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> the value associated with the key as a boolean, 
or %FALSE if the key was not found or could not be parsed.

</return>
</function>

<function name="g_key_file_get_boolean_list">
<description>
Returns the values associated with @key under @group_name as
booleans. 

If @key cannot be found then %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with @key cannot be interpreted as booleans then %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the number of booleans returned
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return>
the values associated with the key as a list of booleans, or %NULL if the
key was not found or could not be parsed. The returned list of booleans
should be freed with g_free() when no longer needed.

</return>
</function>

<function name="g_key_file_get_comment">
<description>
Retrieves a comment above @key from @group_name.
If @key is %NULL then @comment will be read from above
@group_name. If both @key and @group_name are %NULL, then
@comment will be read from above the first group in the file.

Note that the returned string includes the '#' comment markers.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name, or %NULL
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> a comment that should be freed with g_free()

</return>
</function>

<function name="g_key_file_get_double">
<description>
Returns the value associated with @key under @group_name as a
double. If @group_name is %NULL, the start_group is used.

If @key cannot be found then 0.0 is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
with @key cannot be interpreted as a double then 0.0 is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.

Since: 2.12

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> the value associated with the key as a double, or
0.0 if the key was not found or could not be parsed.

</return>
</function>

<function name="g_key_file_get_double_list">
<description>
Returns the values associated with @key under @group_name as
doubles. 

If @key cannot be found then %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with @key cannot be interpreted as doubles then %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.

Since: 2.12

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the number of doubles returned
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return>
the values associated with the key as a list of doubles, or %NULL if the
key was not found or could not be parsed. The returned list of doubles
should be freed with g_free() when no longer needed.

</return>
</function>

<function name="g_key_file_get_groups">
<description>
Returns all groups in the key file loaded with @key_file.  
The array of returned groups will be %NULL-terminated, so 
@length may optionally be %NULL.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of returned groups, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated %NULL-terminated array of strings.
Use g_strfreev() to free it.
</return>
</function>

<function name="g_key_file_get_int64">
<description>
Returns the value associated with @key under @group_name as a signed
64-bit integer. This is similar to g_key_file_get_integer() but can return
64-bit results without truncation.

Since: 2.26

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a non-%NULL #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a non-%NULL group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a non-%NULL key
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> the value associated with the key as a signed 64-bit integer, or
0 if the key was not found or could not be parsed.

</return>
</function>

<function name="g_key_file_get_integer">
<description>
Returns the value associated with @key under @group_name as an
integer. 

If @key cannot be found then 0 is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
with @key cannot be interpreted as an integer, or is out of range
for a #gint, then 0 is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> the value associated with the key as an integer, or
0 if the key was not found or could not be parsed.

</return>
</function>

<function name="g_key_file_get_integer_list">
<description>
Returns the values associated with @key under @group_name as
integers. 

If @key cannot be found then %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with @key cannot be interpreted as integers, or are out of range for
#gint, then %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the number of integers returned
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return>
the values associated with the key as a list of integers, or %NULL if
the key was not found or could not be parsed. The returned list of
integers should be freed with g_free() when no longer needed.

</return>
</function>

<function name="g_key_file_get_keys">
<description>
Returns all keys for the group name @group_name.  The array of
returned keys will be %NULL-terminated, so @length may
optionally be %NULL. In the event that the @group_name cannot
be found, %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_GROUP_NOT_FOUND.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of keys returned, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated %NULL-terminated array of strings.
Use g_strfreev() to free it.

</return>
</function>

<function name="g_key_file_get_locale_for_key">
<description>
Returns the actual locale which the result of
g_key_file_get_locale_string() or g_key_file_get_locale_string_list()
came from.

If calling g_key_file_get_locale_string() or
g_key_file_get_locale_string_list() with exactly the same @key_file,
@group_name, @key and @locale, the result of those functions will
have originally been tagged with the locale that is the result of
this function.

Since: 2.56

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="locale">
<parameter_description> a locale identifier or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the locale from the file, or %NULL if the key was not
found or the entry in the file was was untranslated

</return>
</function>

<function name="g_key_file_get_locale_string">
<description>
Returns the value associated with @key under @group_name
translated in the given @locale if available.  If @locale is
%NULL then the current locale is assumed. 

If @locale is to be non-%NULL, or if the current locale will change over
the lifetime of the #GKeyFile, it must be loaded with
%G_KEY_FILE_KEEP_TRANSLATIONS in order to load strings for all locales.

If @key cannot be found then %NULL is returned and @error is set 
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the value associated
with @key cannot be interpreted or no suitable translation can
be found then the untranslated value is returned.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="locale">
<parameter_description> a locale identifier or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string or %NULL if the specified 
key cannot be found.

</return>
</function>

<function name="g_key_file_get_locale_string_list">
<description>
Returns the values associated with @key under @group_name
translated in the given @locale if available.  If @locale is
%NULL then the current locale is assumed.

If @locale is to be non-%NULL, or if the current locale will change over
the lifetime of the #GKeyFile, it must be loaded with
%G_KEY_FILE_KEEP_TRANSLATIONS in order to load strings for all locales.

If @key cannot be found then %NULL is returned and @error is set 
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the values associated
with @key cannot be interpreted or no suitable translations
can be found then the untranslated values are returned. The 
returned array is %NULL-terminated, so @length may optionally 
be %NULL.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="locale">
<parameter_description> a locale identifier or %NULL
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of returned strings or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated %NULL-terminated string array
or %NULL if the key isn't found. The string array should be freed
with g_strfreev().

</return>
</function>

<function name="g_key_file_get_start_group">
<description>
Returns the name of the start group of the file. 

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
</parameters>
<return> The start group of the key file.

</return>
</function>

<function name="g_key_file_get_string">
<description>
Returns the string value associated with @key under @group_name.
Unlike g_key_file_get_value(), this function handles escape sequences
like \s.

In the event the key cannot be found, %NULL is returned and 
@error is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the 
event that the @group_name cannot be found, %NULL is returned 
and @error is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string or %NULL if the specified 
key cannot be found.

</return>
</function>

<function name="g_key_file_get_string_list">
<description>
Returns the values associated with @key under @group_name.

In the event the key cannot be found, %NULL is returned and
@error is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the @group_name cannot be found, %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of returned strings, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> 
a %NULL-terminated string array or %NULL if the specified 
key cannot be found. The array should be freed with g_strfreev().

</return>
</function>

<function name="g_key_file_get_uint64">
<description>
Returns the value associated with @key under @group_name as an unsigned
64-bit integer. This is similar to g_key_file_get_integer() but can return
large positive results without truncation.

Since: 2.26

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a non-%NULL #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a non-%NULL group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a non-%NULL key
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> the value associated with the key as an unsigned 64-bit integer,
or 0 if the key was not found or could not be parsed.

</return>
</function>

<function name="g_key_file_get_value">
<description>
Returns the raw value associated with @key under @group_name. 
Use g_key_file_get_string() to retrieve an unescaped UTF-8 string. 

In the event the key cannot be found, %NULL is returned and 
@error is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the 
event that the @group_name cannot be found, %NULL is returned 
and @error is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.


Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string or %NULL if the specified 
key cannot be found.

</return>
</function>

<function name="g_key_file_has_group">
<description>
Looks whether the key file has the group @group_name.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @group_name is a part of @key_file, %FALSE
otherwise.
</return>
</function>

<function name="g_key_file_has_key">
<description>
Looks whether the key file has the key @key in the group
@group_name.

Note that this function does not follow the rules for #GError strictly;
the return value both carries meaning and signals an error.  To use
this function, you must pass a #GError pointer in @error, and check
whether it is not %NULL to see if an error occurred.

Language bindings should use g_key_file_get_value() to test whether
or not a key exists.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key name
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @key is a part of @group_name, %FALSE otherwise

</return>
</function>

<function name="g_key_file_load_from_bytes">
<description>
Loads a key file from the data in @bytes into an empty #GKeyFile structure.
If the object cannot be created then %error is set to a #GKeyFileError.

Since: 2.50

</description>
<parameters>
<parameter name="key_file">
<parameter_description> an empty #GKeyFile struct
</parameter_description>
</parameter>
<parameter name="bytes">
<parameter_description> a #GBytes
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags from #GKeyFileFlags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a key file could be loaded, %FALSE otherwise

</return>
</function>

<function name="g_key_file_load_from_data">
<description>
Loads a key file from memory into an empty #GKeyFile structure.  
If the object cannot be created then %error is set to a #GKeyFileError. 

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> an empty #GKeyFile struct
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> key file loaded in memory
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @data in bytes (or (gsize)-1 if data is nul-terminated)
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags from #GKeyFileFlags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a key file could be loaded, %FALSE otherwise

</return>
</function>

<function name="g_key_file_load_from_data_dirs">
<description>
This function looks for a key file named @file in the paths 
returned from g_get_user_data_dir() and g_get_system_data_dirs(), 
loads the file into @key_file and returns the file's full path in 
@full_path.  If the file could not be loaded then an %error is
set to either a #GFileError or #GKeyFileError.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> an empty #GKeyFile struct
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> a relative path to a filename to open and parse
</parameter_description>
</parameter>
<parameter name="full_path">
<parameter_description> return location for a string containing the full path
of the file, or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags from #GKeyFileFlags 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a key file could be loaded, %FALSE othewise
</return>
</function>

<function name="g_key_file_load_from_dirs">
<description>
This function looks for a key file named @file in the paths
specified in @search_dirs, loads the file into @key_file and
returns the file's full path in @full_path.

If the file could not be found in any of the @search_dirs,
%G_KEY_FILE_ERROR_NOT_FOUND is returned. If
the file is found but the OS returns an error when opening or reading the
file, a %G_FILE_ERROR is returned. If there is a problem parsing the file, a
%G_KEY_FILE_ERROR is returned.

Since: 2.14

</description>
<parameters>
<parameter name="key_file">
<parameter_description> an empty #GKeyFile struct
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> a relative path to a filename to open and parse
</parameter_description>
</parameter>
<parameter name="search_dirs">
<parameter_description> %NULL-terminated array of directories to search
</parameter_description>
</parameter>
<parameter name="full_path">
<parameter_description> return location for a string containing the full path
of the file, or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags from #GKeyFileFlags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a key file could be loaded, %FALSE otherwise

</return>
</function>

<function name="g_key_file_load_from_file">
<description>
Loads a key file into an empty #GKeyFile structure.

If the OS returns an error when opening or reading the file, a
%G_FILE_ERROR is returned. If there is a problem parsing the file, a
%G_KEY_FILE_ERROR is returned.

This function will never return a %G_KEY_FILE_ERROR_NOT_FOUND error. If the
@file is not found, %G_FILE_ERROR_NOENT is returned.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> an empty #GKeyFile struct
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> the path of a filename to load, in the GLib filename encoding
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags from #GKeyFileFlags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a key file could be loaded, %FALSE otherwise

</return>
</function>

<function name="g_key_file_new">
<description>
Creates a new empty #GKeyFile object. Use
g_key_file_load_from_file(), g_key_file_load_from_data(),
g_key_file_load_from_dirs() or g_key_file_load_from_data_dirs() to
read an existing key file.

Since: 2.6

</description>
<parameters>
</parameters>
<return> an empty #GKeyFile.

</return>
</function>

<function name="g_key_file_ref">
<description>
Increases the reference count of @key_file.

Since: 2.32

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
</parameters>
<return> the same @key_file.

</return>
</function>

<function name="g_key_file_remove_comment">
<description>
Removes a comment above @key from @group_name.
If @key is %NULL then @comment will be removed above @group_name. 
If both @key and @group_name are %NULL, then @comment will
be removed above the first group in the file.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name, or %NULL
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the comment was removed, %FALSE otherwise

</return>
</function>

<function name="g_key_file_remove_group">
<description>
Removes the specified group, @group_name, 
from the key file. 

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the group was removed, %FALSE otherwise

</return>
</function>

<function name="g_key_file_remove_key">
<description>
Removes @key in @group_name from the key file. 

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key name to remove
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key was removed, %FALSE otherwise

</return>
</function>

<function name="g_key_file_save_to_file">
<description>
Writes the contents of @key_file to @filename using
g_file_set_contents().

This function can fail for any of the reasons that
g_file_set_contents() may fail.

Since: 2.40

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the name of the file to write to
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a %NULL #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, else %FALSE with @error set

</return>
</function>

<function name="g_key_file_set_boolean">
<description>
Associates a new boolean value with @key under @group_name.
If @key cannot be found then it is created. 

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> %TRUE or %FALSE
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_boolean_list">
<description>
Associates a list of boolean values with @key under @group_name.  
If @key cannot be found then it is created.
If @group_name is %NULL, the start_group is used.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> an array of boolean values
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of @list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_comment">
<description>
Places a comment above @key from @group_name.

If @key is %NULL then @comment will be written above @group_name.
If both @key and @group_name  are %NULL, then @comment will be
written above the first group in the file.

Note that this function prepends a '#' comment marker to
each line of @comment.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name, or %NULL
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="comment">
<parameter_description> a comment
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the comment was written, %FALSE otherwise

</return>
</function>

<function name="g_key_file_set_double">
<description>
Associates a new double value with @key under @group_name.
If @key cannot be found then it is created. 

Since: 2.12

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an double value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_double_list">
<description>
Associates a list of double values with @key under
@group_name.  If @key cannot be found then it is created.

Since: 2.12

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> an array of double values
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> number of double values in @list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_int64">
<description>
Associates a new integer value with @key under @group_name.
If @key cannot be found then it is created.

Since: 2.26

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an integer value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_integer">
<description>
Associates a new integer value with @key under @group_name.
If @key cannot be found then it is created.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an integer value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_integer_list">
<description>
Associates a list of integer values with @key under @group_name.  
If @key cannot be found then it is created.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> an array of integer values
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> number of integer values in @list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_list_separator">
<description>
Sets the character which is used to separate
values in lists. Typically ';' or ',' are used
as separators. The default list separator is ';'.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile 
</parameter_description>
</parameter>
<parameter name="separator">
<parameter_description> the separator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_locale_string">
<description>
Associates a string value for @key and @locale under @group_name.
If the translation for @key cannot be found then it is created.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="locale">
<parameter_description> a locale identifier
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_locale_string_list">
<description>
Associates a list of string values for @key and @locale under
@group_name.  If the translation for @key cannot be found then
it is created. 

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="locale">
<parameter_description> a locale identifier
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> a %NULL-terminated array of locale string values
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_string">
<description>
Associates a new string value with @key under @group_name.  
If @key cannot be found then it is created.  
If @group_name cannot be found then it is created.
Unlike g_key_file_set_value(), this function handles characters
that need escaping, such as newlines.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_string_list">
<description>
Associates a list of string values for @key under @group_name.
If @key cannot be found then it is created.
If @group_name cannot be found then it is created.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> an array of string values
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> number of string values in @list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_uint64">
<description>
Associates a new integer value with @key under @group_name.
If @key cannot be found then it is created.

Since: 2.26

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an integer value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_set_value">
<description>
Associates a new value with @key under @group_name.  

If @key cannot be found then it is created. If @group_name cannot 
be found then it is created. To set an UTF-8 string which may contain 
characters that need escaping (such as newlines or spaces), use 
g_key_file_set_string().

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> a group name
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_key_file_to_data">
<description>
This function outputs @key_file as a string.  

Note that this function never reports an error,
so it is safe to pass %NULL as @error.

Since: 2.6

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the length of the
returned string, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string holding
the contents of the #GKeyFile 

</return>
</function>

<function name="g_key_file_unref">
<description>
Decreases the reference count of @key_file by 1. If the reference count
reaches zero, frees the key file and all its allocated memory.

Since: 2.32

</description>
<parameters>
<parameter name="key_file">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_list_alloc">
<description>
Allocates space for one #GList element. It is called by
g_list_append(), g_list_prepend(), g_list_insert() and
g_list_insert_sorted() and so is rarely used on its own.


</description>
<parameters>
</parameters>
<return> a pointer to the newly-allocated #GList element
</return>
</function>

<function name="g_list_append">
<description>
Adds a new element on to the end of the list.

Note that the return value is the new start of the list,
if @list was empty; make sure you store the new value.

g_list_append() has to traverse the entire list to find the end,
which is inefficient when adding multiple elements. A common idiom
to avoid the inefficiency is to use g_list_prepend() and reverse
the list with g_list_reverse() when all elements have been added.

|[&lt;!-- language=&quot;C&quot; --&gt;
// Notice that these are initialized to the empty list.
GList *string_list = NULL, *number_list = NULL;

// This is a list of strings.
string_list = g_list_append (string_list, &quot;first&quot;);
string_list = g_list_append (string_list, &quot;second&quot;);

// This is a list of integers.
number_list = g_list_append (number_list, GINT_TO_POINTER (27));
number_list = g_list_append (number_list, GINT_TO_POINTER (14));
]|


</description>
<parameters>
<parameter name="list">
<parameter_description> a pointer to a #GList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
</parameters>
<return> either @list or the new start of the #GList if @list was %NULL
</return>
</function>

<function name="g_list_concat">
<description>
Adds the second #GList onto the end of the first #GList.
Note that the elements of the second #GList are not copied.
They are used directly.

This function is for example used to move an element in the list.
The following example moves an element to the top of the list:
|[&lt;!-- language=&quot;C&quot; --&gt;
list = g_list_remove_link (list, llink);
list = g_list_concat (llink, list);
]|


</description>
<parameters>
<parameter name="list1">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="list2">
<parameter_description> the #GList to add to the end of the first #GList,
this must point  to the top of the list
</parameter_description>
</parameter>
</parameters>
<return> the start of the new #GList, which equals @list1 if not %NULL 
</return>
</function>

<function name="g_list_copy">
<description>
Copies a #GList.

Note that this is a &quot;shallow&quot; copy. If the list elements 
consist of pointers to data, the pointers are copied but 
the actual data is not. See g_list_copy_deep() if you need
to copy the data as well.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
</parameters>
<return> the start of the new list that holds the same data as @list
</return>
</function>

<function name="g_list_copy_deep">
<description>
Makes a full (deep) copy of a #GList.

In contrast with g_list_copy(), this function uses @func to make
a copy of each list element, in addition to copying the list
container itself.

@func, as a #GCopyFunc, takes two arguments, the data to be copied
and a @user_data pointer. It's safe to pass %NULL as user_data,
if the copy function takes only one argument.

For instance, if @list holds a list of GObjects, you can do:
|[&lt;!-- language=&quot;C&quot; --&gt;   
another_list = g_list_copy_deep (list, (GCopyFunc) g_object_ref, NULL);
]|

And, to entirely free the new list, you could do:
|[&lt;!-- language=&quot;C&quot; --&gt; 
g_list_free_full (another_list, g_object_unref);
]|

Since: 2.34

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a copy function used to copy every element in the list
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the copy function @func, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the start of the new list that holds a full copy of @list, 
use g_list_free_full() to free it

</return>
</function>

<function name="g_list_delete_link">
<description>
Removes the node link_ from the list and frees it. 
Compare this to g_list_remove_link() which removes the node 
without freeing it.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="link_">
<parameter_description> node to delete from @list
</parameter_description>
</parameter>
</parameters>
<return> the (possibly changed) start of the #GList
</return>
</function>

<function name="g_list_find">
<description>
Finds the element in a #GList which contains the given data.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the element data to find
</parameter_description>
</parameter>
</parameters>
<return> the found #GList element, or %NULL if it is not found
</return>
</function>

<function name="g_list_find_custom">
<description>
Finds an element in a #GList, using a supplied function to 
find the desired element. It iterates over the list, calling 
the given function which should return 0 when the desired 
element is found. The function takes two #gconstpointer arguments, 
the #GList element's data as the first argument and the 
given user data.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data passed to the function
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each element. 
It should return 0 when the desired element is found
</parameter_description>
</parameter>
</parameters>
<return> the found #GList element, or %NULL if it is not found
</return>
</function>

<function name="g_list_first">
<description>
Gets the first element in a #GList.


</description>
<parameters>
<parameter name="list">
<parameter_description> any #GList element
</parameter_description>
</parameter>
</parameters>
<return> the first element in the #GList, 
or %NULL if the #GList has no elements
</return>
</function>

<function name="g_list_foreach">
<description>
Calls a function for each element of a #GList.

It is safe for @func to remove the element from @list, but it must
not modify any part of the list after that element.

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call with each element's data
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_list_free">
<description>
Frees all of the memory used by a #GList.
The freed elements are returned to the slice allocator.

If list elements contain dynamically-allocated memory, you should
either use g_list_free_full() or free them manually first.

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_list_free1">
<description>
Another name for g_list_free_1().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_list_free_1">
<description>
Frees one #GList element, but does not update links from the next and
previous elements in the list, so you should not call this function on an
element that is currently part of a list.

It is usually used after g_list_remove_link().

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList element
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_list_free_full">
<description>
Convenience method, which frees all the memory used by a #GList,
and calls @free_func on every element's data.

@free_func must not modify the list (eg, by removing the freed
element from it).

Since: 2.28

</description>
<parameters>
<parameter name="list">
<parameter_description> a pointer to a #GList
</parameter_description>
</parameter>
<parameter name="free_func">
<parameter_description> the function to be called to free each element's data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_list_index">
<description>
Gets the position of the element containing 
the given data (starting from 0).


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to find
</parameter_description>
</parameter>
</parameters>
<return> the index of the element containing the data, 
or -1 if the data is not found
</return>
</function>

<function name="g_list_insert">
<description>
Inserts a new element into the list at the given position.


</description>
<parameters>
<parameter name="list">
<parameter_description> a pointer to a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to insert the element. If this is 
negative, or is larger than the number of elements in the 
list, the new element is added on to the end of the list.
</parameter_description>
</parameter>
</parameters>
<return> the (possibly changed) start of the #GList
</return>
</function>

<function name="g_list_insert_before">
<description>
Inserts a new element into the list before the given position.


</description>
<parameters>
<parameter name="list">
<parameter_description> a pointer to a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the list element before which the new element 
is inserted or %NULL to insert at the end of the list
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
</parameters>
<return> the (possibly changed) start of the #GList
</return>
</function>

<function name="g_list_insert_sorted">
<description>
Inserts a new element into the list, using the given comparison 
function to determine its position.

If you are adding many new elements to a list, and the number of
new elements is much larger than the length of the list, use
g_list_prepend() to add the new items and sort the list afterwards
with g_list_sort().


</description>
<parameters>
<parameter name="list">
<parameter_description> a pointer to a #GList, this must point to the top of the
already sorted list
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to compare elements in the list. It should 
return a number &gt; 0 if the first parameter comes after the 
second parameter in the sort order.
</parameter_description>
</parameter>
</parameters>
<return> the (possibly changed) start of the #GList
</return>
</function>

<function name="g_list_insert_sorted_with_data">
<description>
Inserts a new element into the list, using the given comparison 
function to determine its position.

If you are adding many new elements to a list, and the number of
new elements is much larger than the length of the list, use
g_list_prepend() to add the new items and sort the list afterwards
with g_list_sort().

Since: 2.10

</description>
<parameters>
<parameter name="list">
<parameter_description> a pointer to a #GList, this must point to the top of the
already sorted list
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to compare elements in the list. It should
return a number &gt; 0 if the first parameter  comes after the
second parameter in the sort order.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to comparison function
</parameter_description>
</parameter>
</parameters>
<return> the (possibly changed) start of the #GList

</return>
</function>

<function name="g_list_last">
<description>
Gets the last element in a #GList.


</description>
<parameters>
<parameter name="list">
<parameter_description> any #GList element
</parameter_description>
</parameter>
</parameters>
<return> the last element in the #GList,
or %NULL if the #GList has no elements
</return>
</function>

<function name="g_list_length">
<description>
Gets the number of elements in a #GList.

This function iterates over the whole list to count its elements.
Use a #GQueue instead of a GList if you regularly need the number
of items. To check whether the list is non-empty, it is faster to check
@list against %NULL.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
</parameters>
<return> the number of elements in the #GList
</return>
</function>

<function name="g_list_next">
<description>
A convenience macro to get the next element in a #GList.
Note that it is considered perfectly acceptable to access
@list-&gt;next directly.


</description>
<parameters>
<parameter name="list">
<parameter_description> an element in a #GList
</parameter_description>
</parameter>
</parameters>
<return> the next element, or %NULL if there are no more elements
</return>
</function>

<function name="g_list_nth">
<description>
Gets the element at the given position in a #GList.

This iterates over the list until it reaches the @n-th position. If you
intend to iterate over every element, it is better to use a for-loop as
described in the #GList introduction.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the position of the element, counting from 0
</parameter_description>
</parameter>
</parameters>
<return> the element, or %NULL if the position is off 
the end of the #GList
</return>
</function>

<function name="g_list_nth_data">
<description>
Gets the data of the element at the given position.

This iterates over the list until it reaches the @n-th position. If you
intend to iterate over every element, it is better to use a for-loop as
described in the #GList introduction.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the position of the element
</parameter_description>
</parameter>
</parameters>
<return> the element's data, or %NULL if the position 
is off the end of the #GList
</return>
</function>

<function name="g_list_nth_prev">
<description>
Gets the element @n places before @list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the position of the element, counting from 0
</parameter_description>
</parameter>
</parameters>
<return> the element, or %NULL if the position is 
off the end of the #GList
</return>
</function>

<function name="g_list_position">
<description>
Gets the position of the given element 
in the #GList (starting from 0).


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="llink">
<parameter_description> an element in the #GList
</parameter_description>
</parameter>
</parameters>
<return> the position of the element in the #GList, 
or -1 if the element is not found
</return>
</function>

<function name="g_list_prepend">
<description>
Prepends a new element on to the start of the list.

Note that the return value is the new start of the list,
which will have changed, so make sure you store the new value. 

|[&lt;!-- language=&quot;C&quot; --&gt;
// Notice that it is initialized to the empty list.
GList *list = NULL;

list = g_list_prepend (list, &quot;last&quot;);
list = g_list_prepend (list, &quot;first&quot;);
]|

Do not use this function to prepend a new element to a different
element than the start of the list. Use g_list_insert_before() instead.


</description>
<parameters>
<parameter name="list">
<parameter_description> a pointer to a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly prepended element, which is the new 
start of the #GList
</return>
</function>

<function name="g_list_previous">
<description>
A convenience macro to get the previous element in a #GList.
Note that it is considered perfectly acceptable to access
@list-&gt;prev directly.


</description>
<parameters>
<parameter name="list">
<parameter_description> an element in a #GList
</parameter_description>
</parameter>
</parameters>
<return> the previous element, or %NULL if there are no previous
elements
</return>
</function>

<function name="g_list_remove">
<description>
Removes an element from a #GList.
If two elements contain the same data, only the first is removed.
If none of the elements contain the data, the #GList is unchanged.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data of the element to remove
</parameter_description>
</parameter>
</parameters>
<return> the (possibly changed) start of the #GList
</return>
</function>

<function name="g_list_remove_all">
<description>
Removes all list nodes with data equal to @data.
Returns the new head of the list. Contrast with
g_list_remove() which removes only the first node
matching the given data.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to remove
</parameter_description>
</parameter>
</parameters>
<return> the (possibly changed) start of the #GList
</return>
</function>

<function name="g_list_remove_link">
<description>
Removes an element from a #GList, without freeing the element.
The removed element's prev and next links are set to %NULL, so 
that it becomes a self-contained list with one element.

This function is for example used to move an element in the list
(see the example for g_list_concat()) or to remove an element in
the list before freeing its data:
|[&lt;!-- language=&quot;C&quot; --&gt; 
list = g_list_remove_link (list, llink);
free_some_data_that_may_access_the_list_again (llink-&gt;data);
g_list_free (llink);
]|


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="llink">
<parameter_description> an element in the #GList
</parameter_description>
</parameter>
</parameters>
<return> the (possibly changed) start of the #GList
</return>
</function>

<function name="g_list_reverse">
<description>
Reverses a #GList.
It simply switches the next and prev pointers of each element.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
</parameters>
<return> the start of the reversed #GList
</return>
</function>

<function name="g_list_sort">
<description>
Sorts a #GList using the given comparison function. The algorithm 
used is a stable sort.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> the comparison function used to sort the #GList.
This function is passed the data from 2 elements of the #GList 
and should return 0 if they are equal, a negative value if the 
first element comes before the second, or a positive value if 
the first element comes after the second.
</parameter_description>
</parameter>
</parameters>
<return> the (possibly changed) start of the #GList
</return>
</function>

<function name="g_list_sort_with_data">
<description>
Like g_list_sort(), but the comparison function accepts 
a user data argument.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList, this must point to the top of the list
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> comparison function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to comparison function
</parameter_description>
</parameter>
</parameters>
<return> the (possibly changed) start of the #GList
</return>
</function>

<function name="g_listenv">
<description>
Gets the names of all variables set in the environment.

Programs that want to be portable to Windows should typically use
this function and g_getenv() instead of using the environ array
from the C library directly. On Windows, the strings in the environ
array are in system codepage encoding, while in most of the typical
use cases for environment variables in GLib-using programs you want
the UTF-8 encoding that this function and g_getenv() provide.

Since: 2.8

</description>
<parameters>
</parameters>
<return>
a %NULL-terminated list of strings which must be freed with
g_strfreev().

</return>
</function>

<function name="g_locale_from_utf8">
<description>
Converts a string from UTF-8 to the encoding used for strings by
the C runtime (usually the same as that used by the operating
system) in the [current locale][setlocale]. On Windows this means
the system codepage.

The input string shall not contain nul characters even if the @len
argument is positive. A nul character found inside the string will result
in error %G_CONVERT_ERROR_ILLEGAL_SEQUENCE. Use g_convert() to convert
input that may contain embedded nul characters.


</description>
<parameters>
<parameter name="utf8string">
<parameter_description>    a UTF-8 encoded string 
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description>           the length of the string, or -1 if the string is
nul-terminated.
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> location to store the number of bytes in the
input string that were successfully converted, or %NULL.
Even if the conversion was successful, this may be 
less than @len if there were partial characters
at the end of the input. If the error
%G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
stored will be the byte offset after the last valid
input sequence.
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> the number of bytes stored in the output
buffer (not including the terminating nul).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>         location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError may occur.
</parameter_description>
</parameter>
</parameters>
<return>
A newly-allocated buffer containing the converted string,
or %NULL on an error, and error will be set.
</return>
</function>

<function name="g_locale_to_utf8">
<description>
Converts a string which is in the encoding used for strings by
the C runtime (usually the same as that used by the operating
system) in the [current locale][setlocale] into a UTF-8 string.

If the source encoding is not UTF-8 and the conversion output contains a
nul character, the error %G_CONVERT_ERROR_EMBEDDED_NUL is set and the
function returns %NULL.
If the source encoding is UTF-8, an embedded nul character is treated with
the %G_CONVERT_ERROR_ILLEGAL_SEQUENCE error for backward compatibility with
earlier versions of this library. Use g_convert() to produce output that
may contain embedded nul characters.


</description>
<parameters>
<parameter name="opsysstring">
<parameter_description> a string in the
encoding of the current locale. On Windows
this means the system codepage.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description>           the length of the string, or -1 if the string is
nul-terminated (Note that some encodings may allow nul
bytes to occur inside strings. In that case, using -1
for the @len parameter is unsafe)
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> location to store the number of bytes in the
input string that were successfully converted, or %NULL.
Even if the conversion was successful, this may be 
less than @len if there were partial characters
at the end of the input. If the error
%G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
stored will be the byte offset after the last valid
input sequence.
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> the number of bytes stored in the output
buffer (not including the terminating nul).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description>         location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError may occur.
</parameter_description>
</parameter>
</parameters>
<return> The converted string, or %NULL on an error.
</return>
</function>

<function name="g_log">
<description>
Logs an error or debugging message.

If the log level has been set as fatal, the abort()
function is called to terminate the program.

If g_log_default_handler() is used as the log handler function, a new-line
character will automatically be appended to @..., and need not be entered
manually.

If [structured logging is enabled][using-structured-logging] this will
output via the structured log writer function (see g_log_set_writer_func()).

</description>
<parameters>
<parameter name="log_domain">
<parameter_description> the log domain, usually #G_LOG_DOMAIN, or %NULL
for the default
</parameter_description>
</parameter>
<parameter name="log_level">
<parameter_description> the log level, either from #GLogLevelFlags
or a user-defined level
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the message format. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_log_default_handler">
<description>
The default log handler set up by GLib; g_log_set_default_handler()
allows to install an alternate default log handler.
This is used if no log handler has been set for the particular log
domain and log level combination. It outputs the message to stderr
or stdout and if the log level is fatal it calls abort(). It automatically
prints a new-line character after the message, so one does not need to be
manually included in @message.

The behavior of this log handler can be influenced by a number of
environment variables:

- `G_MESSAGES_PREFIXED`: A :-separated list of log levels for which
messages should be prefixed by the program name and PID of the
aplication.

- `G_MESSAGES_DEBUG`: A space-separated list of log domains for
which debug and informational messages are printed. By default
these messages are not printed.

stderr is used for levels %G_LOG_LEVEL_ERROR, %G_LOG_LEVEL_CRITICAL,
%G_LOG_LEVEL_WARNING and %G_LOG_LEVEL_MESSAGE. stdout is used for
the rest.

This has no effect if structured logging is enabled; see
[Using Structured Logging][using-structured-logging].

</description>
<parameters>
<parameter name="log_domain">
<parameter_description> the log domain of the message, or %NULL for the
default &quot;&quot; application domain
</parameter_description>
</parameter>
<parameter name="log_level">
<parameter_description> the level of the message
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> the message
</parameter_description>
</parameter>
<parameter name="unused_data">
<parameter_description> data passed from g_log() which is unused
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_log_remove_handler">
<description>
Removes the log handler.

This has no effect if structured logging is enabled; see
[Using Structured Logging][using-structured-logging].

</description>
<parameters>
<parameter name="log_domain">
<parameter_description> the log domain
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> the id of the handler, which was returned
in g_log_set_handler()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_log_set_always_fatal">
<description>
Sets the message levels which are always fatal, in any log domain.
When a message with any of these levels is logged the program terminates.
You can only set the levels defined by GLib to be fatal.
%G_LOG_LEVEL_ERROR is always fatal.

You can also make some message levels fatal at runtime by setting
the `G_DEBUG` environment variable (see
[Running GLib Applications](glib-running.html)).

Libraries should not call this function, as it affects all messages logged
by a process, including those from other libraries.

Structured log messages (using g_log_structured() and
g_log_structured_array()) are fatal only if the default log writer is used;
otherwise it is up to the writer function to determine which log messages
are fatal. See [Using Structured Logging][using-structured-logging].


</description>
<parameters>
<parameter name="fatal_mask">
<parameter_description> the mask containing bits set for each level
of error which is to be fatal
</parameter_description>
</parameter>
</parameters>
<return> the old fatal mask
</return>
</function>

<function name="g_log_set_default_handler">
<description>
Installs a default log handler which is used if no
log handler has been set for the particular log domain
and log level combination. By default, GLib uses
g_log_default_handler() as default log handler.

This has no effect if structured logging is enabled; see
[Using Structured Logging][using-structured-logging].

Since: 2.6

</description>
<parameters>
<parameter name="log_func">
<parameter_description> the log handler function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to the log handler
</parameter_description>
</parameter>
</parameters>
<return> the previous default log handler

</return>
</function>

<function name="g_log_set_fatal_mask">
<description>
Sets the log levels which are fatal in the given domain.
%G_LOG_LEVEL_ERROR is always fatal.

This has no effect on structured log messages (using g_log_structured() or
g_log_structured_array()). To change the fatal behaviour for specific log
messages, programs must install a custom log writer function using
g_log_set_writer_func(). See
[Using Structured Logging][using-structured-logging].


</description>
<parameters>
<parameter name="log_domain">
<parameter_description> the log domain
</parameter_description>
</parameter>
<parameter name="fatal_mask">
<parameter_description> the new fatal mask
</parameter_description>
</parameter>
</parameters>
<return> the old fatal mask for the log domain
</return>
</function>

<function name="g_log_set_handler">
<description>
Sets the log handler for a domain and a set of log levels.
To handle fatal and recursive messages the @log_levels parameter
must be combined with the #G_LOG_FLAG_FATAL and #G_LOG_FLAG_RECURSION
bit flags.

Note that since the #G_LOG_LEVEL_ERROR log level is always fatal, if
you want to set a handler for this log level you must combine it with
#G_LOG_FLAG_FATAL.

This has no effect if structured logging is enabled; see
[Using Structured Logging][using-structured-logging].

Here is an example for adding a log handler for all warning messages
in the default domain:
|[&lt;!-- language=&quot;C&quot; --&gt; 
g_log_set_handler (NULL, G_LOG_LEVEL_WARNING | G_LOG_FLAG_FATAL
| G_LOG_FLAG_RECURSION, my_log_handler, NULL);
]|

This example adds a log handler for all critical messages from GTK+:
|[&lt;!-- language=&quot;C&quot; --&gt; 
g_log_set_handler (&quot;Gtk&quot;, G_LOG_LEVEL_CRITICAL | G_LOG_FLAG_FATAL
| G_LOG_FLAG_RECURSION, my_log_handler, NULL);
]|

This example adds a log handler for all messages from GLib:
|[&lt;!-- language=&quot;C&quot; --&gt; 
g_log_set_handler (&quot;GLib&quot;, G_LOG_LEVEL_MASK | G_LOG_FLAG_FATAL
| G_LOG_FLAG_RECURSION, my_log_handler, NULL);
]|


</description>
<parameters>
<parameter name="log_domain">
<parameter_description> the log domain, or %NULL for the default &quot;&quot;
application domain
</parameter_description>
</parameter>
<parameter name="log_levels">
<parameter_description> the log levels to apply the log handler for.
To handle fatal and recursive messages as well, combine
the log levels with the #G_LOG_FLAG_FATAL and
#G_LOG_FLAG_RECURSION bit flags.
</parameter_description>
</parameter>
<parameter name="log_func">
<parameter_description> the log handler function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to the log handler
</parameter_description>
</parameter>
</parameters>
<return> the id of the new handler
</return>
</function>

<function name="g_log_set_handler_full">
<description>
Like g_log_set_handler(), but takes a destroy notify for the @user_data.

This has no effect if structured logging is enabled; see
[Using Structured Logging][using-structured-logging].

Since: 2.46

</description>
<parameters>
<parameter name="log_domain">
<parameter_description> the log domain, or %NULL for the default &quot;&quot;
application domain
</parameter_description>
</parameter>
<parameter name="log_levels">
<parameter_description> the log levels to apply the log handler for.
To handle fatal and recursive messages as well, combine
the log levels with the #G_LOG_FLAG_FATAL and
#G_LOG_FLAG_RECURSION bit flags.
</parameter_description>
</parameter>
<parameter name="log_func">
<parameter_description> the log handler function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to the log handler
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> destroy notify for @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the id of the new handler

</return>
</function>

<function name="g_log_set_writer_func">
<description>
Set a writer function which will be called to format and write out each log
message. Each program should set a writer function, or the default writer
(g_log_writer_default()) will be used.

Libraries **must not** call this function — only programs are allowed to
install a writer function, as there must be a single, central point where
log messages are formatted and outputted.

There can only be one writer function. It is an error to set more than one.

Since: 2.50

</description>
<parameters>
<parameter name="func">
<parameter_description> log writer function, which must not be %NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func
</parameter_description>
</parameter>
<parameter name="user_data_free">
<parameter_description> function to free @user_data once it’s
finished with, if non-%NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_log_structured">
<description>
Log a message with structured data. The message will be passed through to
the log writer set by the application using g_log_set_writer_func(). If the
message is fatal (i.e. its log level is %G_LOG_LEVEL_ERROR), the program will
be aborted at the end of this function. If the log writer returns
%G_LOG_WRITER_UNHANDLED (failure), no other fallback writers will be tried.
See the documentation for #GLogWriterFunc for information on chaining
writers.

The structured data is provided as key–value pairs, where keys are UTF-8
strings, and values are arbitrary pointers — typically pointing to UTF-8
strings, but that is not a requirement. To pass binary (non-nul-terminated)
structured data, use g_log_structured_array(). The keys for structured data
should follow the [systemd journal
fields](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html)
specification. It is suggested that custom keys are namespaced according to
the code which sets them. For example, custom keys from GLib all have a
`GLIB_` prefix.

The @log_domain will be converted into a `GLIB_DOMAIN` field. @log_level will
be converted into a
[`PRIORITY`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#PRIORITY=)
field. The format string will have its placeholders substituted for the provided
values and be converted into a
[`MESSAGE`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#MESSAGE=)
field.

Other fields you may commonly want to pass into this function:

* [`MESSAGE_ID`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#MESSAGE_ID=)
* [`CODE_FILE`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#CODE_FILE=)
* [`CODE_LINE`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#CODE_LINE=)
* [`CODE_FUNC`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#CODE_FUNC=)
* [`ERRNO`](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#ERRNO=)

Note that `CODE_FILE`, `CODE_LINE` and `CODE_FUNC` are automatically set by
the logging macros, G_DEBUG_HERE(), g_message(), g_warning(), g_critical(),
g_error(), etc, if the symbols `G_LOG_USE_STRUCTURED` is defined before including
glib.h.

For example:
|[&lt;!-- language=&quot;C&quot; --&gt;
g_log_structured (G_LOG_DOMAIN, G_LOG_LEVEL_DEBUG,
&quot;MESSAGE_ID&quot;, &quot;06d4df59e6c24647bfe69d2c27ef0b4e&quot;,
&quot;MY_APPLICATION_CUSTOM_FIELD&quot;, &quot;some debug string&quot;,
&quot;MESSAGE&quot;, &quot;This is a debug message about pointer %p and integer %u.&quot;,
some_pointer, some_integer);
]|

Note that each `MESSAGE_ID` must be [uniquely and randomly
generated](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#MESSAGE_ID=).
If adding a `MESSAGE_ID`, consider shipping a [message
catalog](https://www.freedesktop.org/wiki/Software/systemd/catalog/) with
your software.

To pass a user data pointer to the log writer function which is specific to
this logging call, you must use g_log_structured_array() and pass the pointer
as a field with #GLogField.length set to zero, otherwise it will be
interpreted as a string.

For example:
|[&lt;!-- language=&quot;C&quot; --&gt;
const GLogField fields[] = {
{ &quot;MESSAGE&quot;, &quot;This is a debug message.&quot;, -1 },
{ &quot;MESSAGE_ID&quot;, &quot;fcfb2e1e65c3494386b74878f1abf893&quot;, -1 },
{ &quot;MY_APPLICATION_CUSTOM_FIELD&quot;, &quot;some debug string&quot;, -1 },
{ &quot;MY_APPLICATION_STATE&quot;, state_object, 0 },
};
g_log_structured_array (G_LOG_LEVEL_DEBUG, fields, G_N_ELEMENTS (fields));
]|

Note also that, even if no other structured fields are specified, there
must always be a `MESSAGE` key before the format string. The `MESSAGE`-format
pair has to be the last of the key-value pairs, and `MESSAGE` is the only
field for which printf()-style formatting is supported.

The default writer function for `stdout` and `stderr` will automatically
append a new-line character after the message, so you should not add one
manually to the format string.

Since: 2.50

</description>
<parameters>
<parameter name="log_domain">
<parameter_description> log domain, usually %G_LOG_DOMAIN
</parameter_description>
</parameter>
<parameter name="log_level">
<parameter_description> log level, either from #GLogLevelFlags, or a user-defined
level
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> key-value pairs of structured data to add to the log entry, followed
by the key &quot;MESSAGE&quot;, followed by a printf()-style message format,
followed by parameters to insert in the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_log_structured_array">
<description>
Log a message with structured data. The message will be passed through to the
log writer set by the application using g_log_set_writer_func(). If the
message is fatal (i.e. its log level is %G_LOG_LEVEL_ERROR), the program will
be aborted at the end of this function.

See g_log_structured() for more documentation.

This assumes that @log_level is already present in @fields (typically as the
`PRIORITY` field).

Since: 2.50

</description>
<parameters>
<parameter name="log_level">
<parameter_description> log level, either from #GLogLevelFlags, or a user-defined
level
</parameter_description>
</parameter>
<parameter name="fields">
<parameter_description> key–value pairs of structured data to add
to the log message
</parameter_description>
</parameter>
<parameter name="n_fields">
<parameter_description> number of elements in the @fields array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_log_variant">
<description>
Log a message with structured data, accepting the data within a #GVariant. This
version is especially useful for use in other languages, via introspection.

The only mandatory item in the @fields dictionary is the &quot;MESSAGE&quot; which must
contain the text shown to the user.

The values in the @fields dictionary are likely to be of type String
(#G_VARIANT_TYPE_STRING). Array of bytes (#G_VARIANT_TYPE_BYTESTRING) is also
supported. In this case the message is handled as binary and will be forwarded
to the log writer as such. The size of the array should not be higher than
%G_MAXSSIZE. Otherwise it will be truncated to this size. For other types
g_variant_print() will be used to convert the value into a string.

For more details on its usage and about the parameters, see g_log_structured().

Since: 2.50

</description>
<parameters>
<parameter name="log_domain">
<parameter_description> log domain, usually %G_LOG_DOMAIN
</parameter_description>
</parameter>
<parameter name="log_level">
<parameter_description> log level, either from #GLogLevelFlags, or a user-defined
level
</parameter_description>
</parameter>
<parameter name="fields">
<parameter_description> a dictionary (#GVariant of the type %G_VARIANT_TYPE_VARDICT)
containing the key-value pairs of message data.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_log_writer_default">
<description>
Format a structured log message and output it to the default log destination
for the platform. On Linux, this is typically the systemd journal, falling
back to `stdout` or `stderr` if running from the terminal or if output is
being redirected to a file.

Support for other platform-specific logging mechanisms may be added in
future. Distributors of GLib may modify this function to impose their own
(documented) platform-specific log writing policies.

This is suitable for use as a #GLogWriterFunc, and is the default writer used
if no other is set using g_log_set_writer_func().

As with g_log_default_handler(), this function drops debug and informational
messages unless their log domain (or `all`) is listed in the space-separated
`G_MESSAGES_DEBUG` environment variable.

Since: 2.50

</description>
<parameters>
<parameter name="log_level">
<parameter_description> log level, either from #GLogLevelFlags, or a user-defined
level
</parameter_description>
</parameter>
<parameter name="fields">
<parameter_description> key–value pairs of structured data forming
the log message
</parameter_description>
</parameter>
<parameter name="n_fields">
<parameter_description> number of elements in the @fields array
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to g_log_set_writer_func()
</parameter_description>
</parameter>
</parameters>
<return> %G_LOG_WRITER_HANDLED on success, %G_LOG_WRITER_UNHANDLED otherwise
</return>
</function>

<function name="g_log_writer_format_fields">
<description>
Format a structured log message as a string suitable for outputting to the
terminal (or elsewhere). This will include the values of all fields it knows
how to interpret, which includes `MESSAGE` and `GLIB_DOMAIN` (see the
documentation for g_log_structured()). It does not include values from
unknown fields.

The returned string does **not** have a trailing new-line character. It is
encoded in the character set of the current locale, which is not necessarily
UTF-8.

Since: 2.50

</description>
<parameters>
<parameter name="log_level">
<parameter_description> log level, either from #GLogLevelFlags, or a user-defined
level
</parameter_description>
</parameter>
<parameter name="fields">
<parameter_description> key–value pairs of structured data forming
the log message
</parameter_description>
</parameter>
<parameter name="n_fields">
<parameter_description> number of elements in the @fields array
</parameter_description>
</parameter>
<parameter name="use_color">
<parameter_description> %TRUE to use ANSI color escape sequences when formatting the
message, %FALSE to not
</parameter_description>
</parameter>
</parameters>
<return> string containing the formatted log message, in
the character set of the current locale
</return>
</function>

<function name="g_log_writer_is_journald">
<description>
Check whether the given @output_fd file descriptor is a connection to the
systemd journal, or something else (like a log file or `stdout` or
`stderr`).

Invalid file descriptors are accepted and return %FALSE, which allows for
the following construct without needing any additional error handling:
|[&lt;!-- language=&quot;C&quot; --&gt;
is_journald = g_log_writer_is_journald (fileno (stderr));
]|

Since: 2.50

</description>
<parameters>
<parameter name="output_fd">
<parameter_description> output file descriptor to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @output_fd points to the journal, %FALSE otherwise
</return>
</function>

<function name="g_log_writer_journald">
<description>
Format a structured log message and send it to the systemd journal as a set
of key–value pairs. All fields are sent to the journal, but if a field has
length zero (indicating program-specific data) then only its key will be
sent.

This is suitable for use as a #GLogWriterFunc.

If GLib has been compiled without systemd support, this function is still
defined, but will always return %G_LOG_WRITER_UNHANDLED.

Since: 2.50

</description>
<parameters>
<parameter name="log_level">
<parameter_description> log level, either from #GLogLevelFlags, or a user-defined
level
</parameter_description>
</parameter>
<parameter name="fields">
<parameter_description> key–value pairs of structured data forming
the log message
</parameter_description>
</parameter>
<parameter name="n_fields">
<parameter_description> number of elements in the @fields array
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to g_log_set_writer_func()
</parameter_description>
</parameter>
</parameters>
<return> %G_LOG_WRITER_HANDLED on success, %G_LOG_WRITER_UNHANDLED otherwise
</return>
</function>

<function name="g_log_writer_standard_streams">
<description>
Format a structured log message and print it to either `stdout` or `stderr`,
depending on its log level. %G_LOG_LEVEL_INFO and %G_LOG_LEVEL_DEBUG messages
are sent to `stdout`; all other log levels are sent to `stderr`. Only fields
which are understood by this function are included in the formatted string
which is printed.

If the output stream supports ANSI color escape sequences, they will be used
in the output.

A trailing new-line character is added to the log message when it is printed.

This is suitable for use as a #GLogWriterFunc.

Since: 2.50

</description>
<parameters>
<parameter name="log_level">
<parameter_description> log level, either from #GLogLevelFlags, or a user-defined
level
</parameter_description>
</parameter>
<parameter name="fields">
<parameter_description> key–value pairs of structured data forming
the log message
</parameter_description>
</parameter>
<parameter name="n_fields">
<parameter_description> number of elements in the @fields array
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to g_log_set_writer_func()
</parameter_description>
</parameter>
</parameters>
<return> %G_LOG_WRITER_HANDLED on success, %G_LOG_WRITER_UNHANDLED otherwise
</return>
</function>

<function name="g_log_writer_supports_color">
<description>
Check whether the given @output_fd file descriptor supports ANSI color
escape sequences. If so, they can safely be used when formatting log
messages.

Since: 2.50

</description>
<parameters>
<parameter name="output_fd">
<parameter_description> output file descriptor to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if ANSI color escapes are supported, %FALSE otherwise
</return>
</function>

<function name="g_logv">
<description>
Logs an error or debugging message.

If the log level has been set as fatal, the abort()
function is called to terminate the program.

If g_log_default_handler() is used as the log handler function, a new-line
character will automatically be appended to @..., and need not be entered
manually.

If [structured logging is enabled][using-structured-logging] this will
output via the structured log writer function (see g_log_set_writer_func()).

</description>
<parameters>
<parameter name="log_domain">
<parameter_description> the log domain, or %NULL for the default &quot;&quot;
application domain
</parameter_description>
</parameter>
<parameter name="log_level">
<parameter_description> the log level
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the message format. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_lstat">
<description>
A wrapper for the POSIX lstat() function. The lstat() function is
like stat() except that in the case of symbolic links, it returns
information about the symbolic link itself and not the file that it
refers to. If the system does not support symbolic links g_lstat()
is identical to g_stat().

See your C library manual for more details about lstat().

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> a pointer to a stat struct, which will be filled with the file
information
</parameter_description>
</parameter>
</parameters>
<return> 0 if the information was successfully retrieved,
-1 if an error occurred

</return>
</function>

<function name="g_main_context_acquire">
<description>
Tries to become the owner of the specified context.
If some other thread is the owner of the context,
returns %FALSE immediately. Ownership is properly
recursive: the owner can require ownership again
and will release ownership when g_main_context_release()
is called as many times as g_main_context_acquire().

You must be the owner of a context before you
can call g_main_context_prepare(), g_main_context_query(),
g_main_context_check(), g_main_context_dispatch().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation succeeded, and
this thread is now the owner of @context.
</return>
</function>

<function name="g_main_context_add_poll">
<description>
Adds a file descriptor to the set of file descriptors polled for
this context. This will very seldom be used directly. Instead
a typical event source will use g_source_add_unix_fd() instead.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext (or %NULL for the default context)
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a #GPollFD structure holding information about a file
descriptor to watch.
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the priority for this file descriptor which should be
the same as the priority used for g_source_attach() to ensure that the
file descriptor is polled whenever the results may be needed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_context_check">
<description>
Passes the results of polling back to the main loop.

You must have successfully acquired the context with
g_main_context_acquire() before you may call this function.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
<parameter name="max_priority">
<parameter_description> the maximum numerical priority of sources to check
</parameter_description>
</parameter>
<parameter name="fds">
<parameter_description> array of #GPollFD's that was passed to
the last call to g_main_context_query()
</parameter_description>
</parameter>
<parameter name="n_fds">
<parameter_description> return value of g_main_context_query()
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if some sources are ready to be dispatched.
</return>
</function>

<function name="g_main_context_default">
<description>
Returns the global default main context. This is the main context
used for main loop functions when a main loop is not explicitly
specified, and corresponds to the &quot;main&quot; main loop. See also
g_main_context_get_thread_default().


</description>
<parameters>
</parameters>
<return> the global default main context.
</return>
</function>

<function name="g_main_context_dispatch">
<description>
Dispatches all pending sources.

You must have successfully acquired the context with
g_main_context_acquire() before you may call this function.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_context_find_source_by_funcs_user_data">
<description>
Finds a source with the given source functions and user data.  If
multiple sources exist with the same source function and user data,
the first one found will be returned.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext (if %NULL, the default context will be used).
</parameter_description>
</parameter>
<parameter name="funcs">
<parameter_description> the @source_funcs passed to g_source_new().
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the user data from the callback.
</parameter_description>
</parameter>
</parameters>
<return> the source, if one was found, otherwise %NULL
</return>
</function>

<function name="g_main_context_find_source_by_id">
<description>
Finds a #GSource given a pair of context and ID.

It is a programmer error to attempt to lookup a non-existent source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext (if %NULL, the default context will be used)
</parameter_description>
</parameter>
<parameter name="source_id">
<parameter_description> the source ID, as returned by g_source_get_id().
</parameter_description>
</parameter>
</parameters>
<return> the #GSource
</return>
</function>

<function name="g_main_context_find_source_by_user_data">
<description>
Finds a source with the given user data for the callback.  If
multiple sources exist with the same user data, the first
one found will be returned.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the user_data for the callback.
</parameter_description>
</parameter>
</parameters>
<return> the source, if one was found, otherwise %NULL
</return>
</function>

<function name="g_main_context_get_poll_func">
<description>
Gets the poll function set by g_main_context_set_poll_func().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
</parameters>
<return> the poll function
</return>
</function>

<function name="g_main_context_get_thread_default">
<description>
Gets the thread-default #GMainContext for this thread. Asynchronous
operations that want to be able to be run in contexts other than
the default one should call this method or
g_main_context_ref_thread_default() to get a #GMainContext to add
their #GSources to. (Note that even in single-threaded
programs applications may sometimes want to temporarily push a
non-default context, so it is not safe to assume that this will
always return %NULL if you are running in the default thread.)

If you need to hold a reference on the context, use
g_main_context_ref_thread_default() instead.

Since: 2.22

</description>
<parameters>
</parameters>
<return> the thread-default #GMainContext, or
%NULL if the thread-default context is the global default context.

</return>
</function>

<function name="g_main_context_invoke">
<description>
Invokes a function in such a way that @context is owned during the
invocation of @function.

If @context is %NULL then the global default main context — as
returned by g_main_context_default() — is used.

If @context is owned by the current thread, @function is called
directly.  Otherwise, if @context is the thread-default main context
of the current thread and g_main_context_acquire() succeeds, then
@function is called and g_main_context_release() is called
afterwards.

In any other case, an idle source is created to call @function and
that source is attached to @context (presumably to be run in another
thread).  The idle source is attached with #G_PRIORITY_DEFAULT
priority.  If you want a different priority, use
g_main_context_invoke_full().

Note that, as with normal idle functions, @function should probably
return %FALSE.  If it returns %TRUE, it will be continuously run in a
loop (and may prevent this call from returning).

Since: 2.28

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext, or %NULL
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_context_invoke_full">
<description>
Invokes a function in such a way that @context is owned during the
invocation of @function.

This function is the same as g_main_context_invoke() except that it
lets you specify the priority in case @function ends up being
scheduled as an idle and also lets you give a #GDestroyNotify for @data.

@notify should not assume that it is called from any particular
thread or with any particular context acquired.

Since: 2.28

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext, or %NULL
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the priority at which to run @function
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a function to call when @data is no longer in use, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_context_is_owner">
<description>
Determines whether this thread holds the (recursive)
ownership of this #GMainContext. This is useful to
know before waiting on another thread that may be
blocking to get ownership of @context.

Since: 2.10

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if current thread is owner of @context.

</return>
</function>

<function name="g_main_context_iteration">
<description>
Runs a single iteration for the given main loop. This involves
checking to see if any event sources are ready to be processed,
then if no events sources are ready and @may_block is %TRUE, waiting
for a source to become ready, then dispatching the highest priority
events sources that are ready. Otherwise, if @may_block is %FALSE
sources are not waited to become ready, only those highest priority
events sources will be dispatched (if any), that are ready at this
given moment without further waiting.

Note that even when @may_block is %TRUE, it is still possible for
g_main_context_iteration() to return %FALSE, since the wait may
be interrupted for other reasons than an event source becoming ready.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext (if %NULL, the default context will be used) 
</parameter_description>
</parameter>
<parameter name="may_block">
<parameter_description> whether the call may block.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if events were dispatched.
</return>
</function>

<function name="g_main_context_new">
<description>
Creates a new #GMainContext structure.


</description>
<parameters>
</parameters>
<return> the new #GMainContext
</return>
</function>

<function name="g_main_context_pending">
<description>
Checks if any sources have pending events for the given context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext (if %NULL, the default context will be used)
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if events are pending.
</return>
</function>

<function name="g_main_context_pop_thread_default">
<description>
Pops @context off the thread-default context stack (verifying that
it was on the top of the stack).

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext object, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_context_prepare">
<description>
Prepares to poll sources within a main loop. The resulting information
for polling is determined by calling g_main_context_query ().

You must have successfully acquired the context with
g_main_context_acquire() before you may call this function.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> location to store priority of highest priority
source already ready.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if some source is ready to be dispatched
prior to polling.
</return>
</function>

<function name="g_main_context_push_thread_default">
<description>
Acquires @context and sets it as the thread-default context for the
current thread. This will cause certain asynchronous operations
(such as most [gio][gio]-based I/O) which are
started in this thread to run under @context and deliver their
results to its main loop, rather than running under the global
default context in the main thread. Note that calling this function
changes the context returned by g_main_context_get_thread_default(),
not the one returned by g_main_context_default(), so it does not affect
the context used by functions like g_idle_add().

Normally you would call this function shortly after creating a new
thread, passing it a #GMainContext which will be run by a
#GMainLoop in that thread, to set a new default context for all
async operations in that thread. In this case you may not need to
ever call g_main_context_pop_thread_default(), assuming you want the
new #GMainContext to be the default for the whole lifecycle of the
thread.

If you don't have control over how the new thread was created (e.g.
in the new thread isn't newly created, or if the thread life
cycle is managed by a #GThreadPool), it is always suggested to wrap
the logic that needs to use the new #GMainContext inside a
g_main_context_push_thread_default() / g_main_context_pop_thread_default()
pair, otherwise threads that are re-used will end up never explicitly
releasing the #GMainContext reference they hold.

In some cases you may want to schedule a single operation in a
non-default context, or temporarily use a non-default context in
the main thread. In that case, you can wrap the call to the
asynchronous operation inside a
g_main_context_push_thread_default() /
g_main_context_pop_thread_default() pair, but it is up to you to
ensure that no other asynchronous operations accidentally get
started while the non-default context is active.

Beware that libraries that predate this function may not correctly
handle being used from a thread with a thread-default context. Eg,
see g_file_supports_thread_contexts().

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext, or %NULL for the global default context
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_context_query">
<description>
Determines information necessary to poll this main loop.

You must have successfully acquired the context with
g_main_context_acquire() before you may call this function.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
<parameter name="max_priority">
<parameter_description> maximum priority source to check
</parameter_description>
</parameter>
<parameter name="timeout_">
<parameter_description> location to store timeout to be used in polling
</parameter_description>
</parameter>
<parameter name="fds">
<parameter_description> location to
store #GPollFD records that need to be polled.
</parameter_description>
</parameter>
<parameter name="n_fds">
<parameter_description> length of @fds.
</parameter_description>
</parameter>
</parameters>
<return> the number of records actually stored in @fds,
or, if more than @n_fds records need to be stored, the number
of records that need to be stored.
</return>
</function>

<function name="g_main_context_ref">
<description>
Increases the reference count on a #GMainContext object by one.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
</parameters>
<return> the @context that was passed in (since 2.6)
</return>
</function>

<function name="g_main_context_ref_thread_default">
<description>
Gets the thread-default #GMainContext for this thread, as with
g_main_context_get_thread_default(), but also adds a reference to
it with g_main_context_ref(). In addition, unlike
g_main_context_get_thread_default(), if the thread-default context
is the global default context, this will return that #GMainContext
(with a ref added to it) rather than returning %NULL.

Since: 2.32

</description>
<parameters>
</parameters>
<return> the thread-default #GMainContext. Unref
with g_main_context_unref() when you are done with it.

</return>
</function>

<function name="g_main_context_release">
<description>
Releases ownership of a context previously acquired by this thread
with g_main_context_acquire(). If the context was acquired multiple
times, the ownership will be released only when g_main_context_release()
is called as many times as it was acquired.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_context_remove_poll">
<description>
Removes file descriptor from the set of file descriptors to be
polled for a particular context.

</description>
<parameters>
<parameter name="context">
<parameter_description>a #GMainContext 
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a #GPollFD descriptor previously added with g_main_context_add_poll()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_context_set_poll_func">
<description>
Sets the function to use to handle polling of file descriptors. It
will be used instead of the poll() system call 
(or GLib's replacement function, which is used where 
poll() isn't available).

This function could possibly be used to integrate the GLib event
loop with an external event loop.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call to poll all file descriptors
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_context_unref">
<description>
Decreases the reference count on a #GMainContext object by one. If
the result is zero, free the context and free all associated memory.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_context_wait">
<description>
Tries to become the owner of the specified context,
as with g_main_context_acquire(). But if another thread
is the owner, atomically drop @mutex and wait on @cond until 
that owner releases ownership or until @cond is signaled, then
try again (once) to become the owner.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
<parameter name="cond">
<parameter_description> a condition variable
</parameter_description>
</parameter>
<parameter name="mutex">
<parameter_description> a mutex, currently held
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation succeeded, and
this thread is now the owner of @context.
</return>
</function>

<function name="g_main_context_wakeup">
<description>
If @context is currently blocking in g_main_context_iteration()
waiting for a source to become ready, cause it to stop blocking
and return.  Otherwise, cause the next invocation of
g_main_context_iteration() to return without blocking.

This API is useful for low-level control over #GMainContext; for
example, integrating it with main loop implementations such as
#GMainLoop.

Another related use for this function is when implementing a main
loop with a termination condition, computed from multiple threads:

|[&lt;!-- language=&quot;C&quot; --&gt; 
#define NUM_TASKS 10
static volatile gint tasks_remaining = NUM_TASKS;
...

while (g_atomic_int_get (&amp;tasks_remaining) != 0)
g_main_context_iteration (NULL, TRUE);
]|

Then in a thread:
|[&lt;!-- language=&quot;C&quot; --&gt; 
perform_work();

if (g_atomic_int_dec_and_test (&amp;tasks_remaining))
g_main_context_wakeup (NULL);
]|

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_current_source">
<description>
Returns the currently firing source for this thread.

Since: 2.12

</description>
<parameters>
</parameters>
<return> The currently firing source or %NULL.

</return>
</function>

<function name="g_main_depth">
<description>
Returns the depth of the stack of calls to
g_main_context_dispatch() on any #GMainContext in the current thread.
That is, when called from the toplevel, it gives 0. When
called from within a callback from g_main_context_iteration()
(or g_main_loop_run(), etc.) it returns 1. When called from within 
a callback to a recursive call to g_main_context_iteration(),
it returns 2. And so forth.

This function is useful in a situation like the following:
Imagine an extremely simple &quot;garbage collected&quot; system.

|[&lt;!-- language=&quot;C&quot; --&gt; 
static GList *free_list;

gpointer
allocate_memory (gsize size)
{ 
gpointer result = g_malloc (size);
free_list = g_list_prepend (free_list, result);
return result;
}

void
free_allocated_memory (void)
{
GList *l;
for (l = free_list; l; l = l-&gt;next);
g_free (l-&gt;data);
g_list_free (free_list);
free_list = NULL;
}

[...]

while (TRUE); 
{
g_main_context_iteration (NULL, TRUE);
free_allocated_memory();
}
]|

This works from an application, however, if you want to do the same
thing from a library, it gets more difficult, since you no longer
control the main loop. You might think you can simply use an idle
function to make the call to free_allocated_memory(), but that
doesn't work, since the idle function could be called from a
recursive callback. This can be fixed by using g_main_depth()

|[&lt;!-- language=&quot;C&quot; --&gt; 
gpointer
allocate_memory (gsize size)
{ 
FreeListBlock *block = g_new (FreeListBlock, 1);
block-&gt;mem = g_malloc (size);
block-&gt;depth = g_main_depth ();   
free_list = g_list_prepend (free_list, block);
return block-&gt;mem;
}

void
free_allocated_memory (void)
{
GList *l;

int depth = g_main_depth ();
for (l = free_list; l; );
{
GList *next = l-&gt;next;
FreeListBlock *block = l-&gt;data;
if (block-&gt;depth &gt; depth)
{
g_free (block-&gt;mem);
g_free (block);
free_list = g_list_delete_link (free_list, l);
}

l = next;
}
}
]|

There is a temptation to use g_main_depth() to solve
problems with reentrancy. For instance, while waiting for data
to be received from the network in response to a menu item,
the menu item might be selected again. It might seem that
one could make the menu item's callback return immediately
and do nothing if g_main_depth() returns a value greater than 1.
However, this should be avoided since the user then sees selecting
the menu item do nothing. Furthermore, you'll find yourself adding
these checks all over your code, since there are doubtless many,
many things that the user could do. Instead, you can use the
following techniques:

1. Use gtk_widget_set_sensitive() or modal dialogs to prevent
the user from interacting with elements while the main
loop is recursing.

2. Avoid main loop recursion in situations where you can't handle
arbitrary  callbacks. Instead, structure your code so that you
simply return to the main loop and then get called again when
there is more work to do.


</description>
<parameters>
</parameters>
<return> The main loop recursion level in the current thread
</return>
</function>

<function name="g_main_destroy">
<description>
Frees the memory allocated for the #GMainLoop.

Deprecated: 2.2: Use g_main_loop_unref() instead

</description>
<parameters>
<parameter name="loop">
<parameter_description> a #GMainLoop
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_is_running">
<description>
Checks if the main loop is running.

Deprecated: 2.2: Use g_main_loop_is_running() instead

</description>
<parameters>
<parameter name="loop">
<parameter_description> a #GMainLoop
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the main loop is running

</return>
</function>

<function name="g_main_iteration">
<description>
Runs a single iteration for the default #GMainContext.

Deprecated: 2.2: Use g_main_context_iteration() instead.

</description>
<parameters>
<parameter name="may_block">
<parameter_description> set to %TRUE if it should block (i.e. wait) until an event
source becomes ready. It will return after an event source has been
processed. If set to %FALSE it will return immediately if no event
source is ready to be processed.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if more events are pending.

</return>
</function>

<function name="g_main_loop_get_context">
<description>
Returns the #GMainContext of @loop.


</description>
<parameters>
<parameter name="loop">
<parameter_description> a #GMainLoop.
</parameter_description>
</parameter>
</parameters>
<return> the #GMainContext of @loop
</return>
</function>

<function name="g_main_loop_is_running">
<description>
Checks to see if the main loop is currently being run via g_main_loop_run().


</description>
<parameters>
<parameter name="loop">
<parameter_description> a #GMainLoop.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mainloop is currently being run.
</return>
</function>

<function name="g_main_loop_new">
<description>
Creates a new #GMainLoop structure.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMainContext  (if %NULL, the default context will be used).
</parameter_description>
</parameter>
<parameter name="is_running">
<parameter_description> set to %TRUE to indicate that the loop is running. This
is not very important since calling g_main_loop_run() will set this to
%TRUE anyway.
</parameter_description>
</parameter>
</parameters>
<return> a new #GMainLoop.
</return>
</function>

<function name="g_main_loop_quit">
<description>
Stops a #GMainLoop from running. Any calls to g_main_loop_run()
for the loop will return. 

Note that sources that have already been dispatched when 
g_main_loop_quit() is called will still be executed.

</description>
<parameters>
<parameter name="loop">
<parameter_description> a #GMainLoop
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_loop_ref">
<description>
Increases the reference count on a #GMainLoop object by one.


</description>
<parameters>
<parameter name="loop">
<parameter_description> a #GMainLoop
</parameter_description>
</parameter>
</parameters>
<return> @loop
</return>
</function>

<function name="g_main_loop_run">
<description>
Runs a main loop until g_main_loop_quit() is called on the loop.
If this is called for the thread of the loop's #GMainContext,
it will process events from the loop, otherwise it will
simply wait.

</description>
<parameters>
<parameter name="loop">
<parameter_description> a #GMainLoop
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_loop_unref">
<description>
Decreases the reference count on a #GMainLoop object by one. If
the result is zero, free the loop and free all associated memory.

</description>
<parameters>
<parameter name="loop">
<parameter_description> a #GMainLoop
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_new">
<description>
Creates a new #GMainLoop for th default main context.

Deprecated: 2.2: Use g_main_loop_new() instead

</description>
<parameters>
<parameter name="is_running">
<parameter_description> set to %TRUE to indicate that the loop is running. This
is not very important since calling g_main_run() will set this
to %TRUE anyway.
</parameter_description>
</parameter>
</parameters>
<return> a new #GMainLoop

</return>
</function>

<function name="g_main_pending">
<description>
Checks if any events are pending for the default #GMainContext
(i.e. ready to be processed).


</description>
<parameters>
</parameters>
<return> %TRUE if any events are pending.

Deprected: 2.2: Use g_main_context_pending() instead.
</return>
</function>

<function name="g_main_quit">
<description>
Stops the #GMainLoop.
If g_main_run() was called to run the #GMainLoop, it will now return.

Deprecated: 2.2: Use g_main_loop_quit() instead

</description>
<parameters>
<parameter name="loop">
<parameter_description> a #GMainLoop
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_run">
<description>
Runs a main loop until it stops running.

Deprecated: 2.2: Use g_main_loop_run() instead

</description>
<parameters>
<parameter name="loop">
<parameter_description> a #GMainLoop
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_main_set_poll_func">
<description>
Sets the function to use for the handle polling of file descriptors
for the default main context.

Deprecated: 2.2: Use g_main_context_set_poll_func() again

</description>
<parameters>
<parameter name="func">
<parameter_description> the function to call to poll all file descriptors
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_malloc">
<description>
Allocates @n_bytes bytes of memory.
If @n_bytes is 0 it returns %NULL.


</description>
<parameters>
<parameter name="n_bytes">
<parameter_description> the number of bytes to allocate
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated memory
</return>
</function>

<function name="g_malloc0">
<description>
Allocates @n_bytes bytes of memory, initialized to 0's.
If @n_bytes is 0 it returns %NULL.


</description>
<parameters>
<parameter name="n_bytes">
<parameter_description> the number of bytes to allocate
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated memory
</return>
</function>

<function name="g_malloc0_n">
<description>
This function is similar to g_malloc0(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.

Since: 2.24

</description>
<parameters>
<parameter name="n_blocks">
<parameter_description> the number of blocks to allocate
</parameter_description>
</parameter>
<parameter name="n_block_bytes">
<parameter_description> the size of each block in bytes
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated memory
</return>
</function>

<function name="g_malloc_n">
<description>
This function is similar to g_malloc(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.

Since: 2.24

</description>
<parameters>
<parameter name="n_blocks">
<parameter_description> the number of blocks to allocate
</parameter_description>
</parameter>
<parameter name="n_block_bytes">
<parameter_description> the size of each block in bytes
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated memory
</return>
</function>

<function name="g_mapped_file_free">
<description>
This call existed before #GMappedFile had refcounting and is currently
exactly the same as g_mapped_file_unref().

Since: 2.8
Deprecated:2.22: Use g_mapped_file_unref() instead.

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GMappedFile
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mapped_file_get_bytes">
<description>
Creates a new #GBytes which references the data mapped from @file.
The mapped contents of the file must not be modified after creating this
bytes object, because a #GBytes should be immutable.

Since: 2.34

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GMappedFile
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GBytes referencing data
from @file

</return>
</function>

<function name="g_mapped_file_get_contents">
<description>
Returns the contents of a #GMappedFile. 

Note that the contents may not be zero-terminated,
even if the #GMappedFile is backed by a text file.

If the file is empty then %NULL is returned.

Since: 2.8

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GMappedFile
</parameter_description>
</parameter>
</parameters>
<return> the contents of @file, or %NULL.

</return>
</function>

<function name="g_mapped_file_get_length">
<description>
Returns the length of the contents of a #GMappedFile.

Since: 2.8

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GMappedFile
</parameter_description>
</parameter>
</parameters>
<return> the length of the contents of @file.

</return>
</function>

<function name="g_mapped_file_new">
<description>
Maps a file into memory. On UNIX, this is using the mmap() function.

If @writable is %TRUE, the mapped buffer may be modified, otherwise
it is an error to modify the mapped buffer. Modifications to the buffer
are not visible to other processes mapping the same file, and are not
written back to the file.

Note that modifications of the underlying file might affect the contents
of the #GMappedFile. Therefore, mapping should only be used if the file
will not be modified, or if all modifications of the file are done
atomically (e.g. using g_file_set_contents()).

If @filename is the name of an empty, regular file, the function
will successfully return an empty #GMappedFile. In other cases of
size 0 (e.g. device files such as /dev/null), @error will be set
to the #GFileError value #G_FILE_ERROR_INVAL.

Since: 2.8

</description>
<parameters>
<parameter name="filename">
<parameter_description> The path of the file to load, in the GLib
filename encoding
</parameter_description>
</parameter>
<parameter name="writable">
<parameter_description> whether the mapping should be writable
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GMappedFile which must be unref'd
with g_mapped_file_unref(), or %NULL if the mapping failed.

</return>
</function>

<function name="g_mapped_file_new_from_fd">
<description>
Maps a file into memory. On UNIX, this is using the mmap() function.

If @writable is %TRUE, the mapped buffer may be modified, otherwise
it is an error to modify the mapped buffer. Modifications to the buffer
are not visible to other processes mapping the same file, and are not
written back to the file.

Note that modifications of the underlying file might affect the contents
of the #GMappedFile. Therefore, mapping should only be used if the file
will not be modified, or if all modifications of the file are done
atomically (e.g. using g_file_set_contents()).

Since: 2.32

</description>
<parameters>
<parameter name="fd">
<parameter_description> The file descriptor of the file to load
</parameter_description>
</parameter>
<parameter name="writable">
<parameter_description> whether the mapping should be writable
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GMappedFile which must be unref'd
with g_mapped_file_unref(), or %NULL if the mapping failed.

</return>
</function>

<function name="g_mapped_file_ref">
<description>
Increments the reference count of @file by one.  It is safe to call
this function from any thread.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GMappedFile
</parameter_description>
</parameter>
</parameters>
<return> the passed in #GMappedFile.

</return>
</function>

<function name="g_mapped_file_unref">
<description>
Decrements the reference count of @file by one.  If the reference count
drops to 0, unmaps the buffer of @file and frees it.

It is safe to call this function from any thread.

Since 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GMappedFile
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_markup_collect_attributes">
<description>
Collects the attributes of the element from the data passed to the
#GMarkupParser start_element function, dealing with common error
conditions and supporting boolean values.

This utility function is not required to write a parser but can save
a lot of typing.

The @element_name, @attribute_names, @attribute_values and @error
parameters passed to the start_element callback should be passed
unmodified to this function.

Following these arguments is a list of &quot;supported&quot; attributes to collect.
It is an error to specify multiple attributes with the same name. If any
attribute not in the list appears in the @attribute_names array then an
unknown attribute error will result.

The #GMarkupCollectType field allows specifying the type of collection
to perform and if a given attribute must appear or is optional.

The attribute name is simply the name of the attribute to collect.

The pointer should be of the appropriate type (see the descriptions
under #GMarkupCollectType) and may be %NULL in case a particular
attribute is to be allowed but ignored.

This function deals with issuing errors for missing attributes
(of type %G_MARKUP_ERROR_MISSING_ATTRIBUTE), unknown attributes
(of type %G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE) and duplicate
attributes (of type %G_MARKUP_ERROR_INVALID_CONTENT) as well
as parse errors for boolean-valued attributes (again of type
%G_MARKUP_ERROR_INVALID_CONTENT). In all of these cases %FALSE
will be returned and @error will be set as appropriate.

Since: 2.16

</description>
<parameters>
<parameter name="element_name">
<parameter_description> the current tag name
</parameter_description>
</parameter>
<parameter name="attribute_names">
<parameter_description> the attribute names
</parameter_description>
</parameter>
<parameter name="attribute_values">
<parameter_description> the attribute values
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a #GError or %NULL
</parameter_description>
</parameter>
<parameter name="first_type">
<parameter_description> the #GMarkupCollectType of the first attribute
</parameter_description>
</parameter>
<parameter name="first_attr">
<parameter_description> the name of the first attribute
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a pointer to the storage location of the first attribute
(or %NULL), followed by more types names and pointers, ending
with %G_MARKUP_COLLECT_INVALID
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful

</return>
</function>

<function name="g_markup_escape_text">
<description>
Escapes text so that the markup parser will parse it verbatim.
Less than, greater than, ampersand, etc. are replaced with the
corresponding entities. This function would typically be used
when writing out a file to be parsed with the markup parser.

Note that this function doesn't protect whitespace and line endings
from being processed according to the XML rules for normalization
of line endings and attribute values.

Note also that this function will produce character references in
the range of &amp;#x1; ... &amp;#x1f; for all control sequences
except for tabstop, newline and carriage return.  The character
references in this range are not valid XML 1.0, but they are
valid XML 1.1 and will be accepted by the GMarkup parser.


</description>
<parameters>
<parameter name="text">
<parameter_description> some valid UTF-8 text
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of @text in bytes, or -1 if the text is nul-terminated
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string with the escaped text
</return>
</function>

<function name="g_markup_parse_context_end_parse">
<description>
Signals to the #GMarkupParseContext that all data has been
fed into the parse context with g_markup_parse_context_parse().

This function reports an error if the document isn't complete,
for example if elements are still open.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if an error was set
</return>
</function>

<function name="g_markup_parse_context_free">
<description>
Frees a #GMarkupParseContext.

This function can't be called from inside one of the
#GMarkupParser functions or while a subparser is pushed.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_markup_parse_context_get_element">
<description>
Retrieves the name of the currently open element.

If called from the start_element or end_element handlers this will
give the element_name as passed to those functions. For the parent
elements, see g_markup_parse_context_get_element_stack().

Since: 2.2

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
</parameters>
<return> the name of the currently open element, or %NULL

</return>
</function>

<function name="g_markup_parse_context_get_element_stack">
<description>
Retrieves the element stack from the internal state of the parser.

The returned #GSList is a list of strings where the first item is
the currently open tag (as would be returned by
g_markup_parse_context_get_element()) and the next item is its
immediate parent.

This function is intended to be used in the start_element and
end_element handlers where g_markup_parse_context_get_element()
would merely return the name of the element that is being
processed.

Since: 2.16

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
</parameters>
<return> the element stack, which must not be modified

</return>
</function>

<function name="g_markup_parse_context_get_position">
<description>
Retrieves the current line number and the number of the character on
that line. Intended for use in error messages; there are no strict
semantics for what constitutes the &quot;current&quot; line number other than
&quot;the best number we could come up with for error messages.&quot;

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
<parameter name="line_number">
<parameter_description> return location for a line number, or %NULL
</parameter_description>
</parameter>
<parameter name="char_number">
<parameter_description> return location for a char-on-line number, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_markup_parse_context_get_user_data">
<description>
Returns the user_data associated with @context.

This will either be the user_data that was provided to
g_markup_parse_context_new() or to the most recent call
of g_markup_parse_context_push().

Since: 2.18

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
</parameters>
<return> the provided user_data. The returned data belongs to
the markup context and will be freed when
g_markup_parse_context_free() is called.

</return>
</function>

<function name="g_markup_parse_context_new">
<description>
Creates a new parse context. A parse context is used to parse
marked-up documents. You can feed any number of documents into
a context, as long as no errors occur; once an error occurs,
the parse context can't continue to parse text (you have to
free it and create a new parse context).


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GMarkupParser
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> one or more #GMarkupParseFlags
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to #GMarkupParser functions
</parameter_description>
</parameter>
<parameter name="user_data_dnotify">
<parameter_description> user data destroy notifier called when
the parse context is freed
</parameter_description>
</parameter>
</parameters>
<return> a new #GMarkupParseContext
</return>
</function>

<function name="g_markup_parse_context_parse">
<description>
Feed some data to the #GMarkupParseContext.

The data need not be valid UTF-8; an error will be signaled if
it's invalid. The data need not be an entire document; you can
feed a document into the parser incrementally, via multiple calls
to this function. Typically, as you receive data from a network
connection or file, you feed each received chunk of data into this
function, aborting the process if an error occurs. Once an error
is reported, no further data may be fed to the #GMarkupParseContext;
all errors are fatal.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> chunk of text to parse
</parameter_description>
</parameter>
<parameter name="text_len">
<parameter_description> length of @text in bytes
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if an error occurred, %TRUE on success
</return>
</function>

<function name="g_markup_parse_context_pop">
<description>
Completes the process of a temporary sub-parser redirection.

This function exists to collect the user_data allocated by a
matching call to g_markup_parse_context_push(). It must be called
in the end_element handler corresponding to the start_element
handler during which g_markup_parse_context_push() was called.
You must not call this function from the error callback -- the
@user_data is provided directly to the callback in that case.

This function is not intended to be directly called by users
interested in invoking subparsers. Instead, it is intended to
be used by the subparsers themselves to implement a higher-level
interface.

Since: 2.18

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
</parameters>
<return> the user data passed to g_markup_parse_context_push()

</return>
</function>

<function name="g_markup_parse_context_push">
<description>
Temporarily redirects markup data to a sub-parser.

This function may only be called from the start_element handler of
a #GMarkupParser. It must be matched with a corresponding call to
g_markup_parse_context_pop() in the matching end_element handler
(except in the case that the parser aborts due to an error).

All tags, text and other data between the matching tags is
redirected to the subparser given by @parser. @user_data is used
as the user_data for that parser. @user_data is also passed to the
error callback in the event that an error occurs. This includes
errors that occur in subparsers of the subparser.

The end tag matching the start tag for which this call was made is
handled by the previous parser (which is given its own user_data)
which is why g_markup_parse_context_pop() is provided to allow &quot;one
last access&quot; to the @user_data provided to this function. In the
case of error, the @user_data provided here is passed directly to
the error callback of the subparser and g_markup_parse_context_pop()
should not be called. In either case, if @user_data was allocated
then it ought to be freed from both of these locations.

This function is not intended to be directly called by users
interested in invoking subparsers. Instead, it is intended to be
used by the subparsers themselves to implement a higher-level
interface.

As an example, see the following implementation of a simple
parser that counts the number of tags encountered.

|[&lt;!-- language=&quot;C&quot; --&gt; 
typedef struct
{
gint tag_count;
} CounterData;

static void
counter_start_element (GMarkupParseContext  *context,
const gchar          *element_name,
const gchar         **attribute_names,
const gchar         **attribute_values,
gpointer              user_data,
GError              **error)
{
CounterData *data = user_data;

data-&gt;tag_count++;
}

static void
counter_error (GMarkupParseContext *context,
GError              *error,
gpointer             user_data)
{
CounterData *data = user_data;

g_slice_free (CounterData, data);
}

static GMarkupParser counter_subparser =
{
counter_start_element,
NULL,
NULL,
NULL,
counter_error
};
]|

In order to allow this parser to be easily used as a subparser, the
following interface is provided:

|[&lt;!-- language=&quot;C&quot; --&gt; 
void
start_counting (GMarkupParseContext *context)
{
CounterData *data = g_slice_new (CounterData);

data-&gt;tag_count = 0;
g_markup_parse_context_push (context, &amp;counter_subparser, data);
}

gint
end_counting (GMarkupParseContext *context)
{
CounterData *data = g_markup_parse_context_pop (context);
int result;

result = data-&gt;tag_count;
g_slice_free (CounterData, data);

return result;
}
]|

The subparser would then be used as follows:

|[&lt;!-- language=&quot;C&quot; --&gt; 
static void start_element (context, element_name, ...)
{
if (strcmp (element_name, &quot;count-these&quot;) == 0)
start_counting (context);

// else, handle other tags...
}

static void end_element (context, element_name, ...)
{
if (strcmp (element_name, &quot;count-these&quot;) == 0)
g_print (&quot;Counted %d tags\n&quot;, end_counting (context));

// else, handle other tags...
}
]|

Since: 2.18

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
<parameter name="parser">
<parameter_description> a #GMarkupParser
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to #GMarkupParser functions
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_markup_parse_context_ref">
<description>
Increases the reference count of @context.

Since: 2.36

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
</parameters>
<return> the same @context

</return>
</function>

<function name="g_markup_parse_context_unref">
<description>
Decreases the reference count of @context.  When its reference count
drops to 0, it is freed.

Since: 2.36

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GMarkupParseContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_markup_printf_escaped">
<description>
Formats arguments according to @format, escaping
all string and character arguments in the fashion
of g_markup_escape_text(). This is useful when you
want to insert literal strings into XML-style markup
output, without having to worry that the strings
might themselves contain markup.

|[&lt;!-- language=&quot;C&quot; --&gt; 
const char *store = &quot;Fortnum &amp; Mason&quot;;
const char *item = &quot;Tea&quot;;
char *output;

output = g_markup_printf_escaped (&quot;&lt;purchase&gt;&quot;
&quot;&lt;store&gt;%s&lt;/store&gt;&quot;
&quot;&lt;item&gt;%s&lt;/item&gt;&quot;
&quot;&lt;/purchase&gt;&quot;,
store, item);
]|

Since: 2.4

</description>
<parameters>
<parameter name="format">
<parameter_description> printf() style format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to insert in the format string
</parameter_description>
</parameter>
</parameters>
<return> newly allocated result from formatting
operation. Free with g_free().

</return>
</function>

<function name="g_markup_vprintf_escaped">
<description>
Formats the data in @args according to @format, escaping
all string and character arguments in the fashion
of g_markup_escape_text(). See g_markup_printf_escaped().

Since: 2.4

</description>
<parameters>
<parameter name="format">
<parameter_description> printf() style format string
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> variable argument list, similar to vprintf()
</parameter_description>
</parameter>
</parameters>
<return> newly allocated result from formatting
operation. Free with g_free().

</return>
</function>

<function name="g_match_info_expand_references">
<description>
Returns a new string containing the text in @string_to_expand with
references and escape sequences expanded. References refer to the last
match done with @string against @regex and have the same syntax used by
g_regex_replace().

The @string_to_expand must be UTF-8 encoded even if #G_REGEX_RAW was
passed to g_regex_new().

The backreferences are extracted from the string passed to the match
function, so you cannot call this function after freeing the string.

@match_info may be %NULL in which case @string_to_expand must not
contain references. For instance &quot;foo\n&quot; does not refer to an actual
pattern and '\n' merely will be replaced with \n character,
while to expand &quot;\0&quot; (whole match) one needs the result of a match.
Use g_regex_check_replacement() to find out whether @string_to_expand
contains references.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo or %NULL
</parameter_description>
</parameter>
<parameter name="string_to_expand">
<parameter_description> the string to expand
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> the expanded string, or %NULL if an error occurred

</return>
</function>

<function name="g_match_info_fetch">
<description>
Retrieves the text matching the @match_num'th capturing
parentheses. 0 is the full text of the match, 1 is the first paren
set, 2 the second, and so on.

If @match_num is a valid sub pattern but it didn't match anything
(e.g. sub pattern 1, matching &quot;b&quot; against &quot;(a)?b&quot;) then an empty
string is returned.

If the match was obtained using the DFA algorithm, that is using
g_regex_match_all() or g_regex_match_all_full(), the retrieved
string is not that of a set of parentheses but that of a matched
substring. Substrings are matched in reverse order of length, so
0 is the longest match.

The string is fetched from the string passed to the match function,
so you cannot call this function after freeing the string.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> #GMatchInfo structure
</parameter_description>
</parameter>
<parameter name="match_num">
<parameter_description> number of the sub expression
</parameter_description>
</parameter>
</parameters>
<return> The matched substring, or %NULL if an error
occurred. You have to free the string yourself

</return>
</function>

<function name="g_match_info_fetch_all">
<description>
Bundles up pointers to each of the matching substrings from a match
and stores them in an array of gchar pointers. The first element in
the returned array is the match number 0, i.e. the entire matched
text.

If a sub pattern didn't match anything (e.g. sub pattern 1, matching
&quot;b&quot; against &quot;(a)?b&quot;) then an empty string is inserted.

If the last match was obtained using the DFA algorithm, that is using
g_regex_match_all() or g_regex_match_all_full(), the retrieved
strings are not that matched by sets of parentheses but that of the
matched substring. Substrings are matched in reverse order of length,
so the first one is the longest match.

The strings are fetched from the string passed to the match function,
so you cannot call this function after freeing the string.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo structure
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of gchar *
pointers.  It must be freed using g_strfreev(). If the previous
match failed %NULL is returned

</return>
</function>

<function name="g_match_info_fetch_named">
<description>
Retrieves the text matching the capturing parentheses named @name.

If @name is a valid sub pattern name but it didn't match anything
(e.g. sub pattern &quot;X&quot;, matching &quot;b&quot; against &quot;(?P&lt;X&gt;a)?b&quot;)
then an empty string is returned.

The string is fetched from the string passed to the match function,
so you cannot call this function after freeing the string.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> #GMatchInfo structure
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the subexpression
</parameter_description>
</parameter>
</parameters>
<return> The matched substring, or %NULL if an error
occurred. You have to free the string yourself

</return>
</function>

<function name="g_match_info_fetch_named_pos">
<description>
Retrieves the position in bytes of the capturing parentheses named @name.

If @name is a valid sub pattern name but it didn't match anything
(e.g. sub pattern &quot;X&quot;, matching &quot;b&quot; against &quot;(?P&lt;X&gt;a)?b&quot;)
then @start_pos and @end_pos are set to -1 and %TRUE is returned.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> #GMatchInfo structure
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the subexpression
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> pointer to location where to store
the start position, or %NULL
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> pointer to location where to store
the end position, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the position was fetched, %FALSE otherwise.
If the position cannot be fetched, @start_pos and @end_pos
are left unchanged.

</return>
</function>

<function name="g_match_info_fetch_pos">
<description>
Retrieves the position in bytes of the @match_num'th capturing
parentheses. 0 is the full text of the match, 1 is the first
paren set, 2 the second, and so on.

If @match_num is a valid sub pattern but it didn't match anything
(e.g. sub pattern 1, matching &quot;b&quot; against &quot;(a)?b&quot;) then @start_pos
and @end_pos are set to -1 and %TRUE is returned.

If the match was obtained using the DFA algorithm, that is using
g_regex_match_all() or g_regex_match_all_full(), the retrieved
position is not that of a set of parentheses but that of a matched
substring. Substrings are matched in reverse order of length, so
0 is the longest match.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> #GMatchInfo structure
</parameter_description>
</parameter>
<parameter name="match_num">
<parameter_description> number of the sub expression
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> pointer to location where to store
the start position, or %NULL
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> pointer to location where to store
the end position, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the position was fetched, %FALSE otherwise. If
the position cannot be fetched, @start_pos and @end_pos are left
unchanged

</return>
</function>

<function name="g_match_info_free">
<description>
If @match_info is not %NULL, calls g_match_info_unref(); otherwise does
nothing.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_match_info_get_match_count">
<description>
Retrieves the number of matched substrings (including substring 0,
that is the whole matched text), so 1 is returned if the pattern
has no substrings in it and 0 is returned if the match failed.

If the last match was obtained using the DFA algorithm, that is
using g_regex_match_all() or g_regex_match_all_full(), the retrieved
count is not that of the number of capturing parentheses but that of
the number of matched substrings.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo structure
</parameter_description>
</parameter>
</parameters>
<return> Number of matched substrings, or -1 if an error occurred

</return>
</function>

<function name="g_match_info_get_regex">
<description>
Returns #GRegex object used in @match_info. It belongs to Glib
and must not be freed. Use g_regex_ref() if you need to keep it
after you free @match_info object.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo
</parameter_description>
</parameter>
</parameters>
<return> #GRegex object used in @match_info

</return>
</function>

<function name="g_match_info_get_string">
<description>
Returns the string searched with @match_info. This is the
string passed to g_regex_match() or g_regex_replace() so
you may not free it before calling this function.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo
</parameter_description>
</parameter>
</parameters>
<return> the string searched with @match_info

</return>
</function>

<function name="g_match_info_is_partial_match">
<description>
Usually if the string passed to g_regex_match*() matches as far as
it goes, but is too short to match the entire pattern, %FALSE is
returned. There are circumstances where it might be helpful to
distinguish this case from other cases in which there is no match.

Consider, for example, an application where a human is required to
type in data for a field with specific formatting requirements. An
example might be a date in the form ddmmmyy, defined by the pattern
&quot;^\d?\d(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\d\d$&quot;.
If the application sees the user’s keystrokes one by one, and can
check that what has been typed so far is potentially valid, it is
able to raise an error as soon as a mistake is made.

GRegex supports the concept of partial matching by means of the
#G_REGEX_MATCH_PARTIAL_SOFT and #G_REGEX_MATCH_PARTIAL_HARD flags.
When they are used, the return code for
g_regex_match() or g_regex_match_full() is, as usual, %TRUE
for a complete match, %FALSE otherwise. But, when these functions
return %FALSE, you can check if the match was partial calling
g_match_info_is_partial_match().

The difference between #G_REGEX_MATCH_PARTIAL_SOFT and 
#G_REGEX_MATCH_PARTIAL_HARD is that when a partial match is encountered
with #G_REGEX_MATCH_PARTIAL_SOFT, matching continues to search for a
possible complete match, while with #G_REGEX_MATCH_PARTIAL_HARD matching
stops at the partial match.
When both #G_REGEX_MATCH_PARTIAL_SOFT and #G_REGEX_MATCH_PARTIAL_HARD
are set, the latter takes precedence.

There were formerly some restrictions on the pattern for partial matching.
The restrictions no longer apply.

See pcrepartial(3) for more information on partial matching.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo structure
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the match was partial, %FALSE otherwise

</return>
</function>

<function name="g_match_info_matches">
<description>
Returns whether the previous match operation succeeded.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo structure
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the previous match operation succeeded,
%FALSE otherwise

</return>
</function>

<function name="g_match_info_next">
<description>
Scans for the next match using the same parameters of the previous
call to g_regex_match_full() or g_regex_match() that returned
@match_info.

The match is done on the string passed to the match function, so you
cannot free it before calling this function.

Since: 2.14

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo structure
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is the string matched, %FALSE otherwise

</return>
</function>

<function name="g_match_info_ref">
<description>
Increases reference count of @match_info by 1.

Since: 2.30

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo
</parameter_description>
</parameter>
</parameters>
<return> @match_info

</return>
</function>

<function name="g_match_info_unref">
<description>
Decreases reference count of @match_info by 1. When reference count drops
to zero, it frees all the memory associated with the match_info structure.

Since: 2.30

</description>
<parameters>
<parameter name="match_info">
<parameter_description> a #GMatchInfo
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mem_gc_friendly">
<description>
This variable is %TRUE if the `G_DEBUG` environment variable
includes the key `gc-friendly`.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_mem_is_system_malloc">
<description>
Checks whether the allocator used by g_malloc() is the system's
malloc implementation. If it returns %TRUE memory allocated with
malloc() can be used interchangeable with memory allocated using g_malloc().
This function is useful for avoiding an extra copy of allocated memory returned
by a non-GLib-based API.

Deprecated: 2.46: GLib always uses the system malloc, so this function always
returns %TRUE.

</description>
<parameters>
</parameters>
<return> if %TRUE, malloc() and g_malloc() can be mixed.

</return>
</function>

<function name="g_mem_profile">
<description>
GLib used to support some tools for memory profiling, but this
no longer works. There are many other useful tools for memory
profiling these days which can be used instead.

Deprecated: 2.46: Use other memory profiling tools instead

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_mem_set_vtable">
<description>
This function used to let you override the memory allocation function.
However, its use was incompatible with the use of global constructors
in GLib and GIO, because those use the GLib allocators before main is
reached. Therefore this function is now deprecated and is just a stub.

Deprecated: 2.46: This function now does nothing. Use other memory
profiling tools instead

</description>
<parameters>
<parameter name="vtable">
<parameter_description> table of memory allocation routines.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_memdup">
<description>
Allocates @byte_size bytes of memory, and copies @byte_size bytes into it
from @mem. If @mem is %NULL it returns %NULL.


</description>
<parameters>
<parameter name="mem">
<parameter_description> the memory to copy.
</parameter_description>
</parameter>
<parameter name="byte_size">
<parameter_description> the number of bytes to copy.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly-allocated copy of the memory, or %NULL if @mem
is %NULL.
</return>
</function>

<function name="g_memmove">
<description>
Copies a block of memory @len bytes long, from @src to @dest.
The source and destination areas may overlap.

Deprecated:2.40: Just use memmove().

</description>
<parameters>
<parameter name="dest">
<parameter_description> the destination address to copy the bytes to.
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> the source address to copy the bytes from.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of bytes to copy.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_message">
<description>
A convenience function/macro to log a normal message.

If g_log_default_handler() is used as the log handler function, a new-line
character will automatically be appended to @..., and need not be entered
manually.

If structured logging is enabled, this will use g_log_structured();
otherwise it will use g_log(). See
[Using Structured Logging][using-structured-logging].

</description>
<parameters>
<parameter name="Varargs">
<parameter_description> format string, followed by parameters to insert
into the format string (as with printf())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mkdir">
<description>
A wrapper for the POSIX mkdir() function. The mkdir() function 
attempts to create a directory with the given name and permissions.
The mode argument is ignored on Windows.

See your C library manual for more details about mkdir().

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> permissions to use for the newly created directory
</parameter_description>
</parameter>
</parameters>
<return> 0 if the directory was successfully created, -1 if an error 
occurred

</return>
</function>

<function name="g_mkdir_with_parents">
<description>
Create a directory if it doesn't already exist. Create intermediate
parent directories as needed, too.

Since: 2.8

</description>
<parameters>
<parameter name="pathname">
<parameter_description> a pathname in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> permissions to use for newly created directories
</parameter_description>
</parameter>
</parameters>
<return> 0 if the directory already exists, or was successfully
created. Returns -1 if an error occurred, with errno set.

</return>
</function>

<function name="g_mkdtemp">
<description>
Creates a temporary directory. See the mkdtemp() documentation
on most UNIX-like systems.

The parameter is a string that should follow the rules for
mkdtemp() templates, i.e. contain the string &quot;XXXXXX&quot;.
g_mkdtemp() is slightly more flexible than mkdtemp() in that the
sequence does not have to occur at the very end of the template.
The X string will be modified to form the name of a directory that
didn't exist.
The string should be in the GLib file name encoding. Most importantly,
on Windows it should be in UTF-8.

If you are going to be creating a temporary directory inside the
directory returned by g_get_tmp_dir(), you might want to use
g_dir_make_tmp() instead.

Since: 2.30

</description>
<parameters>
<parameter name="tmpl">
<parameter_description> template directory name
</parameter_description>
</parameter>
</parameters>
<return> A pointer to @tmpl, which has been
modified to hold the directory name.  In case of errors, %NULL is
returned and %errno will be set.

</return>
</function>

<function name="g_mkdtemp_full">
<description>
Creates a temporary directory. See the mkdtemp() documentation
on most UNIX-like systems.

The parameter is a string that should follow the rules for
mkdtemp() templates, i.e. contain the string &quot;XXXXXX&quot;.
g_mkdtemp_full() is slightly more flexible than mkdtemp() in that the
sequence does not have to occur at the very end of the template
and you can pass a @mode. The X string will be modified to form
the name of a directory that didn't exist. The string should be
in the GLib file name encoding. Most importantly, on Windows it
should be in UTF-8.

If you are going to be creating a temporary directory inside the
directory returned by g_get_tmp_dir(), you might want to use
g_dir_make_tmp() instead.

Since: 2.30

</description>
<parameters>
<parameter name="tmpl">
<parameter_description> template directory name
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> permissions to create the temporary directory with
</parameter_description>
</parameter>
</parameters>
<return> A pointer to @tmpl, which has been
modified to hold the directory name. In case of errors, %NULL is
returned, and %errno will be set.

</return>
</function>

<function name="g_mkstemp">
<description>
Opens a temporary file. See the mkstemp() documentation
on most UNIX-like systems.

The parameter is a string that should follow the rules for
mkstemp() templates, i.e. contain the string &quot;XXXXXX&quot;.
g_mkstemp() is slightly more flexible than mkstemp() in that the
sequence does not have to occur at the very end of the template.
The X string will be modified to form the name of a file that
didn't exist. The string should be in the GLib file name encoding.
Most importantly, on Windows it should be in UTF-8.


</description>
<parameters>
<parameter name="tmpl">
<parameter_description> template filename
</parameter_description>
</parameter>
</parameters>
<return> A file handle (as from open()) to the file
opened for reading and writing. The file is opened in binary
mode on platforms where there is a difference. The file handle
should be closed with close(). In case of errors, -1 is
returned and %errno will be set.
</return>
</function>

<function name="g_mkstemp_full">
<description>
Opens a temporary file. See the mkstemp() documentation
on most UNIX-like systems.

The parameter is a string that should follow the rules for
mkstemp() templates, i.e. contain the string &quot;XXXXXX&quot;.
g_mkstemp_full() is slightly more flexible than mkstemp()
in that the sequence does not have to occur at the very end of the
template and you can pass a @mode and additional @flags. The X
string will be modified to form the name of a file that didn't exist.
The string should be in the GLib file name encoding. Most importantly,
on Windows it should be in UTF-8.

Since: 2.22

</description>
<parameters>
<parameter name="tmpl">
<parameter_description> template filename
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags to pass to an open() call in addition to O_EXCL
and O_CREAT, which are passed automatically
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> permissions to create the temporary file with
</parameter_description>
</parameter>
</parameters>
<return> A file handle (as from open()) to the file
opened for reading and writing. The file handle should be
closed with close(). In case of errors, -1 is returned
and %errno will be set.

</return>
</function>

<function name="g_module_build_path">
<description>
A portable way to build the filename of a module. The platform-specific
prefix and suffix are added to the filename, if needed, and the result
is added to the directory, using the correct separator character.

The directory should specify the directory where the module can be found.
It can be %NULL or an empty string to indicate that the module is in a
standard platform-specific directory, though this is not recommended
since the wrong module may be found.

For example, calling g_module_build_path() on a Linux system with a
@directory of `/lib` and a @module_name of &quot;mylibrary&quot; will return
`/lib/libmylibrary.so`. On a Windows system, using `\Windows` as the
directory it will return `\Windows\mylibrary.dll`.


</description>
<parameters>
<parameter name="directory">
<parameter_description> the directory where the module is. This can be
%NULL or the empty string to indicate that the standard platform-specific
directories will be used, though that is not recommended
</parameter_description>
</parameter>
<parameter name="module_name">
<parameter_description> the name of the module
</parameter_description>
</parameter>
</parameters>
<return> the complete path of the module, including the standard library
prefix and suffix. This should be freed when no longer needed
</return>
</function>

<function name="g_module_close">
<description>
Closes a module.


</description>
<parameters>
<parameter name="module">
<parameter_description> a #GModule to close
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success
</return>
</function>

<function name="g_module_error">
<description>
Gets a string describing the last module error.


</description>
<parameters>
</parameters>
<return> a string describing the last module error
</return>
</function>

<function name="g_module_make_resident">
<description>
Ensures that a module will never be unloaded.
Any future g_module_close() calls on the module will be ignored.

</description>
<parameters>
<parameter name="module">
<parameter_description> a #GModule to make permanently resident
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_module_name">
<description>
Returns the filename that the module was opened with.

If @module refers to the application itself, &quot;main&quot; is returned.


</description>
<parameters>
<parameter name="module">
<parameter_description> a #GModule
</parameter_description>
</parameter>
</parameters>
<return> the filename of the module
</return>
</function>

<function name="g_module_open">
<description>
Opens a module. If the module has already been opened,
its reference count is incremented.

First of all g_module_open() tries to open @file_name as a module.
If that fails and @file_name has the &quot;.la&quot;-suffix (and is a libtool
archive) it tries to open the corresponding module. If that fails
and it doesn't have the proper module suffix for the platform
(#G_MODULE_SUFFIX), this suffix will be appended and the corresponding
module will be opended. If that fails and @file_name doesn't have the
&quot;.la&quot;-suffix, this suffix is appended and g_module_open() tries to open
the corresponding module. If eventually that fails as well, %NULL is
returned.


</description>
<parameters>
<parameter name="file_name">
<parameter_description> the name of the file containing the module, or %NULL
to obtain a #GModule representing the main program itself
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags used for opening the module. This can be the
logical OR of any of the #GModuleFlags
</parameter_description>
</parameter>
</parameters>
<return> a #GModule on success, or %NULL on failure
</return>
</function>

<function name="g_module_supported">
<description>
Checks if modules are supported on the current platform.


</description>
<parameters>
</parameters>
<return> %TRUE if modules are supported
</return>
</function>

<function name="g_module_symbol">
<description>
Gets a symbol pointer from a module, such as one exported
by #G_MODULE_EXPORT. Note that a valid symbol can be %NULL.


</description>
<parameters>
<parameter name="module">
<parameter_description> a #GModule
</parameter_description>
</parameter>
<parameter name="symbol_name">
<parameter_description> the name of the symbol to find
</parameter_description>
</parameter>
<parameter name="symbol">
<parameter_description> returns the pointer to the symbol value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success
</return>
</function>

<function name="g_mutex_clear">
<description>
Frees the resources allocated to a mutex with g_mutex_init().

This function should not be used with a #GMutex that has been
statically allocated.

Calling g_mutex_clear() on a locked mutex leads to undefined
behaviour.

Sine: 2.32

</description>
<parameters>
<parameter name="mutex">
<parameter_description> an initialized #GMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mutex_free">
<description>
Destroys a @mutex that has been created with g_mutex_new().

Calling g_mutex_free() on a locked mutex may result
in undefined behaviour.

Deprecated: 2.32: GMutex can now be statically allocated, or embedded
in structures and initialised with g_mutex_init().

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mutex_init">
<description>
Initializes a #GMutex so that it can be used.

This function is useful to initialize a mutex that has been
allocated on the stack, or as part of a larger structure.
It is not necessary to initialize a mutex that has been
statically allocated.

|[&lt;!-- language=&quot;C&quot; --&gt; 
typedef struct {
GMutex m;
...
} Blob;

Blob *b;

b = g_new (Blob, 1);
g_mutex_init (&amp;b-&gt;m);
]|

To undo the effect of g_mutex_init() when a mutex is no longer
needed, use g_mutex_clear().

Calling g_mutex_init() on an already initialized #GMutex leads
to undefined behaviour.

Since: 2.32

</description>
<parameters>
<parameter name="mutex">
<parameter_description> an uninitialized #GMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mutex_lock">
<description>
Locks @mutex. If @mutex is already locked by another thread, the
current thread will block until @mutex is unlocked by the other
thread.

#GMutex is neither guaranteed to be recursive nor to be
non-recursive.  As such, calling g_mutex_lock() on a #GMutex that has
already been locked by the same thread results in undefined behaviour
(including but not limited to deadlocks).

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mutex_locker_free">
<description>
Unlock @locker's mutex. See g_mutex_locker_new() for details.

Since: 2.44

</description>
<parameters>
<parameter name="locker">
<parameter_description> a GMutexLocker
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mutex_locker_new">
<description>
Lock @mutex and return a new #GMutexLocker. Unlock with
g_mutex_locker_free(). Using g_mutex_unlock() on @mutex
while a #GMutexLocker exists can lead to undefined behaviour.

This is intended to be used with g_autoptr().  Note that g_autoptr()
is only available when using GCC or clang, so the following example
will only work with those compilers:
|[
typedef struct
{
...
GMutex mutex;
...
} MyObject;

static void
my_object_do_stuff (MyObject *self)
{
g_autoptr(GMutexLocker) locker = g_mutex_locker_new (&amp;self-&gt;mutex);

// Code with mutex locked here

if (cond)
// No need to unlock
return;

// Optionally early unlock
g_clear_pointer (&amp;locker, g_mutex_locker_free);

// Code with mutex unlocked here
}
]|

Since: 2.44

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a mutex to lock
</parameter_description>
</parameter>
</parameters>
<return> a #GMutexLocker
</return>
</function>

<function name="g_mutex_new">
<description>
Allocates and initializes a new #GMutex.

Deprecated: 2.32: GMutex can now be statically allocated, or embedded
in structures and initialised with g_mutex_init().

</description>
<parameters>
</parameters>
<return> a newly allocated #GMutex. Use g_mutex_free() to free

</return>
</function>

<function name="g_mutex_trylock">
<description>
Tries to lock @mutex. If @mutex is already locked by another thread,
it immediately returns %FALSE. Otherwise it locks @mutex and returns
%TRUE.

#GMutex is neither guaranteed to be recursive nor to be
non-recursive.  As such, calling g_mutex_lock() on a #GMutex that has
already been locked by the same thread results in undefined behaviour
(including but not limited to deadlocks or arbitrary return values).


</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GMutex
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mutex could be locked
</return>
</function>

<function name="g_mutex_unlock">
<description>
Unlocks @mutex. If another thread is blocked in a g_mutex_lock()
call for @mutex, it will become unblocked and can lock @mutex itself.

Calling g_mutex_unlock() on a mutex that is not locked by the
current thread leads to undefined behaviour.

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_new">
<description>
Allocates @n_structs elements of type @struct_type.
The returned pointer is cast to a pointer to the given type.
If @n_structs is 0 it returns %NULL.
Care is taken to avoid overflow when calculating the size of the allocated block.

Since the returned pointer is already casted to the right type,
it is normally unnecessary to cast it explicitly, and doing
so might hide memory allocation errors.


</description>
<parameters>
<parameter name="struct_type">
<parameter_description> the type of the elements to allocate
</parameter_description>
</parameter>
<parameter name="n_structs">
<parameter_description> the number of elements to allocate
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated memory, cast to a pointer to @struct_type
</return>
</function>

<function name="g_new0">
<description>
Allocates @n_structs elements of type @struct_type, initialized to 0's.
The returned pointer is cast to a pointer to the given type.
If @n_structs is 0 it returns %NULL.
Care is taken to avoid overflow when calculating the size of the allocated block.

Since the returned pointer is already casted to the right type,
it is normally unnecessary to cast it explicitly, and doing
so might hide memory allocation errors.


</description>
<parameters>
<parameter name="struct_type">
<parameter_description> the type of the elements to allocate.
</parameter_description>
</parameter>
<parameter name="n_structs">
<parameter_description> the number of elements to allocate.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated memory, cast to a pointer to @struct_type.
</return>
</function>

<function name="g_newa">
<description>
Wraps g_alloca() in a more typesafe manner.


</description>
<parameters>
<parameter name="struct_type">
<parameter_description> Type of memory chunks to be allocated
</parameter_description>
</parameter>
<parameter name="n_structs">
<parameter_description> Number of chunks to be allocated
</parameter_description>
</parameter>
</parameters>
<return> Pointer to stack space for @n_structs chunks of type @struct_type
</return>
</function>

<function name="g_node_append">
<description>
Inserts a #GNode as the last child of the given parent.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the #GNode to place the new #GNode under
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the #GNode to insert
</parameter_description>
</parameter>
</parameters>
<return> the inserted #GNode
</return>
</function>

<function name="g_node_append_data">
<description>
Inserts a new #GNode as the last child of the given parent.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the #GNode to place the new #GNode under
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new #GNode
</parameter_description>
</parameter>
</parameters>
<return> the new #GNode
</return>
</function>

<function name="g_node_child_index">
<description>
Gets the position of the first child of a #GNode 
which contains the given data.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to find
</parameter_description>
</parameter>
</parameters>
<return> the index of the child of @node which contains 
@data, or -1 if the data is not found
</return>
</function>

<function name="g_node_child_position">
<description>
Gets the position of a #GNode with respect to its siblings.
@child must be a child of @node. The first child is numbered 0, 
the second 1, and so on.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @node
</parameter_description>
</parameter>
</parameters>
<return> the position of @child with respect to its siblings
</return>
</function>

<function name="g_node_children_foreach">
<description>
Calls a function for each of the children of a #GNode. Note that it
doesn't descend beneath the child nodes. @func must not do anything
that would modify the structure of the tree.

</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> which types of children are to be visited, one of 
%G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each visited node
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_node_copy">
<description>
Recursively copies a #GNode (but does not deep-copy the data inside the 
nodes, see g_node_copy_deep() if you need that).


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> a new #GNode containing the same data pointers
</return>
</function>

<function name="g_node_copy_deep">
<description>
Recursively copies a #GNode and its data.

Since: 2.4

</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
<parameter name="copy_func">
<parameter_description> the function which is called to copy the data inside each node,
or %NULL to use the original data.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @copy_func
</parameter_description>
</parameter>
</parameters>
<return> a new #GNode containing copies of the data in @node.

</return>
</function>

<function name="g_node_depth">
<description>
Gets the depth of a #GNode.

If @node is %NULL the depth is 0. The root node has a depth of 1.
For the children of the root node the depth is 2. And so on.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> the depth of the #GNode
</return>
</function>

<function name="g_node_destroy">
<description>
Removes @root and its children from the tree, freeing any memory
allocated.

</description>
<parameters>
<parameter name="root">
<parameter_description> the root of the tree/subtree to destroy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_node_find">
<description>
Finds a #GNode in a tree.


</description>
<parameters>
<parameter name="root">
<parameter_description> the root #GNode of the tree to search
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> the order in which nodes are visited - %G_IN_ORDER, 
%G_PRE_ORDER, %G_POST_ORDER, or %G_LEVEL_ORDER
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> which types of children are to be searched, one of 
%G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to find
</parameter_description>
</parameter>
</parameters>
<return> the found #GNode, or %NULL if the data is not found
</return>
</function>

<function name="g_node_find_child">
<description>
Finds the first child of a #GNode with the given data.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> which types of children are to be searched, one of 
%G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to find
</parameter_description>
</parameter>
</parameters>
<return> the found child #GNode, or %NULL if the data is not found
</return>
</function>

<function name="g_node_first_child">
<description>
Gets the first child of a #GNode.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> the first child of @node, or %NULL if @node is %NULL 
or has no children
</return>
</function>

<function name="g_node_first_sibling">
<description>
Gets the first sibling of a #GNode.
This could possibly be the node itself.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> the first sibling of @node
</return>
</function>

<function name="g_node_get_root">
<description>
Gets the root of a tree.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> the root of the tree
</return>
</function>

<function name="g_node_insert">
<description>
Inserts a #GNode beneath the parent at the given position.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the #GNode to place @node under
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to place @node at, with respect to its siblings
If position is -1, @node is inserted as the last child of @parent
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the #GNode to insert
</parameter_description>
</parameter>
</parameters>
<return> the inserted #GNode
</return>
</function>

<function name="g_node_insert_after">
<description>
Inserts a #GNode beneath the parent after the given sibling.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the #GNode to place @node under
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the sibling #GNode to place @node after. 
If sibling is %NULL, the node is inserted as the first child of @parent.
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the #GNode to insert
</parameter_description>
</parameter>
</parameters>
<return> the inserted #GNode
</return>
</function>

<function name="g_node_insert_before">
<description>
Inserts a #GNode beneath the parent before the given sibling.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the #GNode to place @node under
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the sibling #GNode to place @node before. 
If sibling is %NULL, the node is inserted as the last child of @parent.
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the #GNode to insert
</parameter_description>
</parameter>
</parameters>
<return> the inserted #GNode
</return>
</function>

<function name="g_node_insert_data">
<description>
Inserts a new #GNode at the given position.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the #GNode to place the new #GNode under
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to place the new #GNode at. If position is -1, 
the new #GNode is inserted as the last child of @parent
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new #GNode
</parameter_description>
</parameter>
</parameters>
<return> the new #GNode
</return>
</function>

<function name="g_node_insert_data_after">
<description>
Inserts a new #GNode after the given sibling.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the #GNode to place the new #GNode under
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the sibling #GNode to place the new #GNode after
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new #GNode
</parameter_description>
</parameter>
</parameters>
<return> the new #GNode
</return>
</function>

<function name="g_node_insert_data_before">
<description>
Inserts a new #GNode before the given sibling.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the #GNode to place the new #GNode under
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the sibling #GNode to place the new #GNode before
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new #GNode
</parameter_description>
</parameter>
</parameters>
<return> the new #GNode
</return>
</function>

<function name="g_node_is_ancestor">
<description>
Returns %TRUE if @node is an ancestor of @descendant.
This is true if node is the parent of @descendant, 
or if node is the grandparent of @descendant etc.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
<parameter name="descendant">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @node is an ancestor of @descendant
</return>
</function>

<function name="g_node_last_child">
<description>
Gets the last child of a #GNode.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode (must not be %NULL)
</parameter_description>
</parameter>
</parameters>
<return> the last child of @node, or %NULL if @node has no children
</return>
</function>

<function name="g_node_last_sibling">
<description>
Gets the last sibling of a #GNode.
This could possibly be the node itself.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> the last sibling of @node
</return>
</function>

<function name="g_node_max_height">
<description>
Gets the maximum height of all branches beneath a #GNode.
This is the maximum distance from the #GNode to all leaf nodes.

If @root is %NULL, 0 is returned. If @root has no children, 
1 is returned. If @root has children, 2 is returned. And so on.


</description>
<parameters>
<parameter name="root">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> the maximum height of the tree beneath @root
</return>
</function>

<function name="g_node_n_children">
<description>
Gets the number of children of a #GNode.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> the number of children of @node
</return>
</function>

<function name="g_node_n_nodes">
<description>
Gets the number of nodes in a tree.


</description>
<parameters>
<parameter name="root">
<parameter_description> a #GNode
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> which types of children are to be counted, one of 
%G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
</parameter_description>
</parameter>
</parameters>
<return> the number of nodes in the tree
</return>
</function>

<function name="g_node_new">
<description>
Creates a new #GNode containing the given data.
Used to create the first node in a tree.


</description>
<parameters>
<parameter name="data">
<parameter_description> the data of the new node
</parameter_description>
</parameter>
</parameters>
<return> a new #GNode
</return>
</function>

<function name="g_node_next_sibling">
<description>
Gets the next sibling of a #GNode.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> the next sibling of @node, or %NULL if @node is the last node
or %NULL
</return>
</function>

<function name="g_node_nth_child">
<description>
Gets a child of a #GNode, using the given index.
The first child is at index 0. If the index is 
too big, %NULL is returned.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the index of the desired child
</parameter_description>
</parameter>
</parameters>
<return> the child of @node at index @n
</return>
</function>

<function name="g_node_prepend">
<description>
Inserts a #GNode as the first child of the given parent.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the #GNode to place the new #GNode under
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> the #GNode to insert
</parameter_description>
</parameter>
</parameters>
<return> the inserted #GNode
</return>
</function>

<function name="g_node_prepend_data">
<description>
Inserts a new #GNode as the first child of the given parent.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the #GNode to place the new #GNode under
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new #GNode
</parameter_description>
</parameter>
</parameters>
<return> the new #GNode
</return>
</function>

<function name="g_node_prev_sibling">
<description>
Gets the previous sibling of a #GNode.


</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode
</parameter_description>
</parameter>
</parameters>
<return> the previous sibling of @node, or %NULL if @node is the first
node or %NULL
</return>
</function>

<function name="g_node_reverse_children">
<description>
Reverses the order of the children of a #GNode.
(It doesn't change the order of the grandchildren.)

</description>
<parameters>
<parameter name="node">
<parameter_description> a #GNode.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_node_traverse">
<description>
Traverses a tree starting at the given root #GNode.
It calls the given function for each node visited.
The traversal can be halted at any point by returning %TRUE from @func.
@func must not do anything that would modify the structure of the tree.

</description>
<parameters>
<parameter name="root">
<parameter_description> the root #GNode of the tree to traverse
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> the order in which nodes are visited - %G_IN_ORDER, 
%G_PRE_ORDER, %G_POST_ORDER, or %G_LEVEL_ORDER.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> which types of children are to be visited, one of 
%G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
</parameter_description>
</parameter>
<parameter name="max_depth">
<parameter_description> the maximum depth of the traversal. Nodes below this
depth will not be visited. If max_depth is -1 all nodes in 
the tree are visited. If depth is 1, only the root is visited. 
If depth is 2, the root and its children are visited. And so on.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each visited #GNode
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_node_unlink">
<description>
Unlinks a #GNode from a tree, resulting in two separate trees.

</description>
<parameters>
<parameter name="node">
<parameter_description> the #GNode to unlink, which becomes the root of a new tree
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_ntohl">
<description>
Converts a 32-bit integer value from network to host byte order.


</description>
<parameters>
<parameter name="val">
<parameter_description> a 32-bit integer value in network byte order
</parameter_description>
</parameter>
</parameters>
<return> @val converted to host byte order.
</return>
</function>

<function name="g_ntohs">
<description>
Converts a 16-bit integer value from network to host byte order.


</description>
<parameters>
<parameter name="val">
<parameter_description> a 16-bit integer value in network byte order
</parameter_description>
</parameter>
</parameters>
<return> @val converted to host byte order
</return>
</function>

<function name="g_nullify_pointer">
<description>
Set the pointer at the specified location to %NULL.

</description>
<parameters>
<parameter name="nullify_location">
<parameter_description> the memory address of the pointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_add_toggle_ref">
<description>
Increases the reference count of the object by one and sets a
callback to be called when all other references to the object are
dropped, or when this is already the last reference to the object
and another reference is established.

This functionality is intended for binding @object to a proxy
object managed by another memory manager. This is done with two
paired references: the strong reference added by
g_object_add_toggle_ref() and a reverse reference to the proxy
object which is either a strong reference or weak reference.

The setup is that when there are no other references to @object,
only a weak reference is held in the reverse direction from @object
to the proxy object, but when there are other references held to
@object, a strong reference is held. The @notify callback is called
when the reference from @object to the proxy object should be
&quot;toggled&quot; from strong to weak (@is_last_ref true) or weak to strong
(@is_last_ref false).

Since a (normal) reference must be held to the object before
calling g_object_add_toggle_ref(), the initial state of the reverse
link is always strong.

Multiple toggle references may be added to the same gobject,
however if there are multiple toggle references to an object, none
of them will ever be notified until all but one are removed.  For
this reason, you should only ever use a toggle reference if there
is important state in the proxy object.

Since: 2.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a function to call when this reference is the
last reference to the object, or is no longer
the last reference.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @notify
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_add_weak_pointer">
<description>
Adds a weak reference from weak_pointer to @object to indicate that
the pointer located at @weak_pointer_location is only valid during
the lifetime of @object. When the @object is finalized,
@weak_pointer will be set to %NULL.

Note that as with g_object_weak_ref(), the weak references created by
this method are not thread-safe: they cannot safely be used in one
thread if the object's last g_object_unref() might happen in another
thread. Use #GWeakRef if thread-safety is required.

</description>
<parameters>
<parameter name="object">
<parameter_description> The object that should be weak referenced.
</parameter_description>
</parameter>
<parameter name="weak_pointer_location">
<parameter_description> The memory address
of a pointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_bind_property">
<description>
Creates a binding between @source_property on @source and @target_property
on @target. Whenever the @source_property is changed the @target_property is
updated using the same value. For instance:

|[
g_object_bind_property (action, &quot;active&quot;, widget, &quot;sensitive&quot;, 0);
]|

Will result in the &quot;sensitive&quot; property of the widget #GObject instance to be
updated with the same value of the &quot;active&quot; property of the action #GObject
instance.

If @flags contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
if @target_property on @target changes then the @source_property on @source
will be updated as well.

The binding will automatically be removed when either the @source or the
@target instances are finalized. To remove the binding without affecting the
@source and the @target you can just call g_object_unref() on the returned
#GBinding instance.

A #GObject can have multiple bindings.

Since: 2.26

</description>
<parameters>
<parameter name="source">
<parameter_description> the source #GObject
</parameter_description>
</parameter>
<parameter name="source_property">
<parameter_description> the property on @source to bind
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the target #GObject
</parameter_description>
</parameter>
<parameter name="target_property">
<parameter_description> the property on @target to bind
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags to pass to #GBinding
</parameter_description>
</parameter>
</parameters>
<return> the #GBinding instance representing the
binding between the two #GObject instances. The binding is released
whenever the #GBinding reference count reaches zero.

</return>
</function>

<function name="g_object_bind_property_full">
<description>
Complete version of g_object_bind_property().

Creates a binding between @source_property on @source and @target_property
on @target, allowing you to set the transformation functions to be used by
the binding.

If @flags contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
if @target_property on @target changes then the @source_property on @source
will be updated as well. The @transform_from function is only used in case
of bidirectional bindings, otherwise it will be ignored

The binding will automatically be removed when either the @source or the
@target instances are finalized. To remove the binding without affecting the
@source and the @target you can just call g_object_unref() on the returned
#GBinding instance.

A #GObject can have multiple bindings.

The same @user_data parameter will be used for both @transform_to
and @transform_from transformation functions; the @notify function will
be called once, when the binding is removed. If you need different data
for each transformation function, please use
g_object_bind_property_with_closures() instead.

Since: 2.26

</description>
<parameters>
<parameter name="source">
<parameter_description> the source #GObject
</parameter_description>
</parameter>
<parameter name="source_property">
<parameter_description> the property on @source to bind
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the target #GObject
</parameter_description>
</parameter>
<parameter name="target_property">
<parameter_description> the property on @target to bind
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags to pass to #GBinding
</parameter_description>
</parameter>
<parameter name="transform_to">
<parameter_description> the transformation function
from the @source to the @target, or %NULL to use the default
</parameter_description>
</parameter>
<parameter name="transform_from">
<parameter_description> the transformation function
from the @target to the @source, or %NULL to use the default
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> custom data to be passed to the transformation functions,
or %NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a function to call when disposing the binding, to free
resources used by the transformation functions, or %NULL if not required
</parameter_description>
</parameter>
</parameters>
<return> the #GBinding instance representing the
binding between the two #GObject instances. The binding is released
whenever the #GBinding reference count reaches zero.

</return>
</function>

<function name="g_object_bind_property_with_closures">
<description>
Creates a binding between @source_property on @source and @target_property
on @target, allowing you to set the transformation functions to be used by
the binding.

This function is the language bindings friendly version of
g_object_bind_property_full(), using #GClosures instead of
function pointers.

Since: 2.26

</description>
<parameters>
<parameter name="source">
<parameter_description> the source #GObject
</parameter_description>
</parameter>
<parameter name="source_property">
<parameter_description> the property on @source to bind
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the target #GObject
</parameter_description>
</parameter>
<parameter name="target_property">
<parameter_description> the property on @target to bind
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags to pass to #GBinding
</parameter_description>
</parameter>
<parameter name="transform_to">
<parameter_description> a #GClosure wrapping the transformation function
from the @source to the @target, or %NULL to use the default
</parameter_description>
</parameter>
<parameter name="transform_from">
<parameter_description> a #GClosure wrapping the transformation function
from the @target to the @source, or %NULL to use the default
</parameter_description>
</parameter>
</parameters>
<return> the #GBinding instance representing the
binding between the two #GObject instances. The binding is released
whenever the #GBinding reference count reaches zero.

</return>
</function>

<function name="g_object_class_find_property">
<description>
Looks up the #GParamSpec for a property of a class.


</description>
<parameters>
<parameter name="oclass">
<parameter_description> a #GObjectClass
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to look up
</parameter_description>
</parameter>
</parameters>
<return> the #GParamSpec for the property, or
%NULL if the class doesn't have a property of that name
</return>
</function>

<function name="g_object_class_install_properties">
<description>
Installs new properties from an array of #GParamSpecs.

All properties should be installed during the class initializer.  It
is possible to install properties after that, but doing so is not
recommend, and specifically, is not guaranteed to be thread-safe vs.
use of properties on the same type on other threads.

The property id of each property is the index of each #GParamSpec in
the @pspecs array.

The property id of 0 is treated specially by #GObject and it should not
be used to store a #GParamSpec.

This function should be used if you plan to use a static array of
#GParamSpecs and g_object_notify_by_pspec(). For instance, this
class initialization:

|[&lt;!-- language=&quot;C&quot; --&gt; 
enum {
PROP_0, PROP_FOO, PROP_BAR, N_PROPERTIES
};

static GParamSpec *obj_properties[N_PROPERTIES] = { NULL, };

static void
my_object_class_init (MyObjectClass *klass)
{
GObjectClass *gobject_class = G_OBJECT_CLASS (klass);

obj_properties[PROP_FOO] =
g_param_spec_int (&quot;foo&quot;, &quot;Foo&quot;, &quot;Foo&quot;,
-1, G_MAXINT,
0,
G_PARAM_READWRITE);

obj_properties[PROP_BAR] =
g_param_spec_string (&quot;bar&quot;, &quot;Bar&quot;, &quot;Bar&quot;,
NULL,
G_PARAM_READWRITE);

gobject_class-&gt;set_property = my_object_set_property;
gobject_class-&gt;get_property = my_object_get_property;
g_object_class_install_properties (gobject_class,
N_PROPERTIES,
obj_properties);
}
]|

allows calling g_object_notify_by_pspec() to notify of property changes:

|[&lt;!-- language=&quot;C&quot; --&gt; 
void
my_object_set_foo (MyObject *self, gint foo)
{
if (self-&gt;foo != foo)
{
self-&gt;foo = foo;
g_object_notify_by_pspec (G_OBJECT (self), obj_properties[PROP_FOO]);
}
}
]|

Since: 2.26

</description>
<parameters>
<parameter name="oclass">
<parameter_description> a #GObjectClass
</parameter_description>
</parameter>
<parameter name="n_pspecs">
<parameter_description> the length of the #GParamSpecs array
</parameter_description>
</parameter>
<parameter name="pspecs">
<parameter_description> the #GParamSpecs array
defining the new properties
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_class_install_property">
<description>
Installs a new property.

All properties should be installed during the class initializer.  It
is possible to install properties after that, but doing so is not
recommend, and specifically, is not guaranteed to be thread-safe vs.
use of properties on the same type on other threads.

Note that it is possible to redefine a property in a derived class,
by installing a property with the same name. This can be useful at times,
e.g. to change the range of allowed values or the default value.

</description>
<parameters>
<parameter name="oclass">
<parameter_description> a #GObjectClass
</parameter_description>
</parameter>
<parameter name="property_id">
<parameter_description> the id for the new property
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec for the new property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_class_list_properties">
<description>
Get an array of #GParamSpec* for all properties of a class.


</description>
<parameters>
<parameter name="oclass">
<parameter_description> a #GObjectClass
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> return location for the length of the returned array
</parameter_description>
</parameter>
</parameters>
<return> an array of
#GParamSpec* which should be freed after use
</return>
</function>

<function name="g_object_class_override_property">
<description>
Registers @property_id as referring to a property with the name
@name in a parent class or in an interface implemented by @oclass.
This allows this class to &quot;override&quot; a property implementation in
a parent class or to provide the implementation of a property from
an interface.

Internally, overriding is implemented by creating a property of type
#GParamSpecOverride; generally operations that query the properties of
the object class, such as g_object_class_find_property() or
g_object_class_list_properties() will return the overridden
property. However, in one case, the @construct_properties argument of
the @constructor virtual function, the #GParamSpecOverride is passed
instead, so that the @param_id field of the #GParamSpec will be
correct.  For virtually all uses, this makes no difference. If you
need to get the overridden property, you can call
g_param_spec_get_redirect_target().

Since: 2.4

</description>
<parameters>
<parameter name="oclass">
<parameter_description> a #GObjectClass
</parameter_description>
</parameter>
<parameter name="property_id">
<parameter_description> the new property ID
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of a property registered in a parent class or
in an interface of this class.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_connect">
<description>
A convenience function to connect multiple signals at once.

The signal specs expected by this function have the form
&quot;modifier::signal_name&quot;, where modifier can be one of the following:
* - signal: equivalent to g_signal_connect_data (..., NULL, 0)
- object-signal, object_signal: equivalent to g_signal_connect_object (..., 0)
- swapped-signal, swapped_signal: equivalent to g_signal_connect_data (..., NULL, G_CONNECT_SWAPPED)
- swapped_object_signal, swapped-object-signal: equivalent to g_signal_connect_object (..., G_CONNECT_SWAPPED)
- signal_after, signal-after: equivalent to g_signal_connect_data (..., NULL, G_CONNECT_AFTER)
- object_signal_after, object-signal-after: equivalent to g_signal_connect_object (..., G_CONNECT_AFTER)
- swapped_signal_after, swapped-signal-after: equivalent to g_signal_connect_data (..., NULL, G_CONNECT_SWAPPED | G_CONNECT_AFTER)
- swapped_object_signal_after, swapped-object-signal-after: equivalent to g_signal_connect_object (..., G_CONNECT_SWAPPED | G_CONNECT_AFTER)

|[&lt;!-- language=&quot;C&quot; --&gt; 
menu-&gt;toplevel = g_object_connect (g_object_new (GTK_TYPE_WINDOW,
&quot;type&quot;, GTK_WINDOW_POPUP,
&quot;child&quot;, menu,
NULL),
&quot;signal::event&quot;, gtk_menu_window_event, menu,
&quot;signal::size_request&quot;, gtk_menu_window_size_request, menu,
&quot;signal::destroy&quot;, gtk_widget_destroyed, &amp;menu-&gt;toplevel,
NULL);
]|


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="signal_spec">
<parameter_description> the spec for the first signal
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> #GCallback for the first signal, followed by data for the
first signal, followed optionally by more signal
spec/callback/data triples, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return> @object
</return>
</function>

<function name="g_object_disconnect">
<description>
A convenience function to disconnect multiple signals at once.

The signal specs expected by this function have the form
&quot;any_signal&quot;, which means to disconnect any signal with matching
callback and data, or &quot;any_signal::signal_name&quot;, which only
disconnects the signal named &quot;signal_name&quot;.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="signal_spec">
<parameter_description> the spec for the first signal
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> #GCallback for the first signal, followed by data for the first signal,
followed optionally by more signal spec/callback/data triples,
followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_dup_data">
<description>
This is a variant of g_object_get_data() which returns
a 'duplicate' of the value. @dup_func defines the
meaning of 'duplicate' in this context, it could e.g.
take a reference on a ref-counted object.

If the @key is not set on the object then @dup_func
will be called with a %NULL argument.

Note that @dup_func is called while user data of @object
is locked.

This function can be useful to avoid races when multiple
threads are using object data on the same key on the same
object.

Since: 2.34

</description>
<parameters>
<parameter name="object">
<parameter_description> the #GObject to store user data on
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a string, naming the user data pointer
</parameter_description>
</parameter>
<parameter name="dup_func">
<parameter_description> function to dup the value
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> passed as user_data to @dup_func
</parameter_description>
</parameter>
</parameters>
<return> the result of calling @dup_func on the value
associated with @key on @object, or %NULL if not set.
If @dup_func is %NULL, the value is returned
unmodified.

</return>
</function>

<function name="g_object_dup_qdata">
<description>
This is a variant of g_object_get_qdata() which returns
a 'duplicate' of the value. @dup_func defines the
meaning of 'duplicate' in this context, it could e.g.
take a reference on a ref-counted object.

If the @quark is not set on the object then @dup_func
will be called with a %NULL argument.

Note that @dup_func is called while user data of @object
is locked.

This function can be useful to avoid races when multiple
threads are using object data on the same key on the same
object.

Since: 2.34

</description>
<parameters>
<parameter name="object">
<parameter_description> the #GObject to store user data on
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> a #GQuark, naming the user data pointer
</parameter_description>
</parameter>
<parameter name="dup_func">
<parameter_description> function to dup the value
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> passed as user_data to @dup_func
</parameter_description>
</parameter>
</parameters>
<return> the result of calling @dup_func on the value
associated with @quark on @object, or %NULL if not set.
If @dup_func is %NULL, the value is returned
unmodified.

</return>
</function>

<function name="g_object_force_floating">
<description>
This function is intended for #GObject implementations to re-enforce
a [floating][floating-ref] object reference. Doing this is seldom
required: all #GInitiallyUnowneds are created with a floating reference
which usually just needs to be sunken by calling g_object_ref_sink().

Since: 2.10

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_freeze_notify">
<description>
Increases the freeze count on @object. If the freeze count is
non-zero, the emission of &quot;notify&quot; signals on @object is
stopped. The signals are queued until the freeze count is decreased
to zero. Duplicate notifications are squashed so that at most one
#GObject::notify signal is emitted for each property modified while the
object is frozen.

This is necessary for accessors that modify multiple properties to prevent
premature notification while the object is still being modified.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_get">
<description>
Gets properties of an object.

In general, a copy is made of the property contents and the caller
is responsible for freeing the memory in the appropriate manner for
the type, for instance by calling g_free() or g_object_unref().

Here is an example of using g_object_get() to get the contents
of three properties: an integer, a string and an object:
|[&lt;!-- language=&quot;C&quot; --&gt; 
gint intval;
gchar *strval;
GObject *objval;

g_object_get (my_object,
&quot;int-property&quot;, &amp;intval,
&quot;str-property&quot;, &amp;strval,
&quot;obj-property&quot;, &amp;objval,
NULL);

// Do something with intval, strval, objval

g_free (strval);
g_object_unref (objval);
]|

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of the first property to get
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> return location for the first property, followed optionally by more
name/return location pairs, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_get_data">
<description>
Gets a named field from the objects table of associations (see g_object_set_data()).


</description>
<parameters>
<parameter name="object">
<parameter_description> #GObject containing the associations
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> name of the key for that association
</parameter_description>
</parameter>
</parameters>
<return> the data if found,
or %NULL if no such data exists.
</return>
</function>

<function name="g_object_get_property">
<description>
Gets a property of an object. @value must have been initialized to the
expected type of the property (or a type to which the expected type can be
transformed) using g_value_init().

In general, a copy is made of the property contents and the caller is
responsible for freeing the memory by calling g_value_unset().

Note that g_object_get_property() is really intended for language
bindings, g_object_get() is much more convenient for C programming.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to get
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for the property value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_get_qdata">
<description>
This function gets back user data pointers stored via
g_object_set_qdata().


</description>
<parameters>
<parameter name="object">
<parameter_description> The GObject to get a stored user data pointer from
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> A #GQuark, naming the user data pointer
</parameter_description>
</parameter>
</parameters>
<return> The user data pointer set, or %NULL
</return>
</function>

<function name="g_object_get_valist">
<description>
Gets properties of an object.

In general, a copy is made of the property contents and the caller
is responsible for freeing the memory in the appropriate manner for
the type, for instance by calling g_free() or g_object_unref().

See g_object_get().

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of the first property to get
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> return location for the first property, followed optionally by more
name/return location pairs, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_getv">
<description>
Gets @n_properties properties for an @object.
Obtained properties will be set to @values. All properties must be valid.
Warnings will be emitted and undefined behaviour may result if invalid
properties are passed in.

Since: 2.54

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> the number of properties
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> the names of each property to get
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> the values of each property to get
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_interface_find_property">
<description>
Find the #GParamSpec with the given name for an
interface. Generally, the interface vtable passed in as @g_iface
will be the default vtable from g_type_default_interface_ref(), or,
if you know the interface has already been loaded,
g_type_default_interface_peek().

Since: 2.4


</description>
<parameters>
<parameter name="g_iface">
<parameter_description> any interface vtable for the
interface, or the default vtable for the interface
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> name of a property to lookup.
</parameter_description>
</parameter>
</parameters>
<return> the #GParamSpec for the property of the
interface with the name @property_name, or %NULL if no
such property exists.
</return>
</function>

<function name="g_object_interface_install_property">
<description>
Add a property to an interface; this is only useful for interfaces
that are added to GObject-derived types. Adding a property to an
interface forces all objects classes with that interface to have a
compatible property. The compatible property could be a newly
created #GParamSpec, but normally
g_object_class_override_property() will be used so that the object
class only needs to provide an implementation and inherits the
property description, default value, bounds, and so forth from the
interface property.

This function is meant to be called from the interface's default
vtable initialization function (the @class_init member of
#GTypeInfo.) It must not be called after after @class_init has
been called for any object types implementing this interface.

If @pspec is a floating reference, it will be consumed.

Since: 2.4

</description>
<parameters>
<parameter name="g_iface">
<parameter_description> any interface vtable for the
interface, or the default
vtable for the interface.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec for the new property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_interface_list_properties">
<description>
Lists the properties of an interface.Generally, the interface
vtable passed in as @g_iface will be the default vtable from
g_type_default_interface_ref(), or, if you know the interface has
already been loaded, g_type_default_interface_peek().

Since: 2.4


</description>
<parameters>
<parameter name="g_iface">
<parameter_description> any interface vtable for the
interface, or the default vtable for the interface
</parameter_description>
</parameter>
<parameter name="n_properties_p">
<parameter_description> location to store number of properties returned.
</parameter_description>
</parameter>
</parameters>
<return> a
pointer to an array of pointers to #GParamSpec
structures. The paramspecs are owned by GLib, but the
array should be freed with g_free() when you are done with
it.
</return>
</function>

<function name="g_object_is_floating">
<description>
Checks whether @object has a [floating][floating-ref] reference.

Since: 2.10


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @object has a floating reference
</return>
</function>

<function name="g_object_new">
<description>
Creates a new instance of a #GObject subtype and sets its properties.

Construction parameters (see #G_PARAM_CONSTRUCT, #G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.


</description>
<parameters>
<parameter name="object_type">
<parameter_description> the type id of the #GObject subtype to instantiate
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the value of the first property, followed optionally by more
name/value pairs, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new instance of
@object_type
</return>
</function>

<function name="g_object_new_valist">
<description>
Creates a new instance of a #GObject subtype and sets its properties.

Construction parameters (see #G_PARAM_CONSTRUCT, #G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.


</description>
<parameters>
<parameter name="object_type">
<parameter_description> the type id of the #GObject subtype to instantiate
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> the value of the first property, followed optionally by more
name/value pairs, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new instance of @object_type
</return>
</function>

<function name="g_object_new_with_properties">
<description>
Creates a new instance of a #GObject subtype and sets its properties using
the provided arrays. Both arrays must have exactly @n_properties elements,
and the names and values correspond by index.

Construction parameters (see %G_PARAM_CONSTRUCT, %G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.

Since: 2.54

</description>
<parameters>
<parameter name="object_type">
<parameter_description> the object type to instantiate
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> the number of properties
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> the names of each property to be set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> the values of each property to be set
</parameter_description>
</parameter>
</parameters>
<return> a new instance of
@object_type

</return>
</function>

<function name="g_object_newv">
<description>
Creates a new instance of a #GObject subtype and sets its properties.

Construction parameters (see #G_PARAM_CONSTRUCT, #G_PARAM_CONSTRUCT_ONLY)
which are not explicitly specified are set to their default values.

Deprecated: 2.54: Use g_object_new_with_properties() instead.
deprecated. See #GParameter for more information.

</description>
<parameters>
<parameter name="object_type">
<parameter_description> the type id of the #GObject subtype to instantiate
</parameter_description>
</parameter>
<parameter name="n_parameters">
<parameter_description> the length of the @parameters array
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> an array of #GParameter
</parameter_description>
</parameter>
</parameters>
<return> a new instance of
@object_type

</return>
</function>

<function name="g_object_notify">
<description>
Emits a &quot;notify&quot; signal for the property @property_name on @object.

When possible, eg. when signaling a property change from within the class
that registered the property, you should use g_object_notify_by_pspec()
instead.

Note that emission of the notify signal may be blocked with
g_object_freeze_notify(). In this case, the signal emissions are queued
and will be emitted (in reverse order) when g_object_thaw_notify() is
called.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of a property installed on the class of @object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_notify_by_pspec">
<description>
Emits a &quot;notify&quot; signal for the property specified by @pspec on @object.

This function omits the property name lookup, hence it is faster than
g_object_notify().

One way to avoid using g_object_notify() from within the
class that registered the properties, and using g_object_notify_by_pspec()
instead, is to store the GParamSpec used with
g_object_class_install_property() inside a static array, e.g.:

|[&lt;!-- language=&quot;C&quot; --&gt; 
enum
{
PROP_0,
PROP_FOO,
PROP_LAST
};

static GParamSpec *properties[PROP_LAST];

static void
my_object_class_init (MyObjectClass *klass)
{
properties[PROP_FOO] = g_param_spec_int (&quot;foo&quot;, &quot;Foo&quot;, &quot;The foo&quot;,
0, 100,
50,
G_PARAM_READWRITE);
g_object_class_install_property (gobject_class,
PROP_FOO,
properties[PROP_FOO]);
}
]|

and then notify a change on the &quot;foo&quot; property with:

|[&lt;!-- language=&quot;C&quot; --&gt; 
g_object_notify_by_pspec (self, properties[PROP_FOO]);
]|

Since: 2.26

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec of a property installed on the class of @object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_ref">
<description>
Increases the reference count of @object.

Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
of @object will be propagated to the return type (using the GCC typeof()
extension), so any casting the caller needs to do on the return type must be
explicit.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return> the same @object
</return>
</function>

<function name="g_object_ref_sink">
<description>
Increase the reference count of @object, and possibly remove the
[floating][floating-ref] reference, if @object has a floating reference.

In other words, if the object is floating, then this call &quot;assumes
ownership&quot; of the floating reference, converting it to a normal
reference by clearing the floating flag while leaving the reference
count unchanged.  If the object is not floating, then this call
adds a new normal reference increasing the reference count by one.

Since GLib 2.56, the type of @object will be propagated to the return type
under the same conditions as for g_object_ref().

Since: 2.10


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return> @object
</return>
</function>

<function name="g_object_remove_toggle_ref">
<description>
Removes a reference added with g_object_add_toggle_ref(). The
reference count of the object is decreased by one.

Since: 2.8

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a function to call when this reference is the
last reference to the object, or is no longer
the last reference.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @notify
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_remove_weak_pointer">
<description>
Removes a weak reference from @object that was previously added
using g_object_add_weak_pointer(). The @weak_pointer_location has
to match the one used with g_object_add_weak_pointer().

</description>
<parameters>
<parameter name="object">
<parameter_description> The object that is weak referenced.
</parameter_description>
</parameter>
<parameter name="weak_pointer_location">
<parameter_description> The memory address
of a pointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_replace_data">
<description>
Compares the user data for the key @key on @object with
@oldval, and if they are the same, replaces @oldval with
@newval.

This is like a typical atomic compare-and-exchange
operation, for user data on an object.

If the previous value was replaced then ownership of the
old value (@oldval) is passed to the caller, including
the registered destroy notify for it (passed out in @old_destroy).
It’s up to the caller to free this as needed, which may
or may not include using @old_destroy as sometimes replacement
should not destroy the object in the normal way.

Since: 2.34

</description>
<parameters>
<parameter name="object">
<parameter_description> the #GObject to store user data on
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a string, naming the user data pointer
</parameter_description>
</parameter>
<parameter name="oldval">
<parameter_description> the old value to compare against
</parameter_description>
</parameter>
<parameter name="newval">
<parameter_description> the new value
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a destroy notify for the new value
</parameter_description>
</parameter>
<parameter name="old_destroy">
<parameter_description> destroy notify for the existing value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the existing value for @key was replaced
by @newval, %FALSE otherwise.

</return>
</function>

<function name="g_object_replace_qdata">
<description>
Compares the user data for the key @quark on @object with
@oldval, and if they are the same, replaces @oldval with
@newval.

This is like a typical atomic compare-and-exchange
operation, for user data on an object.

If the previous value was replaced then ownership of the
old value (@oldval) is passed to the caller, including
the registered destroy notify for it (passed out in @old_destroy).
It’s up to the caller to free this as needed, which may
or may not include using @old_destroy as sometimes replacement
should not destroy the object in the normal way.

Since: 2.34

</description>
<parameters>
<parameter name="object">
<parameter_description> the #GObject to store user data on
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> a #GQuark, naming the user data pointer
</parameter_description>
</parameter>
<parameter name="oldval">
<parameter_description> the old value to compare against
</parameter_description>
</parameter>
<parameter name="newval">
<parameter_description> the new value
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a destroy notify for the new value
</parameter_description>
</parameter>
<parameter name="old_destroy">
<parameter_description> destroy notify for the existing value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the existing value for @quark was replaced
by @newval, %FALSE otherwise.

</return>
</function>

<function name="g_object_run_dispose">
<description>
Releases all references to other objects. This can be used to break
reference cycles.

This function should only be called from object system implementations.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_set">
<description>
Sets properties on an object.

Note that the &quot;notify&quot; signals are queued and only emitted (in
reverse order) after all properties have been set. See
g_object_freeze_notify().

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of the first property to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value for the first property, followed optionally by more
name/value pairs, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_set_data">
<description>
Each object carries around a table of associations from
strings to pointers.  This function lets you set an association.

If the object already had an association with that name,
the old association will be destroyed.

</description>
<parameters>
<parameter name="object">
<parameter_description> #GObject containing the associations.
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> name of the key
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to associate with that key
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_set_data_full">
<description>
Like g_object_set_data() except it adds notification
for when the association is destroyed, either by setting it
to a different value or when the object is destroyed.

Note that the @destroy callback is not called if @data is %NULL.

</description>
<parameters>
<parameter name="object">
<parameter_description> #GObject containing the associations
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> name of the key
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to associate with that key
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function to call when the association is destroyed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_set_property">
<description>
Sets a property on an object.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_set_qdata">
<description>
This sets an opaque, named pointer on an object.
The name is specified through a #GQuark (retrived e.g. via
g_quark_from_static_string()), and the pointer
can be gotten back from the @object with g_object_get_qdata()
until the @object is finalized.
Setting a previously set user data pointer, overrides (frees)
the old pointer set, using #NULL as pointer essentially
removes the data stored.

</description>
<parameters>
<parameter name="object">
<parameter_description> The GObject to set store a user data pointer
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> A #GQuark, naming the user data pointer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> An opaque user data pointer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_set_qdata_full">
<description>
This function works like g_object_set_qdata(), but in addition,
a void (*destroy) (gpointer) function may be specified which is
called with @data as argument when the @object is finalized, or
the data is being overwritten by a call to g_object_set_qdata()
with the same @quark.

</description>
<parameters>
<parameter name="object">
<parameter_description> The GObject to set store a user data pointer
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> A #GQuark, naming the user data pointer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> An opaque user data pointer
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Function to invoke with @data as argument, when @data
needs to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_set_valist">
<description>
Sets properties on an object.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of the first property to set
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> value for the first property, followed optionally by more
name/value pairs, followed by %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_setv">
<description>
Sets @n_properties properties for an @object.
Properties to be set will be taken from @values. All properties must be
valid. Warnings will be emitted and undefined behaviour may result if invalid
properties are passed in.

Since: 2.54

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> the number of properties
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> the names of each property to be set
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> the values of each property to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_steal_data">
<description>
Remove a specified datum from the object's data associations,
without invoking the association's destroy handler.


</description>
<parameters>
<parameter name="object">
<parameter_description> #GObject containing the associations
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> name of the key
</parameter_description>
</parameter>
</parameters>
<return> the data if found, or %NULL
if no such data exists.
</return>
</function>

<function name="g_object_steal_qdata">
<description>
This function gets back user data pointers stored via
g_object_set_qdata() and removes the @data from object
without invoking its destroy() function (if any was
set).
Usually, calling this function is only required to update
user data pointers with a destroy notifier, for example:
|[&lt;!-- language=&quot;C&quot; --&gt; 
void
object_add_to_user_list (GObject     *object,
const gchar *new_string)
{
// the quark, naming the object data
GQuark quark_string_list = g_quark_from_static_string (&quot;my-string-list&quot;);
// retrive the old string list
GList *list = g_object_steal_qdata (object, quark_string_list);

// prepend new string
list = g_list_prepend (list, g_strdup (new_string));
// this changed 'list', so we need to set it again
g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
}
static void
free_string_list (gpointer data)
{
GList *node, *list = data;

for (node = list; node; node = node-&gt;next)
g_free (node-&gt;data);
g_list_free (list);
}
]|
Using g_object_get_qdata() in the above example, instead of
g_object_steal_qdata() would have left the destroy function set,
and thus the partial string list would have been freed upon
g_object_set_qdata_full().


</description>
<parameters>
<parameter name="object">
<parameter_description> The GObject to get a stored user data pointer from
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> A #GQuark, naming the user data pointer
</parameter_description>
</parameter>
</parameters>
<return> The user data pointer set, or %NULL
</return>
</function>

<function name="g_object_thaw_notify">
<description>
Reverts the effect of a previous call to
g_object_freeze_notify(). The freeze count is decreased on @object
and when it reaches zero, queued &quot;notify&quot; signals are emitted.

Duplicate notifications for each property are squashed so that at most one
#GObject::notify signal is emitted for each property, in the reverse order
in which they have been queued.

It is an error to call this function when the freeze count is zero.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_unref">
<description>
Decreases the reference count of @object. When its reference count
drops to 0, the object is finalized (i.e. its memory is freed).

If the pointer to the #GObject may be reused in future (for example, if it is
an instance variable of another object), it is recommended to clear the
pointer to %NULL rather than retain a dangling pointer to a potentially
invalid #GObject instance. Use g_clear_object() for this.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_watch_closure">
<description>
This function essentially limits the life time of the @closure to
the life time of the object. That is, when the object is finalized,
the @closure is invalidated by calling g_closure_invalidate() on
it, in order to prevent invocations of the closure with a finalized
(nonexisting) object. Also, g_object_ref() and g_object_unref() are
added as marshal guards to the @closure, to ensure that an extra
reference count is held on @object during invocation of the
@closure.  Usually, this function will be called on closures that
use this @object as closure data.

</description>
<parameters>
<parameter name="object">
<parameter_description> GObject restricting lifetime of @closure
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> GClosure to watch
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_weak_ref">
<description>
Adds a weak reference callback to an object. Weak references are
used for notification when an object is finalized. They are called
&quot;weak references&quot; because they allow you to safely hold a pointer
to an object without calling g_object_ref() (g_object_ref() adds a
strong reference, that is, forces the object to stay alive).

Note that the weak references created by this method are not
thread-safe: they cannot safely be used in one thread if the
object's last g_object_unref() might happen in another thread.
Use #GWeakRef if thread-safety is required.

</description>
<parameters>
<parameter name="object">
<parameter_description> #GObject to reference weakly
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> callback to invoke before the object is freed
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> extra data to pass to notify
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_object_weak_unref">
<description>
Removes a weak reference callback to an object.

</description>
<parameters>
<parameter name="object">
<parameter_description> #GObject to remove a weak reference from
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> callback to search for
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to search for
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_on_error_query">
<description>
Prompts the user with
`[E]xit, [H]alt, show [S]tack trace or [P]roceed`.
This function is intended to be used for debugging use only.
The following example shows how it can be used together with
the g_log() functions.

|[&lt;!-- language=&quot;C&quot; --&gt;
#include &lt;glib.h&gt;

static void
log_handler (const gchar   *log_domain,
GLogLevelFlags log_level,
const gchar   *message,
gpointer       user_data)
{
g_log_default_handler (log_domain, log_level, message, user_data);

g_on_error_query (MY_PROGRAM_NAME);
}

int
main (int argc, char *argv[])
{
g_log_set_handler (MY_LOG_DOMAIN,
G_LOG_LEVEL_WARNING |
G_LOG_LEVEL_ERROR |
G_LOG_LEVEL_CRITICAL,
log_handler,
NULL);
...
]|

If &quot;[E]xit&quot; is selected, the application terminates with a call
to _exit(0).

If &quot;[S]tack&quot; trace is selected, g_on_error_stack_trace() is called.
This invokes gdb, which attaches to the current process and shows
a stack trace. The prompt is then shown again.

If &quot;[P]roceed&quot; is selected, the function returns.

This function may cause different actions on non-UNIX platforms.

</description>
<parameters>
<parameter name="prg_name">
<parameter_description> the program name, needed by gdb for the &quot;[S]tack trace&quot;
option. If @prg_name is %NULL, g_get_prgname() is called to get
the program name (which will work correctly if gdk_init() or
gtk_init() has been called)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_on_error_stack_trace">
<description>
Invokes gdb, which attaches to the current process and shows a
stack trace. Called by g_on_error_query() when the &quot;[S]tack trace&quot;
option is selected. You can get the current process's program name
with g_get_prgname(), assuming that you have called gtk_init() or
gdk_init().

This function may cause different actions on non-UNIX platforms.

</description>
<parameters>
<parameter name="prg_name">
<parameter_description> the program name, needed by gdb for the &quot;[S]tack trace&quot;
option
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_once">
<description>
The first call to this routine by a process with a given #GOnce
struct calls @func with the given argument. Thereafter, subsequent
calls to g_once()  with the same #GOnce struct do not call @func
again, but return the stored result of the first call. On return
from g_once(), the status of @once will be %G_ONCE_STATUS_READY.

For example, a mutex or a thread-specific data key must be created
exactly once. In a threaded environment, calling g_once() ensures
that the initialization is serialized across multiple threads.

Calling g_once() recursively on the same #GOnce struct in
@func will lead to a deadlock.

|[&lt;!-- language=&quot;C&quot; --&gt; 
gpointer
get_debug_flags (void)
{
static GOnce my_once = G_ONCE_INIT;

g_once (&amp;my_once, parse_debug_flags, NULL);

return my_once.retval;
}
]|

Since: 2.4

</description>
<parameters>
<parameter name="once">
<parameter_description> a #GOnce structure
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GThreadFunc function associated to @once. This function
is called only once, regardless of the number of times it and
its associated #GOnce struct are passed to g_once().
</parameter_description>
</parameter>
<parameter name="arg">
<parameter_description> data to be passed to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_once_init_enter">
<description>
Function to be called when starting a critical initialization
section. The argument @location must point to a static
0-initialized variable that will be set to a value other than 0 at
the end of the initialization section. In combination with
g_once_init_leave() and the unique address @value_location, it can
be ensured that an initialization section will be executed only once
during a program's life time, and that concurrent threads are
blocked until initialization completed. To be used in constructs
like this:

|[&lt;!-- language=&quot;C&quot; --&gt; 
static gsize initialization_value = 0;

if (g_once_init_enter (&amp;initialization_value))
{
gsize setup_value = 42; // initialization code here

g_once_init_leave (&amp;initialization_value, setup_value);
}

// use initialization_value here
]|

Since: 2.14

</description>
<parameters>
<parameter name="location">
<parameter_description> location of a static initializable variable
containing 0
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the initialization section should be entered,
%FALSE and blocks otherwise

</return>
</function>

<function name="g_once_init_leave">
<description>
Counterpart to g_once_init_enter(). Expects a location of a static
0-initialized initialization variable, and an initialization value
other than 0. Sets the variable to the initialization value, and
releases concurrent threads blocking in g_once_init_enter() on this
initialization variable.

Since: 2.14

</description>
<parameters>
<parameter name="location">
<parameter_description> location of a static initializable variable
containing 0
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> new non-0 value for *@value_location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_open">
<description>
A wrapper for the POSIX open() function. The open() function is
used to convert a pathname into a file descriptor.

On POSIX systems file descriptors are implemented by the operating
system. On Windows, it's the C library that implements open() and
file descriptors. The actual Win32 API for opening files is quite
different, see MSDN documentation for CreateFile(). The Win32 API
uses file handles, which are more randomish integers, not small
integers like file descriptors.

Because file descriptors are specific to the C library on Windows,
the file descriptor returned by this function makes sense only to
functions in the same C library. Thus if the GLib-using code uses a
different C library than GLib does, the file descriptor returned by
this function cannot be passed to C library functions like write()
or read().

See your C library manual for more details about open().

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> as in open()
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> as in open()
</parameter_description>
</parameter>
</parameters>
<return> a new file descriptor, or -1 if an error occurred.
The return value can be used exactly like the return value
from open().

</return>
</function>

<function name="g_option_context_add_group">
<description>
Adds a #GOptionGroup to the @context, so that parsing with @context
will recognize the options in the group. Note that this will take
ownership of the @group and thus the @group should not be freed.

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> the group to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_context_add_main_entries">
<description>
A convenience function which creates a main group if it doesn't
exist, adds the @entries to it and sets the translation domain.

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> a %NULL-terminated array of #GOptionEntrys
</parameter_description>
</parameter>
<parameter name="translation_domain">
<parameter_description> a translation domain to use for translating
the `--help` output for the options in @entries
with gettext(), or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_context_free">
<description>
Frees context and all the groups which have been
added to it.

Please note that parsed arguments need to be freed separately (see
#GOptionEntry).

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_context_get_description">
<description>
Returns the description. See g_option_context_set_description().

Since: 2.12

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
</parameters>
<return> the description

</return>
</function>

<function name="g_option_context_get_help">
<description>
Returns a formatted, translated help text for the given context.
To obtain the text produced by `--help`, call
`g_option_context_get_help (context, TRUE, NULL)`.
To obtain the text produced by `--help-all`, call
`g_option_context_get_help (context, FALSE, NULL)`.
To obtain the help text for an option group, call
`g_option_context_get_help (context, FALSE, group)`.

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="main_help">
<parameter_description> if %TRUE, only include the main group
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> the #GOptionGroup to create help for, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated string containing the help text

</return>
</function>

<function name="g_option_context_get_help_enabled">
<description>
Returns whether automatic `--help` generation
is turned on for @context. See g_option_context_set_help_enabled().

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if automatic help generation is turned on.

</return>
</function>

<function name="g_option_context_get_ignore_unknown_options">
<description>
Returns whether unknown options are ignored or not. See
g_option_context_set_ignore_unknown_options().

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if unknown options are ignored.

</return>
</function>

<function name="g_option_context_get_main_group">
<description>
Returns a pointer to the main group of @context.

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
</parameters>
<return> the main group of @context, or %NULL if
@context doesn't have a main group. Note that group belongs to
@context and should not be modified or freed.

</return>
</function>

<function name="g_option_context_get_strict_posix">
<description>
Returns whether strict POSIX code is enabled.

See g_option_context_set_strict_posix() for more information.

Since: 2.44

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if strict POSIX is enabled, %FALSE otherwise.

</return>
</function>

<function name="g_option_context_get_summary">
<description>
Returns the summary. See g_option_context_set_summary().

Since: 2.12

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
</parameters>
<return> the summary

</return>
</function>

<function name="g_option_context_new">
<description>
Creates a new option context.

The @parameter_string can serve multiple purposes. It can be used
to add descriptions for &quot;rest&quot; arguments, which are not parsed by
the #GOptionContext, typically something like &quot;FILES&quot; or
&quot;FILE1 FILE2...&quot;. If you are using #G_OPTION_REMAINING for
collecting &quot;rest&quot; arguments, GLib handles this automatically by
using the @arg_description of the corresponding #GOptionEntry in
the usage summary.

Another usage is to give a short summary of the program
functionality, like &quot; - frob the strings&quot;, which will be displayed
in the same line as the usage. For a longer description of the
program functionality that should be displayed as a paragraph
below the usage line, use g_option_context_set_summary().

Note that the @parameter_string is translated using the
function set with g_option_context_set_translate_func(), so
it should normally be passed untranslated.

Since: 2.6

</description>
<parameters>
<parameter name="parameter_string">
<parameter_description> a string which is displayed in
the first line of `--help` output, after the usage summary
`programname [OPTION...]`
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GOptionContext, which must be
freed with g_option_context_free() after use.

</return>
</function>

<function name="g_option_context_parse">
<description>
Parses the command line arguments, recognizing options
which have been added to @context. A side-effect of
calling this function is that g_set_prgname() will be
called.

If the parsing is successful, any parsed arguments are
removed from the array and @argc and @argv are updated
accordingly. A '--' option is stripped from @argv
unless there are unparsed options before and after it,
or some of the options after it start with '-'. In case
of an error, @argc and @argv are left unmodified.

If automatic `--help` support is enabled
(see g_option_context_set_help_enabled()), and the
@argv array contains one of the recognized help options,
this function will produce help output to stdout and
call `exit (0)`.

Note that function depends on the [current locale][setlocale] for
automatic character set conversion of string and filename
arguments.

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="argc">
<parameter_description> a pointer to the number of command line arguments
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> a pointer to the array of command line arguments
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing was successful,
%FALSE if an error occurred

</return>
</function>

<function name="g_option_context_parse_strv">
<description>
Parses the command line arguments.

This function is similar to g_option_context_parse() except that it
respects the normal memory rules when dealing with a strv instead of
assuming that the passed-in array is the argv of the main function.

In particular, strings that are removed from the arguments list will
be freed using g_free().

On Windows, the strings are expected to be in UTF-8.  This is in
contrast to g_option_context_parse() which expects them to be in the
system codepage, which is how they are passed as @argv to main().
See g_win32_get_command_line() for a solution.

This function is useful if you are trying to use #GOptionContext with
#GApplication.

Since: 2.40

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="arguments">
<parameter_description> a pointer to the
command line arguments (which must be in UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing was successful,
%FALSE if an error occurred

</return>
</function>

<function name="g_option_context_set_description">
<description>
Adds a string to be displayed in `--help` output after the list
of options. This text often includes a bug reporting address.

Note that the summary is translated (see
g_option_context_set_translate_func()).

Since: 2.12

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> a string to be shown in `--help` output
after the list of options, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_context_set_help_enabled">
<description>
Enables or disables automatic generation of `--help` output.
By default, g_option_context_parse() recognizes `--help`, `-h`,
`-?`, `--help-all` and `--help-groupname` and creates suitable
output to stdout.

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="help_enabled">
<parameter_description> %TRUE to enable `--help`, %FALSE to disable it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_context_set_ignore_unknown_options">
<description>
Sets whether to ignore unknown options or not. If an argument is
ignored, it is left in the @argv array after parsing. By default,
g_option_context_parse() treats unknown options as error.

This setting does not affect non-option arguments (i.e. arguments
which don't start with a dash). But note that GOption cannot reliably
determine whether a non-option belongs to a preceding unknown option.

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="ignore_unknown">
<parameter_description> %TRUE to ignore unknown options, %FALSE to produce
an error when unknown options are met
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_context_set_main_group">
<description>
Sets a #GOptionGroup as main group of the @context.
This has the same effect as calling g_option_context_add_group(),
the only difference is that the options in the main group are
treated differently when generating `--help` output.

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> the group to set as main group
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_context_set_strict_posix">
<description>
Sets strict POSIX mode.

By default, this mode is disabled.

In strict POSIX mode, the first non-argument parameter encountered
(eg: filename) terminates argument processing.  Remaining arguments
are treated as non-options and are not attempted to be parsed.

If strict POSIX mode is disabled then parsing is done in the GNU way
where option arguments can be freely mixed with non-options.

As an example, consider &quot;ls foo -l&quot;.  With GNU style parsing, this
will list &quot;foo&quot; in long mode.  In strict POSIX style, this will list
the files named &quot;foo&quot; and &quot;-l&quot;.

It may be useful to force strict POSIX mode when creating &quot;verb
style&quot; command line tools.  For example, the &quot;gsettings&quot; command line
tool supports the global option &quot;--schemadir&quot; as well as many
subcommands (&quot;get&quot;, &quot;set&quot;, etc.) which each have their own set of
arguments.  Using strict POSIX mode will allow parsing the global
options up to the verb name while leaving the remaining options to be
parsed by the relevant subcommand (which can be determined by
examining the verb name, which should be present in argv[1] after
parsing).

Since: 2.44

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="strict_posix">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_context_set_summary">
<description>
Adds a string to be displayed in `--help` output before the list
of options. This is typically a summary of the program functionality.

Note that the summary is translated (see
g_option_context_set_translate_func() and
g_option_context_set_translation_domain()).

Since: 2.12

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="summary">
<parameter_description> a string to be shown in `--help` output
before the list of options, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_context_set_translate_func">
<description>
Sets the function which is used to translate the contexts
user-visible strings, for `--help` output. If @func is %NULL,
strings are not translated.

Note that option groups have their own translation functions,
this function only affects the @parameter_string (see g_option_context_new()),
the summary (see g_option_context_set_summary()) and the description
(see g_option_context_set_description()).

If you are using gettext(), you only need to set the translation
domain, see g_option_context_set_translation_domain().

Since: 2.12

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GTranslateFunc, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy_notify">
<parameter_description> a function which gets called to free @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_context_set_translation_domain">
<description>
A convenience function to use gettext() for translating
user-visible strings.

Since: 2.12

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GOptionContext
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the domain to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_group_add_entries">
<description>
Adds the options specified in @entries to @group.

Since: 2.6

</description>
<parameters>
<parameter name="group">
<parameter_description> a #GOptionGroup
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> a %NULL-terminated array of #GOptionEntrys
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_group_free">
<description>
Frees a #GOptionGroup. Note that you must not free groups
which have been added to a #GOptionContext.

Since: 2.6

Deprecated: 2.44: Use g_option_group_unref() instead.

</description>
<parameters>
<parameter name="group">
<parameter_description> a #GOptionGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_group_new">
<description>
Creates a new #GOptionGroup.

Since: 2.6

</description>
<parameters>
<parameter name="name">
<parameter_description> the name for the option group, this is used to provide
help for the options in this group with `--help-`@name
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> a description for this group to be shown in
`--help`. This string is translated using the translation
domain or translation function of the group
</parameter_description>
</parameter>
<parameter name="help_description">
<parameter_description> a description for the `--help-`@name option.
This string is translated using the translation domain or translation function
of the group
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data that will be passed to the pre- and post-parse hooks,
the error hook and to callbacks of %G_OPTION_ARG_CALLBACK options, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a function that will be called to free @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly created option group. It should be added
to a #GOptionContext or freed with g_option_group_unref().

</return>
</function>

<function name="g_option_group_ref">
<description>
Increments the reference count of @group by one.

Since: 2.44

</description>
<parameters>
<parameter name="group">
<parameter_description> a #GOptionGroup
</parameter_description>
</parameter>
</parameters>
<return> a #GoptionGroup

</return>
</function>

<function name="g_option_group_set_error_hook">
<description>
Associates a function with @group which will be called
from g_option_context_parse() when an error occurs.

Note that the user data to be passed to @error_func can be
specified when constructing the group with g_option_group_new().

Since: 2.6

</description>
<parameters>
<parameter name="group">
<parameter_description> a #GOptionGroup
</parameter_description>
</parameter>
<parameter name="error_func">
<parameter_description> a function to call when an error occurs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_group_set_parse_hooks">
<description>
Associates two functions with @group which will be called
from g_option_context_parse() before the first option is parsed
and after the last option has been parsed, respectively.

Note that the user data to be passed to @pre_parse_func and
@post_parse_func can be specified when constructing the group
with g_option_group_new().

Since: 2.6

</description>
<parameters>
<parameter name="group">
<parameter_description> a #GOptionGroup
</parameter_description>
</parameter>
<parameter name="pre_parse_func">
<parameter_description> a function to call before parsing, or %NULL
</parameter_description>
</parameter>
<parameter name="post_parse_func">
<parameter_description> a function to call after parsing, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_group_set_translate_func">
<description>
Sets the function which is used to translate user-visible strings,
for `--help` output. Different groups can use different
#GTranslateFuncs. If @func is %NULL, strings are not translated.

If you are using gettext(), you only need to set the translation
domain, see g_option_group_set_translation_domain().

Since: 2.6

</description>
<parameters>
<parameter name="group">
<parameter_description> a #GOptionGroup
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GTranslateFunc, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy_notify">
<parameter_description> a function which gets called to free @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_group_set_translation_domain">
<description>
A convenience function to use gettext() for translating
user-visible strings.

Since: 2.6

</description>
<parameters>
<parameter name="group">
<parameter_description> a #GOptionGroup
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the domain to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_option_group_unref">
<description>
Decrements the reference count of @group by one.
If the reference count drops to 0, the @group will be freed.
and all memory allocated by the @group is released.

Since: 2.44

</description>
<parameters>
<parameter name="group">
<parameter_description> a #GOptionGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_param_spec_boolean">
<description>
Creates a new #GParamSpecBoolean instance specifying a %G_TYPE_BOOLEAN
property. In many cases, it may be more appropriate to use an enum with
g_param_spec_enum(), both to improve code clarity by using explicitly named
values, and to allow for more values to be added in future without breaking
API.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_boxed">
<description>
Creates a new #GParamSpecBoxed instance specifying a %G_TYPE_BOXED
derived property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="boxed_type">
<parameter_description> %G_TYPE_BOXED derived type of this property
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_char">
<description>
Creates a new #GParamSpecChar instance specifying a %G_TYPE_CHAR property.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> minimum value for the property specified
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> maximum value for the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_double">
<description>
Creates a new #GParamSpecDouble instance specifying a %G_TYPE_DOUBLE
property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> minimum value for the property specified
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> maximum value for the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_enum">
<description>
Creates a new #GParamSpecEnum instance specifying a %G_TYPE_ENUM
property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="enum_type">
<parameter_description> a #GType derived from %G_TYPE_ENUM
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_flags">
<description>
Creates a new #GParamSpecFlags instance specifying a %G_TYPE_FLAGS
property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="flags_type">
<parameter_description> a #GType derived from %G_TYPE_FLAGS
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_float">
<description>
Creates a new #GParamSpecFloat instance specifying a %G_TYPE_FLOAT property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> minimum value for the property specified
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> maximum value for the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_get_blurb">
<description>
Get the short description of a #GParamSpec.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return> the short description of @pspec.
</return>
</function>

<function name="g_param_spec_get_default_value">
<description>
Gets the default value of @pspec as a pointer to a #GValue.

The #GValue will remain valid for the life of @pspec.

Since: 2.38

</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a #GValue which must not be modified

</return>
</function>

<function name="g_param_spec_get_name">
<description>
Get the name of a #GParamSpec.

The name is always an &quot;interned&quot; string (as per g_intern_string()).
This allows for pointer-value comparisons.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return> the name of @pspec.
</return>
</function>

<function name="g_param_spec_get_name_quark">
<description>
Gets the GQuark for the name.

Since: 2.46

</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return> the GQuark for @pspec-&gt;name.

</return>
</function>

<function name="g_param_spec_get_nick">
<description>
Get the nickname of a #GParamSpec.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return> the nickname of @pspec.
</return>
</function>

<function name="g_param_spec_get_qdata">
<description>
Gets back user data pointers stored via g_param_spec_set_qdata().


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> a #GQuark, naming the user data pointer
</parameter_description>
</parameter>
</parameters>
<return> the user data pointer set, or %NULL
</return>
</function>

<function name="g_param_spec_get_redirect_target">
<description>
If the paramspec redirects operations to another paramspec,
returns that paramspec. Redirect is used typically for
providing a new implementation of a property in a derived
type while preserving all the properties from the parent
type. Redirection is established by creating a property
of type #GParamSpecOverride. See g_object_class_override_property()
for an example of the use of this capability.

Since: 2.4


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return> paramspec to which requests on this
paramspec should be redirected, or %NULL if none.
</return>
</function>

<function name="g_param_spec_gtype">
<description>
Creates a new #GParamSpecGType instance specifying a
%G_TYPE_GTYPE property.

See g_param_spec_internal() for details on property names.

Since: 2.10


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="is_a_type">
<parameter_description> a #GType whose subtypes are allowed as values
of the property (use %G_TYPE_NONE for any type)
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_int">
<description>
Creates a new #GParamSpecInt instance specifying a %G_TYPE_INT property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> minimum value for the property specified
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> maximum value for the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_int64">
<description>
Creates a new #GParamSpecInt64 instance specifying a %G_TYPE_INT64 property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> minimum value for the property specified
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> maximum value for the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_internal">
<description>
Creates a new #GParamSpec instance.

A property name consists of segments consisting of ASCII letters and
digits, separated by either the '-' or '_' character. The first
character of a property name must be a letter. Names which violate these
rules lead to undefined behaviour.

When creating and looking up a #GParamSpec, either separator can be
used, but they cannot be mixed. Using '-' is considerably more
efficient and in fact required when using property names as detail
strings for signals.

Beyond the name, #GParamSpecs have two more descriptive
strings associated with them, the @nick, which should be suitable
for use as a label for the property in a property editor, and the
@blurb, which should be a somewhat longer description, suitable for
e.g. a tooltip. The @nick and @blurb should ideally be localized.


</description>
<parameters>
<parameter name="param_type">
<parameter_description> the #GType for the property; must be derived from #G_TYPE_PARAM
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the canonical name of the property
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> the nickname of the property
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> a short description of the property
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a combination of #GParamFlags
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GParamSpec instance
</return>
</function>

<function name="g_param_spec_long">
<description>
Creates a new #GParamSpecLong instance specifying a %G_TYPE_LONG property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> minimum value for the property specified
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> maximum value for the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_object">
<description>
Creates a new #GParamSpecBoxed instance specifying a %G_TYPE_OBJECT
derived property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="object_type">
<parameter_description> %G_TYPE_OBJECT derived type of this property
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_override">
<description>
Creates a new property of type #GParamSpecOverride. This is used
to direct operations to another paramspec, and will not be directly
useful unless you are implementing a new base type similar to GObject.

Since: 2.4


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the property.
</parameter_description>
</parameter>
<parameter name="overridden">
<parameter_description> The property that is being overridden
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GParamSpec
</return>
</function>

<function name="g_param_spec_param">
<description>
Creates a new #GParamSpecParam instance specifying a %G_TYPE_PARAM
property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="param_type">
<parameter_description> a #GType derived from %G_TYPE_PARAM
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_pointer">
<description>
Creates a new #GParamSpecPointer instance specifying a pointer property.
Where possible, it is better to use g_param_spec_object() or
g_param_spec_boxed() to expose memory management information.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_pool_insert">
<description>
Inserts a #GParamSpec in the pool.

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GParamSpecPool.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec to insert
</parameter_description>
</parameter>
<parameter name="owner_type">
<parameter_description> a #GType identifying the owner of @pspec
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_param_spec_pool_list">
<description>
Gets an array of all #GParamSpecs owned by @owner_type in
the pool.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GParamSpecPool
</parameter_description>
</parameter>
<parameter name="owner_type">
<parameter_description> the owner to look for
</parameter_description>
</parameter>
<parameter name="n_pspecs_p">
<parameter_description> return location for the length of the returned array
</parameter_description>
</parameter>
</parameters>
<return> a newly
allocated array containing pointers to all #GParamSpecs
owned by @owner_type in the pool
</return>
</function>

<function name="g_param_spec_pool_list_owned">
<description>
Gets an #GList of all #GParamSpecs owned by @owner_type in
the pool.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GParamSpecPool
</parameter_description>
</parameter>
<parameter name="owner_type">
<parameter_description> the owner to look for
</parameter_description>
</parameter>
</parameters>
<return> a
#GList of all #GParamSpecs owned by @owner_type in
the pool#GParamSpecs.
</return>
</function>

<function name="g_param_spec_pool_lookup">
<description>
Looks up a #GParamSpec in the pool.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GParamSpecPool
</parameter_description>
</parameter>
<parameter name="param_name">
<parameter_description> the name to look for
</parameter_description>
</parameter>
<parameter name="owner_type">
<parameter_description> the owner to look for
</parameter_description>
</parameter>
<parameter name="walk_ancestors">
<parameter_description> If %TRUE, also try to find a #GParamSpec with @param_name
owned by an ancestor of @owner_type.
</parameter_description>
</parameter>
</parameters>
<return> The found #GParamSpec, or %NULL if no
matching #GParamSpec was found.
</return>
</function>

<function name="g_param_spec_pool_new">
<description>
Creates a new #GParamSpecPool.

If @type_prefixing is %TRUE, lookups in the newly created pool will
allow to specify the owner as a colon-separated prefix of the
property name, like &quot;GtkContainer:border-width&quot;. This feature is
deprecated, so you should always set @type_prefixing to %FALSE.


</description>
<parameters>
<parameter name="type_prefixing">
<parameter_description> Whether the pool will support type-prefixed property names.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GParamSpecPool.
</return>
</function>

<function name="g_param_spec_pool_remove">
<description>
Removes a #GParamSpec from the pool.

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GParamSpecPool
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_param_spec_ref">
<description>
Increments the reference count of @pspec.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return> the #GParamSpec that was passed into this function
</return>
</function>

<function name="g_param_spec_ref_sink">
<description>
Convenience function to ref and sink a #GParamSpec.

Since: 2.10

</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return> the #GParamSpec that was passed into this function
</return>
</function>

<function name="g_param_spec_set_qdata">
<description>
Sets an opaque, named pointer on a #GParamSpec. The name is
specified through a #GQuark (retrieved e.g. via
g_quark_from_static_string()), and the pointer can be gotten back
from the @pspec with g_param_spec_get_qdata().  Setting a
previously set user data pointer, overrides (frees) the old pointer
set, using %NULL as pointer essentially removes the data stored.

</description>
<parameters>
<parameter name="pspec">
<parameter_description> the #GParamSpec to set store a user data pointer
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> a #GQuark, naming the user data pointer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> an opaque user data pointer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_param_spec_set_qdata_full">
<description>
This function works like g_param_spec_set_qdata(), but in addition,
a `void (*destroy) (gpointer)` function may be
specified which is called with @data as argument when the @pspec is
finalized, or the data is being overwritten by a call to
g_param_spec_set_qdata() with the same @quark.

</description>
<parameters>
<parameter name="pspec">
<parameter_description> the #GParamSpec to set store a user data pointer
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> a #GQuark, naming the user data pointer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> an opaque user data pointer
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function to invoke with @data as argument, when @data needs to
be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_param_spec_sink">
<description>
The initial reference count of a newly created #GParamSpec is 1,
even though no one has explicitly called g_param_spec_ref() on it
yet. So the initial reference count is flagged as &quot;floating&quot;, until
someone calls `g_param_spec_ref (pspec); g_param_spec_sink
(pspec);` in sequence on it, taking over the initial
reference count (thus ending up with a @pspec that has a reference
count of 1 still, but is not flagged &quot;floating&quot; anymore).

</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_param_spec_steal_qdata">
<description>
Gets back user data pointers stored via g_param_spec_set_qdata()
and removes the @data from @pspec without invoking its destroy()
function (if any was set).  Usually, calling this function is only
required to update user data pointers with a destroy notifier.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> the #GParamSpec to get a stored user data pointer from
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> a #GQuark, naming the user data pointer
</parameter_description>
</parameter>
</parameters>
<return> the user data pointer set, or %NULL
</return>
</function>

<function name="g_param_spec_string">
<description>
Creates a new #GParamSpecString instance.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_uchar">
<description>
Creates a new #GParamSpecUChar instance specifying a %G_TYPE_UCHAR property.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> minimum value for the property specified
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> maximum value for the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_uint">
<description>
Creates a new #GParamSpecUInt instance specifying a %G_TYPE_UINT property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> minimum value for the property specified
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> maximum value for the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_uint64">
<description>
Creates a new #GParamSpecUInt64 instance specifying a %G_TYPE_UINT64
property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> minimum value for the property specified
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> maximum value for the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_ulong">
<description>
Creates a new #GParamSpecULong instance specifying a %G_TYPE_ULONG
property.

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="minimum">
<parameter_description> minimum value for the property specified
</parameter_description>
</parameter>
<parameter name="maximum">
<parameter_description> maximum value for the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_unichar">
<description>
Creates a new #GParamSpecUnichar instance specifying a %G_TYPE_UINT
property. #GValue structures for this property can be accessed with
g_value_set_uint() and g_value_get_uint().

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> default value for the property specified
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_unref">
<description>
Decrements the reference count of a @pspec.

</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_param_spec_value_array">
<description>
Creates a new #GParamSpecValueArray instance specifying a
%G_TYPE_VALUE_ARRAY property. %G_TYPE_VALUE_ARRAY is a
%G_TYPE_BOXED type, as such, #GValue structures for this property
can be accessed with g_value_set_boxed() and g_value_get_boxed().

See g_param_spec_internal() for details on property names.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="element_spec">
<parameter_description> a #GParamSpec describing the elements contained in
arrays of this property, may be %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification
</return>
</function>

<function name="g_param_spec_variant">
<description>
Creates a new #GParamSpecVariant instance specifying a #GVariant
property.

If @default_value is floating, it is consumed.

See g_param_spec_internal() for details on property names.

Since: 2.26

</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
<parameter name="default_value">
<parameter_description> a #GVariant of type @type to
use as the default value, or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GParamSpec

</return>
</function>

<function name="g_param_type_register_static">
<description>
Registers @name as the name of a new static type derived from
#G_TYPE_PARAM. The type system uses the information contained in
the #GParamSpecTypeInfo structure pointed to by @info to manage the
#GParamSpec type and its instances.


</description>
<parameters>
<parameter name="name">
<parameter_description> 0-terminated string used as the name of the new #GParamSpec type.
</parameter_description>
</parameter>
<parameter name="pspec_info">
<parameter_description> The #GParamSpecTypeInfo for this #GParamSpec type.
</parameter_description>
</parameter>
</parameters>
<return> The new type identifier.
</return>
</function>

<function name="g_param_value_convert">
<description>
Transforms @src_value into @dest_value if possible, and then
validates @dest_value, in order for it to conform to @pspec.  If
@strict_validation is %TRUE this function will only succeed if the
transformed @dest_value complied to @pspec without modifications.

See also g_value_type_transformable(), g_value_transform() and
g_param_value_validate().


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
<parameter name="src_value">
<parameter_description> souce #GValue
</parameter_description>
</parameter>
<parameter name="dest_value">
<parameter_description> destination #GValue of correct type for @pspec
</parameter_description>
</parameter>
<parameter name="strict_validation">
<parameter_description> %TRUE requires @dest_value to conform to @pspec
without modifications
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if transformation and validation were successful,
%FALSE otherwise and @dest_value is left untouched.
</return>
</function>

<function name="g_param_value_defaults">
<description>
Checks whether @value contains the default value as specified in @pspec.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue of correct type for @pspec
</parameter_description>
</parameter>
</parameters>
<return> whether @value contains the canonical default for this @pspec
</return>
</function>

<function name="g_param_value_set_default">
<description>
Sets @value to its default value as specified in @pspec.

</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue of correct type for @pspec
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_param_value_validate">
<description>
Ensures that the contents of @value comply with the specifications
set out by @pspec. For example, a #GParamSpecInt might require
that integers stored in @value may not be smaller than -42 and not be
greater than +42. If @value contains an integer outside of this range,
it is modified accordingly, so the resulting value will fit into the
range -42 .. +42.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue of correct type for @pspec
</parameter_description>
</parameter>
</parameters>
<return> whether modifying @value was necessary to ensure validity
</return>
</function>

<function name="g_param_values_cmp">
<description>
Compares @value1 with @value2 according to @pspec, and return -1, 0 or +1,
if @value1 is found to be less than, equal to or greater than @value2,
respectively.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a valid #GParamSpec
</parameter_description>
</parameter>
<parameter name="value1">
<parameter_description> a #GValue of correct type for @pspec
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> a #GValue of correct type for @pspec
</parameter_description>
</parameter>
</parameters>
<return> -1, 0 or +1, for a less than, equal to or greater than result
</return>
</function>

<function name="g_parse_debug_string">
<description>
Parses a string containing debugging options
into a %guint containing bit flags. This is used
within GDK and GTK+ to parse the debug options passed on the
command line or through environment variables.

If @string is equal to &quot;all&quot;, all flags are set. Any flags
specified along with &quot;all&quot; in @string are inverted; thus,
&quot;all,foo,bar&quot; or &quot;foo,bar,all&quot; sets all flags except those
corresponding to &quot;foo&quot; and &quot;bar&quot;.

If @string is equal to &quot;help&quot;, all the available keys in @keys
are printed out to standard error.


</description>
<parameters>
<parameter name="string">
<parameter_description> a list of debug options separated by colons, spaces, or
commas, or %NULL.
</parameter_description>
</parameter>
<parameter name="keys">
<parameter_description> pointer to an array of #GDebugKey which associate
strings with bit flags.
</parameter_description>
</parameter>
<parameter name="nkeys">
<parameter_description> the number of #GDebugKeys in the array.
</parameter_description>
</parameter>
</parameters>
<return> the combined set of bit flags.
</return>
</function>

<function name="g_path_get_basename">
<description>
Gets the last component of the filename.

If @file_name ends with a directory separator it gets the component
before the last slash. If @file_name consists only of directory
separators (and on Windows, possibly a drive letter), a single
separator is returned. If @file_name is empty, it gets &quot;.&quot;.


</description>
<parameters>
<parameter name="file_name">
<parameter_description> the name of the file
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the last
component of the filename
</return>
</function>

<function name="g_path_get_dirname">
<description>
Gets the directory components of a file name.

If the file name has no directory components &quot;.&quot; is returned.
The returned string should be freed when no longer needed.


</description>
<parameters>
<parameter name="file_name">
<parameter_description> the name of the file
</parameter_description>
</parameter>
</parameters>
<return> the directory components of the file
</return>
</function>

<function name="g_path_is_absolute">
<description>
Returns %TRUE if the given @file_name is an absolute file name.
Note that this is a somewhat vague concept on Windows.

On POSIX systems, an absolute file name is well-defined. It always
starts from the single root directory. For example &quot;/usr/local&quot;.

On Windows, the concepts of current drive and drive-specific
current directory introduce vagueness. This function interprets as
an absolute file name one that either begins with a directory
separator such as &quot;\Users\tml&quot; or begins with the root on a drive,
for example &quot;C:\Windows&quot;. The first case also includes UNC paths
such as &quot;\\\\myserver\docs\foo&quot;. In all cases, either slashes or
backslashes are accepted.

Note that a file name relative to the current drive root does not
truly specify a file uniquely over time and across processes, as
the current drive is a per-process value and can be changed.

File names relative the current directory on some specific drive,
such as &quot;D:foo/bar&quot;, are not interpreted as absolute by this
function, but they obviously are not relative to the normal current
directory as returned by getcwd() or g_get_current_dir()
either. Such paths should be avoided, or need to be handled using
Windows-specific code.


</description>
<parameters>
<parameter name="file_name">
<parameter_description> a file name
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @file_name is absolute
</return>
</function>

<function name="g_path_skip_root">
<description>
Returns a pointer into @file_name after the root component,
i.e. after the &quot;/&quot; in UNIX or &quot;C:\&quot; under Windows. If @file_name
is not an absolute path it returns %NULL.


</description>
<parameters>
<parameter name="file_name">
<parameter_description> a file name
</parameter_description>
</parameter>
</parameters>
<return> a pointer into @file_name after the
root component
</return>
</function>

<function name="g_pattern_match">
<description>
Matches a string against a compiled pattern. Passing the correct
length of the string given is mandatory. The reversed string can be
omitted by passing %NULL, this is more efficient if the reversed
version of the string to be matched is not at hand, as
g_pattern_match() will only construct it if the compiled pattern
requires reverse matches.

Note that, if the user code will (possibly) match a string against a
multitude of patterns containing wildcards, chances are high that
some patterns will require a reversed string. In this case, it's
more efficient to provide the reversed string to avoid multiple
constructions thereof in the various calls to g_pattern_match().

Note also that the reverse of a UTF-8 encoded string can in general
not be obtained by g_strreverse(). This works only if the string
does not contain any multibyte characters. GLib offers the
g_utf8_strreverse() function to reverse UTF-8 encoded strings.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GPatternSpec
</parameter_description>
</parameter>
<parameter name="string_length">
<parameter_description> the length of @string (in bytes, i.e. strlen(),
not g_utf8_strlen())
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the UTF-8 encoded string to match
</parameter_description>
</parameter>
<parameter name="string_reversed">
<parameter_description> the reverse of @string or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string matches @pspec
</return>
</function>

<function name="g_pattern_match_simple">
<description>
Matches a string against a pattern given as a string. If this
function is to be called in a loop, it's more efficient to compile
the pattern once with g_pattern_spec_new() and call
g_pattern_match_string() repeatedly.


</description>
<parameters>
<parameter name="pattern">
<parameter_description> the UTF-8 encoded pattern
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the UTF-8 encoded string to match
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string matches @pspec
</return>
</function>

<function name="g_pattern_match_string">
<description>
Matches a string against a compiled pattern. If the string is to be
matched against more than one pattern, consider using
g_pattern_match() instead while supplying the reversed string.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GPatternSpec
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the UTF-8 encoded string to match
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string matches @pspec
</return>
</function>

<function name="g_pattern_spec_equal">
<description>
Compares two compiled pattern specs and returns whether they will
match the same set of strings.


</description>
<parameters>
<parameter name="pspec1">
<parameter_description> a #GPatternSpec
</parameter_description>
</parameter>
<parameter name="pspec2">
<parameter_description> another #GPatternSpec
</parameter_description>
</parameter>
</parameters>
<return> Whether the compiled patterns are equal
</return>
</function>

<function name="g_pattern_spec_free">
<description>
Frees the memory allocated for the #GPatternSpec.

</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GPatternSpec
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_pattern_spec_new">
<description>
Compiles a pattern to a #GPatternSpec.


</description>
<parameters>
<parameter name="pattern">
<parameter_description> a zero-terminated UTF-8 encoded string
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GPatternSpec
</return>
</function>

<function name="g_pointer_bit_lock">
<description>
This is equivalent to g_bit_lock, but working on pointers (or other
pointer-sized values).

For portability reasons, you may only lock on the bottom 32 bits of
the pointer.

Since: 2.30

</description>
<parameters>
<parameter name="address">
<parameter_description> a pointer to a #gpointer-sized value
</parameter_description>
</parameter>
<parameter name="lock_bit">
<parameter_description> a bit value between 0 and 31
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_pointer_bit_trylock">
<description>
This is equivalent to g_bit_trylock, but working on pointers (or
other pointer-sized values).

For portability reasons, you may only lock on the bottom 32 bits of
the pointer.

Since: 2.30

</description>
<parameters>
<parameter name="address">
<parameter_description> a pointer to a #gpointer-sized value
</parameter_description>
</parameter>
<parameter name="lock_bit">
<parameter_description> a bit value between 0 and 31
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the lock was acquired

</return>
</function>

<function name="g_pointer_bit_unlock">
<description>
This is equivalent to g_bit_unlock, but working on pointers (or other
pointer-sized values).

For portability reasons, you may only lock on the bottom 32 bits of
the pointer.

Since: 2.30

</description>
<parameters>
<parameter name="address">
<parameter_description> a pointer to a #gpointer-sized value
</parameter_description>
</parameter>
<parameter name="lock_bit">
<parameter_description> a bit value between 0 and 31
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_pointer_type_register_static">
<description>
Creates a new %G_TYPE_POINTER derived type id for a new
pointer type with name @name.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the new pointer type.
</parameter_description>
</parameter>
</parameters>
<return> a new %G_TYPE_POINTER derived type id for @name.
</return>
</function>

<function name="g_poll">
<description>
Polls @fds, as with the poll() system call, but portably. (On
systems that don't have poll(), it is emulated using select().)
This is used internally by #GMainContext, but it can be called
directly if you need to block until a file descriptor is ready, but
don't want to run the full main loop.

Each element of @fds is a #GPollFD describing a single file
descriptor to poll. The @fd field indicates the file descriptor,
and the @events field indicates the events to poll for. On return,
the @revents fields will be filled with the events that actually
occurred.

On POSIX systems, the file descriptors in @fds can be any sort of
file descriptor, but the situation is much more complicated on
Windows. If you need to use g_poll() in code that has to run on
Windows, the easiest solution is to construct all of your
#GPollFDs with g_io_channel_win32_make_pollfd().

Since: 2.20

</description>
<parameters>
<parameter name="fds">
<parameter_description> file descriptors to poll
</parameter_description>
</parameter>
<parameter name="nfds">
<parameter_description> the number of file descriptors in @fds
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> amount of time to wait, in milliseconds, or -1 to wait forever
</parameter_description>
</parameter>
</parameters>
<return> the number of entries in @fds whose @revents fields
were filled in, or 0 if the operation timed out, or -1 on error or
if the call was interrupted.

</return>
</function>

<function name="g_prefix_error">
<description>
Formats a string according to @format and prefix it to an existing
error message. If @err is %NULL (ie: no error variable) then do
nothing.

If *@err is %NULL (ie: an error variable is present but there is no
error condition) then also do nothing.

Since: 2.16

</description>
<parameters>
<parameter name="err">
<parameter_description> a return location for a #GError
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> printf()-style format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_print">
<description>
Outputs a formatted message via the print handler.
The default print handler simply outputs the message to stdout, without
appending a trailing new-line character. Typically, @format should end with
its own new-line character.

g_print() should not be used from within libraries for debugging
messages, since it may be redirected by applications to special
purpose message windows or even files. Instead, libraries should
use g_log(), g_log_structured(), or the convenience macros g_message(),
g_warning() and g_error().

</description>
<parameters>
<parameter name="format">
<parameter_description> the message format. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_printerr">
<description>
Outputs a formatted message via the error message handler.
The default handler simply outputs the message to stderr, without appending
a trailing new-line character. Typically, @format should end with its own
new-line character.

g_printerr() should not be used from within libraries.
Instead g_log() or g_log_structured() should be used, or the convenience
macros g_message(), g_warning() and g_error().

</description>
<parameters>
<parameter name="format">
<parameter_description> the message format. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_printf">
<description>
An implementation of the standard printf() function which supports 
positional parameters, as specified in the Single Unix Specification.

As with the standard printf(), this does not automatically append a trailing
new-line character to the message, so typically @format should end with its
own new-line character.

`glib/gprintf.h` must be explicitly included in order to use this function.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice 
[string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to insert in the output.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes printed.

</return>
</function>

<function name="g_printf_string_upper_bound">
<description>
Calculates the maximum space needed to store the output
of the sprintf() function.


</description>
<parameters>
<parameter name="format">
<parameter_description> the format string. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> the parameters to be inserted into the format string
</parameter_description>
</parameter>
</parameters>
<return> the maximum space needed to store the formatted string
</return>
</function>

<function name="g_private_get">
<description>
Returns the current value of the thread local variable @key.

If the value has not yet been set in this thread, %NULL is returned.
Values are never copied between threads (when a new thread is
created, for example).


</description>
<parameters>
<parameter name="key">
<parameter_description> a #GPrivate
</parameter_description>
</parameter>
</parameters>
<return> the thread-local value
</return>
</function>

<function name="g_private_new">
<description>
Creates a new #GPrivate.

Deprecated:2.32: dynamic allocation of #GPrivate is a bad idea.  Use
static storage and G_PRIVATE_INIT() instead.


</description>
<parameters>
<parameter name="notify">
<parameter_description> a #GDestroyNotify
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GPrivate (which can never be destroyed)
</return>
</function>

<function name="g_private_replace">
<description>
Sets the thread local variable @key to have the value @value in the
current thread.

This function differs from g_private_set() in the following way: if
the previous value was non-%NULL then the #GDestroyNotify handler for
@key is run on it.

Since: 2.32

</description>
<parameters>
<parameter name="key">
<parameter_description> a #GPrivate
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_private_set">
<description>
Sets the thread local variable @key to have the value @value in the
current thread.

This function differs from g_private_replace() in the following way:
the #GDestroyNotify for @key is not called on the old value.

</description>
<parameters>
<parameter name="key">
<parameter_description> a #GPrivate
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_propagate_error">
<description>
If @dest is %NULL, free @src; otherwise, moves @src into *@dest.
The error variable @dest points to must be %NULL.

@src must be non-%NULL.

Note that @src is no longer valid after this call. If you want
to keep using the same GError*, you need to set it to %NULL
after calling this function on it.

</description>
<parameters>
<parameter name="dest">
<parameter_description> error return location
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> error to move into the return location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_propagate_prefixed_error">
<description>
If @dest is %NULL, free @src; otherwise, moves @src into *@dest.
*@dest must be %NULL. After the move, add a prefix as with
g_prefix_error().

Since: 2.16

</description>
<parameters>
<parameter name="dest">
<parameter_description> error return location
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> error to move into the return location
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> printf()-style format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_ptr_array_add">
<description>
Adds a pointer to the end of the pointer array. The array will grow
in size automatically if necessary.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the pointer to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_ptr_array_find">
<description>
Checks whether @needle exists in @haystack. If the element is found, %TRUE is
returned and the element’s index is returned in @index_ (if non-%NULL).
Otherwise, %FALSE is returned and @index_ is undefined. If @needle exists
multiple times in @haystack, the index of the first instance is returned.

This does pointer comparisons only. If you want to use more complex equality
checks, such as string comparisons, use g_ptr_array_find_with_equal_func().

Since: 2.54

</description>
<parameters>
<parameter name="haystack">
<parameter_description> pointer array to be searched
</parameter_description>
</parameter>
<parameter name="needle">
<parameter_description> pointer to look for
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> return location for the index of
the element, if found
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @needle is one of the elements of @haystack
</return>
</function>

<function name="g_ptr_array_find_with_equal_func">
<description>
Checks whether @needle exists in @haystack, using the given @equal_func.
If the element is found, %TRUE is returned and the element’s index is
returned in @index_ (if non-%NULL). Otherwise, %FALSE is returned and @index_
is undefined. If @needle exists multiple times in @haystack, the index of
the first instance is returned.

@equal_func is called with the element from the array as its first parameter,
and @needle as its second parameter. If @equal_func is %NULL, pointer
equality is used.

Since: 2.54

</description>
<parameters>
<parameter name="haystack">
<parameter_description> pointer array to be searched
</parameter_description>
</parameter>
<parameter name="needle">
<parameter_description> pointer to look for
</parameter_description>
</parameter>
<parameter name="equal_func">
<parameter_description> the function to call for each element, which should
return %TRUE when the desired element is found; or %NULL to use pointer
equality
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> return location for the index of
the element, if found
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @needle is one of the elements of @haystack
</return>
</function>

<function name="g_ptr_array_foreach">
<description>
Calls a function for each element of a #GPtrArray. @func must not
add elements to or remove elements from the array.

Since: 2.4

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each array element
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_ptr_array_free">
<description>
Frees the memory allocated for the #GPtrArray. If @free_seg is %TRUE
it frees the memory block holding the elements as well. Pass %FALSE
if you want to free the #GPtrArray wrapper but preserve the
underlying array for use elsewhere. If the reference count of @array
is greater than one, the #GPtrArray wrapper is preserved but the
size of @array will be set to zero.

If array contents point to dynamically-allocated memory, they should
be freed separately if @free_seg is %TRUE and no #GDestroyNotify
function has been set for @array.

This function is not thread-safe. If using a #GPtrArray from multiple
threads, use only the atomic g_ptr_array_ref() and g_ptr_array_unref()
functions.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="free_seg">
<parameter_description> if %TRUE the actual pointer array is freed as well
</parameter_description>
</parameter>
</parameters>
<return> the pointer array if @free_seg is %FALSE, otherwise %NULL.
The pointer array should be freed using g_free().
</return>
</function>

<function name="g_ptr_array_index">
<description>
Returns the pointer at the given index of the pointer array.

This does not perform bounds checking on the given @index_,
so you are responsible for checking it against the array length.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the pointer to return
</parameter_description>
</parameter>
</parameters>
<return> the pointer at the given index
</return>
</function>

<function name="g_ptr_array_insert">
<description>
Inserts an element into the pointer array at the given index. The 
array will grow in size automatically if necessary.

Since: 2.40

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index to place the new element at, or -1 to append
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the pointer to add.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_ptr_array_new">
<description>
Creates a new #GPtrArray with a reference count of 1.


</description>
<parameters>
</parameters>
<return> the new #GPtrArray
</return>
</function>

<function name="g_ptr_array_new_full">
<description>
Creates a new #GPtrArray with @reserved_size pointers preallocated
and a reference count of 1. This avoids frequent reallocation, if
you are going to add many pointers to the array. Note however that
the size of the array is still 0. It also set @element_free_func
for freeing each element when the array is destroyed either via
g_ptr_array_unref(), when g_ptr_array_free() is called with
@free_segment set to %TRUE or when removing elements.

Since: 2.30

</description>
<parameters>
<parameter name="reserved_size">
<parameter_description> number of pointers preallocated
</parameter_description>
</parameter>
<parameter name="element_free_func">
<parameter_description> A function to free elements with
destroy @array or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A new #GPtrArray

</return>
</function>

<function name="g_ptr_array_new_with_free_func">
<description>
Creates a new #GPtrArray with a reference count of 1 and use
@element_free_func for freeing each element when the array is destroyed
either via g_ptr_array_unref(), when g_ptr_array_free() is called with
@free_segment set to %TRUE or when removing elements.

Since: 2.22

</description>
<parameters>
<parameter name="element_free_func">
<parameter_description> A function to free elements with
destroy @array or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A new #GPtrArray

</return>
</function>

<function name="g_ptr_array_ref">
<description>
Atomically increments the reference count of @array by one.
This function is thread-safe and may be called from any thread.

Since: 2.22

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
</parameters>
<return> The passed in #GPtrArray

</return>
</function>

<function name="g_ptr_array_remove">
<description>
Removes the first occurrence of the given pointer from the pointer
array. The following elements are moved down one place. If @array
has a non-%NULL #GDestroyNotify function it is called for the
removed element.

It returns %TRUE if the pointer was removed, or %FALSE if the
pointer was not found.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the pointer to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pointer is removed, %FALSE if the pointer
is not found in the array
</return>
</function>

<function name="g_ptr_array_remove_fast">
<description>
Removes the first occurrence of the given pointer from the pointer
array. The last element in the array is used to fill in the space,
so this function does not preserve the order of the array. But it
is faster than g_ptr_array_remove(). If @array has a non-%NULL
#GDestroyNotify function it is called for the removed element.

It returns %TRUE if the pointer was removed, or %FALSE if the
pointer was not found.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the pointer to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pointer was found in the array
</return>
</function>

<function name="g_ptr_array_remove_index">
<description>
Removes the pointer at the given index from the pointer array.
The following elements are moved down one place. If @array has
a non-%NULL #GDestroyNotify function it is called for the removed
element.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the pointer to remove
</parameter_description>
</parameter>
</parameters>
<return> the pointer which was removed
</return>
</function>

<function name="g_ptr_array_remove_index_fast">
<description>
Removes the pointer at the given index from the pointer array.
The last element in the array is used to fill in the space, so
this function does not preserve the order of the array. But it
is faster than g_ptr_array_remove_index(). If @array has a non-%NULL
#GDestroyNotify function it is called for the removed element.


</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the pointer to remove
</parameter_description>
</parameter>
</parameters>
<return> the pointer which was removed
</return>
</function>

<function name="g_ptr_array_remove_range">
<description>
Removes the given number of pointers starting at the given index
from a #GPtrArray. The following elements are moved to close the
gap. If @array has a non-%NULL #GDestroyNotify function it is
called for the removed elements.

Since: 2.4

</description>
<parameters>
<parameter name="array">
<parameter_description> a @GPtrArray
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the first pointer to remove
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the number of pointers to remove
</parameter_description>
</parameter>
</parameters>
<return> the @array

</return>
</function>

<function name="g_ptr_array_set_free_func">
<description>
Sets a function for freeing each element when @array is destroyed
either via g_ptr_array_unref(), when g_ptr_array_free() is called
with @free_segment set to %TRUE or when removing elements.

Since: 2.22

</description>
<parameters>
<parameter name="array">
<parameter_description> A #GPtrArray
</parameter_description>
</parameter>
<parameter name="element_free_func">
<parameter_description> A function to free elements with
destroy @array or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_ptr_array_set_size">
<description>
Sets the size of the array. When making the array larger,
newly-added elements will be set to %NULL. When making it smaller,
if @array has a non-%NULL #GDestroyNotify function then it will be
called for the removed elements.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the new length of the pointer array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_ptr_array_sized_new">
<description>
Creates a new #GPtrArray with @reserved_size pointers preallocated
and a reference count of 1. This avoids frequent reallocation, if
you are going to add many pointers to the array. Note however that
the size of the array is still 0.


</description>
<parameters>
<parameter name="reserved_size">
<parameter_description> number of pointers preallocated
</parameter_description>
</parameter>
</parameters>
<return> the new #GPtrArray
</return>
</function>

<function name="g_ptr_array_sort">
<description>
Sorts the array, using @compare_func which should be a qsort()-style
comparison function (returns less than zero for first arg is less
than second arg, zero for equal, greater than zero if irst arg is
greater than second arg).

Note that the comparison function for g_ptr_array_sort() doesn't
take the pointers from the array as arguments, it takes pointers to
the pointers in the array.

This is guaranteed to be a stable sort since version 2.32.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> comparison function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_ptr_array_sort_with_data">
<description>
Like g_ptr_array_sort(), but the comparison function has an extra
user data argument.

Note that the comparison function for g_ptr_array_sort_with_data()
doesn't take the pointers from the array as arguments, it takes
pointers to the pointers in the array.

This is guaranteed to be a stable sort since version 2.32.

</description>
<parameters>
<parameter name="array">
<parameter_description> a #GPtrArray
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> comparison function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @compare_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_ptr_array_unref">
<description>
Atomically decrements the reference count of @array by one. If the
reference count drops to 0, the effect is the same as calling
g_ptr_array_free() with @free_segment set to %TRUE. This function
is thread-safe and may be called from any thread.

Since: 2.22

</description>
<parameters>
<parameter name="array">
<parameter_description> A #GPtrArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_qsort_with_data">
<description>
This is just like the standard C qsort() function, but
the comparison routine accepts a user data argument.

This is guaranteed to be a stable sort since version 2.32.

</description>
<parameters>
<parameter name="pbase">
<parameter_description> start of array to sort
</parameter_description>
</parameter>
<parameter name="total_elems">
<parameter_description> elements in the array
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> size of each element
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> function to compare elements
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @compare_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_quark_from_static_string">
<description>
Gets the #GQuark identifying the given (static) string. If the
string does not currently have an associated #GQuark, a new #GQuark
is created, linked to the given string.

Note that this function is identical to g_quark_from_string() except
that if a new #GQuark is created the string itself is used rather
than a copy. This saves memory, but can only be used if the string
will continue to exist until the program terminates. It can be used
with statically allocated strings in the main program, but not with
statically allocated memory in dynamically loaded modules, if you
expect to ever unload the module again (e.g. do not use this
function in GTK+ theme engines).


</description>
<parameters>
<parameter name="string">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> the #GQuark identifying the string, or 0 if @string is %NULL
</return>
</function>

<function name="g_quark_from_string">
<description>
Gets the #GQuark identifying the given string. If the string does
not currently have an associated #GQuark, a new #GQuark is created,
using a copy of the string.


</description>
<parameters>
<parameter name="string">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> the #GQuark identifying the string, or 0 if @string is %NULL
</return>
</function>

<function name="g_quark_to_string">
<description>
Gets the string associated with the given #GQuark.


</description>
<parameters>
<parameter name="quark">
<parameter_description> a #GQuark.
</parameter_description>
</parameter>
</parameters>
<return> the string associated with the #GQuark
</return>
</function>

<function name="g_quark_try_string">
<description>
Gets the #GQuark associated with the given string, or 0 if string is
%NULL or it has no associated #GQuark.

If you want the GQuark to be created if it doesn't already exist,
use g_quark_from_string() or g_quark_from_static_string().


</description>
<parameters>
<parameter name="string">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> the #GQuark associated with the string, or 0 if @string is
%NULL or there is no #GQuark associated with it
</return>
</function>

<function name="g_queue_clear">
<description>
Removes all the elements in @queue. If queue elements contain
dynamically-allocated memory, they should be freed first.

Since: 2.14

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_copy">
<description>
Copies a @queue. Note that is a shallow copy. If the elements in the
queue consist of pointers to data, the pointers are copied, but the
actual data is not.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return> a copy of @queue

</return>
</function>

<function name="g_queue_delete_link">
<description>
Removes @link_ from @queue and frees it.

@link_ must be part of @queue.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="link_">
<parameter_description> a #GList link that must be part of @queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_find">
<description>
Finds the first link in @queue which contains @data.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to find
</parameter_description>
</parameter>
</parameters>
<return> the first link in @queue which contains @data

</return>
</function>

<function name="g_queue_find_custom">
<description>
Finds an element in a #GQueue, using a supplied function to find the
desired element. It iterates over the queue, calling the given function
which should return 0 when the desired element is found. The function
takes two gconstpointer arguments, the #GQueue element's data as the
first argument and the given user data as the second argument.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data passed to @func
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GCompareFunc to call for each element. It should return 0
when the desired element is found
</parameter_description>
</parameter>
</parameters>
<return> the found link, or %NULL if it wasn't found

</return>
</function>

<function name="g_queue_foreach">
<description>
Calls @func for each element in the queue passing @user_data to the
function.

It is safe for @func to remove the element from @queue, but it must
not modify any part of the queue after that element.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each element's data
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_free">
<description>
Frees the memory allocated for the #GQueue. Only call this function
if @queue was created with g_queue_new(). If queue elements contain
dynamically-allocated memory, they should be freed first.

If queue elements contain dynamically-allocated memory, you should
either use g_queue_free_full() or free them manually first.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_free_full">
<description>
Convenience method, which frees all the memory used by a #GQueue,
and calls the specified destroy function on every element's data.

@free_func should not modify the queue (eg, by removing the freed
element from it).

Since: 2.32

</description>
<parameters>
<parameter name="queue">
<parameter_description> a pointer to a #GQueue
</parameter_description>
</parameter>
<parameter name="free_func">
<parameter_description> the function to be called to free each element's data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_get_length">
<description>
Returns the number of items in @queue.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return> the number of items in @queue

</return>
</function>

<function name="g_queue_index">
<description>
Returns the position of the first element in @queue which contains @data.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to find
</parameter_description>
</parameter>
</parameters>
<return> the position of the first element in @queue which
contains @data, or -1 if no element in @queue contains @data

</return>
</function>

<function name="g_queue_init">
<description>
A statically-allocated #GQueue must be initialized with this function
before it can be used. Alternatively you can initialize it with
#G_QUEUE_INIT. It is not necessary to initialize queues created with
g_queue_new().

Since: 2.14

</description>
<parameters>
<parameter name="queue">
<parameter_description> an uninitialized #GQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_insert_after">
<description>
Inserts @data into @queue after @sibling.

@sibling must be part of @queue. Since GLib 2.44 a %NULL sibling pushes the
data at the head of the queue.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #GList link that must be part of @queue, or %NULL to
push at the head of the queue.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to insert
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_insert_before">
<description>
Inserts @data into @queue before @sibling.

@sibling must be part of @queue. Since GLib 2.44 a %NULL sibling pushes the
data at the tail of the queue.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #GList link that must be part of @queue, or %NULL to
push at the tail of the queue.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to insert
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_insert_sorted">
<description>
Inserts @data into @queue using @func to determine the new position.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to insert
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GCompareDataFunc used to compare elements in the queue. It is
called with two elements of the @queue and @user_data. It should
return 0 if the elements are equal, a negative value if the first
element comes before the second, and a positive value if the second
element comes before the first.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_is_empty">
<description>
Returns %TRUE if the queue is empty.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the queue is empty
</return>
</function>

<function name="g_queue_link_index">
<description>
Returns the position of @link_ in @queue.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="link_">
<parameter_description> a #GList link
</parameter_description>
</parameter>
</parameters>
<return> the position of @link_, or -1 if the link is
not part of @queue

</return>
</function>

<function name="g_queue_new">
<description>
Creates a new #GQueue.


</description>
<parameters>
</parameters>
<return> a newly allocated #GQueue
</return>
</function>

<function name="g_queue_peek_head">
<description>
Returns the first element of the queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return> the data of the first element in the queue, or %NULL
if the queue is empty
</return>
</function>

<function name="g_queue_peek_head_link">
<description>
Returns the first link in @queue.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return> the first link in @queue, or %NULL if @queue is empty

</return>
</function>

<function name="g_queue_peek_nth">
<description>
Returns the @n'th element of @queue. 

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the position of the element
</parameter_description>
</parameter>
</parameters>
<return> the data for the @n'th element of @queue,
or %NULL if @n is off the end of @queue

</return>
</function>

<function name="g_queue_peek_nth_link">
<description>
Returns the link at the given position

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the position of the link
</parameter_description>
</parameter>
</parameters>
<return> the link at the @n'th position, or %NULL
if @n is off the end of the list

</return>
</function>

<function name="g_queue_peek_tail">
<description>
Returns the last element of the queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return> the data of the last element in the queue, or %NULL
if the queue is empty
</return>
</function>

<function name="g_queue_peek_tail_link">
<description>
Returns the last link in @queue.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return> the last link in @queue, or %NULL if @queue is empty

</return>
</function>

<function name="g_queue_pop_head">
<description>
Removes the first element of the queue and returns its data.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return> the data of the first element in the queue, or %NULL
if the queue is empty
</return>
</function>

<function name="g_queue_pop_head_link">
<description>
Removes and returns the first element of the queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return> the #GList element at the head of the queue, or %NULL
if the queue is empty
</return>
</function>

<function name="g_queue_pop_nth">
<description>
Removes the @n'th element of @queue and returns its data.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the position of the element
</parameter_description>
</parameter>
</parameters>
<return> the element's data, or %NULL if @n is off the end of @queue

</return>
</function>

<function name="g_queue_pop_nth_link">
<description>
Removes and returns the link at the given position.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the link's position
</parameter_description>
</parameter>
</parameters>
<return> the @n'th link, or %NULL if @n is off the end of @queue

</return>
</function>

<function name="g_queue_pop_tail">
<description>
Removes the last element of the queue and returns its data.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return> the data of the last element in the queue, or %NULL
if the queue is empty
</return>
</function>

<function name="g_queue_pop_tail_link">
<description>
Removes and returns the last element of the queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return> the #GList element at the tail of the queue, or %NULL
if the queue is empty
</return>
</function>

<function name="g_queue_push_head">
<description>
Adds a new element at the head of the queue.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_push_head_link">
<description>
Adds a new element at the head of the queue.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="link_">
<parameter_description> a single #GList element, not a list with more than one element
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_push_nth">
<description>
Inserts a new element into @queue at the given position.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the position to insert the new element. If @n is negative or
larger than the number of elements in the @queue, the element is
added to the end of the queue.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_push_nth_link">
<description>
Inserts @link into @queue at the given position.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the position to insert the link. If this is negative or larger than
the number of elements in @queue, the link is added to the end of
@queue.
</parameter_description>
</parameter>
<parameter name="link_">
<parameter_description> the link to add to @queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_push_tail">
<description>
Adds a new element at the tail of the queue.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_push_tail_link">
<description>
Adds a new element at the tail of the queue.

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="link_">
<parameter_description> a single #GList element, not a list with more than one element
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_remove">
<description>
Removes the first element in @queue that contains @data. 

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was found and removed from @queue

</return>
</function>

<function name="g_queue_remove_all">
<description>
Remove all elements whose data equals @data from @queue.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to remove
</parameter_description>
</parameter>
</parameters>
<return> the number of elements removed from @queue

</return>
</function>

<function name="g_queue_reverse">
<description>
Reverses the order of the items in @queue.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_sort">
<description>
Sorts @queue using @compare_func. 

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> the #GCompareDataFunc used to sort @queue. This function
is passed two elements of the queue and should return 0 if they are
equal, a negative value if the first comes before the second, and
a positive value if the second comes before the first.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @compare_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_queue_unlink">
<description>
Unlinks @link_ so that it will no longer be part of @queue.
The link is not freed.

@link_ must be part of @queue.

Since: 2.4

</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GQueue
</parameter_description>
</parameter>
<parameter name="link_">
<parameter_description> a #GList link that must be part of @queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rand_boolean">
<description>
Returns a random #gboolean from @rand_.
This corresponds to a unbiased coin toss.


</description>
<parameters>
<parameter name="rand_">
<parameter_description> a #GRand
</parameter_description>
</parameter>
</parameters>
<return> a random #gboolean
</return>
</function>

<function name="g_rand_copy">
<description>
Copies a #GRand into a new one with the same exact state as before.
This way you can take a snapshot of the random number generator for
replaying later.

Since: 2.4

</description>
<parameters>
<parameter name="rand_">
<parameter_description> a #GRand
</parameter_description>
</parameter>
</parameters>
<return> the new #GRand

</return>
</function>

<function name="g_rand_double">
<description>
Returns the next random #gdouble from @rand_ equally distributed over
the range [0..1).


</description>
<parameters>
<parameter name="rand_">
<parameter_description> a #GRand
</parameter_description>
</parameter>
</parameters>
<return> a random number
</return>
</function>

<function name="g_rand_double_range">
<description>
Returns the next random #gdouble from @rand_ equally distributed over
the range [@begin..@end).


</description>
<parameters>
<parameter name="rand_">
<parameter_description> a #GRand
</parameter_description>
</parameter>
<parameter name="begin">
<parameter_description> lower closed bound of the interval
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> upper open bound of the interval
</parameter_description>
</parameter>
</parameters>
<return> a random number
</return>
</function>

<function name="g_rand_free">
<description>
Frees the memory allocated for the #GRand.

</description>
<parameters>
<parameter name="rand_">
<parameter_description> a #GRand
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rand_int">
<description>
Returns the next random #guint32 from @rand_ equally distributed over
the range [0..2^32-1].


</description>
<parameters>
<parameter name="rand_">
<parameter_description> a #GRand
</parameter_description>
</parameter>
</parameters>
<return> a random number
</return>
</function>

<function name="g_rand_int_range">
<description>
Returns the next random #gint32 from @rand_ equally distributed over
the range [@begin..@end-1].


</description>
<parameters>
<parameter name="rand_">
<parameter_description> a #GRand
</parameter_description>
</parameter>
<parameter name="begin">
<parameter_description> lower closed bound of the interval
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> upper open bound of the interval
</parameter_description>
</parameter>
</parameters>
<return> a random number
</return>
</function>

<function name="g_rand_new">
<description>
Creates a new random number generator initialized with a seed taken
either from `/dev/urandom` (if existing) or from the current time
(as a fallback).

On Windows, the seed is taken from rand_s().


</description>
<parameters>
</parameters>
<return> the new #GRand
</return>
</function>

<function name="g_rand_new_with_seed">
<description>
Creates a new random number generator initialized with @seed.


</description>
<parameters>
<parameter name="seed">
<parameter_description> a value to initialize the random number generator
</parameter_description>
</parameter>
</parameters>
<return> the new #GRand
</return>
</function>

<function name="g_rand_new_with_seed_array">
<description>
Creates a new random number generator initialized with @seed.

Since: 2.4

</description>
<parameters>
<parameter name="seed">
<parameter_description> an array of seeds to initialize the random number generator
</parameter_description>
</parameter>
<parameter name="seed_length">
<parameter_description> an array of seeds to initialize the random number
generator
</parameter_description>
</parameter>
</parameters>
<return> the new #GRand

</return>
</function>

<function name="g_rand_set_seed">
<description>
Sets the seed for the random number generator #GRand to @seed.

</description>
<parameters>
<parameter name="rand_">
<parameter_description> a #GRand
</parameter_description>
</parameter>
<parameter name="seed">
<parameter_description> a value to reinitialize the random number generator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rand_set_seed_array">
<description>
Initializes the random number generator by an array of longs.
Array can be of arbitrary size, though only the first 624 values
are taken.  This function is useful if you have many low entropy
seeds, or if you require more then 32 bits of actual entropy for
your application.

Since: 2.4

</description>
<parameters>
<parameter name="rand_">
<parameter_description> a #GRand
</parameter_description>
</parameter>
<parameter name="seed">
<parameter_description> array to initialize with
</parameter_description>
</parameter>
<parameter name="seed_length">
<parameter_description> length of array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_random_boolean">
<description>
Returns a random #gboolean.
This corresponds to a unbiased coin toss.


</description>
<parameters>
</parameters>
<return> a random #gboolean
</return>
</function>

<function name="g_random_double">
<description>
Returns a random #gdouble equally distributed over the range [0..1).


</description>
<parameters>
</parameters>
<return> a random number
</return>
</function>

<function name="g_random_double_range">
<description>
Returns a random #gdouble equally distributed over the range
[@begin..@end).


</description>
<parameters>
<parameter name="begin">
<parameter_description> lower closed bound of the interval
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> upper open bound of the interval
</parameter_description>
</parameter>
</parameters>
<return> a random number
</return>
</function>

<function name="g_random_int">
<description>
Return a random #guint32 equally distributed over the range
[0..2^32-1].


</description>
<parameters>
</parameters>
<return> a random number
</return>
</function>

<function name="g_random_int_range">
<description>
Returns a random #gint32 equally distributed over the range
[@begin..@end-1].


</description>
<parameters>
<parameter name="begin">
<parameter_description> lower closed bound of the interval
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> upper open bound of the interval
</parameter_description>
</parameter>
</parameters>
<return> a random number
</return>
</function>

<function name="g_random_set_seed">
<description>
Sets the seed for the global random number generator, which is used
by the g_random_* functions, to @seed.

</description>
<parameters>
<parameter name="seed">
<parameter_description> a value to reinitialize the global random number generator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_realloc">
<description>
Reallocates the memory pointed to by @mem, so that it now has space for
@n_bytes bytes of memory. It returns the new address of the memory, which may
have been moved. @mem may be %NULL, in which case it's considered to
have zero-length. @n_bytes may be 0, in which case %NULL will be returned
and @mem will be freed unless it is %NULL.


</description>
<parameters>
<parameter name="mem">
<parameter_description> the memory to reallocate
</parameter_description>
</parameter>
<parameter name="n_bytes">
<parameter_description> new size of the memory in bytes
</parameter_description>
</parameter>
</parameters>
<return> the new address of the allocated memory
</return>
</function>

<function name="g_realloc_n">
<description>
This function is similar to g_realloc(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.

Since: 2.24

</description>
<parameters>
<parameter name="mem">
<parameter_description> the memory to reallocate
</parameter_description>
</parameter>
<parameter name="n_blocks">
<parameter_description> the number of blocks to allocate
</parameter_description>
</parameter>
<parameter name="n_block_bytes">
<parameter_description> the size of each block in bytes
</parameter_description>
</parameter>
</parameters>
<return> the new address of the allocated memory
</return>
</function>

<function name="g_rec_mutex_clear">
<description>
Frees the resources allocated to a recursive mutex with
g_rec_mutex_init().

This function should not be used with a #GRecMutex that has been
statically allocated.

Calling g_rec_mutex_clear() on a locked recursive mutex leads
to undefined behaviour.

Sine: 2.32

</description>
<parameters>
<parameter name="rec_mutex">
<parameter_description> an initialized #GRecMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rec_mutex_init">
<description>
Initializes a #GRecMutex so that it can be used.

This function is useful to initialize a recursive mutex
that has been allocated on the stack, or as part of a larger
structure.

It is not necessary to initialise a recursive mutex that has been
statically allocated.

|[&lt;!-- language=&quot;C&quot; --&gt; 
typedef struct {
GRecMutex m;
...
} Blob;

Blob *b;

b = g_new (Blob, 1);
g_rec_mutex_init (&amp;b-&gt;m);
]|

Calling g_rec_mutex_init() on an already initialized #GRecMutex
leads to undefined behaviour.

To undo the effect of g_rec_mutex_init() when a recursive mutex
is no longer needed, use g_rec_mutex_clear().

Since: 2.32

</description>
<parameters>
<parameter name="rec_mutex">
<parameter_description> an uninitialized #GRecMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rec_mutex_lock">
<description>
Locks @rec_mutex. If @rec_mutex is already locked by another
thread, the current thread will block until @rec_mutex is
unlocked by the other thread. If @rec_mutex is already locked
by the current thread, the 'lock count' of @rec_mutex is increased.
The mutex will only become available again when it is unlocked
as many times as it has been locked.

Since: 2.32

</description>
<parameters>
<parameter name="rec_mutex">
<parameter_description> a #GRecMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rec_mutex_trylock">
<description>
Tries to lock @rec_mutex. If @rec_mutex is already locked
by another thread, it immediately returns %FALSE. Otherwise
it locks @rec_mutex and returns %TRUE.

Since: 2.32

</description>
<parameters>
<parameter name="rec_mutex">
<parameter_description> a #GRecMutex
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @rec_mutex could be locked

</return>
</function>

<function name="g_rec_mutex_unlock">
<description>
Unlocks @rec_mutex. If another thread is blocked in a
g_rec_mutex_lock() call for @rec_mutex, it will become unblocked
and can lock @rec_mutex itself.

Calling g_rec_mutex_unlock() on a recursive mutex that is not
locked by the current thread leads to undefined behaviour.

Since: 2.32

</description>
<parameters>
<parameter name="rec_mutex">
<parameter_description> a #GRecMutex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_regex_check_replacement">
<description>
Checks whether @replacement is a valid replacement string
(see g_regex_replace()), i.e. that all escape sequences in
it are valid.

If @has_references is not %NULL then @replacement is checked
for pattern references. For instance, replacement text 'foo\n'
does not contain references and may be evaluated without information
about actual match, but '\0\1' (whole match followed by first
subpattern) requires valid #GMatchInfo object.

Since: 2.14

</description>
<parameters>
<parameter name="replacement">
<parameter_description> the replacement string
</parameter_description>
</parameter>
<parameter name="has_references">
<parameter_description> location to store information about
references in @replacement or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error
</parameter_description>
</parameter>
</parameters>
<return> whether @replacement is a valid replacement string

</return>
</function>

<function name="g_regex_escape_nul">
<description>
Escapes the nul characters in @string to &quot;\x00&quot;.  It can be used
to compile a regex with embedded nul characters.

For completeness, @length can be -1 for a nul-terminated string.
In this case the output string will be of course equal to @string.

Since: 2.30

</description>
<parameters>
<parameter name="string">
<parameter_description> the string to escape
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @string
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated escaped string

</return>
</function>

<function name="g_regex_escape_string">
<description>
Escapes the special characters used for regular expressions
in @string, for instance &quot;a.b*c&quot; becomes &quot;a\.b\*c&quot;. This
function is useful to dynamically generate regular expressions.

@string can contain nul characters that are replaced with &quot;\0&quot;,
in this case remember to specify the correct length of @string
in @length.

Since: 2.14

</description>
<parameters>
<parameter name="string">
<parameter_description> the string to escape
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @string, or -1 if @string is nul-terminated
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated escaped string

</return>
</function>

<function name="g_regex_get_capture_count">
<description>
Returns the number of capturing subpatterns in the pattern.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex
</parameter_description>
</parameter>
</parameters>
<return> the number of capturing subpatterns

</return>
</function>

<function name="g_regex_get_compile_flags">
<description>
Returns the compile options that @regex was created with.

Depending on the version of PCRE that is used, this may or may not
include flags set by option expressions such as `(?i)` found at the
top-level within the compiled pattern.

Since: 2.26

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex
</parameter_description>
</parameter>
</parameters>
<return> flags from #GRegexCompileFlags

</return>
</function>

<function name="g_regex_get_has_cr_or_lf">
<description>
Checks whether the pattern contains explicit CR or LF references.

Since: 2.34

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pattern contains explicit CR or LF references

</return>
</function>

<function name="g_regex_get_match_flags">
<description>
Returns the match options that @regex was created with.

Since: 2.26

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex
</parameter_description>
</parameter>
</parameters>
<return> flags from #GRegexMatchFlags

</return>
</function>

<function name="g_regex_get_max_backref">
<description>
Returns the number of the highest back reference
in the pattern, or 0 if the pattern does not contain
back references.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex
</parameter_description>
</parameter>
</parameters>
<return> the number of the highest back reference

</return>
</function>

<function name="g_regex_get_max_lookbehind">
<description>
Gets the number of characters in the longest lookbehind assertion in the
pattern. This information is useful when doing multi-segment matching using
the partial matching facilities.

Since: 2.38

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure
</parameter_description>
</parameter>
</parameters>
<return> the number of characters in the longest lookbehind assertion.

</return>
</function>

<function name="g_regex_get_pattern">
<description>
Gets the pattern string associated with @regex, i.e. a copy of
the string passed to g_regex_new().

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure
</parameter_description>
</parameter>
</parameters>
<return> the pattern of @regex

</return>
</function>

<function name="g_regex_get_string_number">
<description>
Retrieves the number of the subexpression named @name.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> #GRegex structure
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the subexpression
</parameter_description>
</parameter>
</parameters>
<return> The number of the subexpression or -1 if @name
does not exists

</return>
</function>

<function name="g_regex_match">
<description>
Scans for a match in string for the pattern in @regex.
The @match_options are combined with the match options specified
when the @regex structure was created, letting you have more
flexibility in reusing #GRegex structures.

A #GMatchInfo structure, used to get information on the match,
is stored in @match_info if not %NULL. Note that if @match_info
is not %NULL then it is created even if the function returns %FALSE,
i.e. you must free it regardless if regular expression actually matched.

To retrieve all the non-overlapping matches of the pattern in
string you can use g_match_info_next().

|[&lt;!-- language=&quot;C&quot; --&gt; 
static void
print_uppercase_words (const gchar *string)
{
// Print all uppercase-only words.
GRegex *regex;
GMatchInfo *match_info;

regex = g_regex_new (&quot;[A-Z]+&quot;, 0, 0, NULL);
g_regex_match (regex, string, 0, &amp;match_info);
while (g_match_info_matches (match_info))
{
gchar *word = g_match_info_fetch (match_info, 0);
g_print (&quot;Found: %s\n&quot;, word);
g_free (word);
g_match_info_next (match_info, NULL);
}
g_match_info_free (match_info);
g_regex_unref (regex);
}
]|

@string is not copied and is used in #GMatchInfo internally. If
you use any #GMatchInfo method (except g_match_info_free()) after
freeing or modifying @string then the behaviour is undefined.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure from g_regex_new()
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to scan for matches
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> match options
</parameter_description>
</parameter>
<parameter name="match_info">
<parameter_description> pointer to location where to store
the #GMatchInfo, or %NULL if you do not need it
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is the string matched, %FALSE otherwise

</return>
</function>

<function name="g_regex_match_all">
<description>
Using the standard algorithm for regular expression matching only
the longest match in the string is retrieved. This function uses
a different algorithm so it can retrieve all the possible matches.
For more documentation see g_regex_match_all_full().

A #GMatchInfo structure, used to get information on the match, is
stored in @match_info if not %NULL. Note that if @match_info is
not %NULL then it is created even if the function returns %FALSE,
i.e. you must free it regardless if regular expression actually
matched.

@string is not copied and is used in #GMatchInfo internally. If
you use any #GMatchInfo method (except g_match_info_free()) after
freeing or modifying @string then the behaviour is undefined.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure from g_regex_new()
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to scan for matches
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> match options
</parameter_description>
</parameter>
<parameter name="match_info">
<parameter_description> pointer to location where to store
the #GMatchInfo, or %NULL if you do not need it
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is the string matched, %FALSE otherwise

</return>
</function>

<function name="g_regex_match_all_full">
<description>
Using the standard algorithm for regular expression matching only
the longest match in the string is retrieved, it is not possible
to obtain all the available matches. For instance matching
&quot;&lt;a&gt; &lt;b&gt; &lt;c&gt;&quot; against the pattern &quot;&lt;.*&gt;&quot;
you get &quot;&lt;a&gt; &lt;b&gt; &lt;c&gt;&quot;.

This function uses a different algorithm (called DFA, i.e. deterministic
finite automaton), so it can retrieve all the possible matches, all
starting at the same point in the string. For instance matching
&quot;&lt;a&gt; &lt;b&gt; &lt;c&gt;&quot; against the pattern &quot;&lt;.*&gt;;&quot;
you would obtain three matches: &quot;&lt;a&gt; &lt;b&gt; &lt;c&gt;&quot;,
&quot;&lt;a&gt; &lt;b&gt;&quot; and &quot;&lt;a&gt;&quot;.

The number of matched strings is retrieved using
g_match_info_get_match_count(). To obtain the matched strings and
their position you can use, respectively, g_match_info_fetch() and
g_match_info_fetch_pos(). Note that the strings are returned in
reverse order of length; that is, the longest matching string is
given first.

Note that the DFA algorithm is slower than the standard one and it
is not able to capture substrings, so backreferences do not work.

Setting @start_position differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern
that begins with any kind of lookbehind assertion, such as &quot;\b&quot;.

A #GMatchInfo structure, used to get information on the match, is
stored in @match_info if not %NULL. Note that if @match_info is
not %NULL then it is created even if the function returns %FALSE,
i.e. you must free it regardless if regular expression actually
matched.

@string is not copied and is used in #GMatchInfo internally. If
you use any #GMatchInfo method (except g_match_info_free()) after
freeing or modifying @string then the behaviour is undefined.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure from g_regex_new()
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to scan for matches
</parameter_description>
</parameter>
<parameter name="string_len">
<parameter_description> the length of @string, or -1 if @string is nul-terminated
</parameter_description>
</parameter>
<parameter name="start_position">
<parameter_description> starting index of the string to match, in bytes
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> match options
</parameter_description>
</parameter>
<parameter name="match_info">
<parameter_description> pointer to location where to store
the #GMatchInfo, or %NULL if you do not need it
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is the string matched, %FALSE otherwise

</return>
</function>

<function name="g_regex_match_full">
<description>
Scans for a match in string for the pattern in @regex.
The @match_options are combined with the match options specified
when the @regex structure was created, letting you have more
flexibility in reusing #GRegex structures.

Setting @start_position differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern
that begins with any kind of lookbehind assertion, such as &quot;\b&quot;.

A #GMatchInfo structure, used to get information on the match, is
stored in @match_info if not %NULL. Note that if @match_info is
not %NULL then it is created even if the function returns %FALSE,
i.e. you must free it regardless if regular expression actually
matched.

@string is not copied and is used in #GMatchInfo internally. If
you use any #GMatchInfo method (except g_match_info_free()) after
freeing or modifying @string then the behaviour is undefined.

To retrieve all the non-overlapping matches of the pattern in
string you can use g_match_info_next().

|[&lt;!-- language=&quot;C&quot; --&gt; 
static void
print_uppercase_words (const gchar *string)
{
// Print all uppercase-only words.
GRegex *regex;
GMatchInfo *match_info;
GError *error = NULL;

regex = g_regex_new (&quot;[A-Z]+&quot;, 0, 0, NULL);
g_regex_match_full (regex, string, -1, 0, 0, &amp;match_info, &amp;error);
while (g_match_info_matches (match_info))
{
gchar *word = g_match_info_fetch (match_info, 0);
g_print (&quot;Found: %s\n&quot;, word);
g_free (word);
g_match_info_next (match_info, &amp;error);
}
g_match_info_free (match_info);
g_regex_unref (regex);
if (error != NULL)
{
g_printerr (&quot;Error while matching: %s\n&quot;, error-&gt;message);
g_error_free (error);
}
}
]|

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure from g_regex_new()
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to scan for matches
</parameter_description>
</parameter>
<parameter name="string_len">
<parameter_description> the length of @string, or -1 if @string is nul-terminated
</parameter_description>
</parameter>
<parameter name="start_position">
<parameter_description> starting index of the string to match, in bytes
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> match options
</parameter_description>
</parameter>
<parameter name="match_info">
<parameter_description> pointer to location where to store
the #GMatchInfo, or %NULL if you do not need it
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is the string matched, %FALSE otherwise

</return>
</function>

<function name="g_regex_match_simple">
<description>
Scans for a match in @string for @pattern.

This function is equivalent to g_regex_match() but it does not
require to compile the pattern with g_regex_new(), avoiding some
lines of code when you need just to do a match without extracting
substrings, capture counts, and so on.

If this function is to be called on the same @pattern more than
once, it's more efficient to compile the pattern once with
g_regex_new() and then use g_regex_match().

Since: 2.14

</description>
<parameters>
<parameter name="pattern">
<parameter_description> the regular expression
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to scan for matches
</parameter_description>
</parameter>
<parameter name="compile_options">
<parameter_description> compile options for the regular expression, or 0
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> match options, or 0
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the string matched, %FALSE otherwise

</return>
</function>

<function name="g_regex_new">
<description>
Compiles the regular expression to an internal form, and does
the initial setup of the #GRegex structure.

Since: 2.14

</description>
<parameters>
<parameter name="pattern">
<parameter_description> the regular expression
</parameter_description>
</parameter>
<parameter name="compile_options">
<parameter_description> compile options for the regular expression, or 0
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> match options for the regular expression, or 0
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> a #GRegex structure or %NULL if an error occured. Call
g_regex_unref() when you are done with it

</return>
</function>

<function name="g_regex_ref">
<description>
Increases reference count of @regex by 1.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex
</parameter_description>
</parameter>
</parameters>
<return> @regex

</return>
</function>

<function name="g_regex_replace">
<description>
Replaces all occurrences of the pattern in @regex with the
replacement text. Backreferences of the form '\number' or
'\g&lt;number&gt;' in the replacement text are interpolated by the
number-th captured subexpression of the match, '\g&lt;name&gt;' refers
to the captured subexpression with the given name. '\0' refers
to the complete match, but '\0' followed by a number is the octal
representation of a character. To include a literal '\' in the
replacement, write '\\\\'.

There are also escapes that changes the case of the following text:

- \l: Convert to lower case the next character
- \u: Convert to upper case the next character
- \L: Convert to lower case till \E
- \U: Convert to upper case till \E
- \E: End case modification

If you do not need to use backreferences use g_regex_replace_literal().

The @replacement string must be UTF-8 encoded even if #G_REGEX_RAW was
passed to g_regex_new(). If you want to use not UTF-8 encoded stings
you can use g_regex_replace_literal().

Setting @start_position differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern that
begins with any kind of lookbehind assertion, such as &quot;\b&quot;.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to perform matches against
</parameter_description>
</parameter>
<parameter name="string_len">
<parameter_description> the length of @string, or -1 if @string is nul-terminated
</parameter_description>
</parameter>
<parameter name="start_position">
<parameter_description> starting index of the string to match, in bytes
</parameter_description>
</parameter>
<parameter name="replacement">
<parameter_description> text to replace each match with
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> options for the match
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the replacements

</return>
</function>

<function name="g_regex_replace_eval">
<description>
Replaces occurrences of the pattern in regex with the output of
@eval for that occurrence.

Setting @start_position differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern
that begins with any kind of lookbehind assertion, such as &quot;\b&quot;.

The following example uses g_regex_replace_eval() to replace multiple
strings at once:
|[&lt;!-- language=&quot;C&quot; --&gt; 
static gboolean
eval_cb (const GMatchInfo *info,
GString          *res,
gpointer          data)
{
gchar *match;
gchar *r;

match = g_match_info_fetch (info, 0);
r = g_hash_table_lookup ((GHashTable *)data, match);
g_string_append (res, r);
g_free (match);

return FALSE;
}

...

GRegex *reg;
GHashTable *h;
gchar *res;

h = g_hash_table_new (g_str_hash, g_str_equal);

g_hash_table_insert (h, &quot;1&quot;, &quot;ONE&quot;);
g_hash_table_insert (h, &quot;2&quot;, &quot;TWO&quot;);
g_hash_table_insert (h, &quot;3&quot;, &quot;THREE&quot;);
g_hash_table_insert (h, &quot;4&quot;, &quot;FOUR&quot;);

reg = g_regex_new (&quot;1|2|3|4&quot;, 0, 0, NULL);
res = g_regex_replace_eval (reg, text, -1, 0, 0, eval_cb, h, NULL);
g_hash_table_destroy (h);

...
]|

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure from g_regex_new()
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> string to perform matches against
</parameter_description>
</parameter>
<parameter name="string_len">
<parameter_description> the length of @string, or -1 if @string is nul-terminated
</parameter_description>
</parameter>
<parameter name="start_position">
<parameter_description> starting index of the string to match, in bytes
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> options for the match
</parameter_description>
</parameter>
<parameter name="eval">
<parameter_description> a function to call for each match
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the replacements

</return>
</function>

<function name="g_regex_replace_literal">
<description>
Replaces all occurrences of the pattern in @regex with the
replacement text. @replacement is replaced literally, to
include backreferences use g_regex_replace().

Setting @start_position differs from just passing over a
shortened string and setting #G_REGEX_MATCH_NOTBOL in the
case of a pattern that begins with any kind of lookbehind
assertion, such as &quot;\b&quot;.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to perform matches against
</parameter_description>
</parameter>
<parameter name="string_len">
<parameter_description> the length of @string, or -1 if @string is nul-terminated
</parameter_description>
</parameter>
<parameter name="start_position">
<parameter_description> starting index of the string to match, in bytes
</parameter_description>
</parameter>
<parameter name="replacement">
<parameter_description> text to replace each match with
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> options for the match
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the replacements

</return>
</function>

<function name="g_regex_split">
<description>
Breaks the string on the pattern, and returns an array of the tokens.
If the pattern contains capturing parentheses, then the text for each
of the substrings will also be returned. If the pattern does not match
anywhere in the string, then the whole string is returned as the first
token.

As a special case, the result of splitting the empty string &quot;&quot; is an
empty vector, not a vector containing a single string. The reason for
this special case is that being able to represent a empty vector is
typically more useful than consistent handling of empty elements. If
you do need to represent empty elements, you'll need to check for the
empty string before calling this function.

A pattern that can match empty strings splits @string into separate
characters wherever it matches the empty string between characters.
For example splitting &quot;ab c&quot; using as a separator &quot;\s*&quot;, you will get
&quot;a&quot;, &quot;b&quot; and &quot;c&quot;.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to split with the pattern
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> match time option flags
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated gchar ** array. Free
it using g_strfreev()

</return>
</function>

<function name="g_regex_split_full">
<description>
Breaks the string on the pattern, and returns an array of the tokens.
If the pattern contains capturing parentheses, then the text for each
of the substrings will also be returned. If the pattern does not match
anywhere in the string, then the whole string is returned as the first
token.

As a special case, the result of splitting the empty string &quot;&quot; is an
empty vector, not a vector containing a single string. The reason for
this special case is that being able to represent a empty vector is
typically more useful than consistent handling of empty elements. If
you do need to represent empty elements, you'll need to check for the
empty string before calling this function.

A pattern that can match empty strings splits @string into separate
characters wherever it matches the empty string between characters.
For example splitting &quot;ab c&quot; using as a separator &quot;\s*&quot;, you will get
&quot;a&quot;, &quot;b&quot; and &quot;c&quot;.

Setting @start_position differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern
that begins with any kind of lookbehind assertion, such as &quot;\b&quot;.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex structure
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to split with the pattern
</parameter_description>
</parameter>
<parameter name="string_len">
<parameter_description> the length of @string, or -1 if @string is nul-terminated
</parameter_description>
</parameter>
<parameter name="start_position">
<parameter_description> starting index of the string to match, in bytes
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> match time option flags
</parameter_description>
</parameter>
<parameter name="max_tokens">
<parameter_description> the maximum number of tokens to split @string into.
If this is less than 1, the string is split completely
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated gchar ** array. Free
it using g_strfreev()

</return>
</function>

<function name="g_regex_split_simple">
<description>
Breaks the string on the pattern, and returns an array of
the tokens. If the pattern contains capturing parentheses,
then the text for each of the substrings will also be returned.
If the pattern does not match anywhere in the string, then the
whole string is returned as the first token.

This function is equivalent to g_regex_split() but it does
not require to compile the pattern with g_regex_new(), avoiding
some lines of code when you need just to do a split without
extracting substrings, capture counts, and so on.

If this function is to be called on the same @pattern more than
once, it's more efficient to compile the pattern once with
g_regex_new() and then use g_regex_split().

As a special case, the result of splitting the empty string &quot;&quot;
is an empty vector, not a vector containing a single string.
The reason for this special case is that being able to represent
a empty vector is typically more useful than consistent handling
of empty elements. If you do need to represent empty elements,
you'll need to check for the empty string before calling this
function.

A pattern that can match empty strings splits @string into
separate characters wherever it matches the empty string between
characters. For example splitting &quot;ab c&quot; using as a separator
&quot;\s*&quot;, you will get &quot;a&quot;, &quot;b&quot; and &quot;c&quot;.

Since: 2.14

</description>
<parameters>
<parameter name="pattern">
<parameter_description> the regular expression
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to scan for matches
</parameter_description>
</parameter>
<parameter name="compile_options">
<parameter_description> compile options for the regular expression, or 0
</parameter_description>
</parameter>
<parameter name="match_options">
<parameter_description> match options, or 0
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of strings. Free
it using g_strfreev()

</return>
</function>

<function name="g_regex_unref">
<description>
Decreases reference count of @regex by 1. When reference count drops
to zero, it frees all the memory associated with the regex structure.

Since: 2.14

</description>
<parameters>
<parameter name="regex">
<parameter_description> a #GRegex
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_relation_count">
<description>
Returns the number of tuples in a #GRelation that have the given
value in the given field.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="relation">
<parameter_description> a #GRelation.
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the value to compare with.
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> the field of each record to match.
</parameter_description>
</parameter>
</parameters>
<return> the number of matches.

</return>
</function>

<function name="g_relation_delete">
<description>
Deletes any records from a #GRelation that have the given key value
in the given field.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="relation">
<parameter_description> a #GRelation.
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the value to compare with.
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> the field of each record to match.
</parameter_description>
</parameter>
</parameters>
<return> the number of records deleted.

</return>
</function>

<function name="g_relation_destroy">
<description>
Destroys the #GRelation, freeing all memory allocated. However, it
does not free memory allocated for the tuple data, so you should
free that first if appropriate.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="relation">
<parameter_description> a #GRelation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_relation_exists">
<description>
Returns %TRUE if a record with the given values exists in a
#GRelation. Note that the values are compared directly, so that, for
example, two copies of the same string will not match.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="relation">
<parameter_description> a #GRelation.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the fields of the record to compare. The number must match
the number of fields in the #GRelation.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a record matches.

</return>
</function>

<function name="g_relation_index">
<description>
Creates an index on the given field. Note that this must be called
before any records are added to the #GRelation.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="relation">
<parameter_description> a #GRelation.
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> the field to index, counting from 0.
</parameter_description>
</parameter>
<parameter name="hash_func">
<parameter_description> a function to produce a hash value from the field data.
</parameter_description>
</parameter>
<parameter name="key_equal_func">
<parameter_description> a function to compare two values of the given field.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_relation_insert">
<description>
Inserts a record into a #GRelation.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="relation">
<parameter_description> a #GRelation.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the fields of the record to add. These must match the
number of fields in the #GRelation, and of type #gpointer
or #gconstpointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_relation_new">
<description>
Creates a new #GRelation with the given number of fields. Note that
currently the number of fields must be 2.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="fields">
<parameter_description> the number of fields.
</parameter_description>
</parameter>
</parameters>
<return> a new #GRelation.

</return>
</function>

<function name="g_relation_print">
<description>
Outputs information about all records in a #GRelation, as well as
the indexes. It is for debugging.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="relation">
<parameter_description> a #GRelation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_relation_select">
<description>
Returns all of the tuples which have the given key in the given
field. Use g_tuples_index() to access the returned records. The
returned records should be freed with g_tuples_destroy().

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="relation">
<parameter_description> a #GRelation.
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the value to compare with.
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> the field of each record to match.
</parameter_description>
</parameter>
</parameters>
<return> the records (tuples) that matched.

</return>
</function>

<function name="g_reload_user_special_dirs_cache">
<description>
Resets the cache used for g_get_user_special_dir(), so
that the latest on-disk version is used. Call this only
if you just changed the data on disk yourself.

Due to threadsafety issues this may cause leaking of strings
that were previously returned from g_get_user_special_dir()
that can't be freed. We ensure to only leak the data for
the directories that actually changed value though.

Since: 2.22

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_remove">
<description>
A wrapper for the POSIX remove() function. The remove() function
deletes a name from the filesystem.

See your C library manual for more details about how remove() works
on your system. On Unix, remove() removes also directories, as it
calls unlink() for files and rmdir() for directories. On Windows,
although remove() in the C library only works for files, this
function tries first remove() and then if that fails rmdir(), and
thus works for both files and directories. Note however, that on
Windows, it is in general not possible to remove a file that is
open to some process, or mapped into memory.

If this function fails on Windows you can't infer too much from the
errno value. rmdir() is tried regardless of what caused remove() to
fail. Any errno value set by remove() will be overwritten by that
set by rmdir().

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
</parameters>
<return> 0 if the file was successfully removed, -1 if an error 
occurred

</return>
</function>

<function name="g_rename">
<description>
A wrapper for the POSIX rename() function. The rename() function 
renames a file, moving it between directories if required.

See your C library manual for more details about how rename() works
on your system. It is not possible in general on Windows to rename
a file that is open to some process.

Since: 2.6

</description>
<parameters>
<parameter name="oldfilename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="newfilename">
<parameter_description> a pathname in the GLib file name encoding
</parameter_description>
</parameter>
</parameters>
<return> 0 if the renaming succeeded, -1 if an error occurred

</return>
</function>

<function name="g_renew">
<description>
Reallocates the memory pointed to by @mem, so that it now has space for
@n_structs elements of type @struct_type. It returns the new address of
the memory, which may have been moved.
Care is taken to avoid overflow when calculating the size of the allocated block.


</description>
<parameters>
<parameter name="struct_type">
<parameter_description> the type of the elements to allocate
</parameter_description>
</parameter>
<parameter name="mem">
<parameter_description> the currently allocated memory
</parameter_description>
</parameter>
<parameter name="n_structs">
<parameter_description> the number of elements to allocate
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the new allocated memory, cast to a pointer to @struct_type
</return>
</function>

<function name="g_return_if_fail">
<description>
Verifies that the expression @expr, usually representing a precondition,
evaluates to %TRUE. If the function returns a value, use
g_return_val_if_fail() instead.

If @expr evaluates to %FALSE, the current function should be considered to
have undefined behaviour (a programmer error). The only correct solution
to such an error is to change the module that is calling the current
function, so that it avoids this incorrect call.

To make this undefined behaviour visible, if @expr evaluates to %FALSE,
the result is usually that a critical message is logged and the current
function returns.

If `G_DISABLE_CHECKS` is defined then the check is not performed.  You
should therefore not depend on any side effects of @expr.

To debug failure of a g_return_if_fail() check, run the code under a debugger
with `G_DEBUG=fatal-criticals` or `G_DEBUG=fatal-warnings` defined in the
environment (see [Running GLib Applications](glib-running.html)):

|[
G_DEBUG=fatal-warnings gdb ./my-program
]|

Any unrelated failures can be skipped over in
[gdb](https://www.gnu.org/software/gdb/) using the `continue` command.

</description>
<parameters>
<parameter name="expr">
<parameter_description> the expression to check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_return_if_fail_warning">
<description>

</description>
<parameters>
<parameter name="log_domain">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="pretty_function">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="expression">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_return_if_reached">
<description>
Logs a critical message and returns from the current function.
This can only be used in functions which do not return a value.

See g_return_if_fail() for guidance on how to debug failure of this check.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_return_val_if_fail">
<description>
Verifies that the expression @expr, usually representing a precondition,
evaluates to %TRUE. If the function does not return a value, use
g_return_if_fail() instead.

If @expr evaluates to %FALSE, the current function should be considered to
have undefined behaviour (a programmer error). The only correct solution
to such an error is to change the module that is calling the current
function, so that it avoids this incorrect call.

To make this undefined behaviour visible, if @expr evaluates to %FALSE,
the result is usually that a critical message is logged and @val is
returned from the current function.

If `G_DISABLE_CHECKS` is defined then the check is not performed.  You
should therefore not depend on any side effects of @expr.

See g_return_if_fail() for guidance on how to debug failure of this check.

</description>
<parameters>
<parameter name="expr">
<parameter_description> the expression to check
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the value to return from the current function
if the expression is not true
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_return_val_if_reached">
<description>
Logs a critical message and returns @val.

See g_return_if_fail() for guidance on how to debug failure of this check.

</description>
<parameters>
<parameter name="val">
<parameter_description> the value to return from the current function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rmdir">
<description>
A wrapper for the POSIX rmdir() function. The rmdir() function
deletes a directory from the filesystem.

See your C library manual for more details about how rmdir() works
on your system.

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
</parameters>
<return> 0 if the directory was successfully removed, -1 if an error 
occurred

</return>
</function>

<function name="g_rw_lock_clear">
<description>
Frees the resources allocated to a lock with g_rw_lock_init().

This function should not be used with a #GRWLock that has been
statically allocated.

Calling g_rw_lock_clear() when any thread holds the lock
leads to undefined behaviour.

Sine: 2.32

</description>
<parameters>
<parameter name="rw_lock">
<parameter_description> an initialized #GRWLock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rw_lock_init">
<description>
Initializes a #GRWLock so that it can be used.

This function is useful to initialize a lock that has been
allocated on the stack, or as part of a larger structure.  It is not
necessary to initialise a reader-writer lock that has been statically
allocated.

|[&lt;!-- language=&quot;C&quot; --&gt; 
typedef struct {
GRWLock l;
...
} Blob;

Blob *b;

b = g_new (Blob, 1);
g_rw_lock_init (&amp;b-&gt;l);
]|

To undo the effect of g_rw_lock_init() when a lock is no longer
needed, use g_rw_lock_clear().

Calling g_rw_lock_init() on an already initialized #GRWLock leads
to undefined behaviour.

Since: 2.32

</description>
<parameters>
<parameter name="rw_lock">
<parameter_description> an uninitialized #GRWLock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rw_lock_reader_lock">
<description>
Obtain a read lock on @rw_lock. If another thread currently holds
the write lock on @rw_lock or blocks waiting for it, the current
thread will block. Read locks can be taken recursively.

It is implementation-defined how many threads are allowed to
hold read locks on the same lock simultaneously. If the limit is hit,
or if a deadlock is detected, a critical warning will be emitted.

Since: 2.32

</description>
<parameters>
<parameter name="rw_lock">
<parameter_description> a #GRWLock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rw_lock_reader_trylock">
<description>
Tries to obtain a read lock on @rw_lock and returns %TRUE if
the read lock was successfully obtained. Otherwise it
returns %FALSE.

Since: 2.32

</description>
<parameters>
<parameter name="rw_lock">
<parameter_description> a #GRWLock
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @rw_lock could be locked

</return>
</function>

<function name="g_rw_lock_reader_unlock">
<description>
Release a read lock on @rw_lock.

Calling g_rw_lock_reader_unlock() on a lock that is not held
by the current thread leads to undefined behaviour.

Since: 2.32

</description>
<parameters>
<parameter name="rw_lock">
<parameter_description> a #GRWLock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rw_lock_writer_lock">
<description>
Obtain a write lock on @rw_lock. If any thread already holds
a read or write lock on @rw_lock, the current thread will block
until all other threads have dropped their locks on @rw_lock.

Since: 2.32

</description>
<parameters>
<parameter name="rw_lock">
<parameter_description> a #GRWLock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_rw_lock_writer_trylock">
<description>
Tries to obtain a write lock on @rw_lock. If any other thread holds
a read or write lock on @rw_lock, it immediately returns %FALSE.
Otherwise it locks @rw_lock and returns %TRUE.

Since: 2.32

</description>
<parameters>
<parameter name="rw_lock">
<parameter_description> a #GRWLock
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @rw_lock could be locked

</return>
</function>

<function name="g_rw_lock_writer_unlock">
<description>
Release a write lock on @rw_lock.

Calling g_rw_lock_writer_unlock() on a lock that is not held
by the current thread leads to undefined behaviour.

Since: 2.32

</description>
<parameters>
<parameter name="rw_lock">
<parameter_description> a #GRWLock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_add_symbol">
<description>
Adds a symbol to the default scope.

Deprecated: 2.2: Use g_scanner_scope_add_symbol() instead.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="symbol">
<parameter_description> the symbol to add
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the symbol
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_cur_line">
<description>
Returns the current line in the input stream (counting
from 1). This is the line of the last token parsed via
g_scanner_get_next_token().


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return> the current line
</return>
</function>

<function name="g_scanner_cur_position">
<description>
Returns the current position in the current line (counting
from 0). This is the position of the last token parsed via
g_scanner_get_next_token().


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return> the current position on the line
</return>
</function>

<function name="g_scanner_cur_token">
<description>
Gets the current token type. This is simply the @token
field in the #GScanner structure.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return> the current token type
</return>
</function>

<function name="g_scanner_cur_value">
<description>
Gets the current token value. This is simply the @value
field in the #GScanner structure.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return> the current token value
</return>
</function>

<function name="g_scanner_destroy">
<description>
Frees all memory used by the #GScanner.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_eof">
<description>
Returns %TRUE if the scanner has reached the end of
the file or text buffer.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the scanner has reached the end of
the file or text buffer
</return>
</function>

<function name="g_scanner_error">
<description>
Outputs an error message, via the #GScanner message handler.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the message format. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_foreach_symbol">
<description>
Calls a function for each symbol in the default scope.

Deprecated: 2.2: Use g_scanner_scope_foreach_symbol() instead.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call with each symbol
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_freeze_symbol_table">
<description>
There is no reason to use this macro, since it does nothing.

Deprecated: 2.2: This macro does nothing.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_get_next_token">
<description>
Parses the next token just like g_scanner_peek_next_token()
and also removes it from the input stream. The token data is
placed in the @token, @value, @line, and @position fields of
the #GScanner structure.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return> the type of the token
</return>
</function>

<function name="g_scanner_input_file">
<description>
Prepares to scan a file.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="input_fd">
<parameter_description> a file descriptor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_input_text">
<description>
Prepares to scan a text buffer.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text buffer to scan
</parameter_description>
</parameter>
<parameter name="text_len">
<parameter_description> the length of the text buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_lookup_symbol">
<description>
Looks up a symbol in the current scope and return its value.
If the symbol is not bound in the current scope, %NULL is
returned.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="symbol">
<parameter_description> the symbol to look up
</parameter_description>
</parameter>
</parameters>
<return> the value of @symbol in the current scope, or %NULL
if @symbol is not bound in the current scope
</return>
</function>

<function name="g_scanner_new">
<description>
Creates a new #GScanner.

The @config_templ structure specifies the initial settings
of the scanner, which are copied into the #GScanner
@config field. If you pass %NULL then the default settings
are used.


</description>
<parameters>
<parameter name="config_templ">
<parameter_description> the initial scanner settings
</parameter_description>
</parameter>
</parameters>
<return> the new #GScanner
</return>
</function>

<function name="g_scanner_peek_next_token">
<description>
Parses the next token, without removing it from the input stream.
The token data is placed in the @next_token, @next_value, @next_line,
and @next_position fields of the #GScanner structure.

Note that, while the token is not removed from the input stream
(i.e. the next call to g_scanner_get_next_token() will return the
same token), it will not be reevaluated. This can lead to surprising
results when changing scope or the scanner configuration after peeking
the next token. Getting the next token after switching the scope or
configuration will return whatever was peeked before, regardless of
any symbols that may have been added or removed in the new scope.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return> the type of the token
</return>
</function>

<function name="g_scanner_remove_symbol">
<description>
Removes a symbol from the default scope.

Deprecated: 2.2: Use g_scanner_scope_remove_symbol() instead.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="symbol">
<parameter_description> the symbol to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_scope_add_symbol">
<description>
Adds a symbol to the given scope.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="scope_id">
<parameter_description> the scope id
</parameter_description>
</parameter>
<parameter name="symbol">
<parameter_description> the symbol to add
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the symbol
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_scope_foreach_symbol">
<description>
Calls the given function for each of the symbol/value pairs
in the given scope of the #GScanner. The function is passed
the symbol and value of each pair, and the given @user_data
parameter.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="scope_id">
<parameter_description> the scope id
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each symbol/value pair
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_scope_lookup_symbol">
<description>
Looks up a symbol in a scope and return its value. If the
symbol is not bound in the scope, %NULL is returned.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="scope_id">
<parameter_description> the scope id
</parameter_description>
</parameter>
<parameter name="symbol">
<parameter_description> the symbol to look up
</parameter_description>
</parameter>
</parameters>
<return> the value of @symbol in the given scope, or %NULL
if @symbol is not bound in the given scope.

</return>
</function>

<function name="g_scanner_scope_remove_symbol">
<description>
Removes a symbol from a scope.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="scope_id">
<parameter_description> the scope id
</parameter_description>
</parameter>
<parameter name="symbol">
<parameter_description> the symbol to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_set_scope">
<description>
Sets the current scope.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="scope_id">
<parameter_description> the new scope id
</parameter_description>
</parameter>
</parameters>
<return> the old scope id
</return>
</function>

<function name="g_scanner_sync_file_offset">
<description>
Rewinds the filedescriptor to the current buffer position
and blows the file read ahead buffer. This is useful for
third party uses of the scanners filedescriptor, which hooks
onto the current scanning position.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_thaw_symbol_table">
<description>
There is no reason to use this macro, since it does nothing.

Deprecated: 2.2: This macro does nothing.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_unexp_token">
<description>
Outputs a message through the scanner's msg_handler,
resulting from an unexpected token in the input stream.
Note that you should not call g_scanner_peek_next_token()
followed by g_scanner_unexp_token() without an intermediate
call to g_scanner_get_next_token(), as g_scanner_unexp_token()
evaluates the scanner's current token (not the peeked token)
to construct part of the message.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="expected_token">
<parameter_description> the expected token
</parameter_description>
</parameter>
<parameter name="identifier_spec">
<parameter_description> a string describing how the scanner's user
refers to identifiers (%NULL defaults to &quot;identifier&quot;).
This is used if @expected_token is %G_TOKEN_IDENTIFIER or
%G_TOKEN_IDENTIFIER_NULL.
</parameter_description>
</parameter>
<parameter name="symbol_spec">
<parameter_description> a string describing how the scanner's user refers
to symbols (%NULL defaults to &quot;symbol&quot;). This is used if
@expected_token is %G_TOKEN_SYMBOL or any token value greater
than %G_TOKEN_LAST.
</parameter_description>
</parameter>
<parameter name="symbol_name">
<parameter_description> the name of the symbol, if the scanner's current
token is a symbol.
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> a message string to output at the end of the
warning/error, or %NULL.
</parameter_description>
</parameter>
<parameter name="is_error">
<parameter_description> if %TRUE it is output as an error. If %FALSE it is
output as a warning.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_scanner_warn">
<description>
Outputs a warning message, via the #GScanner message handler.

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the message format. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_append">
<description>
Adds a new item to the end of @seq.

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new item
</parameter_description>
</parameter>
</parameters>
<return> an iterator pointing to the new item

</return>
</function>

<function name="g_sequence_foreach">
<description>
Calls @func for each item in the sequence passing @user_data
to the function. @func must not modify the sequence itself.

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each item in @seq
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_foreach_range">
<description>
Calls @func for each item in the range (@begin, @end) passing
@user_data to the function. @func must not modify the sequence
itself.

Since: 2.14

</description>
<parameters>
<parameter name="begin">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GFunc
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_free">
<description>
Frees the memory allocated for @seq. If @seq has a data destroy
function associated with it, that function is called on all items
in @seq.

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_get">
<description>
Returns the data that @iter points to.

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return> the data that @iter points to

</return>
</function>

<function name="g_sequence_get_begin_iter">
<description>
Returns the begin iterator for @seq.

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
</parameters>
<return> the begin iterator for @seq.

</return>
</function>

<function name="g_sequence_get_end_iter">
<description>
Returns the end iterator for @seg

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
</parameters>
<return> the end iterator for @seq

</return>
</function>

<function name="g_sequence_get_iter_at_pos">
<description>
Returns the iterator at position @pos. If @pos is negative or larger
than the number of items in @seq, the end iterator is returned.

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> a position in @seq, or -1 for the end
</parameter_description>
</parameter>
</parameters>
<return> The #GSequenceIter at position @pos

</return>
</function>

<function name="g_sequence_get_length">
<description>
Returns the length of @seq. Note that this method is O(h) where `h' is the
height of the tree. It is thus more efficient to use g_sequence_is_empty()
when comparing the length to zero.

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
</parameters>
<return> the length of @seq

</return>
</function>

<function name="g_sequence_insert_before">
<description>
Inserts a new item just before the item pointed to by @iter.

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new item
</parameter_description>
</parameter>
</parameters>
<return> an iterator pointing to the new item

</return>
</function>

<function name="g_sequence_insert_sorted">
<description>
Inserts @data into @sequence using @func to determine the new
position. The sequence must already be sorted according to @cmp_func;
otherwise the new position of @data is undefined.

@cmp_func is called with two items of the @seq and @user_data.
It should return 0 if the items are equal, a negative value
if the first item comes before the second, and a positive value
if the second  item comes before the first.

Note that when adding a large amount of data to a #GSequence,
it is more efficient to do unsorted insertions and then call
g_sequence_sort() or g_sequence_sort_iter().

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to insert
</parameter_description>
</parameter>
<parameter name="cmp_func">
<parameter_description> the function used to compare items in the sequence
</parameter_description>
</parameter>
<parameter name="cmp_data">
<parameter_description> user data passed to @cmp_func.
</parameter_description>
</parameter>
</parameters>
<return> a #GSequenceIter pointing to the new item.

</return>
</function>

<function name="g_sequence_insert_sorted_iter">
<description>
Like g_sequence_insert_sorted(), but uses
a #GSequenceIterCompareFunc instead of a #GCompareDataFunc as
the compare function.

@iter_cmp is called with two iterators pointing into @seq.
It should return 0 if the iterators are equal, a negative
value if the first iterator comes before the second, and a
positive value if the second iterator comes before the first.

It is called with two iterators pointing into @seq. It should
return 0 if the iterators are equal, a negative value if the
first iterator comes before the second, and a positive value
if the second iterator comes before the first.

Note that when adding a large amount of data to a #GSequence,
it is more efficient to do unsorted insertions and then call
g_sequence_sort() or g_sequence_sort_iter().

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data for the new item
</parameter_description>
</parameter>
<parameter name="iter_cmp">
<parameter_description> the function used to compare iterators in the sequence
</parameter_description>
</parameter>
<parameter name="cmp_data">
<parameter_description> user data passed to @cmp_func
</parameter_description>
</parameter>
</parameters>
<return> a #GSequenceIter pointing to the new item

</return>
</function>

<function name="g_sequence_is_empty">
<description>
Returns %TRUE if the sequence contains zero items.

This function is functionally identical to checking the result of
g_sequence_get_length() being equal to zero. However this function is
implemented in O(1) running time.

Since: 2.48

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the sequence is empty, otherwise %FALSE.

</return>
</function>

<function name="g_sequence_iter_compare">
<description>
Returns a negative number if @a comes before @b, 0 if they are equal,
and a positive number if @a comes after @b.

The @a and @b iterators must point into the same sequence.

Since: 2.14

</description>
<parameters>
<parameter name="a">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return> a negative number if @a comes before @b, 0 if they are
equal, and a positive number if @a comes after @b

</return>
</function>

<function name="g_sequence_iter_get_position">
<description>
Returns the position of @iter

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return> the position of @iter

</return>
</function>

<function name="g_sequence_iter_get_sequence">
<description>
Returns the #GSequence that @iter points into.

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return> the #GSequence that @iter points into

</return>
</function>

<function name="g_sequence_iter_is_begin">
<description>
Returns whether @iter is the begin iterator

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is the begin iterator

</return>
</function>

<function name="g_sequence_iter_is_end">
<description>
Returns whether @iter is the end iterator

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return> Whether @iter is the end iterator

</return>
</function>

<function name="g_sequence_iter_move">
<description>
Returns the #GSequenceIter which is @delta positions away from @iter.
If @iter is closer than -@delta positions to the beginning of the sequence,
the begin iterator is returned. If @iter is closer than @delta positions
to the end of the sequence, the end iterator is returned.

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="delta">
<parameter_description> A positive or negative number indicating how many positions away
from @iter the returned #GSequenceIter will be
</parameter_description>
</parameter>
</parameters>
<return> a #GSequenceIter which is @delta positions away from @iter

</return>
</function>

<function name="g_sequence_iter_next">
<description>
Returns an iterator pointing to the next position after @iter.
If @iter is the end iterator, the end iterator is returned.

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return> a #GSequenceIter pointing to the next position after @iter

</return>
</function>

<function name="g_sequence_iter_prev">
<description>
Returns an iterator pointing to the previous position before @iter.
If @iter is the begin iterator, the begin iterator is returned.

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return> a #GSequenceIter pointing to the previous position
before @iter

</return>
</function>

<function name="g_sequence_lookup">
<description>
Returns an iterator pointing to the position of the first item found
equal to @data according to @cmp_func and @cmp_data. If more than one
item is equal, it is not guaranteed that it is the first which is
returned. In that case, you can use g_sequence_iter_next() and
g_sequence_iter_prev() to get others.

@cmp_func is called with two items of the @seq and @user_data.
It should return 0 if the items are equal, a negative value if
the first item comes before the second, and a positive value if
the second item comes before the first.

This function will fail if the data contained in the sequence is
unsorted.

Since: 2.28

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to lookup
</parameter_description>
</parameter>
<parameter name="cmp_func">
<parameter_description> the function used to compare items in the sequence
</parameter_description>
</parameter>
<parameter name="cmp_data">
<parameter_description> user data passed to @cmp_func
</parameter_description>
</parameter>
</parameters>
<return> an #GSequenceIter pointing to the position of the
first item found equal to @data according to @cmp_func and
@cmp_data, or %NULL if no such item exists

</return>
</function>

<function name="g_sequence_lookup_iter">
<description>
Like g_sequence_lookup(), but uses a #GSequenceIterCompareFunc
instead of a #GCompareDataFunc as the compare function.

@iter_cmp is called with two iterators pointing into @seq.
It should return 0 if the iterators are equal, a negative value
if the first iterator comes before the second, and a positive
value if the second iterator comes before the first.

This function will fail if the data contained in the sequence is
unsorted.

Since: 2.28

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to lookup
</parameter_description>
</parameter>
<parameter name="iter_cmp">
<parameter_description> the function used to compare iterators in the sequence
</parameter_description>
</parameter>
<parameter name="cmp_data">
<parameter_description> user data passed to @iter_cmp
</parameter_description>
</parameter>
</parameters>
<return> an #GSequenceIter pointing to the position of
the first item found equal to @data according to @cmp_func
and @cmp_data, or %NULL if no such item exists

</return>
</function>

<function name="g_sequence_move">
<description>
Moves the item pointed to by @src to the position indicated by @dest.
After calling this function @dest will point to the position immediately
after @src. It is allowed for @src and @dest to point into different
sequences.

Since: 2.14

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GSequenceIter pointing to the item to move
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a #GSequenceIter pointing to the position to which
the item is moved
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_move_range">
<description>
Inserts the (@begin, @end) range at the destination pointed to by ptr.
The @begin and @end iters must point into the same sequence. It is
allowed for @dest to point to a different sequence than the one pointed
into by @begin and @end.

If @dest is NULL, the range indicated by @begin and @end is
removed from the sequence. If @dest iter points to a place within
the (@begin, @end) range, the range does not move.

Since: 2.14

</description>
<parameters>
<parameter name="dest">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="begin">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_new">
<description>
Creates a new GSequence. The @data_destroy function, if non-%NULL will
be called on all items when the sequence is destroyed and on items that
are removed from the sequence.

Since: 2.14

</description>
<parameters>
<parameter name="data_destroy">
<parameter_description> a #GDestroyNotify function, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GSequence

</return>
</function>

<function name="g_sequence_prepend">
<description>
Adds a new item to the front of @seq

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new item
</parameter_description>
</parameter>
</parameters>
<return> an iterator pointing to the new item

</return>
</function>

<function name="g_sequence_range_get_midpoint">
<description>
Finds an iterator somewhere in the range (@begin, @end). This
iterator will be close to the middle of the range, but is not
guaranteed to be exactly in the middle.

The @begin and @end iterators must both point to the same sequence
and @begin must come before or be equal to @end in the sequence.

Since: 2.14

</description>
<parameters>
<parameter name="begin">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return> a #GSequenceIter pointing somewhere in the
(@begin, @end) range

</return>
</function>

<function name="g_sequence_remove">
<description>
Removes the item pointed to by @iter. It is an error to pass the
end iterator to this function.

If the sequence has a data destroy function associated with it, this
function is called on the data for the removed item.

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_remove_range">
<description>
Removes all items in the (@begin, @end) range.

If the sequence has a data destroy function associated with it, this
function is called on the data for the removed items.

Since: 2.14

</description>
<parameters>
<parameter name="begin">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_search">
<description>
Returns an iterator pointing to the position where @data would
be inserted according to @cmp_func and @cmp_data.

@cmp_func is called with two items of the @seq and @user_data.
It should return 0 if the items are equal, a negative value if
the first item comes before the second, and a positive value if
the second item comes before the first.

If you are simply searching for an existing element of the sequence,
consider using g_sequence_lookup().

This function will fail if the data contained in the sequence is
unsorted.

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data for the new item
</parameter_description>
</parameter>
<parameter name="cmp_func">
<parameter_description> the function used to compare items in the sequence
</parameter_description>
</parameter>
<parameter name="cmp_data">
<parameter_description> user data passed to @cmp_func
</parameter_description>
</parameter>
</parameters>
<return> an #GSequenceIter pointing to the position where @data
would have been inserted according to @cmp_func and @cmp_data

</return>
</function>

<function name="g_sequence_search_iter">
<description>
Like g_sequence_search(), but uses a #GSequenceIterCompareFunc
instead of a #GCompareDataFunc as the compare function.

@iter_cmp is called with two iterators pointing into @seq.
It should return 0 if the iterators are equal, a negative value
if the first iterator comes before the second, and a positive
value if the second iterator comes before the first.

If you are simply searching for an existing element of the sequence,
consider using g_sequence_lookup_iter().

This function will fail if the data contained in the sequence is
unsorted.

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data for the new item
</parameter_description>
</parameter>
<parameter name="iter_cmp">
<parameter_description> the function used to compare iterators in the sequence
</parameter_description>
</parameter>
<parameter name="cmp_data">
<parameter_description> user data passed to @iter_cmp
</parameter_description>
</parameter>
</parameters>
<return> a #GSequenceIter pointing to the position in @seq
where @data would have been inserted according to @iter_cmp
and @cmp_data

</return>
</function>

<function name="g_sequence_set">
<description>
Changes the data for the item pointed to by @iter to be @data. If
the sequence has a data destroy function associated with it, that
function is called on the existing data that @iter pointed to.

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> new data for the item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_sort">
<description>
Sorts @seq using @cmp_func.

@cmp_func is passed two items of @seq and should
return 0 if they are equal, a negative value if the
first comes before the second, and a positive value
if the second comes before the first.

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="cmp_func">
<parameter_description> the function used to sort the sequence
</parameter_description>
</parameter>
<parameter name="cmp_data">
<parameter_description> user data passed to @cmp_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_sort_changed">
<description>
Moves the data pointed to a new position as indicated by @cmp_func. This
function should be called for items in a sequence already sorted according
to @cmp_func whenever some aspect of an item changes so that @cmp_func
may return different values for that item.

@cmp_func is called with two items of the @seq and @user_data.
It should return 0 if the items are equal, a negative value if
the first item comes before the second, and a positive value if
the second item comes before the first.

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> A #GSequenceIter
</parameter_description>
</parameter>
<parameter name="cmp_func">
<parameter_description> the function used to compare items in the sequence
</parameter_description>
</parameter>
<parameter name="cmp_data">
<parameter_description> user data passed to @cmp_func.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_sort_changed_iter">
<description>
Like g_sequence_sort_changed(), but uses
a #GSequenceIterCompareFunc instead of a #GCompareDataFunc as
the compare function.

@iter_cmp is called with two iterators pointing into @seq. It should
return 0 if the iterators are equal, a negative value if the first
iterator comes before the second, and a positive value if the second
iterator comes before the first.

Since: 2.14

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="iter_cmp">
<parameter_description> the function used to compare iterators in the sequence
</parameter_description>
</parameter>
<parameter name="cmp_data">
<parameter_description> user data passed to @cmp_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_sort_iter">
<description>
Like g_sequence_sort(), but uses a #GSequenceIterCompareFunc instead
of a GCompareDataFunc as the compare function

@cmp_func is called with two iterators pointing into @seq. It should
return 0 if the iterators are equal, a negative value if the first
iterator comes before the second, and a positive value if the second
iterator comes before the first.

Since: 2.14

</description>
<parameters>
<parameter name="seq">
<parameter_description> a #GSequence
</parameter_description>
</parameter>
<parameter name="cmp_func">
<parameter_description> the function used to compare iterators in the sequence
</parameter_description>
</parameter>
<parameter name="cmp_data">
<parameter_description> user data passed to @cmp_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_sequence_swap">
<description>
Swaps the items pointed to by @a and @b. It is allowed for @a and @b
to point into difference sequences.

Since: 2.14

</description>
<parameters>
<parameter name="a">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #GSequenceIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_set_application_name">
<description>
Sets a human-readable name for the application. This name should be
localized if possible, and is intended for display to the user.
Contrast with g_set_prgname(), which sets a non-localized name.
g_set_prgname() will be called automatically by gtk_init(),
but g_set_application_name() will not.

Note that for thread safety reasons, this function can only
be called once.

The application name will be used in contexts such as error messages,
or when displaying an application's name in the task list.

Since: 2.2

</description>
<parameters>
<parameter name="application_name">
<parameter_description> localized name of the application
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_set_error">
<description>
Does nothing if @err is %NULL; if @err is non-%NULL, then *@err
must be %NULL. A new #GError is created and assigned to *@err.

</description>
<parameters>
<parameter name="err">
<parameter_description> a return location for a #GError
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> error domain
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> error code
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> printf()-style format
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> args for @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_set_error_literal">
<description>
Does nothing if @err is %NULL; if @err is non-%NULL, then *@err
must be %NULL. A new #GError is created and assigned to *@err.
Unlike g_set_error(), @message is not a printf()-style format string.
Use this function if @message contains text you don't have control over,
that could include printf() escape sequences.

Since: 2.18

</description>
<parameters>
<parameter name="err">
<parameter_description> a return location for a #GError
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> error domain
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> error code
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> error message
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_set_object">
<description>
Updates a #GObject pointer to refer to @new_object. It increments the
reference count of @new_object (if non-%NULL), decrements the reference
count of the current value of @object_ptr (if non-%NULL), and assigns
@new_object to @object_ptr. The assignment is not atomic.

@object_ptr must not be %NULL.

A macro is also included that allows this function to be used without
pointer casts. The function itself is static inline, so its address may vary
between compilation units.

One convenient usage of this function is in implementing property setters:
|[
void
foo_set_bar (Foo *foo,
Bar *new_bar)
{
g_return_if_fail (IS_FOO (foo));
g_return_if_fail (new_bar == NULL || IS_BAR (new_bar));

if (g_set_object (&amp;foo-&gt;bar, new_bar))
g_object_notify (foo, &quot;bar&quot;);
}
]|

Since: 2.44

</description>
<parameters>
<parameter name="object_ptr">
<parameter_description> a pointer to a #GObject reference
</parameter_description>
</parameter>
<parameter name="new_object">
<parameter_description> a pointer to the new #GObject to
assign to it, or %NULL to clear the pointer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value of @object_ptr changed, %FALSE otherwise

</return>
</function>

<function name="g_set_prgname">
<description>
Sets the name of the program. This name should not be localized,
in contrast to g_set_application_name().

If you are using #GApplication the program name is set in
g_application_run(). In case of GDK or GTK+ it is set in
gdk_init(), which is called by gtk_init() and the
#GtkApplication::startup handler. The program name is found by
taking the last component of @argv[0].

Note that for thread-safety reasons this function can only be called once.

</description>
<parameters>
<parameter name="prgname">
<parameter_description> the name of the program.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_set_print_handler">
<description>
Sets the print handler.

Any messages passed to g_print() will be output via
the new handler. The default handler simply outputs
the message to stdout. By providing your own handler
you can redirect the output, to a GTK+ widget or a
log file for example.


</description>
<parameters>
<parameter name="func">
<parameter_description> the new print handler
</parameter_description>
</parameter>
</parameters>
<return> the old print handler
</return>
</function>

<function name="g_set_printerr_handler">
<description>
Sets the handler for printing error messages.

Any messages passed to g_printerr() will be output via
the new handler. The default handler simply outputs the
message to stderr. By providing your own handler you can
redirect the output, to a GTK+ widget or a log file for
example.


</description>
<parameters>
<parameter name="func">
<parameter_description> the new error message handler
</parameter_description>
</parameter>
</parameters>
<return> the old error message handler
</return>
</function>

<function name="g_set_weak_pointer">
<description>
Updates a pointer to weakly refer to @new_object. It assigns @new_object
to @weak_pointer_location and ensures that @weak_pointer_location will
automaticaly be set to %NULL if @new_object gets destroyed. The assignment
is not atomic. The weak reference is not thread-safe, see
g_object_add_weak_pointer() for details.

@weak_pointer_location must not be %NULL.

A macro is also included that allows this function to be used without
pointer casts. The function itself is static inline, so its address may vary
between compilation units.

One convenient usage of this function is in implementing property setters:
|[
void
foo_set_bar (Foo *foo,
Bar *new_bar)
{
g_return_if_fail (IS_FOO (foo));
g_return_if_fail (new_bar == NULL || IS_BAR (new_bar));

if (g_set_weak_pointer (&amp;foo-&gt;bar, new_bar))
g_object_notify (foo, &quot;bar&quot;);
}
]|

Since: 2.56

</description>
<parameters>
<parameter name="weak_pointer_location">
<parameter_description> the memory address of a pointer
</parameter_description>
</parameter>
<parameter name="new_object">
<parameter_description> a pointer to the new #GObject to
assign to it, or %NULL to clear the pointer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value of @weak_pointer_location changed, %FALSE otherwise

</return>
</function>

<function name="g_setenv">
<description>
Sets an environment variable. On UNIX, both the variable's name and
value can be arbitrary byte strings, except that the variable's name
cannot contain '='. On Windows, they should be in UTF-8.

Note that on some systems, when variables are overwritten, the memory
used for the previous variables and its value isn't reclaimed.

You should be mindful of the fact that environment variable handling
in UNIX is not thread-safe, and your program may crash if one thread
calls g_setenv() while another thread is calling getenv(). (And note
that many functions, such as gettext(), call getenv() internally.)
This function is only safe to use at the very start of your program,
before creating any other threads (or creating objects that create
worker threads of their own).

If you need to set up the environment for a child process, you can
use g_get_environ() to get an environment array, modify that with
g_environ_setenv() and g_environ_unsetenv(), and then pass that
array directly to execvpe(), g_spawn_async(), or the like.

Since: 2.4

</description>
<parameters>
<parameter name="variable">
<parameter_description> the environment variable to set, must not
contain '='.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value for to set the variable to.
</parameter_description>
</parameter>
<parameter name="overwrite">
<parameter_description> whether to change the variable if it already exists.
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if the environment variable couldn't be set.

</return>
</function>

<function name="g_shell_parse_argv">
<description>
Parses a command line into an argument vector, in much the same way
the shell would, but without many of the expansions the shell would
perform (variable expansion, globs, operators, filename expansion,
etc. are not supported). The results are defined to be the same as
those you would get from a UNIX98 /bin/sh, as long as the input
contains none of the unsupported shell expansions. If the input
does contain such expansions, they are passed through
literally. Possible errors are those from the #G_SHELL_ERROR
domain. Free the returned vector with g_strfreev().


</description>
<parameters>
<parameter name="command_line">
<parameter_description> command line to parse
</parameter_description>
</parameter>
<parameter name="argcp">
<parameter_description> return location for number of args
</parameter_description>
</parameter>
<parameter name="argvp">
<parameter_description>
return location for array of args
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if error set
</return>
</function>

<function name="g_shell_quote">
<description>
Quotes a string so that the shell (/bin/sh) will interpret the
quoted string to mean @unquoted_string. If you pass a filename to
the shell, for example, you should first quote it with this
function.  The return value must be freed with g_free(). The
quoting style used is undefined (single or double quotes may be
used).


</description>
<parameters>
<parameter name="unquoted_string">
<parameter_description> a literal string
</parameter_description>
</parameter>
</parameters>
<return> quoted string
</return>
</function>

<function name="g_shell_unquote">
<description>
Unquotes a string as the shell (/bin/sh) would. Only handles
quotes; if a string contains file globs, arithmetic operators,
variables, backticks, redirections, or other special-to-the-shell
features, the result will be different from the result a real shell
would produce (the variables, backticks, etc. will be passed
through literally instead of being expanded). This function is
guaranteed to succeed if applied to the result of
g_shell_quote(). If it fails, it returns %NULL and sets the
error. The @quoted_string need not actually contain quoted or
escaped text; g_shell_unquote() simply goes through the string and
unquotes/unescapes anything that the shell would. Both single and
double quotes are handled, as are escapes including escaped
newlines. The return value must be freed with g_free(). Possible
errors are in the #G_SHELL_ERROR domain.

Shell quoting rules are a bit strange. Single quotes preserve the
literal string exactly. escape sequences are not allowed; not even
\' - if you want a ' in the quoted text, you have to do something
like 'foo'\''bar'.  Double quotes allow $, `, &quot;, \, and newline to
be escaped with backslash. Otherwise double quotes preserve things
literally.


</description>
<parameters>
<parameter name="quoted_string">
<parameter_description> shell-quoted string
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> error return location or NULL
</parameter_description>
</parameter>
</parameters>
<return> an unquoted string
</return>
</function>

<function name="g_signal_accumulator_first_wins">
<description>
A predefined #GSignalAccumulator for signals intended to be used as a
hook for application code to provide a particular value.  Usually
only one such value is desired and multiple handlers for the same
signal don't make much sense (except for the case of the default
handler defined in the class structure, in which case you will
usually want the signal connection to override the class handler).

This accumulator will use the return value from the first signal
handler that is run as the return value for the signal and not run
any further handlers (ie: the first handler &quot;wins&quot;).

Since: 2.28

</description>
<parameters>
<parameter name="ihint">
<parameter_description> standard #GSignalAccumulator parameter
</parameter_description>
</parameter>
<parameter name="return_accu">
<parameter_description> standard #GSignalAccumulator parameter
</parameter_description>
</parameter>
<parameter name="handler_return">
<parameter_description> standard #GSignalAccumulator parameter
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> standard #GSignalAccumulator parameter
</parameter_description>
</parameter>
</parameters>
<return> standard #GSignalAccumulator result

</return>
</function>

<function name="g_signal_accumulator_true_handled">
<description>
A predefined #GSignalAccumulator for signals that return a
boolean values. The behavior that this accumulator gives is
that a return of %TRUE stops the signal emission: no further
callbacks will be invoked, while a return of %FALSE allows
the emission to continue. The idea here is that a %TRUE return
indicates that the callback handled the signal, and no further
handling is needed.

Since: 2.4


</description>
<parameters>
<parameter name="ihint">
<parameter_description> standard #GSignalAccumulator parameter
</parameter_description>
</parameter>
<parameter name="return_accu">
<parameter_description> standard #GSignalAccumulator parameter
</parameter_description>
</parameter>
<parameter name="handler_return">
<parameter_description> standard #GSignalAccumulator parameter
</parameter_description>
</parameter>
<parameter name="dummy">
<parameter_description> standard #GSignalAccumulator parameter
</parameter_description>
</parameter>
</parameters>
<return> standard #GSignalAccumulator result
</return>
</function>

<function name="g_signal_add_emission_hook">
<description>
Adds an emission hook for a signal, which will get called for any emission
of that signal, independent of the instance. This is possible only
for signals which don't have #G_SIGNAL_NO_HOOKS flag set.


</description>
<parameters>
<parameter name="signal_id">
<parameter_description> the signal identifier, as returned by g_signal_lookup().
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> the detail on which to call the hook.
</parameter_description>
</parameter>
<parameter name="hook_func">
<parameter_description> a #GSignalEmissionHook function.
</parameter_description>
</parameter>
<parameter name="hook_data">
<parameter_description> user data for @hook_func.
</parameter_description>
</parameter>
<parameter name="data_destroy">
<parameter_description> a #GDestroyNotify for @hook_data.
</parameter_description>
</parameter>
</parameters>
<return> the hook id, for later use with g_signal_remove_emission_hook().
</return>
</function>

<function name="g_signal_chain_from_overridden">
<description>
Calls the original class closure of a signal. This function should only
be called from an overridden class closure; see
g_signal_override_class_closure() and
g_signal_override_class_handler().

</description>
<parameters>
<parameter name="instance_and_params">
<parameter_description> (array) the argument list of the signal emission.
The first element in the array is a #GValue for the instance the signal
is being emitted on. The rest are any arguments to be passed to the signal.
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> Location for the return value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_chain_from_overridden_handler">
<description>
Calls the original class closure of a signal. This function should
only be called from an overridden class closure; see
g_signal_override_class_closure() and
g_signal_override_class_handler().

Since: 2.18

</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance the signal is being
emitted on.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> parameters to be passed to the parent class closure, followed by a
location for the return value. If the return type of the signal
is #G_TYPE_NONE, the return value location can be omitted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_connect">
<description>
Connects a #GCallback function to a signal for a particular object.

The handler will be called before the default handler of the signal.

See [memory management of signal handlers][signal-memory-management] for
details on how to handle the return value and memory management of @data.


</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance to connect to.
</parameter_description>
</parameter>
<parameter name="detailed_signal">
<parameter_description> a string of the form &quot;signal-name::detail&quot;.
</parameter_description>
</parameter>
<parameter name="c_handler">
<parameter_description> the #GCallback to connect.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @c_handler calls.
</parameter_description>
</parameter>
</parameters>
<return> the handler ID, of type #gulong (always greater than 0 for successful connections)
</return>
</function>

<function name="g_signal_connect_after">
<description>
Connects a #GCallback function to a signal for a particular object.

The handler will be called after the default handler of the signal.


</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance to connect to.
</parameter_description>
</parameter>
<parameter name="detailed_signal">
<parameter_description> a string of the form &quot;signal-name::detail&quot;.
</parameter_description>
</parameter>
<parameter name="c_handler">
<parameter_description> the #GCallback to connect.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @c_handler calls.
</parameter_description>
</parameter>
</parameters>
<return> the handler ID, of type #gulong (always greater than 0 for successful connections)
</return>
</function>

<function name="g_signal_connect_closure">
<description>
Connects a closure to a signal for a particular object.


</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance to connect to.
</parameter_description>
</parameter>
<parameter name="detailed_signal">
<parameter_description> a string of the form &quot;signal-name::detail&quot;.
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> the closure to connect.
</parameter_description>
</parameter>
<parameter name="after">
<parameter_description> whether the handler should be called before or after the
default handler of the signal.
</parameter_description>
</parameter>
</parameters>
<return> the handler ID (always greater than 0 for successful connections)
</return>
</function>

<function name="g_signal_connect_closure_by_id">
<description>
Connects a closure to a signal for a particular object.


</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance to connect to.
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> the id of the signal.
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> the detail.
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> the closure to connect.
</parameter_description>
</parameter>
<parameter name="after">
<parameter_description> whether the handler should be called before or after the
default handler of the signal.
</parameter_description>
</parameter>
</parameters>
<return> the handler ID (always greater than 0 for successful connections)
</return>
</function>

<function name="g_signal_connect_data">
<description>
Connects a #GCallback function to a signal for a particular object. Similar
to g_signal_connect(), but allows to provide a #GClosureNotify for the data
which will be called when the signal handler is disconnected and no longer
used. Specify @connect_flags if you need `..._after()` or
`..._swapped()` variants of this function.


</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance to connect to.
</parameter_description>
</parameter>
<parameter name="detailed_signal">
<parameter_description> a string of the form &quot;signal-name::detail&quot;.
</parameter_description>
</parameter>
<parameter name="c_handler">
<parameter_description> the #GCallback to connect.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @c_handler calls.
</parameter_description>
</parameter>
<parameter name="destroy_data">
<parameter_description> a #GClosureNotify for @data.
</parameter_description>
</parameter>
<parameter name="connect_flags">
<parameter_description> a combination of #GConnectFlags.
</parameter_description>
</parameter>
</parameters>
<return> the handler ID (always greater than 0 for successful connections)
</return>
</function>

<function name="g_signal_connect_object">
<description>
This is similar to g_signal_connect_data(), but uses a closure which
ensures that the @gobject stays alive during the call to @c_handler
by temporarily adding a reference count to @gobject.

When the @gobject is destroyed the signal handler will be automatically
disconnected.  Note that this is not currently threadsafe (ie:
emitting a signal while @gobject is being destroyed in another thread
is not safe).


</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance to connect to.
</parameter_description>
</parameter>
<parameter name="detailed_signal">
<parameter_description> a string of the form &quot;signal-name::detail&quot;.
</parameter_description>
</parameter>
<parameter name="c_handler">
<parameter_description> the #GCallback to connect.
</parameter_description>
</parameter>
<parameter name="gobject">
<parameter_description> the object to pass as data
to @c_handler.
</parameter_description>
</parameter>
<parameter name="connect_flags">
<parameter_description> a combination of #GConnectFlags.
</parameter_description>
</parameter>
</parameters>
<return> the handler id.
</return>
</function>

<function name="g_signal_connect_swapped">
<description>
Connects a #GCallback function to a signal for a particular object.

The instance on which the signal is emitted and @data will be swapped when 
calling the handler. This is useful when calling pre-existing functions to
operate purely on the @data, rather than the @instance: swapping the
parameters avoids the need to write a wrapper function.

For example, this allows the shorter code:
|[&lt;!-- language=&quot;C&quot; --&gt;
g_signal_connect_swapped (button, &quot;clicked&quot;,
(GCallback) gtk_widget_hide, other_widget);
]|

Rather than the cumbersome:
|[&lt;!-- language=&quot;C&quot; --&gt;
static void
button_clicked_cb (GtkButton *button, GtkWidget *other_widget)
{
gtk_widget_hide (other_widget);
}

...

g_signal_connect (button, &quot;clicked&quot;,
(GCallback) button_clicked_cb, other_widget);
]|


</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance to connect to.
</parameter_description>
</parameter>
<parameter name="detailed_signal">
<parameter_description> a string of the form &quot;signal-name::detail&quot;.
</parameter_description>
</parameter>
<parameter name="c_handler">
<parameter_description> the #GCallback to connect.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @c_handler calls.
</parameter_description>
</parameter>
</parameters>
<return> the handler ID, of type #gulong (always greater than 0 for successful connections)
</return>
</function>

<function name="g_signal_emit">
<description>
Emits a signal.

Note that g_signal_emit() resets the return value to the default
if no handlers are connected, in contrast to g_signal_emitv().

</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance the signal is being emitted on.
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> the signal id
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> the detail
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> parameters to be passed to the signal, followed by a
location for the return value. If the return type of the signal
is #G_TYPE_NONE, the return value location can be omitted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_emit_by_name">
<description>
Emits a signal.

Note that g_signal_emit_by_name() resets the return value to the default
if no handlers are connected, in contrast to g_signal_emitv().

</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance the signal is being emitted on.
</parameter_description>
</parameter>
<parameter name="detailed_signal">
<parameter_description> a string of the form &quot;signal-name::detail&quot;.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> parameters to be passed to the signal, followed by a
location for the return value. If the return type of the signal
is #G_TYPE_NONE, the return value location can be omitted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_emit_valist">
<description>
Emits a signal.

Note that g_signal_emit_valist() resets the return value to the default
if no handlers are connected, in contrast to g_signal_emitv().

</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance the signal is being
emitted on.
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> the signal id
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> the detail
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> a list of parameters to be passed to the signal, followed by a
location for the return value. If the return type of the signal
is #G_TYPE_NONE, the return value location can be omitted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_emitv">
<description>
Emits a signal.

Note that g_signal_emitv() doesn't change @return_value if no handlers are
connected, in contrast to g_signal_emit() and g_signal_emit_valist().

</description>
<parameters>
<parameter name="instance_and_params">
<parameter_description> argument list for the signal emission.
The first element in the array is a #GValue for the instance the signal
is being emitted on. The rest are any arguments to be passed to the signal.
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> the signal id
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> the detail
</parameter_description>
</parameter>
<parameter name="return_value">
<parameter_description> Location to
store the return value of the signal emission. This must be provided if the
specified signal returns a value, but may be ignored otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_get_invocation_hint">
<description>
Returns the invocation hint of the innermost signal emission of instance.


</description>
<parameters>
<parameter name="instance">
<parameter_description> the instance to query
</parameter_description>
</parameter>
</parameters>
<return> the invocation hint of the innermost signal  emission.
</return>
</function>

<function name="g_signal_handler_block">
<description>
Blocks a handler of an instance so it will not be called during any
signal emissions unless it is unblocked again. Thus &quot;blocking&quot; a
signal handler means to temporarily deactive it, a signal handler
has to be unblocked exactly the same amount of times it has been
blocked before to become active again.

The @handler_id has to be a valid signal handler id, connected to a
signal of @instance.

</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance to block the signal handler of.
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> Handler id of the handler to be blocked.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_handler_disconnect">
<description>
Disconnects a handler from an instance so it will not be called during
any future or currently ongoing emissions of the signal it has been
connected to. The @handler_id becomes invalid and may be reused.

The @handler_id has to be a valid signal handler id, connected to a
signal of @instance.

</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance to remove the signal handler from.
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> Handler id of the handler to be disconnected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_handler_find">
<description>
Finds the first signal handler that matches certain selection criteria.
The criteria mask is passed as an OR-ed combination of #GSignalMatchType
flags, and the criteria values are passed as arguments.
The match @mask has to be non-0 for successful matches.
If no handler was found, 0 is returned.


</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance owning the signal handler to be found.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> Mask indicating which of @signal_id, @detail, @closure, @func
and/or @data the handler has to match.
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> Signal the handler has to be connected to.
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> Signal detail the handler has to be connected to.
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> The closure the handler will invoke.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The C closure callback of the handler (useless for non-C closures).
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The closure data of the handler's closure.
</parameter_description>
</parameter>
</parameters>
<return> A valid non-0 signal handler id for a successful match.
</return>
</function>

<function name="g_signal_handler_is_connected">
<description>
Returns whether @handler_id is the ID of a handler connected to @instance.


</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance where a signal handler is sought.
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> the handler ID.
</parameter_description>
</parameter>
</parameters>
<return> whether @handler_id identifies a handler connected to @instance.
</return>
</function>

<function name="g_signal_handler_unblock">
<description>
Undoes the effect of a previous g_signal_handler_block() call.  A
blocked handler is skipped during signal emissions and will not be
invoked, unblocking it (for exactly the amount of times it has been
blocked before) reverts its &quot;blocked&quot; state, so the handler will be
recognized by the signal system and is called upon future or
currently ongoing signal emissions (since the order in which
handlers are called during signal emissions is deterministic,
whether the unblocked handler in question is called as part of a
currently ongoing emission depends on how far that emission has
proceeded yet).

The @handler_id has to be a valid id of a signal handler that is
connected to a signal of @instance and is currently blocked.

</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance to unblock the signal handler of.
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> Handler id of the handler to be unblocked.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_handlers_block_by_func">
<description>
Blocks all handlers on an instance that match @func and @data.


</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance to block handlers from.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The C closure callback of the handlers (useless for non-C closures).
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The closure data of the handlers' closures.
</parameter_description>
</parameter>
</parameters>
<return> The number of handlers that matched.
</return>
</function>

<function name="g_signal_handlers_block_matched">
<description>
Blocks all handlers on an instance that match a certain selection criteria.
The criteria mask is passed as an OR-ed combination of #GSignalMatchType
flags, and the criteria values are passed as arguments.
Passing at least one of the %G_SIGNAL_MATCH_CLOSURE, %G_SIGNAL_MATCH_FUNC
or %G_SIGNAL_MATCH_DATA match flags is required for successful matches.
If no handlers were found, 0 is returned, the number of blocked handlers
otherwise.


</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance to block handlers from.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> Mask indicating which of @signal_id, @detail, @closure, @func
and/or @data the handlers have to match.
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> Signal the handlers have to be connected to.
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> Signal detail the handlers have to be connected to.
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> The closure the handlers will invoke.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The C closure callback of the handlers (useless for non-C closures).
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The closure data of the handlers' closures.
</parameter_description>
</parameter>
</parameters>
<return> The number of handlers that matched.
</return>
</function>

<function name="g_signal_handlers_destroy">
<description>
Destroy all signal handlers of a type instance. This function is
an implementation detail of the #GObject dispose implementation,
and should not be used outside of the type system.

</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance whose signal handlers are destroyed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_handlers_disconnect_by_data">
<description>
Disconnects all handlers on an instance that match @data.

Since: 2.32

</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance to remove handlers from
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the closure data of the handlers' closures
</parameter_description>
</parameter>
</parameters>
<return> The number of handlers that matched.

</return>
</function>

<function name="g_signal_handlers_disconnect_by_func">
<description>
Disconnects all handlers on an instance that match @func and @data.


</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance to remove handlers from.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The C closure callback of the handlers (useless for non-C closures).
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The closure data of the handlers' closures.
</parameter_description>
</parameter>
</parameters>
<return> The number of handlers that matched.
</return>
</function>

<function name="g_signal_handlers_disconnect_matched">
<description>
Disconnects all handlers on an instance that match a certain
selection criteria. The criteria mask is passed as an OR-ed
combination of #GSignalMatchType flags, and the criteria values are
passed as arguments.  Passing at least one of the
%G_SIGNAL_MATCH_CLOSURE, %G_SIGNAL_MATCH_FUNC or
%G_SIGNAL_MATCH_DATA match flags is required for successful
matches.  If no handlers were found, 0 is returned, the number of
disconnected handlers otherwise.


</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance to remove handlers from.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> Mask indicating which of @signal_id, @detail, @closure, @func
and/or @data the handlers have to match.
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> Signal the handlers have to be connected to.
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> Signal detail the handlers have to be connected to.
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> The closure the handlers will invoke.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The C closure callback of the handlers (useless for non-C closures).
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The closure data of the handlers' closures.
</parameter_description>
</parameter>
</parameters>
<return> The number of handlers that matched.
</return>
</function>

<function name="g_signal_handlers_unblock_by_func">
<description>
Unblocks all handlers on an instance that match @func and @data.


</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance to unblock handlers from.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The C closure callback of the handlers (useless for non-C closures).
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The closure data of the handlers' closures.
</parameter_description>
</parameter>
</parameters>
<return> The number of handlers that matched.
</return>
</function>

<function name="g_signal_handlers_unblock_matched">
<description>
Unblocks all handlers on an instance that match a certain selection
criteria. The criteria mask is passed as an OR-ed combination of
#GSignalMatchType flags, and the criteria values are passed as arguments.
Passing at least one of the %G_SIGNAL_MATCH_CLOSURE, %G_SIGNAL_MATCH_FUNC
or %G_SIGNAL_MATCH_DATA match flags is required for successful matches.
If no handlers were found, 0 is returned, the number of unblocked handlers
otherwise. The match criteria should not apply to any handlers that are
not currently blocked.


</description>
<parameters>
<parameter name="instance">
<parameter_description> The instance to unblock handlers from.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> Mask indicating which of @signal_id, @detail, @closure, @func
and/or @data the handlers have to match.
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> Signal the handlers have to be connected to.
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> Signal detail the handlers have to be connected to.
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> The closure the handlers will invoke.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The C closure callback of the handlers (useless for non-C closures).
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The closure data of the handlers' closures.
</parameter_description>
</parameter>
</parameters>
<return> The number of handlers that matched.
</return>
</function>

<function name="g_signal_has_handler_pending">
<description>
Returns whether there are any handlers connected to @instance for the
given signal id and detail.

If @detail is 0 then it will only match handlers that were connected
without detail.  If @detail is non-zero then it will match handlers
connected both without detail and with the given detail.  This is
consistent with how a signal emitted with @detail would be delivered
to those handlers.

Since 2.46 this also checks for a non-default class closure being
installed, as this is basically always what you want.

One example of when you might use this is when the arguments to the
signal are difficult to compute. A class implementor may opt to not
emit the signal if no one is attached anyway, thus saving the cost
of building the arguments.


</description>
<parameters>
<parameter name="instance">
<parameter_description> the object whose signal handlers are sought.
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> the signal id.
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> the detail.
</parameter_description>
</parameter>
<parameter name="may_be_blocked">
<parameter_description> whether blocked handlers should count as match.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a handler is connected to the signal, %FALSE
otherwise.
</return>
</function>

<function name="g_signal_list_ids">
<description>
Lists the signals by id that a certain instance or interface type
created. Further information about the signals can be acquired through
g_signal_query().


</description>
<parameters>
<parameter name="itype">
<parameter_description> Instance or interface type.
</parameter_description>
</parameter>
<parameter name="n_ids">
<parameter_description> Location to store the number of signal ids for @itype.
</parameter_description>
</parameter>
</parameters>
<return> Newly allocated array of signal IDs.
</return>
</function>

<function name="g_signal_lookup">
<description>
Given the name of the signal and the type of object it connects to, gets
the signal's identifying integer. Emitting the signal by number is
somewhat faster than using the name each time.

Also tries the ancestors of the given type.

See g_signal_new() for details on allowed signal names.


</description>
<parameters>
<parameter name="name">
<parameter_description> the signal's name.
</parameter_description>
</parameter>
<parameter name="itype">
<parameter_description> the type that the signal operates on.
</parameter_description>
</parameter>
</parameters>
<return> the signal's identifying number, or 0 if no signal was found.
</return>
</function>

<function name="g_signal_name">
<description>
Given the signal's identifier, finds its name.

Two different signals may have the same name, if they have differing types.


</description>
<parameters>
<parameter name="signal_id">
<parameter_description> the signal's identifying number.
</parameter_description>
</parameter>
</parameters>
<return> the signal name, or %NULL if the signal number was invalid.
</return>
</function>

<function name="g_signal_new">
<description>
Creates a new signal. (This is usually done in the class initializer.)

A signal name consists of segments consisting of ASCII letters and
digits, separated by either the '-' or '_' character. The first
character of a signal name must be a letter. Names which violate these
rules lead to undefined behaviour of the GSignal system.

When registering a signal and looking up a signal, either separator can
be used, but they cannot be mixed.

If 0 is used for @class_offset subclasses cannot override the class handler
in their class_init method by doing super_class-&gt;signal_handler = my_signal_handler.
Instead they will have to use g_signal_override_class_handler().

If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
the marshaller for this signal.


</description>
<parameters>
<parameter name="signal_name">
<parameter_description> the name for the signal
</parameter_description>
</parameter>
<parameter name="itype">
<parameter_description> the type this signal pertains to. It will also pertain to
types which are derived from this type.
</parameter_description>
</parameter>
<parameter name="signal_flags">
<parameter_description> a combination of #GSignalFlags specifying detail of when
the default handler is to be invoked. You should at least specify
%G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST.
</parameter_description>
</parameter>
<parameter name="class_offset">
<parameter_description> The offset of the function pointer in the class structure
for this type. Used to invoke a class method generically. Pass 0 to
not associate a class method slot with this signal.
</parameter_description>
</parameter>
<parameter name="accumulator">
<parameter_description> the accumulator for this signal; may be %NULL.
</parameter_description>
</parameter>
<parameter name="accu_data">
<parameter_description> user data for the @accumulator.
</parameter_description>
</parameter>
<parameter name="c_marshaller">
<parameter_description> the function to translate arrays of parameter
values to signal emissions into C language callback invocations or %NULL.
</parameter_description>
</parameter>
<parameter name="return_type">
<parameter_description> the type of return value, or #G_TYPE_NONE for a signal
without a return value.
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the number of parameter types to follow.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of types, one for each parameter.
</parameter_description>
</parameter>
</parameters>
<return> the signal id
</return>
</function>

<function name="g_signal_new_class_handler">
<description>
Creates a new signal. (This is usually done in the class initializer.)

This is a variant of g_signal_new() that takes a C callback instead
off a class offset for the signal's class handler. This function
doesn't need a function pointer exposed in the class structure of
an object definition, instead the function pointer is passed
directly and can be overriden by derived classes with
g_signal_override_class_closure() or
g_signal_override_class_handler()and chained to with
g_signal_chain_from_overridden() or
g_signal_chain_from_overridden_handler().

See g_signal_new() for information about signal names.

If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
the marshaller for this signal.

Since: 2.18

</description>
<parameters>
<parameter name="signal_name">
<parameter_description> the name for the signal
</parameter_description>
</parameter>
<parameter name="itype">
<parameter_description> the type this signal pertains to. It will also pertain to
types which are derived from this type.
</parameter_description>
</parameter>
<parameter name="signal_flags">
<parameter_description> a combination of #GSignalFlags specifying detail of when
the default handler is to be invoked. You should at least specify
%G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST.
</parameter_description>
</parameter>
<parameter name="class_handler">
<parameter_description> a #GCallback which acts as class implementation of
this signal. Used to invoke a class method generically. Pass %NULL to
not associate a class method with this signal.
</parameter_description>
</parameter>
<parameter name="accumulator">
<parameter_description> the accumulator for this signal; may be %NULL.
</parameter_description>
</parameter>
<parameter name="accu_data">
<parameter_description> user data for the @accumulator.
</parameter_description>
</parameter>
<parameter name="c_marshaller">
<parameter_description> the function to translate arrays of parameter
values to signal emissions into C language callback invocations or %NULL.
</parameter_description>
</parameter>
<parameter name="return_type">
<parameter_description> the type of return value, or #G_TYPE_NONE for a signal
without a return value.
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the number of parameter types to follow.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of types, one for each parameter.
</parameter_description>
</parameter>
</parameters>
<return> the signal id

</return>
</function>

<function name="g_signal_new_valist">
<description>
Creates a new signal. (This is usually done in the class initializer.)

See g_signal_new() for details on allowed signal names.

If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
the marshaller for this signal.


</description>
<parameters>
<parameter name="signal_name">
<parameter_description> the name for the signal
</parameter_description>
</parameter>
<parameter name="itype">
<parameter_description> the type this signal pertains to. It will also pertain to
types which are derived from this type.
</parameter_description>
</parameter>
<parameter name="signal_flags">
<parameter_description> a combination of #GSignalFlags specifying detail of when
the default handler is to be invoked. You should at least specify
%G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST.
</parameter_description>
</parameter>
<parameter name="class_closure">
<parameter_description> The closure to invoke on signal emission; may be %NULL.
</parameter_description>
</parameter>
<parameter name="accumulator">
<parameter_description> the accumulator for this signal; may be %NULL.
</parameter_description>
</parameter>
<parameter name="accu_data">
<parameter_description> user data for the @accumulator.
</parameter_description>
</parameter>
<parameter name="c_marshaller">
<parameter_description> the function to translate arrays of parameter
values to signal emissions into C language callback invocations or %NULL.
</parameter_description>
</parameter>
<parameter name="return_type">
<parameter_description> the type of return value, or #G_TYPE_NONE for a signal
without a return value.
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the number of parameter types in @args.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of #GType, one for each parameter.
</parameter_description>
</parameter>
</parameters>
<return> the signal id
</return>
</function>

<function name="g_signal_newv">
<description>
Creates a new signal. (This is usually done in the class initializer.)

See g_signal_new() for details on allowed signal names.

If c_marshaller is %NULL, g_cclosure_marshal_generic() will be used as
the marshaller for this signal.


</description>
<parameters>
<parameter name="signal_name">
<parameter_description> the name for the signal
</parameter_description>
</parameter>
<parameter name="itype">
<parameter_description> the type this signal pertains to. It will also pertain to
types which are derived from this type
</parameter_description>
</parameter>
<parameter name="signal_flags">
<parameter_description> a combination of #GSignalFlags specifying detail of when
the default handler is to be invoked. You should at least specify
%G_SIGNAL_RUN_FIRST or %G_SIGNAL_RUN_LAST
</parameter_description>
</parameter>
<parameter name="class_closure">
<parameter_description> The closure to invoke on signal emission;
may be %NULL
</parameter_description>
</parameter>
<parameter name="accumulator">
<parameter_description> the accumulator for this signal; may be %NULL
</parameter_description>
</parameter>
<parameter name="accu_data">
<parameter_description> user data for the @accumulator
</parameter_description>
</parameter>
<parameter name="c_marshaller">
<parameter_description> the function to translate arrays of
parameter values to signal emissions into C language callback
invocations or %NULL
</parameter_description>
</parameter>
<parameter name="return_type">
<parameter_description> the type of return value, or #G_TYPE_NONE for a signal
without a return value
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the length of @param_types
</parameter_description>
</parameter>
<parameter name="param_types">
<parameter_description> an array of types, one for
each parameter
</parameter_description>
</parameter>
</parameters>
<return> the signal id
</return>
</function>

<function name="g_signal_override_class_closure">
<description>
Overrides the class closure (i.e. the default handler) for the given signal
for emissions on instances of @instance_type. @instance_type must be derived
from the type to which the signal belongs.

See g_signal_chain_from_overridden() and
g_signal_chain_from_overridden_handler() for how to chain up to the
parent class closure from inside the overridden one.

</description>
<parameters>
<parameter name="signal_id">
<parameter_description> the signal id
</parameter_description>
</parameter>
<parameter name="instance_type">
<parameter_description> the instance type on which to override the class closure
for the signal.
</parameter_description>
</parameter>
<parameter name="class_closure">
<parameter_description> the closure.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_override_class_handler">
<description>
Overrides the class closure (i.e. the default handler) for the
given signal for emissions on instances of @instance_type with
callback @class_handler. @instance_type must be derived from the
type to which the signal belongs.

See g_signal_chain_from_overridden() and
g_signal_chain_from_overridden_handler() for how to chain up to the
parent class closure from inside the overridden one.

Since: 2.18

</description>
<parameters>
<parameter name="signal_name">
<parameter_description> the name for the signal
</parameter_description>
</parameter>
<parameter name="instance_type">
<parameter_description> the instance type on which to override the class handler
for the signal.
</parameter_description>
</parameter>
<parameter name="class_handler">
<parameter_description> the handler.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_parse_name">
<description>
Internal function to parse a signal name into its @signal_id
and @detail quark.


</description>
<parameters>
<parameter name="detailed_signal">
<parameter_description> a string of the form &quot;signal-name::detail&quot;.
</parameter_description>
</parameter>
<parameter name="itype">
<parameter_description> The interface/instance type that introduced &quot;signal-name&quot;.
</parameter_description>
</parameter>
<parameter name="signal_id_p">
<parameter_description> Location to store the signal id.
</parameter_description>
</parameter>
<parameter name="detail_p">
<parameter_description> Location to store the detail quark.
</parameter_description>
</parameter>
<parameter name="force_detail_quark">
<parameter_description> %TRUE forces creation of a #GQuark for the detail.
</parameter_description>
</parameter>
</parameters>
<return> Whether the signal name could successfully be parsed and @signal_id_p and @detail_p contain valid return values.
</return>
</function>

<function name="g_signal_query">
<description>
Queries the signal system for in-depth information about a
specific signal. This function will fill in a user-provided
structure to hold signal-specific information. If an invalid
signal id is passed in, the @signal_id member of the #GSignalQuery
is 0. All members filled into the #GSignalQuery structure should
be considered constant and have to be left untouched.

</description>
<parameters>
<parameter name="signal_id">
<parameter_description> The signal id of the signal to query information for.
</parameter_description>
</parameter>
<parameter name="query">
<parameter_description> A user provided structure that is
filled in with constant values upon success.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_remove_emission_hook">
<description>
Deletes an emission hook.

</description>
<parameters>
<parameter name="signal_id">
<parameter_description> the id of the signal
</parameter_description>
</parameter>
<parameter name="hook_id">
<parameter_description> the id of the emission hook, as returned by
g_signal_add_emission_hook()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_set_va_marshaller">
<description>
Change the #GSignalCVaMarshaller used for a given signal.  This is a
specialised form of the marshaller that can often be used for the
common case of a single connected signal handler and avoids the
overhead of #GValue.  Its use is optional.

Since: 2.32

</description>
<parameters>
<parameter name="signal_id">
<parameter_description> the signal id
</parameter_description>
</parameter>
<parameter name="instance_type">
<parameter_description> the instance type on which to set the marshaller.
</parameter_description>
</parameter>
<parameter name="va_marshaller">
<parameter_description> the marshaller to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_stop_emission">
<description>
Stops a signal's current emission.

This will prevent the default method from running, if the signal was
%G_SIGNAL_RUN_LAST and you connected normally (i.e. without the &quot;after&quot;
flag).

Prints a warning if used on a signal which isn't being emitted.

</description>
<parameters>
<parameter name="instance">
<parameter_description> the object whose signal handlers you wish to stop.
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> the signal identifier, as returned by g_signal_lookup().
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> the detail which the signal was emitted with.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_stop_emission_by_name">
<description>
Stops a signal's current emission.

This is just like g_signal_stop_emission() except it will look up the
signal id for you.

</description>
<parameters>
<parameter name="instance">
<parameter_description> the object whose signal handlers you wish to stop.
</parameter_description>
</parameter>
<parameter name="detailed_signal">
<parameter_description> a string of the form &quot;signal-name::detail&quot;.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_signal_type_cclosure_new">
<description>
Creates a new closure which invokes the function found at the offset
@struct_offset in the class structure of the interface or classed type
identified by @itype.


</description>
<parameters>
<parameter name="itype">
<parameter_description> the #GType identifier of an interface or classed type
</parameter_description>
</parameter>
<parameter name="struct_offset">
<parameter_description> the offset of the member function of @itype's class
structure which is to be invoked by the new closure
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new #GCClosure
</return>
</function>

<function name="g_size_checked_add">
<description>
Performs a checked addition of @a and @b, storing the result in
@dest.

If the operation is successful, %TRUE is returned.  If the operation
overflows then the state of @dest is undefined and %FALSE is
returned.

Since: 2.48

</description>
<parameters>
<parameter name="dest">
<parameter_description> a pointer to the #gsize destination
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> the #gsize left operand
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> the #gsize right operand
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was no overflow
</return>
</function>

<function name="g_size_checked_mul">
<description>
Performs a checked multiplication of @a and @b, storing the result in
@dest.

If the operation is successful, %TRUE is returned.  If the operation
overflows then the state of @dest is undefined and %FALSE is
returned.

Since: 2.48

</description>
<parameters>
<parameter name="dest">
<parameter_description> a pointer to the #gsize destination
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> the #gsize left operand
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> the #gsize right operand
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was no overflow
</return>
</function>

<function name="g_slice_alloc">
<description>
Allocates a block of memory from the slice allocator.
The block address handed out can be expected to be aligned
to at least 1 * sizeof (void*),
though in general slices are 2 * sizeof (void*) bytes aligned,
if a malloc() fallback implementation is used instead,
the alignment may be reduced in a libc dependent fashion.
Note that the underlying slice allocation mechanism can
be changed with the [`G_SLICE=always-malloc`][G_SLICE]
environment variable.

Since: 2.10

</description>
<parameters>
<parameter name="block_size">
<parameter_description> the number of bytes to allocate
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated memory block, which will be %NULL if and
only if @mem_size is 0

</return>
</function>

<function name="g_slice_alloc0">
<description>
Allocates a block of memory via g_slice_alloc() and initializes
the returned memory to 0. Note that the underlying slice allocation
mechanism can be changed with the [`G_SLICE=always-malloc`][G_SLICE]
environment variable.

Since: 2.10

</description>
<parameters>
<parameter name="block_size">
<parameter_description> the number of bytes to allocate
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated block, which will be %NULL if and only
if @mem_size is 0

</return>
</function>

<function name="g_slice_copy">
<description>
Allocates a block of memory from the slice allocator
and copies @block_size bytes into it from @mem_block.

@mem_block must be non-%NULL if @block_size is non-zero.

Since: 2.14

</description>
<parameters>
<parameter name="block_size">
<parameter_description> the number of bytes to allocate
</parameter_description>
</parameter>
<parameter name="mem_block">
<parameter_description> the memory to copy
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated memory block, which will be %NULL if and
only if @mem_size is 0

</return>
</function>

<function name="g_slice_dup">
<description>
A convenience macro to duplicate a block of memory using
the slice allocator.

It calls g_slice_copy() with `sizeof (@type)`
and casts the returned pointer to a pointer of the given type,
avoiding a type cast in the source code.
Note that the underlying slice allocation mechanism can
be changed with the [`G_SLICE=always-malloc`][G_SLICE]
environment variable.

This can never return %NULL.

Since: 2.14

</description>
<parameters>
<parameter name="type">
<parameter_description> the type to duplicate, typically a structure name
</parameter_description>
</parameter>
<parameter name="mem">
<parameter_description> the memory to copy into the allocated block
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated block, cast to a pointer
to @type

</return>
</function>

<function name="g_slice_free">
<description>
A convenience macro to free a block of memory that has
been allocated from the slice allocator.

It calls g_slice_free1() using `sizeof (type)`
as the block size.
Note that the exact release behaviour can be changed with the
[`G_DEBUG=gc-friendly`][G_DEBUG] environment variable, also see
[`G_SLICE`][G_SLICE] for related debugging options.

If @mem is %NULL, this macro does nothing.

Since: 2.10

</description>
<parameters>
<parameter name="type">
<parameter_description> the type of the block to free, typically a structure name
</parameter_description>
</parameter>
<parameter name="mem">
<parameter_description> a pointer to the block to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_slice_free1">
<description>
Frees a block of memory.

The memory must have been allocated via g_slice_alloc() or
g_slice_alloc0() and the @block_size has to match the size
specified upon allocation. Note that the exact release behaviour
can be changed with the [`G_DEBUG=gc-friendly`][G_DEBUG] environment
variable, also see [`G_SLICE`][G_SLICE] for related debugging options.

If @mem_block is %NULL, this function does nothing.

Since: 2.10

</description>
<parameters>
<parameter name="block_size">
<parameter_description> the size of the block
</parameter_description>
</parameter>
<parameter name="mem_block">
<parameter_description> a pointer to the block to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_slice_free_chain">
<description>
Frees a linked list of memory blocks of structure type @type.
The memory blocks must be equal-sized, allocated via
g_slice_alloc() or g_slice_alloc0() and linked together by
a @next pointer (similar to #GSList). The name of the
@next field in @type is passed as third argument.
Note that the exact release behaviour can be changed with the
[`G_DEBUG=gc-friendly`][G_DEBUG] environment variable, also see
[`G_SLICE`][G_SLICE] for related debugging options.

If @mem_chain is %NULL, this function does nothing.

Since: 2.10

</description>
<parameters>
<parameter name="type">
<parameter_description> the type of the @mem_chain blocks
</parameter_description>
</parameter>
<parameter name="mem_chain">
<parameter_description> a pointer to the first block of the chain
</parameter_description>
</parameter>
<parameter name="next">
<parameter_description> the field name of the next pointer in @type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_slice_free_chain_with_offset">
<description>
Frees a linked list of memory blocks of structure type @type.

The memory blocks must be equal-sized, allocated via
g_slice_alloc() or g_slice_alloc0() and linked together by a
@next pointer (similar to #GSList). The offset of the @next
field in each block is passed as third argument.
Note that the exact release behaviour can be changed with the
[`G_DEBUG=gc-friendly`][G_DEBUG] environment variable, also see
[`G_SLICE`][G_SLICE] for related debugging options.

If @mem_chain is %NULL, this function does nothing.

Since: 2.10

</description>
<parameters>
<parameter name="block_size">
<parameter_description> the size of the blocks
</parameter_description>
</parameter>
<parameter name="mem_chain">
<parameter_description>  a pointer to the first block of the chain
</parameter_description>
</parameter>
<parameter name="next_offset">
<parameter_description> the offset of the @next field in the blocks
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_slice_new">
<description>
A convenience macro to allocate a block of memory from the
slice allocator.

It calls g_slice_alloc() with `sizeof (@type)` and casts the
returned pointer to a pointer of the given type, avoiding a type
cast in the source code. Note that the underlying slice allocation
mechanism can be changed with the [`G_SLICE=always-malloc`][G_SLICE]
environment variable.

This can never return %NULL as the minimum allocation size from
`sizeof (@type)` is 1 byte.

Since: 2.10

</description>
<parameters>
<parameter name="type">
<parameter_description> the type to allocate, typically a structure name
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated block, cast to a pointer
to @type

</return>
</function>

<function name="g_slice_new0">
<description>
A convenience macro to allocate a block of memory from the
slice allocator and set the memory to 0.

It calls g_slice_alloc0() with `sizeof (@type)`
and casts the returned pointer to a pointer of the given type,
avoiding a type cast in the source code.
Note that the underlying slice allocation mechanism can
be changed with the [`G_SLICE=always-malloc`][G_SLICE]
environment variable.

This can never return %NULL as the minimum allocation size from
`sizeof (@type)` is 1 byte.

Since: 2.10

</description>
<parameters>
<parameter name="type">
<parameter_description> the type to allocate, typically a structure name
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated block, cast to a pointer
to @type

</return>
</function>

<function name="g_slist_alloc">
<description>
Allocates space for one #GSList element. It is called by the
g_slist_append(), g_slist_prepend(), g_slist_insert() and
g_slist_insert_sorted() functions and so is rarely used on its own.


</description>
<parameters>
</parameters>
<return> a pointer to the newly-allocated #GSList element.
</return>
</function>

<function name="g_slist_append">
<description>
Adds a new element on to the end of the list.

The return value is the new start of the list, which may
have changed, so make sure you store the new value.

Note that g_slist_append() has to traverse the entire list
to find the end, which is inefficient when adding multiple
elements. A common idiom to avoid the inefficiency is to prepend
the elements and reverse the list when all elements have been added.

|[&lt;!-- language=&quot;C&quot; --&gt; 
// Notice that these are initialized to the empty list.
GSList *list = NULL, *number_list = NULL;

// This is a list of strings.
list = g_slist_append (list, &quot;first&quot;);
list = g_slist_append (list, &quot;second&quot;);

// This is a list of integers.
number_list = g_slist_append (number_list, GINT_TO_POINTER (27));
number_list = g_slist_append (number_list, GINT_TO_POINTER (14));
]|


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
</parameters>
<return> the new start of the #GSList
</return>
</function>

<function name="g_slist_concat">
<description>
Adds the second #GSList onto the end of the first #GSList.
Note that the elements of the second #GSList are not copied.
They are used directly.


</description>
<parameters>
<parameter name="list1">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="list2">
<parameter_description> the #GSList to add to the end of the first #GSList
</parameter_description>
</parameter>
</parameters>
<return> the start of the new #GSList
</return>
</function>

<function name="g_slist_copy">
<description>
Copies a #GSList.

Note that this is a &quot;shallow&quot; copy. If the list elements
consist of pointers to data, the pointers are copied but
the actual data isn't. See g_slist_copy_deep() if you need
to copy the data as well.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
</parameters>
<return> a copy of @list
</return>
</function>

<function name="g_slist_copy_deep">
<description>
Makes a full (deep) copy of a #GSList.

In contrast with g_slist_copy(), this function uses @func to make a copy of
each list element, in addition to copying the list container itself.

@func, as a #GCopyFunc, takes two arguments, the data to be copied and a user
pointer. It's safe to pass #NULL as user_data, if the copy function takes only
one argument.

For instance, if @list holds a list of GObjects, you can do:
|[&lt;!-- language=&quot;C&quot; --&gt; 
another_list = g_slist_copy_deep (list, (GCopyFunc) g_object_ref, NULL);
]|

And, to entirely free the new list, you could do:
|[&lt;!-- language=&quot;C&quot; --&gt; 
g_slist_free_full (another_list, g_object_unref);
]|

Since: 2.34

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a copy function used to copy every element in the list
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the copy function @func, or #NULL
</parameter_description>
</parameter>
</parameters>
<return> a full copy of @list, use #g_slist_free_full to free it

</return>
</function>

<function name="g_slist_delete_link">
<description>
Removes the node link_ from the list and frees it.
Compare this to g_slist_remove_link() which removes the node
without freeing it.

Removing arbitrary nodes from a singly-linked list requires time
that is proportional to the length of the list (ie. O(n)). If you
find yourself using g_slist_delete_link() frequently, you should
consider a different data structure, such as the doubly-linked
#GList.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="link_">
<parameter_description> node to delete
</parameter_description>
</parameter>
</parameters>
<return> the new head of @list
</return>
</function>

<function name="g_slist_find">
<description>
Finds the element in a #GSList which
contains the given data.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the element data to find
</parameter_description>
</parameter>
</parameters>
<return> the found #GSList element,
or %NULL if it is not found
</return>
</function>

<function name="g_slist_find_custom">
<description>
Finds an element in a #GSList, using a supplied function to
find the desired element. It iterates over the list, calling
the given function which should return 0 when the desired
element is found. The function takes two #gconstpointer arguments,
the #GSList element's data as the first argument and the
given user data.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data passed to the function
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each element.
It should return 0 when the desired element is found
</parameter_description>
</parameter>
</parameters>
<return> the found #GSList element, or %NULL if it is not found
</return>
</function>

<function name="g_slist_foreach">
<description>
Calls a function for each element of a #GSList.

It is safe for @func to remove the element from @list, but it must
not modify any part of the list after that element.

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call with each element's data
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_slist_free">
<description>
Frees all of the memory used by a #GSList.
The freed elements are returned to the slice allocator.

If list elements contain dynamically-allocated memory,
you should either use g_slist_free_full() or free them manually
first.

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_slist_free1">
<description>
A macro which does the same as g_slist_free_1().

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_slist_free_1">
<description>
Frees one #GSList element.
It is usually used after g_slist_remove_link().

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList element
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_slist_free_full">
<description>
Convenience method, which frees all the memory used by a #GSList, and
calls the specified destroy function on every element's data.

@free_func must not modify the list (eg, by removing the freed
element from it).

Since: 2.28

</description>
<parameters>
<parameter name="list">
<parameter_description> a pointer to a #GSList
</parameter_description>
</parameter>
<parameter name="free_func">
<parameter_description> the function to be called to free each element's data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_slist_index">
<description>
Gets the position of the element containing
the given data (starting from 0).


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to find
</parameter_description>
</parameter>
</parameters>
<return> the index of the element containing the data,
or -1 if the data is not found
</return>
</function>

<function name="g_slist_insert">
<description>
Inserts a new element into the list at the given position.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position to insert the element.
If this is negative, or is larger than the number
of elements in the list, the new element is added on
to the end of the list.
</parameter_description>
</parameter>
</parameters>
<return> the new start of the #GSList
</return>
</function>

<function name="g_slist_insert_before">
<description>
Inserts a node before @sibling containing @data.


</description>
<parameters>
<parameter name="slist">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> node to insert @data before
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to put in the newly-inserted node
</parameter_description>
</parameter>
</parameters>
<return> the new head of the list.
</return>
</function>

<function name="g_slist_insert_sorted">
<description>
Inserts a new element into the list, using the given
comparison function to determine its position.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to compare elements in the list.
It should return a number &gt; 0 if the first parameter
comes after the second parameter in the sort order.
</parameter_description>
</parameter>
</parameters>
<return> the new start of the #GSList
</return>
</function>

<function name="g_slist_insert_sorted_with_data">
<description>
Inserts a new element into the list, using the given
comparison function to determine its position.

Since: 2.10

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to compare elements in the list.
It should return a number &gt; 0 if the first parameter
comes after the second parameter in the sort order.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to comparison function
</parameter_description>
</parameter>
</parameters>
<return> the new start of the #GSList

</return>
</function>

<function name="g_slist_last">
<description>
Gets the last element in a #GSList.

This function iterates over the whole list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
</parameters>
<return> the last element in the #GSList,
or %NULL if the #GSList has no elements
</return>
</function>

<function name="g_slist_length">
<description>
Gets the number of elements in a #GSList.

This function iterates over the whole list to
count its elements. To check whether the list is non-empty, it is faster to
check @list against %NULL.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
</parameters>
<return> the number of elements in the #GSList
</return>
</function>

<function name="g_slist_next">
<description>
A convenience macro to get the next element in a #GSList.
Note that it is considered perfectly acceptable to access
@slist-&gt;next directly.


</description>
<parameters>
<parameter name="slist">
<parameter_description> an element in a #GSList.
</parameter_description>
</parameter>
</parameters>
<return> the next element, or %NULL if there are no more elements.
</return>
</function>

<function name="g_slist_nth">
<description>
Gets the element at the given position in a #GSList.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the position of the element, counting from 0
</parameter_description>
</parameter>
</parameters>
<return> the element, or %NULL if the position is off
the end of the #GSList
</return>
</function>

<function name="g_slist_nth_data">
<description>
Gets the data of the element at the given position.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the position of the element
</parameter_description>
</parameter>
</parameters>
<return> the element's data, or %NULL if the position
is off the end of the #GSList
</return>
</function>

<function name="g_slist_position">
<description>
Gets the position of the given element
in the #GSList (starting from 0).


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="llink">
<parameter_description> an element in the #GSList
</parameter_description>
</parameter>
</parameters>
<return> the position of the element in the #GSList,
or -1 if the element is not found
</return>
</function>

<function name="g_slist_prepend">
<description>
Adds a new element on to the start of the list.

The return value is the new start of the list, which
may have changed, so make sure you store the new value.

|[&lt;!-- language=&quot;C&quot; --&gt; 
// Notice that it is initialized to the empty list.
GSList *list = NULL;
list = g_slist_prepend (list, &quot;last&quot;);
list = g_slist_prepend (list, &quot;first&quot;);
]|


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data for the new element
</parameter_description>
</parameter>
</parameters>
<return> the new start of the #GSList
</return>
</function>

<function name="g_slist_remove">
<description>
Removes an element from a #GSList.
If two elements contain the same data, only the first is removed.
If none of the elements contain the data, the #GSList is unchanged.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data of the element to remove
</parameter_description>
</parameter>
</parameters>
<return> the new start of the #GSList
</return>
</function>

<function name="g_slist_remove_all">
<description>
Removes all list nodes with data equal to @data.
Returns the new head of the list. Contrast with
g_slist_remove() which removes only the first node
matching the given data.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to remove
</parameter_description>
</parameter>
</parameters>
<return> new head of @list
</return>
</function>

<function name="g_slist_remove_link">
<description>
Removes an element from a #GSList, without
freeing the element. The removed element's next
link is set to %NULL, so that it becomes a
self-contained list with one element.

Removing arbitrary nodes from a singly-linked list
requires time that is proportional to the length of the list
(ie. O(n)). If you find yourself using g_slist_remove_link()
frequently, you should consider a different data structure,
such as the doubly-linked #GList.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="link_">
<parameter_description> an element in the #GSList
</parameter_description>
</parameter>
</parameters>
<return> the new start of the #GSList, without the element
</return>
</function>

<function name="g_slist_reverse">
<description>
Reverses a #GSList.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
</parameters>
<return> the start of the reversed #GSList
</return>
</function>

<function name="g_slist_sort">
<description>
Sorts a #GSList using the given comparison function. The algorithm
used is a stable sort.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> the comparison function used to sort the #GSList.
This function is passed the data from 2 elements of the #GSList
and should return 0 if they are equal, a negative value if the
first element comes before the second, or a positive value if
the first element comes after the second.
</parameter_description>
</parameter>
</parameters>
<return> the start of the sorted #GSList
</return>
</function>

<function name="g_slist_sort_with_data">
<description>
Like g_slist_sort(), but the sort function accepts a user data argument.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GSList
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> comparison function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to comparison function
</parameter_description>
</parameter>
</parameters>
<return> new head of the list
</return>
</function>

<function name="g_snprintf">
<description>
A safer form of the standard sprintf() function. The output is guaranteed
to not exceed @n characters (including the terminating nul character), so
it is easy to ensure that a buffer overflow cannot occur.

See also g_strdup_printf().

In versions of GLib prior to 1.2.3, this function may return -1 if the
output was truncated, and the truncated string may not be nul-terminated.
In versions prior to 1.3.12, this function returns the length of the output
string.

The return value of g_snprintf() conforms to the snprintf()
function as standardized in ISO C99. Note that this is different from
traditional snprintf(), which returns the length of the output string.

The format string may contain positional parameters, as specified in
the Single Unix Specification.


</description>
<parameters>
<parameter name="string">
<parameter_description> the buffer to hold the output.
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the maximum number of bytes to produce (including the
terminating nul character).
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice
[string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to insert in the output.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes which would be produced if the buffer 
was large enough.
</return>
</function>

<function name="g_source_add_child_source">
<description>
Adds @child_source to @source as a &quot;polled&quot; source; when @source is
added to a #GMainContext, @child_source will be automatically added
with the same priority, when @child_source is triggered, it will
cause @source to dispatch (in addition to calling its own
callback), and when @source is destroyed, it will destroy
@child_source as well. (@source will also still be dispatched if
its own prepare/check functions indicate that it is ready.)

If you don't need @child_source to do anything on its own when it
triggers, you can call g_source_set_dummy_callback() on it to set a
callback that does nothing (except return %TRUE if appropriate).

@source will hold a reference on @child_source while @child_source
is attached to it.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

Since: 2.28

</description>
<parameters>
<parameter name="source">
<parameter_description>a #GSource
</parameter_description>
</parameter>
<parameter name="child_source">
<parameter_description> a second #GSource that @source should &quot;poll&quot;
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_add_poll">
<description>
Adds a file descriptor to the set of file descriptors polled for
this source. This is usually combined with g_source_new() to add an
event source. The event source's check function will typically test
the @revents field in the #GPollFD struct and return %TRUE if events need
to be processed.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

Using this API forces the linear scanning of event sources on each
main loop iteration.  Newly-written event sources should try to use
g_source_add_unix_fd() instead of this API.

</description>
<parameters>
<parameter name="source">
<parameter_description>a #GSource 
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a #GPollFD structure holding information about a file
descriptor to watch.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_add_unix_fd">
<description>
Monitors @fd for the IO events in @events.

The tag returned by this function can be used to remove or modify the
monitoring of the fd using g_source_remove_unix_fd() or
g_source_modify_unix_fd().

It is not necessary to remove the fd before destroying the source; it
will be cleaned up automatically.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

As the name suggests, this function is not available on Windows.

Since: 2.36

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> the fd to monitor
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> an event mask
</parameter_description>
</parameter>
</parameters>
<return> an opaque tag

</return>
</function>

<function name="g_source_attach">
<description>
Adds a #GSource to a @context so that it will be executed within
that context. Remove it by calling g_source_destroy().


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a #GMainContext (if %NULL, the default context will be used)
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) for the source within the 
#GMainContext. 
</return>
</function>

<function name="g_source_destroy">
<description>
Removes a source from its #GMainContext, if any, and mark it as
destroyed.  The source cannot be subsequently added to another
context. It is safe to call this on sources which have already been
removed from their context.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_get_can_recurse">
<description>
Checks whether a source is allowed to be called recursively.
see g_source_set_can_recurse().


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return> whether recursion is allowed.
</return>
</function>

<function name="g_source_get_context">
<description>
Gets the #GMainContext with which the source is associated.

You can call this on a source that has been destroyed, provided
that the #GMainContext it was attached to still exists (in which
case it will return that #GMainContext). In particular, you can
always call this function on the source returned from
g_main_current_source(). But calling this function on a source
whose #GMainContext has been destroyed is an error.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return> the #GMainContext with which the
source is associated, or %NULL if the context has not
yet been added to a source.
</return>
</function>

<function name="g_source_get_current_time">
<description>
This function ignores @source and is otherwise the same as
g_get_current_time().

Deprecated: 2.28: use g_source_get_time() instead

</description>
<parameters>
<parameter name="source">
<parameter_description>  a #GSource
</parameter_description>
</parameter>
<parameter name="timeval">
<parameter_description> #GTimeVal structure in which to store current time.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_get_id">
<description>
Returns the numeric ID for a particular source. The ID of a source
is a positive integer which is unique within a particular main loop 
context. The reverse
mapping from ID to source is done by g_main_context_find_source_by_id().


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) for the source
</return>
</function>

<function name="g_source_get_name">
<description>
Gets a name for the source, used in debugging and profiling.  The
name may be #NULL if it has never been set with g_source_set_name().

Since: 2.26

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return> the name of the source

</return>
</function>

<function name="g_source_get_priority">
<description>
Gets the priority of a source.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return> the priority of the source
</return>
</function>

<function name="g_source_get_ready_time">
<description>
Gets the &quot;ready time&quot; of @source, as set by
g_source_set_ready_time().

Any time before the current monotonic time (including 0) is an
indication that the source will fire immediately.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return> the monotonic ready time, -1 for &quot;never&quot;
</return>
</function>

<function name="g_source_get_time">
<description>
Gets the time to be used when checking this source. The advantage of
calling this function over calling g_get_monotonic_time() directly is
that when checking multiple sources, GLib can cache a single value
instead of having to repeatedly get the system monotonic time.

The time here is the system monotonic time, if available, or some
other reasonable alternative otherwise.  See g_get_monotonic_time().

Since: 2.28

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return> the monotonic time in microseconds

</return>
</function>

<function name="g_source_is_destroyed">
<description>
Returns whether @source has been destroyed.

This is important when you operate upon your objects 
from within idle handlers, but may have freed the object 
before the dispatch of your idle handler.

|[&lt;!-- language=&quot;C&quot; --&gt; 
static gboolean 
idle_callback (gpointer data)
{
SomeWidget *self = data;

GDK_THREADS_ENTER ();
// do stuff with self
self-&gt;idle_id = 0;
GDK_THREADS_LEAVE ();

return G_SOURCE_REMOVE;
}

static void 
some_widget_do_stuff_later (SomeWidget *self)
{
self-&gt;idle_id = g_idle_add (idle_callback, self);
}

static void 
some_widget_finalize (GObject *object)
{
SomeWidget *self = SOME_WIDGET (object);

if (self-&gt;idle_id)
g_source_remove (self-&gt;idle_id);

G_OBJECT_CLASS (parent_class)-&gt;finalize (object);
}
]|

This will fail in a multi-threaded application if the 
widget is destroyed before the idle handler fires due 
to the use after free in the callback. A solution, to 
this particular problem, is to check to if the source
has already been destroy within the callback.

|[&lt;!-- language=&quot;C&quot; --&gt; 
static gboolean 
idle_callback (gpointer data)
{
SomeWidget *self = data;

GDK_THREADS_ENTER ();
if (!g_source_is_destroyed (g_main_current_source ()))
{
// do stuff with self
}
GDK_THREADS_LEAVE ();

return FALSE;
}
]|

Calls to this function from a thread other than the one acquired by the
#GMainContext the #GSource is attached to are typically redundant, as the
source could be destroyed immediately after this function returns. However,
once a source is destroyed it cannot be un-destroyed, so this function can be
used for opportunistic checks from any thread.

Since: 2.12

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the source has been destroyed

</return>
</function>

<function name="g_source_modify_unix_fd">
<description>
Updates the event mask to watch for the fd identified by @tag.

@tag is the tag returned from g_source_add_unix_fd().

If you want to remove a fd, don't set its event mask to zero.
Instead, call g_source_remove_unix_fd().

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

As the name suggests, this function is not available on Windows.

Since: 2.36

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> the tag from g_source_add_unix_fd()
</parameter_description>
</parameter>
<parameter name="new_events">
<parameter_description> the new event mask to watch
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_new">
<description>
Creates a new #GSource structure. The size is specified to
allow creating structures derived from #GSource that contain
additional data. The size passed in must be at least
`sizeof (GSource)`.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed.


</description>
<parameters>
<parameter name="source_funcs">
<parameter_description> structure containing functions that implement
the sources behavior.
</parameter_description>
</parameter>
<parameter name="struct_size">
<parameter_description> size of the #GSource structure to create.
</parameter_description>
</parameter>
</parameters>
<return> the newly-created #GSource.
</return>
</function>

<function name="g_source_query_unix_fd">
<description>
Queries the events reported for the fd corresponding to @tag on
@source during the last poll.

The return value of this function is only defined when the function
is called from the check or dispatch functions for @source.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

As the name suggests, this function is not available on Windows.

Since: 2.36

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> the tag from g_source_add_unix_fd()
</parameter_description>
</parameter>
</parameters>
<return> the conditions reported on the fd

</return>
</function>

<function name="g_source_ref">
<description>
Increases the reference count on a source by one.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return> @source
</return>
</function>

<function name="g_source_remove">
<description>
Removes the source with the given ID from the default main context. You must
use g_source_destroy() for sources added to a non-default main context.

The ID of a #GSource is given by g_source_get_id(), or will be
returned by the functions g_source_attach(), g_idle_add(),
g_idle_add_full(), g_timeout_add(), g_timeout_add_full(),
g_child_watch_add(), g_child_watch_add_full(), g_io_add_watch(), and
g_io_add_watch_full().

It is a programmer error to attempt to remove a non-existent source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.


</description>
<parameters>
<parameter name="tag">
<parameter_description> the ID of the source to remove.
</parameter_description>
</parameter>
</parameters>
<return> For historical reasons, this function always returns %TRUE
</return>
</function>

<function name="g_source_remove_by_funcs_user_data">
<description>
Removes a source from the default main loop context given the
source functions and user data. If multiple sources exist with the
same source functions and user data, only one will be destroyed.


</description>
<parameters>
<parameter name="funcs">
<parameter_description> The @source_funcs passed to g_source_new()
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the user data for the callback
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a source was found and removed. 
</return>
</function>

<function name="g_source_remove_by_user_data">
<description>
Removes a source from the default main loop context given the user
data for the callback. If multiple sources exist with the same user
data, only one will be destroyed.


</description>
<parameters>
<parameter name="user_data">
<parameter_description> the user_data for the callback.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a source was found and removed. 
</return>
</function>

<function name="g_source_remove_child_source">
<description>
Detaches @child_source from @source and destroys it.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

Since: 2.28

</description>
<parameters>
<parameter name="source">
<parameter_description>a #GSource
</parameter_description>
</parameter>
<parameter name="child_source">
<parameter_description> a #GSource previously passed to
g_source_add_child_source().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_remove_poll">
<description>
Removes a file descriptor from the set of file descriptors polled for
this source. 

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

</description>
<parameters>
<parameter name="source">
<parameter_description>a #GSource 
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a #GPollFD structure previously passed to g_source_add_poll().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_remove_unix_fd">
<description>
Reverses the effect of a previous call to g_source_add_unix_fd().

You only need to call this if you want to remove an fd from being
watched while keeping the same source around.  In the normal case you
will just want to destroy the source.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

As the name suggests, this function is not available on Windows.

Since: 2.36

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> the tag from g_source_add_unix_fd()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_set_callback">
<description>
Sets the callback function for a source. The callback for a source is
called from the source's dispatch function.

The exact type of @func depends on the type of source; ie. you
should not count on @func being called with @data as its first
parameter.

See [memory management of sources][mainloop-memory-management] for details
on how to handle memory management of @data.

Typically, you won't use this function. Instead use functions specific
to the type of source you are using.

</description>
<parameters>
<parameter name="source">
<parameter_description> the source
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a callback function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a function to call when @data is no longer in use, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_set_callback_indirect">
<description>
Sets the callback function storing the data as a refcounted callback
&quot;object&quot;. This is used internally. Note that calling 
g_source_set_callback_indirect() assumes
an initial reference count on @callback_data, and thus
@callback_funcs-&gt;unref will eventually be called once more
than @callback_funcs-&gt;ref.

</description>
<parameters>
<parameter name="source">
<parameter_description> the source
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> pointer to callback data &quot;object&quot;
</parameter_description>
</parameter>
<parameter name="callback_funcs">
<parameter_description> functions for reference counting @callback_data
and getting the callback and data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_set_can_recurse">
<description>
Sets whether a source can be called recursively. If @can_recurse is
%TRUE, then while the source is being dispatched then this source
will be processed normally. Otherwise, all processing of this
source is blocked until the dispatch function returns.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
<parameter name="can_recurse">
<parameter_description> whether recursion is allowed for this source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_set_closure">
<description>
Set the callback for a source as a #GClosure.

If the source is not one of the standard GLib types, the @closure_callback
and @closure_marshal fields of the #GSourceFuncs structure must have been
filled in with pointers to appropriate functions.

</description>
<parameters>
<parameter name="source">
<parameter_description> the source
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_set_dummy_callback">
<description>
Sets a dummy callback for @source. The callback will do nothing, and
if the source expects a #gboolean return value, it will return %TRUE.
(If the source expects any other type of return value, it will return
a 0/%NULL value; whatever g_value_init() initializes a #GValue to for
that type.)

If the source is not one of the standard GLib types, the
@closure_callback and @closure_marshal fields of the #GSourceFuncs
structure must have been filled in with pointers to appropriate
functions.

</description>
<parameters>
<parameter name="source">
<parameter_description> the source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_set_funcs">
<description>
Sets the source functions (can be used to override 
default implementations) of an unattached source.

Since: 2.12

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
<parameter name="funcs">
<parameter_description> the new #GSourceFuncs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_set_name">
<description>
Sets a name for the source, used in debugging and profiling.
The name defaults to #NULL.

The source name should describe in a human-readable way
what the source does. For example, &quot;X11 event queue&quot;
or &quot;GTK+ repaint idle handler&quot; or whatever it is.

It is permitted to call this function multiple times, but is not
recommended due to the potential performance impact.  For example,
one could change the name in the &quot;check&quot; function of a #GSourceFuncs
to include details like the event type in the source name.

Use caution if changing the name while another thread may be
accessing it with g_source_get_name(); that function does not copy
the value, and changing the value will free it while the other thread
may be attempting to use it.

Since: 2.26

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> debug name for the source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_set_name_by_id">
<description>
Sets the name of a source using its ID.

This is a convenience utility to set source names from the return
value of g_idle_add(), g_timeout_add(), etc.

It is a programmer error to attempt to set the name of a non-existent
source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.

Since: 2.26

</description>
<parameters>
<parameter name="tag">
<parameter_description> a #GSource ID
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> debug name for the source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_set_priority">
<description>
Sets the priority of a source. While the main loop is being run, a
source will be dispatched if it is ready to be dispatched and no
sources at a higher (numerically smaller) priority are ready to be
dispatched.

A child source always has the same priority as its parent.  It is not
permitted to change the priority of a source once it has been added
as a child of another source.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the new priority.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_set_ready_time">
<description>
Sets a #GSource to be dispatched when the given monotonic time is
reached (or passed).  If the monotonic time is in the past (as it
always will be if @ready_time is 0) then the source will be
dispatched immediately.

If @ready_time is -1 then the source is never woken up on the basis
of the passage of time.

Dispatching the source does not reset the ready time.  You should do
so yourself, from the source dispatch function.

Note that if you have a pair of sources where the ready time of one
suggests that it will be delivered first but the priority for the
other suggests that it would be delivered first, and the ready time
for both sources is reached during the same main context iteration,
then the order of dispatch is undefined.

It is a no-op to call this function on a #GSource which has already been
destroyed with g_source_destroy().

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

Since: 2.36

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
<parameter name="ready_time">
<parameter_description> the monotonic time at which the source will be ready,
0 for &quot;immediately&quot;, -1 for &quot;never&quot;
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_source_unref">
<description>
Decreases the reference count of a source by one. If the
resulting reference count is zero the source and associated
memory will be destroyed. 

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GSource
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_spaced_primes_closest">
<description>
Gets the smallest prime number from a built-in array of primes which
is larger than @num. This is used within GLib to calculate the optimum
size of a #GHashTable.

The built-in array of primes ranges from 11 to 13845163 such that
each prime is approximately 1.5-2 times the previous prime.


</description>
<parameters>
<parameter name="num">
<parameter_description> a #guint
</parameter_description>
</parameter>
</parameters>
<return> the smallest prime number from a built-in array of primes
which is larger than @num
</return>
</function>

<function name="g_spawn_async">
<description>
See g_spawn_async_with_pipes() for a full description; this function
simply calls the g_spawn_async_with_pipes() without any pipes.

You should call g_spawn_close_pid() on the returned child process
reference when you don't need it any more.

If you are writing a GTK+ application, and the program you are spawning is a
graphical application too, then to ensure that the spawned program opens its
windows on the right screen, you may want to use #GdkAppLaunchContext,
#GAppLaunchContext, or set the %DISPLAY environment variable.

Note that the returned @child_pid on Windows is a handle to the child
process and not its identifier. Process handles and process identifiers
are different concepts on Windows.


</description>
<parameters>
<parameter name="working_directory">
<parameter_description> child's current working
directory, or %NULL to inherit parent's
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description>
child's argument vector
</parameter_description>
</parameter>
<parameter name="envp">
<parameter_description>
child's environment, or %NULL to inherit parent's
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags from #GSpawnFlags
</parameter_description>
</parameter>
<parameter name="child_setup">
<parameter_description> function to run in the child just before exec()
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @child_setup
</parameter_description>
</parameter>
<parameter name="child_pid">
<parameter_description> return location for child process reference, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if error is set
</return>
</function>

<function name="g_spawn_async_with_pipes">
<description>
Executes a child program asynchronously (your program will not
block waiting for the child to exit). The child program is
specified by the only argument that must be provided, @argv.
@argv should be a %NULL-terminated array of strings, to be passed
as the argument vector for the child. The first string in @argv
is of course the name of the program to execute. By default, the
name of the program must be a full path. If @flags contains the
%G_SPAWN_SEARCH_PATH flag, the `PATH` environment variable is
used to search for the executable. If @flags contains the
%G_SPAWN_SEARCH_PATH_FROM_ENVP flag, the `PATH` variable from 
@envp is used to search for the executable. If both the
%G_SPAWN_SEARCH_PATH and %G_SPAWN_SEARCH_PATH_FROM_ENVP flags
are set, the `PATH` variable from @envp takes precedence over
the environment variable.

If the program name is not a full path and %G_SPAWN_SEARCH_PATH flag is not
used, then the program will be run from the current directory (or
@working_directory, if specified); this might be unexpected or even
dangerous in some cases when the current directory is world-writable.

On Windows, note that all the string or string vector arguments to
this function and the other g_spawn*() functions are in UTF-8, the
GLib file name encoding. Unicode characters that are not part of
the system codepage passed in these arguments will be correctly
available in the spawned program only if it uses wide character API
to retrieve its command line. For C programs built with Microsoft's
tools it is enough to make the program have a wmain() instead of
main(). wmain() has a wide character argument vector as parameter.

At least currently, mingw doesn't support wmain(), so if you use
mingw to develop the spawned program, it should call
g_win32_get_command_line() to get arguments in UTF-8.

On Windows the low-level child process creation API CreateProcess()
doesn't use argument vectors, but a command line. The C runtime
library's spawn*() family of functions (which g_spawn_async_with_pipes()
eventually calls) paste the argument vector elements together into
a command line, and the C runtime startup code does a corresponding
reconstruction of an argument vector from the command line, to be
passed to main(). Complications arise when you have argument vector
elements that contain spaces of double quotes. The spawn*() functions
don't do any quoting or escaping, but on the other hand the startup
code does do unquoting and unescaping in order to enable receiving
arguments with embedded spaces or double quotes. To work around this
asymmetry, g_spawn_async_with_pipes() will do quoting and escaping on
argument vector elements that need it before calling the C runtime
spawn() function.

The returned @child_pid on Windows is a handle to the child
process, not its identifier. Process handles and process
identifiers are different concepts on Windows.

@envp is a %NULL-terminated array of strings, where each string
has the form `KEY=VALUE`. This will become the child's environment.
If @envp is %NULL, the child inherits its parent's environment.

@flags should be the bitwise OR of any flags you want to affect the
function's behaviour. The %G_SPAWN_DO_NOT_REAP_CHILD means that the
child will not automatically be reaped; you must use a child watch
(g_child_watch_add()) to be notified about the death of the child process,
otherwise it will stay around as a zombie process until this process exits.
Eventually you must call g_spawn_close_pid() on the @child_pid, in order to
free resources which may be associated with the child process. (On Unix,
using a child watch is equivalent to calling waitpid() or handling
the %SIGCHLD signal manually. On Windows, calling g_spawn_close_pid()
is equivalent to calling CloseHandle() on the process handle returned
in @child_pid). See g_child_watch_add().

%G_SPAWN_LEAVE_DESCRIPTORS_OPEN means that the parent's open file
descriptors will be inherited by the child; otherwise all descriptors
except stdin/stdout/stderr will be closed before calling exec() in
the child. %G_SPAWN_SEARCH_PATH means that @argv[0] need not be an
absolute path, it will be looked for in the `PATH` environment
variable. %G_SPAWN_SEARCH_PATH_FROM_ENVP means need not be an
absolute path, it will be looked for in the `PATH` variable from
@envp. If both %G_SPAWN_SEARCH_PATH and %G_SPAWN_SEARCH_PATH_FROM_ENVP
are used, the value from @envp takes precedence over the environment.
%G_SPAWN_STDOUT_TO_DEV_NULL means that the child's standard output
will be discarded, instead of going to the same location as the parent's 
standard output. If you use this flag, @standard_output must be %NULL.
%G_SPAWN_STDERR_TO_DEV_NULL means that the child's standard error
will be discarded, instead of going to the same location as the parent's
standard error. If you use this flag, @standard_error must be %NULL.
%G_SPAWN_CHILD_INHERITS_STDIN means that the child will inherit the parent's
standard input (by default, the child's standard input is attached to
`/dev/null`). If you use this flag, @standard_input must be %NULL.
%G_SPAWN_FILE_AND_ARGV_ZERO means that the first element of @argv is
the file to execute, while the remaining elements are the actual
argument vector to pass to the file. Normally g_spawn_async_with_pipes()
uses @argv[0] as the file to execute, and passes all of @argv to the child.

@child_setup and @user_data are a function and user data. On POSIX
platforms, the function is called in the child after GLib has
performed all the setup it plans to perform (including creating
pipes, closing file descriptors, etc.) but before calling exec().
That is, @child_setup is called just before calling exec() in the
child. Obviously actions taken in this function will only affect
the child, not the parent.

On Windows, there is no separate fork() and exec() functionality.
Child processes are created and run with a single API call,
CreateProcess(). There is no sensible thing @child_setup
could be used for on Windows so it is ignored and not called.

If non-%NULL, @child_pid will on Unix be filled with the child's
process ID. You can use the process ID to send signals to the child,
or to use g_child_watch_add() (or waitpid()) if you specified the
%G_SPAWN_DO_NOT_REAP_CHILD flag. On Windows, @child_pid will be
filled with a handle to the child process only if you specified the
%G_SPAWN_DO_NOT_REAP_CHILD flag. You can then access the child
process using the Win32 API, for example wait for its termination
with the WaitFor*() functions, or examine its exit code with
GetExitCodeProcess(). You should close the handle with CloseHandle()
or g_spawn_close_pid() when you no longer need it.

If non-%NULL, the @standard_input, @standard_output, @standard_error
locations will be filled with file descriptors for writing to the child's
standard input or reading from its standard output or standard error.
The caller of g_spawn_async_with_pipes() must close these file descriptors
when they are no longer in use. If these parameters are %NULL, the
corresponding pipe won't be created.

If @standard_input is %NULL, the child's standard input is attached to
`/dev/null` unless %G_SPAWN_CHILD_INHERITS_STDIN is set.

If @standard_error is NULL, the child's standard error goes to the same 
location as the parent's standard error unless %G_SPAWN_STDERR_TO_DEV_NULL 
is set.

If @standard_output is NULL, the child's standard output goes to the same 
location as the parent's standard output unless %G_SPAWN_STDOUT_TO_DEV_NULL 
is set.

@error can be %NULL to ignore errors, or non-%NULL to report errors.
If an error is set, the function returns %FALSE. Errors are reported
even if they occur in the child (for example if the executable in
@argv[0] is not found). Typically the `message` field of returned
errors should be displayed to users. Possible errors are those from
the #G_SPAWN_ERROR domain.

If an error occurs, @child_pid, @standard_input, @standard_output,
and @standard_error will not be filled with valid values.

If @child_pid is not %NULL and an error does not occur then the returned
process reference must be closed using g_spawn_close_pid().

If you are writing a GTK+ application, and the program you are spawning is a
graphical application too, then to ensure that the spawned program opens its
windows on the right screen, you may want to use #GdkAppLaunchContext,
#GAppLaunchContext, or set the %DISPLAY environment variable.


</description>
<parameters>
<parameter name="working_directory">
<parameter_description> child's current working
directory, or %NULL to inherit parent's, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> child's argument
vector, in the GLib file name encoding
</parameter_description>
</parameter>
<parameter name="envp">
<parameter_description>
child's environment, or %NULL to inherit parent's, in the GLib file
name encoding
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags from #GSpawnFlags
</parameter_description>
</parameter>
<parameter name="child_setup">
<parameter_description> function to run in the child just before exec()
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @child_setup
</parameter_description>
</parameter>
<parameter name="child_pid">
<parameter_description> return location for child process ID, or %NULL
</parameter_description>
</parameter>
<parameter name="standard_input">
<parameter_description> return location for file descriptor to write to child's stdin, or %NULL
</parameter_description>
</parameter>
<parameter name="standard_output">
<parameter_description> return location for file descriptor to read child's stdout, or %NULL
</parameter_description>
</parameter>
<parameter name="standard_error">
<parameter_description> return location for file descriptor to read child's stderr, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if an error was set
</return>
</function>

<function name="g_spawn_check_exit_status">
<description>
Set @error if @exit_status indicates the child exited abnormally
(e.g. with a nonzero exit code, or via a fatal signal).

The g_spawn_sync() and g_child_watch_add() family of APIs return an
exit status for subprocesses encoded in a platform-specific way.
On Unix, this is guaranteed to be in the same format waitpid() returns,
and on Windows it is guaranteed to be the result of GetExitCodeProcess().

Prior to the introduction of this function in GLib 2.34, interpreting
@exit_status required use of platform-specific APIs, which is problematic
for software using GLib as a cross-platform layer.

Additionally, many programs simply want to determine whether or not
the child exited successfully, and either propagate a #GError or
print a message to standard error. In that common case, this function
can be used. Note that the error message in @error will contain
human-readable information about the exit status.

The @domain and @code of @error have special semantics in the case
where the process has an &quot;exit code&quot;, as opposed to being killed by
a signal. On Unix, this happens if WIFEXITED() would be true of
@exit_status. On Windows, it is always the case.

The special semantics are that the actual exit code will be the
code set in @error, and the domain will be %G_SPAWN_EXIT_ERROR.
This allows you to differentiate between different exit codes.

If the process was terminated by some means other than an exit
status, the domain will be %G_SPAWN_ERROR, and the code will be
%G_SPAWN_ERROR_FAILED.

This function just offers convenience; you can of course also check
the available platform via a macro such as %G_OS_UNIX, and use
WIFEXITED() and WEXITSTATUS() on @exit_status directly. Do not attempt
to scan or parse the error message string; it may be translated and/or
change in future versions of GLib.

Since: 2.34

</description>
<parameters>
<parameter name="exit_status">
<parameter_description> An exit code as returned from g_spawn_sync()
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if child exited successfully, %FALSE otherwise (and
@error will be set)

</return>
</function>

<function name="g_spawn_close_pid">
<description>
On some platforms, notably Windows, the #GPid type represents a resource
which must be closed to prevent resource leaking. g_spawn_close_pid()
is provided for this purpose. It should be used on all platforms, even
though it doesn't do anything under UNIX.

</description>
<parameters>
<parameter name="pid">
<parameter_description> The process reference to close
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_spawn_command_line_async">
<description>
A simple version of g_spawn_async() that parses a command line with
g_shell_parse_argv() and passes it to g_spawn_async(). Runs a
command line in the background. Unlike g_spawn_async(), the
%G_SPAWN_SEARCH_PATH flag is enabled, other flags are not. Note
that %G_SPAWN_SEARCH_PATH can have security implications, so
consider using g_spawn_async() directly if appropriate. Possible
errors are those from g_shell_parse_argv() and g_spawn_async().

The same concerns on Windows apply as for g_spawn_command_line_sync().


</description>
<parameters>
<parameter name="command_line">
<parameter_description> a command line
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if error is set
</return>
</function>

<function name="g_spawn_command_line_sync">
<description>
A simple version of g_spawn_sync() with little-used parameters
removed, taking a command line instead of an argument vector.  See
g_spawn_sync() for full details. @command_line will be parsed by
g_shell_parse_argv(). Unlike g_spawn_sync(), the %G_SPAWN_SEARCH_PATH flag
is enabled. Note that %G_SPAWN_SEARCH_PATH can have security
implications, so consider using g_spawn_sync() directly if
appropriate. Possible errors are those from g_spawn_sync() and those
from g_shell_parse_argv().

If @exit_status is non-%NULL, the platform-specific exit status of
the child is stored there; see the documentation of
g_spawn_check_exit_status() for how to use and interpret this.

On Windows, please note the implications of g_shell_parse_argv()
parsing @command_line. Parsing is done according to Unix shell rules, not 
Windows command interpreter rules.
Space is a separator, and backslashes are
special. Thus you cannot simply pass a @command_line containing
canonical Windows paths, like &quot;c:\\program files\\app\\app.exe&quot;, as
the backslashes will be eaten, and the space will act as a
separator. You need to enclose such paths with single quotes, like
&quot;'c:\\program files\\app\\app.exe' 'e:\\folder\\argument.txt'&quot;.


</description>
<parameters>
<parameter name="command_line">
<parameter_description> a command line
</parameter_description>
</parameter>
<parameter name="standard_output">
<parameter_description> return location for child output
</parameter_description>
</parameter>
<parameter name="standard_error">
<parameter_description> return location for child errors
</parameter_description>
</parameter>
<parameter name="exit_status">
<parameter_description> return location for child exit status, as returned by waitpid()
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if an error was set
</return>
</function>

<function name="g_spawn_sync">
<description>
Executes a child synchronously (waits for the child to exit before returning).
All output from the child is stored in @standard_output and @standard_error,
if those parameters are non-%NULL. Note that you must set the  
%G_SPAWN_STDOUT_TO_DEV_NULL and %G_SPAWN_STDERR_TO_DEV_NULL flags when
passing %NULL for @standard_output and @standard_error.

If @exit_status is non-%NULL, the platform-specific exit status of
the child is stored there; see the documentation of
g_spawn_check_exit_status() for how to use and interpret this.
Note that it is invalid to pass %G_SPAWN_DO_NOT_REAP_CHILD in
@flags, and on POSIX platforms, the same restrictions as for
g_child_watch_source_new() apply.

If an error occurs, no data is returned in @standard_output,
@standard_error, or @exit_status.

This function calls g_spawn_async_with_pipes() internally; see that
function for full details on the other parameters and details on
how these functions work on Windows.


</description>
<parameters>
<parameter name="working_directory">
<parameter_description> child's current working
directory, or %NULL to inherit parent's
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description>
child's argument vector
</parameter_description>
</parameter>
<parameter name="envp">
<parameter_description>
child's environment, or %NULL to inherit parent's
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags from #GSpawnFlags
</parameter_description>
</parameter>
<parameter name="child_setup">
<parameter_description> function to run in the child just before exec()
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @child_setup
</parameter_description>
</parameter>
<parameter name="standard_output">
<parameter_description> return location for child output, or %NULL
</parameter_description>
</parameter>
<parameter name="standard_error">
<parameter_description> return location for child error messages, or %NULL
</parameter_description>
</parameter>
<parameter name="exit_status">
<parameter_description> return location for child exit status, as returned by waitpid(), or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if an error was set
</return>
</function>

<function name="g_sprintf">
<description>
An implementation of the standard sprintf() function which supports
positional parameters, as specified in the Single Unix Specification.

Note that it is usually better to use g_snprintf(), to avoid the
risk of buffer overflow.

`glib/gprintf.h` must be explicitly included in order to use this function.

See also g_strdup_printf().

Since: 2.2

</description>
<parameters>
<parameter name="string">
<parameter_description> A pointer to a memory buffer to contain the resulting string. It
is up to the caller to ensure that the allocated buffer is large
enough to hold the formatted result
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice
[string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to insert in the output.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes printed.

</return>
</function>

<function name="g_stat">
<description>
A wrapper for the POSIX stat() function. The stat() function
returns information about a file. On Windows the stat() function in
the C library checks only the FAT-style READONLY attribute and does
not look at the ACL at all. Thus on Windows the protection bits in
the @st_mode field are a fabrication of little use.

On Windows the Microsoft C libraries have several variants of the
stat struct and stat() function with names like _stat(), _stat32(),
_stat32i64() and _stat64i32(). The one used here is for 32-bit code
the one with 32-bit size and time fields, specifically called _stat32().

In Microsoft's compiler, by default struct stat means one with
64-bit time fields while in MinGW struct stat is the legacy one
with 32-bit fields. To hopefully clear up this messs, the gstdio.h
header defines a type #GStatBuf which is the appropriate struct type
depending on the platform and/or compiler being used. On POSIX it
is just struct stat, but note that even on POSIX platforms, stat()
might be a macro.

See your C library manual for more details about stat().

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> a pointer to a stat struct, which will be filled with the file
information
</parameter_description>
</parameter>
</parameters>
<return> 0 if the information was successfully retrieved,
-1 if an error occurred

</return>
</function>

<function name="g_static_mutex_free">
<description>
Releases all resources allocated to @mutex.

You don't have to call this functions for a #GStaticMutex with an
unbounded lifetime, i.e. objects declared 'static', but if you have
a #GStaticMutex as a member of a structure and the structure is
freed, you should also free the #GStaticMutex.

Calling g_static_mutex_free() on a locked mutex may result in
undefined behaviour.

Deprecated: 2.32: Use g_mutex_clear()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticMutex to be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_mutex_get_mutex">
<description>
For some operations (like g_cond_wait()) you must have a #GMutex
instead of a #GStaticMutex. This function will return the
corresponding #GMutex for @mutex.

Deprecated: 2.32: Just use a #GMutex

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticMutex.
</parameter_description>
</parameter>
</parameters>
<return> the #GMutex corresponding to @mutex.

</return>
</function>

<function name="g_static_mutex_init">
<description>
Initializes @mutex.
Alternatively you can initialize it with #G_STATIC_MUTEX_INIT.

Deprecated: 2.32: Use g_mutex_init()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticMutex to be initialized.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_mutex_lock">
<description>
Works like g_mutex_lock(), but for a #GStaticMutex.

Deprecated: 2.32: Use g_mutex_lock()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticMutex.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_mutex_trylock">
<description>
Works like g_mutex_trylock(), but for a #GStaticMutex.

Deprecated: 2.32: Use g_mutex_trylock()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticMutex.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if the #GStaticMutex could be locked.

</return>
</function>

<function name="g_static_mutex_unlock">
<description>
Works like g_mutex_unlock(), but for a #GStaticMutex.

Deprecated: 2.32: Use g_mutex_unlock()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticMutex.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_private_free">
<description>
Releases all resources allocated to @private_key.

You don't have to call this functions for a #GStaticPrivate with an
unbounded lifetime, i.e. objects declared 'static', but if you have
a #GStaticPrivate as a member of a structure and the structure is
freed, you should also free the #GStaticPrivate.

</description>
<parameters>
<parameter name="private_key">
<parameter_description> a #GStaticPrivate to be freed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_private_get">
<description>
Works like g_private_get() only for a #GStaticPrivate.

This function works even if g_thread_init() has not yet been called.


</description>
<parameters>
<parameter name="private_key">
<parameter_description> a #GStaticPrivate
</parameter_description>
</parameter>
</parameters>
<return> the corresponding pointer
</return>
</function>

<function name="g_static_private_init">
<description>
Initializes @private_key. Alternatively you can initialize it with
#G_STATIC_PRIVATE_INIT.

</description>
<parameters>
<parameter name="private_key">
<parameter_description> a #GStaticPrivate to be initialized
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_private_set">
<description>
Sets the pointer keyed to @private_key for the current thread and
the function @notify to be called with that pointer (%NULL or
non-%NULL), whenever the pointer is set again or whenever the
current thread ends.

This function works even if g_thread_init() has not yet been called.
If g_thread_init() is called later, the @data keyed to @private_key
will be inherited only by the main thread, i.e. the one that called
g_thread_init().

@notify is used quite differently from @destructor in g_private_new().

</description>
<parameters>
<parameter name="private_key">
<parameter_description> a #GStaticPrivate
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the new pointer
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a function to be called with the pointer whenever the
current thread ends or sets this pointer again
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rec_mutex_free">
<description>
Releases all resources allocated to a #GStaticRecMutex.

You don't have to call this functions for a #GStaticRecMutex with an
unbounded lifetime, i.e. objects declared 'static', but if you have
a #GStaticRecMutex as a member of a structure and the structure is
freed, you should also free the #GStaticRecMutex.

Deprecated: 2.32: Use g_rec_mutex_clear()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticRecMutex to be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rec_mutex_init">
<description>
A #GStaticRecMutex must be initialized with this function before it
can be used. Alternatively you can initialize it with
#G_STATIC_REC_MUTEX_INIT.

Deprecated: 2.32: Use g_rec_mutex_init()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticRecMutex to be initialized.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rec_mutex_lock">
<description>
Locks @mutex. If @mutex is already locked by another thread, the
current thread will block until @mutex is unlocked by the other
thread. If @mutex is already locked by the calling thread, this
functions increases the depth of @mutex and returns immediately.

Deprecated: 2.32: Use g_rec_mutex_lock()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticRecMutex to lock.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rec_mutex_lock_full">
<description>
Works like calling g_static_rec_mutex_lock() for @mutex @depth times.

Deprecated: 2.32: Use g_rec_mutex_lock()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticRecMutex to lock.
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> number of times this mutex has to be unlocked to be
completely unlocked.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rec_mutex_trylock">
<description>
Tries to lock @mutex. If @mutex is already locked by another thread,
it immediately returns %FALSE. Otherwise it locks @mutex and returns
%TRUE. If @mutex is already locked by the calling thread, this
functions increases the depth of @mutex and immediately returns
%TRUE.

Deprecated: 2.32: Use g_rec_mutex_trylock()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticRecMutex to lock.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @mutex could be locked.

</return>
</function>

<function name="g_static_rec_mutex_unlock">
<description>
Unlocks @mutex. Another thread will be allowed to lock @mutex only
when it has been unlocked as many times as it had been locked
before. If @mutex is completely unlocked and another thread is
blocked in a g_static_rec_mutex_lock() call for @mutex, it will be
woken and can lock @mutex itself.

Deprecated: 2.32: Use g_rec_mutex_unlock()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticRecMutex to unlock.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rec_mutex_unlock_full">
<description>
Completely unlocks @mutex. If another thread is blocked in a
g_static_rec_mutex_lock() call for @mutex, it will be woken and can
lock @mutex itself. This function returns the number of times that
@mutex has been locked by the current thread. To restore the state
before the call to g_static_rec_mutex_unlock_full() you can call
g_static_rec_mutex_lock_full() with the depth returned by this
function.

Deprecated: 2.32: Use g_rec_mutex_unlock()

</description>
<parameters>
<parameter name="mutex">
<parameter_description> a #GStaticRecMutex to completely unlock.
</parameter_description>
</parameter>
</parameters>
<return> number of times @mutex has been locked by the current
thread.

</return>
</function>

<function name="g_static_rw_lock_free">
<description>
Releases all resources allocated to @lock.

You don't have to call this functions for a #GStaticRWLock with an
unbounded lifetime, i.e. objects declared 'static', but if you have
a #GStaticRWLock as a member of a structure, and the structure is
freed, you should also free the #GStaticRWLock.

Deprecated: 2.32: Use a #GRWLock instead

</description>
<parameters>
<parameter name="lock">
<parameter_description> a #GStaticRWLock to be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rw_lock_init">
<description>
A #GStaticRWLock must be initialized with this function before it
can be used. Alternatively you can initialize it with
#G_STATIC_RW_LOCK_INIT.

Deprecated: 2.32: Use g_rw_lock_init() instead

</description>
<parameters>
<parameter name="lock">
<parameter_description> a #GStaticRWLock to be initialized.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rw_lock_reader_lock">
<description>
Locks @lock for reading. There may be unlimited concurrent locks for
reading of a #GStaticRWLock at the same time.  If @lock is already
locked for writing by another thread or if another thread is already
waiting to lock @lock for writing, this function will block until
@lock is unlocked by the other writing thread and no other writing
threads want to lock @lock. This lock has to be unlocked by
g_static_rw_lock_reader_unlock().

#GStaticRWLock is not recursive. It might seem to be possible to
recursively lock for reading, but that can result in a deadlock, due
to writer preference.

Deprecated: 2.32: Use g_rw_lock_reader_lock() instead

</description>
<parameters>
<parameter name="lock">
<parameter_description> a #GStaticRWLock to lock for reading.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rw_lock_reader_trylock">
<description>
Tries to lock @lock for reading. If @lock is already locked for
writing by another thread or if another thread is already waiting to
lock @lock for writing, immediately returns %FALSE. Otherwise locks
@lock for reading and returns %TRUE. This lock has to be unlocked by
g_static_rw_lock_reader_unlock().


</description>
<parameters>
<parameter name="lock">
<parameter_description> a #GStaticRWLock to lock for reading
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @lock could be locked for reading

Deprectated: 2.32: Use g_rw_lock_reader_trylock() instead
</return>
</function>

<function name="g_static_rw_lock_reader_unlock">
<description>
Unlocks @lock. If a thread waits to lock @lock for writing and all
locks for reading have been unlocked, the waiting thread is woken up
and can lock @lock for writing.

Deprectated: 2.32: Use g_rw_lock_reader_unlock() instead

</description>
<parameters>
<parameter name="lock">
<parameter_description> a #GStaticRWLock to unlock after reading
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rw_lock_writer_lock">
<description>
Locks @lock for writing. If @lock is already locked for writing or
reading by other threads, this function will block until @lock is
completely unlocked and then lock @lock for writing. While this
functions waits to lock @lock, no other thread can lock @lock for
reading. When @lock is locked for writing, no other thread can lock
@lock (neither for reading nor writing). This lock has to be
unlocked by g_static_rw_lock_writer_unlock().

Deprectated: 2.32: Use g_rw_lock_writer_lock() instead

</description>
<parameters>
<parameter name="lock">
<parameter_description> a #GStaticRWLock to lock for writing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_static_rw_lock_writer_trylock">
<description>
Tries to lock @lock for writing. If @lock is already locked (for
either reading or writing) by another thread, it immediately returns
%FALSE. Otherwise it locks @lock for writing and returns %TRUE. This
lock has to be unlocked by g_static_rw_lock_writer_unlock().


</description>
<parameters>
<parameter name="lock">
<parameter_description> a #GStaticRWLock to lock for writing
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @lock could be locked for writing

Deprectated: 2.32: Use g_rw_lock_writer_trylock() instead
</return>
</function>

<function name="g_static_rw_lock_writer_unlock">
<description>
Unlocks @lock. If a thread is waiting to lock @lock for writing and
all locks for reading have been unlocked, the waiting thread is
woken up and can lock @lock for writing. If no thread is waiting to
lock @lock for writing, and some thread or threads are waiting to
lock @lock for reading, the waiting threads are woken up and can
lock @lock for reading.

Deprectated: 2.32: Use g_rw_lock_writer_unlock() instead

</description>
<parameters>
<parameter name="lock">
<parameter_description> a #GStaticRWLock to unlock after writing.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_steal_pointer">
<description>
Sets @pp to %NULL, returning the value that was there before.

Conceptually, this transfers the ownership of the pointer from the
referenced variable to the &quot;caller&quot; of the macro (ie: &quot;steals&quot; the
reference).

The return value will be properly typed, according to the type of
@pp.

This can be very useful when combined with g_autoptr() to prevent the
return value of a function from being automatically freed.  Consider
the following example (which only works on GCC and clang):

|[
GObject *
create_object (void)
{
g_autoptr(GObject) obj = g_object_new (G_TYPE_OBJECT, NULL);

if (early_error_case)
return NULL;

return g_steal_pointer (&amp;obj);
}
]|

It can also be used in similar ways for 'out' parameters and is
particularly useful for dealing with optional out parameters:

|[
gboolean
get_object (GObject **obj_out)
{
g_autoptr(GObject) obj = g_object_new (G_TYPE_OBJECT, NULL);

if (early_error_case)
return FALSE;

if (obj_out)
*obj_out = g_steal_pointer (&amp;obj);

return TRUE;
}
]|

In the above example, the object will be automatically freed in the
early error case and also in the case that %NULL was given for
@obj_out.

Since: 2.44

</description>
<parameters>
<parameter name="pp">
<parameter_description> a pointer to a pointer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_stpcpy">
<description>
Copies a nul-terminated string into the dest buffer, include the
trailing nul, and return a pointer to the trailing nul byte.
This is useful for concatenating multiple strings together
without having to repeatedly scan for the end.


</description>
<parameters>
<parameter name="dest">
<parameter_description> destination buffer.
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> source string.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to trailing nul byte.
</return>
</function>

<function name="g_str_equal">
<description>
Compares two strings for byte-by-byte equality and returns %TRUE
if they are equal. It can be passed to g_hash_table_new() as the
@key_equal_func parameter, when using non-%NULL strings as keys in a
#GHashTable.

Note that this function is primarily meant as a hash table comparison
function. For a general-purpose, %NULL-safe string comparison function,
see g_strcmp0().


</description>
<parameters>
<parameter name="v1">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="v2">
<parameter_description> a key to compare with @v1
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two keys match
</return>
</function>

<function name="g_str_has_prefix">
<description>
Looks whether the string @str begins with @prefix.

Since: 2.2

</description>
<parameters>
<parameter name="str">
<parameter_description> a nul-terminated string
</parameter_description>
</parameter>
<parameter name="prefix">
<parameter_description> the nul-terminated prefix to look for
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @str begins with @prefix, %FALSE otherwise.

</return>
</function>

<function name="g_str_has_suffix">
<description>
Looks whether the string @str ends with @suffix.

Since: 2.2

</description>
<parameters>
<parameter name="str">
<parameter_description> a nul-terminated string
</parameter_description>
</parameter>
<parameter name="suffix">
<parameter_description> the nul-terminated suffix to look for
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @str end with @suffix, %FALSE otherwise.

</return>
</function>

<function name="g_str_hash">
<description>
Converts a string to a hash value.

This function implements the widely used &quot;djb&quot; hash apparently
posted by Daniel Bernstein to comp.lang.c some time ago.  The 32
bit unsigned hash value starts at 5381 and for each byte 'c' in
the string, is updated: `hash = hash * 33 + c`. This function
uses the signed value of each byte.

It can be passed to g_hash_table_new() as the @hash_func parameter,
when using non-%NULL strings as keys in a #GHashTable.

Note that this function may not be a perfect fit for all use cases.
For example, it produces some hash collisions with strings as short
as 2.


</description>
<parameters>
<parameter name="v">
<parameter_description> a string key
</parameter_description>
</parameter>
</parameters>
<return> a hash value corresponding to the key
</return>
</function>

<function name="g_str_is_ascii">
<description>
Determines if a string is pure ASCII. A string is pure ASCII if it
contains no bytes with the high bit set.

Since: 2.40

</description>
<parameters>
<parameter name="str">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @str is ASCII

</return>
</function>

<function name="g_str_match_string">
<description>
Checks if a search conducted for @search_term should match
@potential_hit.

This function calls g_str_tokenize_and_fold() on both
@search_term and @potential_hit.  ASCII alternates are never taken
for @search_term but will be taken for @potential_hit according to
the value of @accept_alternates.

A hit occurs when each folded token in @search_term is a prefix of a
folded token from @potential_hit.

Depending on how you're performing the search, it will typically be
faster to call g_str_tokenize_and_fold() on each string in
your corpus and build an index on the returned folded tokens, then
call g_str_tokenize_and_fold() on the search term and
perform lookups into that index.

As some examples, searching for ‘fred’ would match the potential hit
‘Smith, Fred’ and also ‘Frédéric’.  Searching for ‘Fréd’ would match
‘Frédéric’ but not ‘Frederic’ (due to the one-directional nature of
accent matching).  Searching ‘fo’ would match ‘Foo’ and ‘Bar Foo
Baz’, but not ‘SFO’ (because no word has ‘fo’ as a prefix).

Since: 2.40

</description>
<parameters>
<parameter name="search_term">
<parameter_description> the search term from the user
</parameter_description>
</parameter>
<parameter name="potential_hit">
<parameter_description> the text that may be a hit
</parameter_description>
</parameter>
<parameter name="accept_alternates">
<parameter_description> %TRUE to accept ASCII alternates
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @potential_hit is a hit

</return>
</function>

<function name="g_str_to_ascii">
<description>
Transliterate @str to plain ASCII.

For best results, @str should be in composed normalised form.

This function performs a reasonably good set of character
replacements.  The particular set of replacements that is done may
change by version or even by runtime environment.

If the source language of @str is known, it can used to improve the
accuracy of the translation by passing it as @from_locale.  It should
be a valid POSIX locale string (of the form
&quot;language[_territory][.codeset][@modifier]&quot;).

If @from_locale is %NULL then the current locale is used.

If you want to do translation for no specific locale, and you want it
to be done independently of the currently locale, specify &quot;C&quot; for
@from_locale.

Since: 2.40

</description>
<parameters>
<parameter name="str">
<parameter_description> a string, in UTF-8
</parameter_description>
</parameter>
<parameter name="from_locale">
<parameter_description> the source locale, if known
</parameter_description>
</parameter>
</parameters>
<return> a string in plain ASCII

</return>
</function>

<function name="g_str_tokenize_and_fold">
<description>
Tokenises @string and performs folding on each token.

A token is a non-empty sequence of alphanumeric characters in the
source string, separated by non-alphanumeric characters.  An
&quot;alphanumeric&quot; character for this purpose is one that matches
g_unichar_isalnum() or g_unichar_ismark().

Each token is then (Unicode) normalised and case-folded.  If
@ascii_alternates is non-%NULL and some of the returned tokens
contain non-ASCII characters, ASCII alternatives will be generated.

The number of ASCII alternatives that are generated and the method
for doing so is unspecified, but @translit_locale (if specified) may
improve the transliteration if the language of the source string is
known.

Since: 2.40

</description>
<parameters>
<parameter name="string">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="translit_locale">
<parameter_description> the language code (like 'de' or
'en_GB') from which @string originates
</parameter_description>
</parameter>
<parameter name="ascii_alternates">
<parameter_description> a
return location for ASCII alternates
</parameter_description>
</parameter>
</parameters>
<return> the folded tokens

</return>
</function>

<function name="g_strcanon">
<description>
For each character in @string, if the character is not in @valid_chars,
replaces the character with @substitutor. Modifies @string in place,
and return @string itself, not a copy. The return value is to allow
nesting such as
|[&lt;!-- language=&quot;C&quot; --&gt; 
g_ascii_strup (g_strcanon (str, &quot;abc&quot;, '?'))
]|


</description>
<parameters>
<parameter name="string">
<parameter_description> a nul-terminated array of bytes
</parameter_description>
</parameter>
<parameter name="valid_chars">
<parameter_description> bytes permitted in @string
</parameter_description>
</parameter>
<parameter name="substitutor">
<parameter_description> replacement character for disallowed bytes
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_strcasecmp">
<description>
A case-insensitive string comparison, corresponding to the standard
strcasecmp() function on platforms which support it.

Deprecated:2.2: See g_strncasecmp() for a discussion of why this
function is deprecated and how to replace it.

</description>
<parameters>
<parameter name="s1">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="s2">
<parameter_description> a string to compare with @s1
</parameter_description>
</parameter>
</parameters>
<return> 0 if the strings match, a negative value if @s1 &lt; @s2,
or a positive value if @s1 &gt; @s2.

</return>
</function>

<function name="g_strchomp">
<description>
Removes trailing whitespace from a string.

This function doesn't allocate or reallocate any memory;
it modifies @string in place. Therefore, it cannot be used
on statically allocated strings.

The pointer to @string is returned to allow the nesting of functions.

Also see g_strchug() and g_strstrip().


</description>
<parameters>
<parameter name="string">
<parameter_description> a string to remove the trailing whitespace from
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_strchug">
<description>
Removes leading whitespace from a string, by moving the rest
of the characters forward.

This function doesn't allocate or reallocate any memory;
it modifies @string in place. Therefore, it cannot be used on
statically allocated strings.

The pointer to @string is returned to allow the nesting of functions.

Also see g_strchomp() and g_strstrip().


</description>
<parameters>
<parameter name="string">
<parameter_description> a string to remove the leading whitespace from
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_strcmp0">
<description>
Compares @str1 and @str2 like strcmp(). Handles %NULL
gracefully by sorting it before non-%NULL strings.
Comparing two %NULL pointers returns 0.

Since: 2.16

</description>
<parameters>
<parameter name="str1">
<parameter_description> a C string or %NULL
</parameter_description>
</parameter>
<parameter name="str2">
<parameter_description> another C string or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an integer less than, equal to, or greater than zero, if @str1 is &lt;, == or &gt; than @str2.

</return>
</function>

<function name="g_strcompress">
<description>
Replaces all escaped characters with their one byte equivalent.

This function does the reverse conversion of g_strescape().


</description>
<parameters>
<parameter name="source">
<parameter_description> a string to compress
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated copy of @source with all escaped
character compressed
</return>
</function>

<function name="g_strconcat">
<description>
Concatenates all of the given strings into one long string. The
returned string should be freed with g_free() when no longer needed.

The variable argument list must end with %NULL. If you forget the %NULL,
g_strconcat() will start appending random memory junk to your string.

Note that this function is usually not the right function to use to
assemble a translated message from pieces, since proper translation
often requires the pieces to be reordered.


</description>
<parameters>
<parameter name="string1">
<parameter_description> the first string to add, which must not be %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a %NULL-terminated list of strings to append to the string
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string containing all the string arguments
</return>
</function>

<function name="g_strdelimit">
<description>
Converts any delimiter characters in @string to @new_delimiter.
Any characters in @string which are found in @delimiters are
changed to the @new_delimiter character. Modifies @string in place,
and returns @string itself, not a copy. The return value is to
allow nesting such as
|[&lt;!-- language=&quot;C&quot; --&gt; 
g_ascii_strup (g_strdelimit (str, &quot;abc&quot;, '?'))
]|


</description>
<parameters>
<parameter name="string">
<parameter_description> the string to convert
</parameter_description>
</parameter>
<parameter name="delimiters">
<parameter_description> a string containing the current delimiters,
or %NULL to use the standard delimiters defined in #G_STR_DELIMITERS
</parameter_description>
</parameter>
<parameter name="new_delimiter">
<parameter_description> the new delimiter character
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_strdown">
<description>
Converts a string to lower case.

Deprecated:2.2: This function is totally broken for the reasons discussed
in the g_strncasecmp() docs - use g_ascii_strdown() or g_utf8_strdown()
instead.

</description>
<parameters>
<parameter name="string">
<parameter_description> the string to convert.
</parameter_description>
</parameter>
</parameters>
<return> the string

</return>
</function>

<function name="g_strdup">
<description>
Duplicates a string. If @str is %NULL it returns %NULL.
The returned string should be freed with g_free()
when no longer needed.


</description>
<parameters>
<parameter name="str">
<parameter_description> the string to duplicate
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated copy of @str
</return>
</function>

<function name="g_strdup_printf">
<description>
Similar to the standard C sprintf() function but safer, since it
calculates the maximum space required and allocates memory to hold
the result. The returned string should be freed with g_free() when no
longer needed.


</description>
<parameters>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice
[string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string holding the result
</return>
</function>

<function name="g_strdup_value_contents">
<description>
Return a newly allocated string, which describes the contents of a
#GValue.  The main purpose of this function is to describe #GValue
contents for debugging output, the way in which the contents are
described may change between different GLib versions.


</description>
<parameters>
<parameter name="value">
<parameter_description> #GValue which contents are to be described.
</parameter_description>
</parameter>
</parameters>
<return> Newly allocated string.
</return>
</function>

<function name="g_strdup_vprintf">
<description>
Similar to the standard C vsprintf() function but safer, since it
calculates the maximum space required and allocates memory to hold
the result. The returned string should be freed with g_free() when
no longer needed.

See also g_vasprintf(), which offers the same functionality, but
additionally returns the length of the allocated string.


</description>
<parameters>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice
[string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> the list of parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string holding the result
</return>
</function>

<function name="g_strdupv">
<description>
Copies %NULL-terminated array of strings. The copy is a deep copy;
the new array should be freed by first freeing each string, then
the array itself. g_strfreev() does this for you. If called
on a %NULL value, g_strdupv() simply returns %NULL.


</description>
<parameters>
<parameter name="str_array">
<parameter_description> a %NULL-terminated array of strings
</parameter_description>
</parameter>
</parameters>
<return> a new %NULL-terminated array of strings.
</return>
</function>

<function name="g_strerror">
<description>
Returns a string corresponding to the given error code, e.g. &quot;no
such process&quot;. Unlike strerror(), this always returns a string in
UTF-8 encoding, and the pointer is guaranteed to remain valid for
the lifetime of the process.

Note that the string may be translated according to the current locale.

The value of %errno will not be changed by this function. However, it may
be changed by intermediate function calls, so you should save its value
as soon as the call returns:
|[
int saved_errno;

ret = read (blah);
saved_errno = errno;

g_strerror (saved_errno);
]|


</description>
<parameters>
<parameter name="errnum">
<parameter_description> the system error number. See the standard C %errno
documentation
</parameter_description>
</parameter>
</parameters>
<return> a UTF-8 string describing the error code. If the error code
is unknown, it returns a string like &quot;unknown error (&lt;code&gt;)&quot;.
</return>
</function>

<function name="g_strescape">
<description>
Escapes the special characters '\b', '\f', '\n', '\r', '\t', '\v', '\'
and '&quot;' in the string @source by inserting a '\' before
them. Additionally all characters in the range 0x01-0x1F (everything
below SPACE) and in the range 0x7F-0xFF (all non-ASCII chars) are
replaced with a '\' followed by their octal representation.
Characters supplied in @exceptions are not escaped.

g_strcompress() does the reverse conversion.


</description>
<parameters>
<parameter name="source">
<parameter_description> a string to escape
</parameter_description>
</parameter>
<parameter name="exceptions">
<parameter_description> a string of characters not to escape in @source
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated copy of @source with certain
characters escaped. See above.
</return>
</function>

<function name="g_strfreev">
<description>
Frees a %NULL-terminated array of strings, as well as each
string it contains.

If @str_array is %NULL, this function simply returns.

</description>
<parameters>
<parameter name="str_array">
<parameter_description> a %NULL-terminated array of strings to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_string_append">
<description>
Adds a string onto the end of a #GString, expanding
it if necessary.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the string to append onto the end of @string
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_append_c">
<description>
Adds a byte onto the end of a #GString, expanding
it if necessary.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="c">
<parameter_description> the byte to append onto the end of @string
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_append_len">
<description>
Appends @len bytes of @val to @string. Because @len is
provided, @val may contain embedded nuls and need not
be nul-terminated.

Since this function does not stop at nul bytes, it is
the caller's responsibility to ensure that @val has at
least @len addressable bytes.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> bytes to append
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> number of bytes of @val to use
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_append_printf">
<description>
Appends a formatted string onto the end of a #GString.
This function is similar to g_string_printf() except
that the text is appended to the #GString.

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the string format. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_string_append_unichar">
<description>
Converts a Unicode character into UTF-8, and appends it
to the string.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="wc">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_append_uri_escaped">
<description>
Appends @unescaped to @string, escaped any characters that
are reserved in URIs using URI-style escape sequences.

Since: 2.16

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="unescaped">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="reserved_chars_allowed">
<parameter_description> a string of reserved characters allowed
to be used, or %NULL
</parameter_description>
</parameter>
<parameter name="allow_utf8">
<parameter_description> set %TRUE if the escaped string may include UTF8 characters
</parameter_description>
</parameter>
</parameters>
<return> @string

</return>
</function>

<function name="g_string_append_vprintf">
<description>
Appends a formatted string onto the end of a #GString.
This function is similar to g_string_append_printf()
except that the arguments to the format string are passed
as a va_list.

Since: 2.14

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the string format. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> the list of arguments to insert in the output
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_string_ascii_down">
<description>
Converts all uppercase ASCII letters to lowercase ASCII letters.


</description>
<parameters>
<parameter name="string">
<parameter_description> a GString
</parameter_description>
</parameter>
</parameters>
<return> passed-in @string pointer, with all the
uppercase characters converted to lowercase in place,
with semantics that exactly match g_ascii_tolower().
</return>
</function>

<function name="g_string_ascii_up">
<description>
Converts all lowercase ASCII letters to uppercase ASCII letters.


</description>
<parameters>
<parameter name="string">
<parameter_description> a GString
</parameter_description>
</parameter>
</parameters>
<return> passed-in @string pointer, with all the
lowercase characters converted to uppercase in place,
with semantics that exactly match g_ascii_toupper().
</return>
</function>

<function name="g_string_assign">
<description>
Copies the bytes from a string into a #GString,
destroying any previous contents. It is rather like
the standard strcpy() function, except that you do not
have to worry about having enough space to copy the string.


</description>
<parameters>
<parameter name="string">
<parameter_description> the destination #GString. Its current contents
are destroyed.
</parameter_description>
</parameter>
<parameter name="rval">
<parameter_description> the string to copy into @string
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_chunk_clear">
<description>
Frees all strings contained within the #GStringChunk.
After calling g_string_chunk_clear() it is not safe to
access any of the strings which were contained within it.

Since: 2.14

</description>
<parameters>
<parameter name="chunk">
<parameter_description> a #GStringChunk
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_string_chunk_free">
<description>
Frees all memory allocated by the #GStringChunk.
After calling g_string_chunk_free() it is not safe to
access any of the strings which were contained within it.

</description>
<parameters>
<parameter name="chunk">
<parameter_description> a #GStringChunk
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_string_chunk_insert">
<description>
Adds a copy of @string to the #GStringChunk.
It returns a pointer to the new copy of the string
in the #GStringChunk. The characters in the string
can be changed, if necessary, though you should not
change anything after the end of the string.

Unlike g_string_chunk_insert_const(), this function
does not check for duplicates. Also strings added
with g_string_chunk_insert() will not be searched
by g_string_chunk_insert_const() when looking for
duplicates.


</description>
<parameters>
<parameter name="chunk">
<parameter_description> a #GStringChunk
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to add
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the copy of @string within
the #GStringChunk
</return>
</function>

<function name="g_string_chunk_insert_const">
<description>
Adds a copy of @string to the #GStringChunk, unless the same
string has already been added to the #GStringChunk with
g_string_chunk_insert_const().

This function is useful if you need to copy a large number
of strings but do not want to waste space storing duplicates.
But you must remember that there may be several pointers to
the same string, and so any changes made to the strings
should be done very carefully.

Note that g_string_chunk_insert_const() will not return a
pointer to a string added with g_string_chunk_insert(), even
if they do match.


</description>
<parameters>
<parameter name="chunk">
<parameter_description> a #GStringChunk
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to add
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the new or existing copy of @string
within the #GStringChunk
</return>
</function>

<function name="g_string_chunk_insert_len">
<description>
Adds a copy of the first @len bytes of @string to the #GStringChunk.
The copy is nul-terminated.

Since this function does not stop at nul bytes, it is the caller's
responsibility to ensure that @string has at least @len addressable
bytes.

The characters in the returned string can be changed, if necessary,
though you should not change anything after the end of the string.

Since: 2.4

</description>
<parameters>
<parameter name="chunk">
<parameter_description> a #GStringChunk
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> bytes to insert
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> number of bytes of @string to insert, or -1 to insert a
nul-terminated string
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the copy of @string within the #GStringChunk

</return>
</function>

<function name="g_string_chunk_new">
<description>
Creates a new #GStringChunk.


</description>
<parameters>
<parameter name="size">
<parameter_description> the default size of the blocks of memory which are
allocated to store the strings. If a particular string
is larger than this default size, a larger block of
memory will be allocated for it.
</parameter_description>
</parameter>
</parameters>
<return> a new #GStringChunk
</return>
</function>

<function name="g_string_down">
<description>
Converts a #GString to lowercase.

Deprecated:2.2: This function uses the locale-specific
tolower() function, which is almost never the right thing.
Use g_string_ascii_down() or g_utf8_strdown() instead.

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
</parameters>
<return> the #GString

</return>
</function>

<function name="g_string_equal">
<description>
Compares two strings for equality, returning %TRUE if they are equal.
For use with #GHashTable.


</description>
<parameters>
<parameter name="v">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="v2">
<parameter_description> another #GString
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the strings are the same length and contain the
same bytes
</return>
</function>

<function name="g_string_erase">
<description>
Removes @len bytes from a #GString, starting at position @pos.
The rest of the #GString is shifted down to fill the gap.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the position of the content to remove
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of bytes to remove, or -1 to remove all
following bytes
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_free">
<description>
Frees the memory allocated for the #GString.
If @free_segment is %TRUE it also frees the character data.  If
it's %FALSE, the caller gains ownership of the buffer and must
free it after use with g_free().


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="free_segment">
<parameter_description> if %TRUE, the actual character data is freed as well
</parameter_description>
</parameter>
</parameters>
<return> the character data of @string
(i.e. %NULL if @free_segment is %TRUE)
</return>
</function>

<function name="g_string_free_to_bytes">
<description>
Transfers ownership of the contents of @string to a newly allocated
#GBytes.  The #GString structure itself is deallocated, and it is
therefore invalid to use @string after invoking this function.

Note that while #GString ensures that its buffer always has a
trailing nul character (not reflected in its &quot;len&quot;), the returned
#GBytes does not include this extra nul; i.e. it has length exactly
equal to the &quot;len&quot; member.

Since: 2.34

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GBytes containing contents of @string; @string itself is freed
</return>
</function>

<function name="g_string_hash">
<description>
Creates a hash code for @str; for use with #GHashTable.


</description>
<parameters>
<parameter name="str">
<parameter_description> a string to hash
</parameter_description>
</parameter>
</parameters>
<return> hash code for @str
</return>
</function>

<function name="g_string_insert">
<description>
Inserts a copy of a string into a #GString,
expanding it if necessary.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the position to insert the copy of the string
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the string to insert
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_insert_c">
<description>
Inserts a byte into a #GString, expanding it if necessary.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the position to insert the byte
</parameter_description>
</parameter>
<parameter name="c">
<parameter_description> the byte to insert
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_insert_len">
<description>
Inserts @len bytes of @val into @string at @pos.
Because @len is provided, @val may contain embedded
nuls and need not be nul-terminated. If @pos is -1,
bytes are inserted at the end of the string.

Since this function does not stop at nul bytes, it is
the caller's responsibility to ensure that @val has at
least @len addressable bytes.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> position in @string where insertion should
happen, or -1 for at the end
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> bytes to insert
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> number of bytes of @val to insert
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_insert_unichar">
<description>
Converts a Unicode character into UTF-8, and insert it
into the string at the given position.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the position at which to insert character, or -1
to append at the end of the string
</parameter_description>
</parameter>
<parameter name="wc">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_new">
<description>
Creates a new #GString, initialized with the given string.


</description>
<parameters>
<parameter name="init">
<parameter_description> the initial text to copy into the string, or %NULL to
start with an empty string
</parameter_description>
</parameter>
</parameters>
<return> the new #GString
</return>
</function>

<function name="g_string_new_len">
<description>
Creates a new #GString with @len bytes of the @init buffer.
Because a length is provided, @init need not be nul-terminated,
and can contain embedded nul bytes.

Since this function does not stop at nul bytes, it is the caller's
responsibility to ensure that @init has at least @len addressable
bytes.


</description>
<parameters>
<parameter name="init">
<parameter_description> initial contents of the string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @init to use
</parameter_description>
</parameter>
</parameters>
<return> a new #GString
</return>
</function>

<function name="g_string_overwrite">
<description>
Overwrites part of a string, lengthening it if necessary.

Since: 2.14

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the position at which to start overwriting
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the string that will overwrite the @string starting at @pos
</parameter_description>
</parameter>
</parameters>
<return> @string

</return>
</function>

<function name="g_string_overwrite_len">
<description>
Overwrites part of a string, lengthening it if necessary.
This function will work with embedded nuls.

Since: 2.14

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the position at which to start overwriting
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the string that will overwrite the @string starting at @pos
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of bytes to write from @val
</parameter_description>
</parameter>
</parameters>
<return> @string

</return>
</function>

<function name="g_string_prepend">
<description>
Adds a string on to the start of a #GString,
expanding it if necessary.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> the string to prepend on the start of @string
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_prepend_c">
<description>
Adds a byte onto the start of a #GString,
expanding it if necessary.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="c">
<parameter_description> the byte to prepend on the start of the #GString
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_prepend_len">
<description>
Prepends @len bytes of @val to @string.
Because @len is provided, @val may contain
embedded nuls and need not be nul-terminated.

Since this function does not stop at nul bytes,
it is the caller's responsibility to ensure that
@val has at least @len addressable bytes.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> bytes to prepend
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> number of bytes in @val to prepend
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_prepend_unichar">
<description>
Converts a Unicode character into UTF-8, and prepends it
to the string.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="wc">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_printf">
<description>
Writes a formatted string into a #GString.
This is similar to the standard sprintf() function,
except that the #GString buffer automatically expands
to contain the results. The previous contents of the
#GString are destroyed.

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the string format. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_string_set_size">
<description>
Sets the length of a #GString. If the length is less than
the current length, the string will be truncated. If the
length is greater than the current length, the contents
of the newly added area are undefined. (However, as
always, string-&gt;str[string-&gt;len] will be a nul byte.)


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the new length
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_sized_new">
<description>
Creates a new #GString, with enough space for @dfl_size
bytes. This is useful if you are going to add a lot of
text to the string and don't want it to be reallocated
too often.


</description>
<parameters>
<parameter name="dfl_size">
<parameter_description> the default size of the space allocated to
hold the string
</parameter_description>
</parameter>
</parameters>
<return> the new #GString
</return>
</function>

<function name="g_string_sprintf">
<description>
Writes a formatted string into a #GString.
This is similar to the standard sprintf() function,
except that the #GString buffer automatically expands
to contain the results. The previous contents of the
#GString are destroyed.

Deprecated: This function has been renamed to g_string_printf().

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the string format. See the sprintf() documentation
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_string_sprintfa">
<description>
Appends a formatted string onto the end of a #GString.
This function is similar to g_string_sprintf() except that
the text is appended to the #GString.

Deprecated: This function has been renamed to g_string_append_printf()

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the string format. See the sprintf() documentation
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_string_truncate">
<description>
Cuts off the end of the GString, leaving the first @len bytes.


</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the new size of @string
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_string_up">
<description>
Converts a #GString to uppercase.

Deprecated:2.2: This function uses the locale-specific
toupper() function, which is almost never the right thing.
Use g_string_ascii_up() or g_utf8_strup() instead.

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
</parameters>
<return> @string

</return>
</function>

<function name="g_string_vprintf">
<description>
Writes a formatted string into a #GString.
This function is similar to g_string_printf() except that
the arguments to the format string are passed as a va_list.

Since: 2.14

</description>
<parameters>
<parameter name="string">
<parameter_description> a #GString
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the string format. See the printf() documentation
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> the parameters to insert into the format string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_strip_context">
<description>
An auxiliary function for gettext() support (see Q_()).

Since: 2.4

</description>
<parameters>
<parameter name="msgid">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="msgval">
<parameter_description> another string
</parameter_description>
</parameter>
</parameters>
<return> @msgval, unless @msgval is identical to @msgid
and contains a '|' character, in which case a pointer to
the substring of msgid after the first '|' character is returned.

</return>
</function>

<function name="g_strjoin">
<description>
Joins a number of strings together to form one long string, with the
optional @separator inserted between each of them. The returned string
should be freed with g_free().


</description>
<parameters>
<parameter name="separator">
<parameter_description> a string to insert between each of the
strings, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a %NULL-terminated list of strings to join
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string containing all of the strings joined
together, with @separator between them
</return>
</function>

<function name="g_strjoinv">
<description>
Joins a number of strings together to form one long string, with the
optional @separator inserted between each of them. The returned string
should be freed with g_free().

If @str_array has no items, the return value will be an
empty string. If @str_array contains a single item, @separator will not
appear in the resulting string.


</description>
<parameters>
<parameter name="separator">
<parameter_description> a string to insert between each of the
strings, or %NULL
</parameter_description>
</parameter>
<parameter name="str_array">
<parameter_description> a %NULL-terminated array of strings to join
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string containing all of the strings joined
together, with @separator between them
</return>
</function>

<function name="g_strlcat">
<description>
Portability wrapper that calls strlcat() on systems which have it,
and emulates it otherwise. Appends nul-terminated @src string to @dest,
guaranteeing nul-termination for @dest. The total size of @dest won't
exceed @dest_size.

At most @dest_size - 1 characters will be copied. Unlike strncat(),
@dest_size is the full size of dest, not the space left over. This
function does not allocate memory. It always nul-terminates (unless
@dest_size == 0 or there were no nul characters in the @dest_size
characters of dest to start with).

Caveat: this is supposedly a more secure alternative to strcat() or
strncat(), but for real security g_strconcat() is harder to mess up.


</description>
<parameters>
<parameter name="dest">
<parameter_description> destination buffer, already containing one nul-terminated string
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> source buffer
</parameter_description>
</parameter>
<parameter name="dest_size">
<parameter_description> length of @dest buffer in bytes (not length of existing string
inside @dest)
</parameter_description>
</parameter>
</parameters>
<return> size of attempted result, which is MIN (dest_size, strlen
(original dest)) + strlen (src), so if retval &gt;= dest_size,
truncation occurred.
</return>
</function>

<function name="g_strlcpy">
<description>
Portability wrapper that calls strlcpy() on systems which have it,
and emulates strlcpy() otherwise. Copies @src to @dest; @dest is
guaranteed to be nul-terminated; @src must be nul-terminated;
@dest_size is the buffer size, not the number of bytes to copy.

At most @dest_size - 1 characters will be copied. Always nul-terminates
(unless @dest_size is 0). This function does not allocate memory. Unlike
strncpy(), this function doesn't pad @dest (so it's often faster). It
returns the size of the attempted result, strlen (src), so if
@retval &gt;= @dest_size, truncation occurred.

Caveat: strlcpy() is supposedly more secure than strcpy() or strncpy(),
but if you really want to avoid screwups, g_strdup() is an even better
idea.


</description>
<parameters>
<parameter name="dest">
<parameter_description> destination buffer
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> source buffer
</parameter_description>
</parameter>
<parameter name="dest_size">
<parameter_description> length of @dest in bytes
</parameter_description>
</parameter>
</parameters>
<return> length of @src
</return>
</function>

<function name="g_strncasecmp">
<description>
A case-insensitive string comparison, corresponding to the standard
strncasecmp() function on platforms which support it. It is similar
to g_strcasecmp() except it only compares the first @n characters of
the strings.

Deprecated:2.2: The problem with g_strncasecmp() is that it does
the comparison by calling toupper()/tolower(). These functions
are locale-specific and operate on single bytes. However, it is
impossible to handle things correctly from an internationalization
standpoint by operating on bytes, since characters may be multibyte.
Thus g_strncasecmp() is broken if your string is guaranteed to be
ASCII, since it is locale-sensitive, and it's broken if your string
is localized, since it doesn't work on many encodings at all,
including UTF-8, EUC-JP, etc.

There are therefore two replacement techniques: g_ascii_strncasecmp(),
which only works on ASCII and is not locale-sensitive, and
g_utf8_casefold() followed by strcmp() on the resulting strings,
which is good for case-insensitive sorting of UTF-8.

</description>
<parameters>
<parameter name="s1">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="s2">
<parameter_description> a string to compare with @s1
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the maximum number of characters to compare
</parameter_description>
</parameter>
</parameters>
<return> 0 if the strings match, a negative value if @s1 &lt; @s2,
or a positive value if @s1 &gt; @s2.

</return>
</function>

<function name="g_strndup">
<description>
Duplicates the first @n bytes of a string, returning a newly-allocated
buffer @n + 1 bytes long which will always be nul-terminated. If @str
is less than @n bytes long the buffer is padded with nuls. If @str is
%NULL it returns %NULL. The returned value should be freed when no longer
needed.

To copy a number of characters from a UTF-8 encoded string,
use g_utf8_strncpy() instead.


</description>
<parameters>
<parameter name="str">
<parameter_description> the string to duplicate
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the maximum number of bytes to copy from @str
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated buffer containing the first @n bytes
of @str, nul-terminated
</return>
</function>

<function name="g_strnfill">
<description>
Creates a new string @length bytes long filled with @fill_char.
The returned string should be freed when no longer needed.


</description>
<parameters>
<parameter name="length">
<parameter_description> the length of the new string
</parameter_description>
</parameter>
<parameter name="fill_char">
<parameter_description> the byte to fill the string with
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string filled the @fill_char
</return>
</function>

<function name="g_strreverse">
<description>
Reverses all of the bytes in a string. For example,
`g_strreverse (&quot;abcdef&quot;)` will result in &quot;fedcba&quot;.

Note that g_strreverse() doesn't work on UTF-8 strings
containing multibyte characters. For that purpose, use
g_utf8_strreverse().


</description>
<parameters>
<parameter name="string">
<parameter_description> the string to reverse
</parameter_description>
</parameter>
</parameters>
<return> the same pointer passed in as @string
</return>
</function>

<function name="g_strrstr">
<description>
Searches the string @haystack for the last occurrence
of the string @needle.


</description>
<parameters>
<parameter name="haystack">
<parameter_description> a nul-terminated string
</parameter_description>
</parameter>
<parameter name="needle">
<parameter_description> the nul-terminated string to search for
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the found occurrence, or
%NULL if not found.
</return>
</function>

<function name="g_strrstr_len">
<description>
Searches the string @haystack for the last occurrence
of the string @needle, limiting the length of the search
to @haystack_len.


</description>
<parameters>
<parameter name="haystack">
<parameter_description> a nul-terminated string
</parameter_description>
</parameter>
<parameter name="haystack_len">
<parameter_description> the maximum length of @haystack
</parameter_description>
</parameter>
<parameter name="needle">
<parameter_description> the nul-terminated string to search for
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the found occurrence, or
%NULL if not found.
</return>
</function>

<function name="g_strsignal">
<description>
Returns a string describing the given signal, e.g. &quot;Segmentation fault&quot;.
You should use this function in preference to strsignal(), because it
returns a string in UTF-8 encoding, and since not all platforms support
the strsignal() function.


</description>
<parameters>
<parameter name="signum">
<parameter_description> the signal number. See the `signal` documentation
</parameter_description>
</parameter>
</parameters>
<return> a UTF-8 string describing the signal. If the signal is unknown,
it returns &quot;unknown signal (&lt;signum&gt;)&quot;.
</return>
</function>

<function name="g_strsplit">
<description>
Splits a string into a maximum of @max_tokens pieces, using the given
@delimiter. If @max_tokens is reached, the remainder of @string is
appended to the last token.

As an example, the result of g_strsplit (&quot;:a:bc::d:&quot;, &quot;:&quot;, -1) is a
%NULL-terminated vector containing the six strings &quot;&quot;, &quot;a&quot;, &quot;bc&quot;, &quot;&quot;, &quot;d&quot;
and &quot;&quot;.

As a special case, the result of splitting the empty string &quot;&quot; is an empty
vector, not a vector containing a single string. The reason for this
special case is that being able to represent a empty vector is typically
more useful than consistent handling of empty elements. If you do need
to represent empty elements, you'll need to check for the empty string
before calling g_strsplit().


</description>
<parameters>
<parameter name="string">
<parameter_description> a string to split
</parameter_description>
</parameter>
<parameter name="delimiter">
<parameter_description> a string which specifies the places at which to split
the string. The delimiter is not included in any of the resulting
strings, unless @max_tokens is reached.
</parameter_description>
</parameter>
<parameter name="max_tokens">
<parameter_description> the maximum number of pieces to split @string into.
If this is less than 1, the string is split completely.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated %NULL-terminated array of strings. Use
g_strfreev() to free it.
</return>
</function>

<function name="g_strsplit_set">
<description>
Splits @string into a number of tokens not containing any of the characters
in @delimiter. A token is the (possibly empty) longest string that does not
contain any of the characters in @delimiters. If @max_tokens is reached, the
remainder is appended to the last token.

For example the result of g_strsplit_set (&quot;abc:def/ghi&quot;, &quot;:/&quot;, -1) is a
%NULL-terminated vector containing the three strings &quot;abc&quot;, &quot;def&quot;,
and &quot;ghi&quot;.

The result of g_strsplit_set (&quot;:def/ghi:&quot;, &quot;:/&quot;, -1) is a %NULL-terminated
vector containing the four strings &quot;&quot;, &quot;def&quot;, &quot;ghi&quot;, and &quot;&quot;.

As a special case, the result of splitting the empty string &quot;&quot; is an empty
vector, not a vector containing a single string. The reason for this
special case is that being able to represent a empty vector is typically
more useful than consistent handling of empty elements. If you do need
to represent empty elements, you'll need to check for the empty string
before calling g_strsplit_set().

Note that this function works on bytes not characters, so it can't be used
to delimit UTF-8 strings for anything but ASCII characters.

Since: 2.4

</description>
<parameters>
<parameter name="string">
<parameter_description> The string to be tokenized
</parameter_description>
</parameter>
<parameter name="delimiters">
<parameter_description> A nul-terminated string containing bytes that are used
to split the string.
</parameter_description>
</parameter>
<parameter name="max_tokens">
<parameter_description> The maximum number of tokens to split @string into.
If this is less than 1, the string is split completely
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated %NULL-terminated array of strings. Use
g_strfreev() to free it.

</return>
</function>

<function name="g_strstr_len">
<description>
Searches the string @haystack for the first occurrence
of the string @needle, limiting the length of the search
to @haystack_len.


</description>
<parameters>
<parameter name="haystack">
<parameter_description> a string
</parameter_description>
</parameter>
<parameter name="haystack_len">
<parameter_description> the maximum length of @haystack. Note that -1 is
a valid length, if @haystack is nul-terminated, meaning it will
search through the whole string.
</parameter_description>
</parameter>
<parameter name="needle">
<parameter_description> the string to search for
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the found occurrence, or
%NULL if not found.
</return>
</function>

<function name="g_strstrip">
<description>
Removes leading and trailing whitespace from a string.
See g_strchomp() and g_strchug().


</description>
<parameters>
<parameter name="string">
<parameter_description> a string to remove the leading and trailing whitespace from
</parameter_description>
</parameter>
</parameters>
<return> @string
</return>
</function>

<function name="g_strtod">
<description>
Converts a string to a #gdouble value.
It calls the standard strtod() function to handle the conversion, but
if the string is not completely converted it attempts the conversion
again with g_ascii_strtod(), and returns the best match.

This function should seldom be used. The normal situation when reading
numbers not for human consumption is to use g_ascii_strtod(). Only when
you know that you must expect both locale formatted and C formatted numbers
should you use this. Make sure that you don't pass strings such as comma
separated lists of values, since the commas may be interpreted as a decimal
point in some locales, causing unexpected results.


</description>
<parameters>
<parameter name="nptr">
<parameter_description>    the string to convert to a numeric value.
</parameter_description>
</parameter>
<parameter name="endptr">
<parameter_description> if non-%NULL, it returns the
character after the last character used in the conversion.
</parameter_description>
</parameter>
</parameters>
<return> the #gdouble value.
</return>
</function>

<function name="g_strup">
<description>
Converts a string to upper case.

Deprecated:2.2: This function is totally broken for the reasons
discussed in the g_strncasecmp() docs - use g_ascii_strup()
or g_utf8_strup() instead.

</description>
<parameters>
<parameter name="string">
<parameter_description> the string to convert
</parameter_description>
</parameter>
</parameters>
<return> the string

</return>
</function>

<function name="g_strv_contains">
<description>
Checks if @strv contains @str. @strv must not be %NULL.

Since: 2.44

</description>
<parameters>
<parameter name="strv">
<parameter_description> a %NULL-terminated array of strings
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @str is an element of @strv, according to g_str_equal().

</return>
</function>

<function name="g_strv_length">
<description>
Returns the length of the given %NULL-terminated
string array @str_array.

Since: 2.6

</description>
<parameters>
<parameter name="str_array">
<parameter_description> a %NULL-terminated array of strings
</parameter_description>
</parameter>
</parameters>
<return> length of @str_array.

</return>
</function>

<function name="g_test_add">
<description>
Hook up a new test case at @testpath, similar to g_test_add_func().
A fixture data structure with setup and teardown functions may be provided,
similar to g_test_create_case().

g_test_add() is implemented as a macro, so that the fsetup(), ftest() and
fteardown() callbacks can expect a @Fixture pointer as their first argument
in a type safe manner. They otherwise have type #GTestFixtureFunc.

Since: 2.16

</description>
<parameters>
<parameter name="testpath">
<parameter_description>  The test path for a new test case.
</parameter_description>
</parameter>
<parameter name="Fixture">
<parameter_description>   The type of a fixture data structure.
</parameter_description>
</parameter>
<parameter name="tdata">
<parameter_description>     Data argument for the test functions.
</parameter_description>
</parameter>
<parameter name="fsetup">
<parameter_description>    The function to set up the fixture data.
</parameter_description>
</parameter>
<parameter name="ftest">
<parameter_description>     The actual test function.
</parameter_description>
</parameter>
<parameter name="fteardown">
<parameter_description> The function to tear down the fixture data.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_add_data_func">
<description>
Create a new test case, similar to g_test_create_case(). However
the test is assumed to use no fixture, and test suites are automatically
created on the fly and added to the root fixture, based on the
slash-separated portions of @testpath. The @test_data argument
will be passed as first argument to @test_func.

If @testpath includes the component &quot;subprocess&quot; anywhere in it,
the test will be skipped by default, and only run if explicitly
required via the `-p` command-line option or g_test_trap_subprocess().

Since: 2.16

</description>
<parameters>
<parameter name="testpath">
<parameter_description>  /-separated test case path name for the test.
</parameter_description>
</parameter>
<parameter name="test_data">
<parameter_description> Test data argument for the test function.
</parameter_description>
</parameter>
<parameter name="test_func">
<parameter_description> The test function to invoke for this test.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_add_data_func_full">
<description>
Create a new test case, as with g_test_add_data_func(), but freeing
@test_data after the test run is complete.

Since: 2.34

</description>
<parameters>
<parameter name="testpath">
<parameter_description> /-separated test case path name for the test.
</parameter_description>
</parameter>
<parameter name="test_data">
<parameter_description> Test data argument for the test function.
</parameter_description>
</parameter>
<parameter name="test_func">
<parameter_description> The test function to invoke for this test.
</parameter_description>
</parameter>
<parameter name="data_free_func">
<parameter_description> #GDestroyNotify for @test_data.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_add_func">
<description>
Create a new test case, similar to g_test_create_case(). However
the test is assumed to use no fixture, and test suites are automatically
created on the fly and added to the root fixture, based on the
slash-separated portions of @testpath.

If @testpath includes the component &quot;subprocess&quot; anywhere in it,
the test will be skipped by default, and only run if explicitly
required via the `-p` command-line option or g_test_trap_subprocess().

Since: 2.16

</description>
<parameters>
<parameter name="testpath">
<parameter_description>  /-separated test case path name for the test.
</parameter_description>
</parameter>
<parameter name="test_func">
<parameter_description>  The test function to invoke for this test.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_assert_expected_messages">
<description>
Asserts that all messages previously indicated via
g_test_expect_message() have been seen and suppressed.

This API may only be used with the old logging API (g_log() without
%G_LOG_USE_STRUCTURED defined). It will not work with the structured logging
API. See [Testing for Messages][testing-for-messages].

If messages at %G_LOG_LEVEL_DEBUG are emitted, but not explicitly
expected via g_test_expect_message() then they will be ignored.

Since: 2.34

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_bug">
<description>
This function adds a message to test reports that
associates a bug URI with a test case.
Bug URIs are constructed from a base URI set with g_test_bug_base()
and @bug_uri_snippet.

Since: 2.16

</description>
<parameters>
<parameter name="bug_uri_snippet">
<parameter_description> Bug specific bug tracker URI portion.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_bug_base">
<description>
Specify the base URI for bug reports.

The base URI is used to construct bug report messages for
g_test_message() when g_test_bug() is called.
Calling this function outside of a test case sets the
default base URI for all test cases. Calling it from within
a test case changes the base URI for the scope of the test
case only.
Bug URIs are constructed by appending a bug specific URI
portion to @uri_pattern, or by replacing the special string
'\%s' within @uri_pattern if that is present.

Since: 2.16

</description>
<parameters>
<parameter name="uri_pattern">
<parameter_description> the base pattern for bug URIs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_build_filename">
<description>
Creates the pathname to a data file that is required for a test.

This function is conceptually similar to g_build_filename() except
that the first argument has been replaced with a #GTestFileType
argument.

The data file should either have been distributed with the module
containing the test (%G_TEST_DIST) or built as part of the build
system of that module (%G_TEST_BUILT).

In order for this function to work in srcdir != builddir situations,
the G_TEST_SRCDIR and G_TEST_BUILDDIR environment variables need to
have been defined.  As of 2.38, this is done by the glib.mk
included in GLib.  Please ensure that your copy is up to date before
using this function.

In case neither variable is set, this function will fall back to
using the dirname portion of argv[0], possibly removing &quot;.libs&quot;.
This allows for casual running of tests directly from the commandline
in the srcdir == builddir case and should also support running of
installed tests, assuming the data files have been installed in the
same relative path as the test binary.

Since: 2.38

</description>
<parameters>
<parameter name="file_type">
<parameter_description> the type of file (built vs. distributed)
</parameter_description>
</parameter>
<parameter name="first_path">
<parameter_description> the first segment of the pathname
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL-terminated additional path segments
</parameter_description>
</parameter>
</parameters>
<return> the path of the file, to be freed using g_free()

</return>
</function>

<function name="g_test_create_case">
<description>
Create a new #GTestCase, named @test_name, this API is fairly
low level, calling g_test_add() or g_test_add_func() is preferable.
When this test is executed, a fixture structure of size @data_size
will be automatically allocated and filled with zeros. Then @data_setup is
called to initialize the fixture. After fixture setup, the actual test
function @data_test is called. Once the test run completes, the
fixture structure is torn down by calling @data_teardown and
after that the memory is automatically released by the test framework.

Splitting up a test run into fixture setup, test function and
fixture teardown is most useful if the same fixture is used for
multiple tests. In this cases, g_test_create_case() will be
called with the same fixture, but varying @test_name and
@data_test arguments.

Since: 2.16

</description>
<parameters>
<parameter name="test_name">
<parameter_description>     the name for the test case
</parameter_description>
</parameter>
<parameter name="data_size">
<parameter_description>     the size of the fixture data structure
</parameter_description>
</parameter>
<parameter name="test_data">
<parameter_description>     test data argument for the test functions
</parameter_description>
</parameter>
<parameter name="data_setup">
<parameter_description> the function to set up the fixture data
</parameter_description>
</parameter>
<parameter name="data_test">
<parameter_description> the actual test function
</parameter_description>
</parameter>
<parameter name="data_teardown">
<parameter_description> the function to teardown the fixture data
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GTestCase.

</return>
</function>

<function name="g_test_create_suite">
<description>
Create a new test suite with the name @suite_name.

Since: 2.16

</description>
<parameters>
<parameter name="suite_name">
<parameter_description> a name for the suite
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GTestSuite instance.

</return>
</function>

<function name="g_test_expect_message">
<description>
Indicates that a message with the given @log_domain and @log_level,
with text matching @pattern, is expected to be logged. When this
message is logged, it will not be printed, and the test case will
not abort.

This API may only be used with the old logging API (g_log() without
%G_LOG_USE_STRUCTURED defined). It will not work with the structured logging
API. See [Testing for Messages][testing-for-messages].

Use g_test_assert_expected_messages() to assert that all
previously-expected messages have been seen and suppressed.

You can call this multiple times in a row, if multiple messages are
expected as a result of a single call. (The messages must appear in
the same order as the calls to g_test_expect_message().)

For example:

|[&lt;!-- language=&quot;C&quot; --&gt; 
// g_main_context_push_thread_default() should fail if the
// context is already owned by another thread.
g_test_expect_message (G_LOG_DOMAIN,
G_LOG_LEVEL_CRITICAL,
&quot;assertion*acquired_context*failed&quot;);
g_main_context_push_thread_default (bad_context);
g_test_assert_expected_messages ();
]|

Note that you cannot use this to test g_error() messages, since
g_error() intentionally never returns even if the program doesn't
abort; use g_test_trap_subprocess() in this case.

If messages at %G_LOG_LEVEL_DEBUG are emitted, but not explicitly
expected via g_test_expect_message() then they will be ignored.

Since: 2.34

</description>
<parameters>
<parameter name="log_domain">
<parameter_description> the log domain of the message
</parameter_description>
</parameter>
<parameter name="log_level">
<parameter_description> the log level of the message
</parameter_description>
</parameter>
<parameter name="pattern">
<parameter_description> a glob-style [pattern][glib-Glob-style-pattern-matching]
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_fail">
<description>
Indicates that a test failed. This function can be called
multiple times from the same test. You can use this function
if your test failed in a recoverable way.

Do not use this function if the failure of a test could cause
other tests to malfunction.

Calling this function will not stop the test from running, you
need to return from the test function yourself. So you can
produce additional diagnostic messages or even continue running
the test.

If not called from inside a test, this function does nothing.

Since: 2.30

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_failed">
<description>
Returns whether a test has already failed. This will
be the case when g_test_fail(), g_test_incomplete()
or g_test_skip() have been called, but also if an
assertion has failed.

This can be useful to return early from a test if
continuing after a failed assertion might be harmful.

The return value of this function is only meaningful
if it is called from inside a test function.

Since: 2.38

</description>
<parameters>
</parameters>
<return> %TRUE if the test has failed

</return>
</function>

<function name="g_test_get_dir">
<description>
Gets the pathname of the directory containing test files of the type
specified by @file_type.

This is approximately the same as calling g_test_build_filename(&quot;.&quot;),
but you don't need to free the return value.

Since: 2.38

</description>
<parameters>
<parameter name="file_type">
<parameter_description> the type of file (built vs. distributed)
</parameter_description>
</parameter>
</parameters>
<return> the path of the directory, owned by GLib

</return>
</function>

<function name="g_test_get_filename">
<description>
Gets the pathname to a data file that is required for a test.

This is the same as g_test_build_filename() with two differences.
The first difference is that must only use this function from within
a testcase function.  The second difference is that you need not free
the return value -- it will be automatically freed when the testcase
finishes running.

It is safe to use this function from a thread inside of a testcase
but you must ensure that all such uses occur before the main testcase
function returns (ie: it is best to ensure that all threads have been
joined).

Since: 2.38

</description>
<parameters>
<parameter name="file_type">
<parameter_description> the type of file (built vs. distributed)
</parameter_description>
</parameter>
<parameter name="first_path">
<parameter_description> the first segment of the pathname
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL-terminated additional path segments
</parameter_description>
</parameter>
</parameters>
<return> the path, automatically freed at the end of the testcase

</return>
</function>

<function name="g_test_get_root">
<description>
Get the toplevel test suite for the test path API.

Since: 2.16

</description>
<parameters>
</parameters>
<return> the toplevel #GTestSuite

</return>
</function>

<function name="g_test_incomplete">
<description>
Indicates that a test failed because of some incomplete
functionality. This function can be called multiple times
from the same test.

Calling this function will not stop the test from running, you
need to return from the test function yourself. So you can
produce additional diagnostic messages or even continue running
the test.

If not called from inside a test, this function does nothing.

Since: 2.38

</description>
<parameters>
<parameter name="msg">
<parameter_description> explanation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_init">
<description>
Initialize the GLib testing framework, e.g. by seeding the
test random number generator, the name for g_get_prgname()
and parsing test related command line args.

So far, the following arguments are understood:

- `-l`: List test cases available in a test executable.
- `--seed=SEED`: Provide a random seed to reproduce test
runs using random numbers.
- `--verbose`: Run tests verbosely.
- `-q`, `--quiet`: Run tests quietly.
- `-p PATH`: Execute all tests matching the given path.
- `-s PATH`: Skip all tests matching the given path.
This can also be used to force a test to run that would otherwise
be skipped (ie, a test whose name contains &quot;/subprocess&quot;).
- `-m {perf|slow|thorough|quick|undefined|no-undefined}`: Execute tests according to these test modes:

`perf`: Performance tests, may take long and report results (off by default).

`slow`, `thorough`: Slow and thorough tests, may take quite long and maximize coverage
(off by default).

`quick`: Quick tests, should run really quickly and give good coverage (the default).

`undefined`: Tests for undefined behaviour, may provoke programming errors
under g_test_trap_subprocess() or g_test_expect_message() to check
that appropriate assertions or warnings are given (the default).

`no-undefined`: Avoid tests for undefined behaviour

- `--debug-log`: Debug test logging output.

Since: 2.16

</description>
<parameters>
<parameter name="argc">
<parameter_description> Address of the @argc parameter of the main() function.
Changed if any arguments were handled.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> Address of the @argv parameter of main().
Any parameters understood by g_test_init() stripped before return.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL-terminated list of special options. Currently the only
defined option is `&quot;no_g_set_prgname&quot;`, which
will cause g_test_init() to not call g_set_prgname().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_initialized">
<description>
Returns %TRUE if g_test_init() has been called.

Since: 2.36

</description>
<parameters>
</parameters>
<return> %TRUE if g_test_init() has been called.

</return>
</function>

<function name="g_test_log_buffer_free">
<description>
Internal function for gtester to free test log messages, no ABI guarantees provided.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_log_buffer_new">
<description>
Internal function for gtester to decode test log messages, no ABI guarantees provided.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_log_buffer_pop">
<description>
Internal function for gtester to retrieve test log messages, no ABI guarantees provided.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_log_buffer_push">
<description>
Internal function for gtester to decode test log messages, no ABI guarantees provided.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_log_msg_free">
<description>
Internal function for gtester to free test log messages, no ABI guarantees provided.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_log_set_fatal_handler">
<description>
Installs a non-error fatal log handler which can be
used to decide whether log messages which are counted
as fatal abort the program.

The use case here is that you are running a test case
that depends on particular libraries or circumstances
and cannot prevent certain known critical or warning
messages. So you install a handler that compares the
domain and message to precisely not abort in such a case.

Note that the handler is reset at the beginning of
any test case, so you have to set it inside each test
function which needs the special behavior.

This handler has no effect on g_error messages.

This handler also has no effect on structured log messages (using
g_log_structured() or g_log_structured_array()). To change the fatal
behaviour for specific log messages, programs must install a custom log
writer function using g_log_set_writer_func().See
[Using Structured Logging][using-structured-logging].

Since: 2.22

</description>
<parameters>
<parameter name="log_func">
<parameter_description> the log handler function.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to the log handler.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_maximized_result">
<description>
Report the result of a performance or measurement test.
The test should generally strive to maximize the reported
quantities (larger values are better than smaller ones),
this and @maximized_quantity can determine sorting
order for test result reports.

Since: 2.16

</description>
<parameters>
<parameter name="maximized_quantity">
<parameter_description> the reported value
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format string of the report message
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to pass to the printf() function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_message">
<description>
Add a message to the test report.

Since: 2.16

</description>
<parameters>
<parameter name="format">
<parameter_description> the format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description>    printf-like arguments to @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_minimized_result">
<description>
Report the result of a performance or measurement test.
The test should generally strive to minimize the reported
quantities (smaller values are better than larger ones),
this and @minimized_quantity can determine sorting
order for test result reports.

Since: 2.16

</description>
<parameters>
<parameter name="minimized_quantity">
<parameter_description> the reported value
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format string of the report message
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments to pass to the printf() function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_perf">
<description>
Returns %TRUE if tests are run in performance mode.

By default, tests are run in quick mode. In tests that use
g_test_init(), the option `-m perf` enables performance tests, while
`-m quick` disables them.


</description>
<parameters>
</parameters>
<return> %TRUE if in performance mode
</return>
</function>

<function name="g_test_queue_destroy">
<description>
This function enqueus a callback @destroy_func to be executed
during the next test case teardown phase. This is most useful
to auto destruct allocated test resources at the end of a test run.
Resources are released in reverse queue order, that means enqueueing
callback A before callback B will cause B() to be called before
A() during teardown.

Since: 2.16

</description>
<parameters>
<parameter name="destroy_func">
<parameter_description>       Destroy callback for teardown phase.
</parameter_description>
</parameter>
<parameter name="destroy_data">
<parameter_description>       Destroy callback data.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_queue_free">
<description>
Enqueue a pointer to be released with g_free() during the next
teardown phase. This is equivalent to calling g_test_queue_destroy()
with a destroy callback of g_free().

Since: 2.16

</description>
<parameters>
<parameter name="gfree_pointer">
<parameter_description> the pointer to be stored.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_queue_unref">
<description>
Enqueue an object to be released with g_object_unref() during
the next teardown phase. This is equivalent to calling
g_test_queue_destroy() with a destroy callback of g_object_unref().

Since: 2.16

</description>
<parameters>
<parameter name="gobject">
<parameter_description> the object to unref
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_quick">
<description>
Returns %TRUE if tests are run in quick mode.
Exactly one of g_test_quick() and g_test_slow() is active in any run;
there is no &quot;medium speed&quot;.

By default, tests are run in quick mode. In tests that use
g_test_init(), the options `-m quick`, `-m slow` and `-m thorough`
can be used to change this.


</description>
<parameters>
</parameters>
<return> %TRUE if in quick mode
</return>
</function>

<function name="g_test_quiet">
<description>
Returns %TRUE if tests are run in quiet mode.
In tests that use g_test_init(), the option `-q` or `--quiet` enables
this, while `--verbose` disables it.
The default is neither g_test_verbose() nor g_test_quiet().


</description>
<parameters>
</parameters>
<return> %TRUE if in quiet mode
</return>
</function>

<function name="g_test_rand_bit">
<description>
Get a reproducible random bit (0 or 1), see g_test_rand_int()
for details on test case random numbers.

Since: 2.16

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_rand_double">
<description>
Get a reproducible random floating point number,
see g_test_rand_int() for details on test case random numbers.

Since: 2.16

</description>
<parameters>
</parameters>
<return> a random number from the seeded random number generator.

</return>
</function>

<function name="g_test_rand_double_range">
<description>
Get a reproducible random floating pointer number out of a specified range,
see g_test_rand_int() for details on test case random numbers.

Since: 2.16

</description>
<parameters>
<parameter name="range_start">
<parameter_description> the minimum value returned by this function
</parameter_description>
</parameter>
<parameter name="range_end">
<parameter_description> the minimum value not returned by this function
</parameter_description>
</parameter>
</parameters>
<return> a number with @range_start &lt;= number &lt; @range_end.

</return>
</function>

<function name="g_test_rand_int">
<description>
Get a reproducible random integer number.

The random numbers generated by the g_test_rand_*() family of functions
change with every new test program start, unless the --seed option is
given when starting test programs.

For individual test cases however, the random number generator is
reseeded, to avoid dependencies between tests and to make --seed
effective for all test cases.

Since: 2.16

</description>
<parameters>
</parameters>
<return> a random number from the seeded random number generator.

</return>
</function>

<function name="g_test_rand_int_range">
<description>
Get a reproducible random integer number out of a specified range,
see g_test_rand_int() for details on test case random numbers.

Since: 2.16

</description>
<parameters>
<parameter name="begin">
<parameter_description> the minimum value returned by this function
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description>   the smallest value not to be returned by this function
</parameter_description>
</parameter>
</parameters>
<return> a number with @begin &lt;= number &lt; @end.

</return>
</function>

<function name="g_test_run">
<description>
Runs all tests under the toplevel suite which can be retrieved
with g_test_get_root(). Similar to g_test_run_suite(), the test
cases to be run are filtered according to test path arguments
(`-p testpath` and `-s testpath`) as parsed by g_test_init().
g_test_run_suite() or g_test_run() may only be called once in a
program.

In general, the tests and sub-suites within each suite are run in
the order in which they are defined. However, note that prior to
GLib 2.36, there was a bug in the `g_test_add_*`
functions which caused them to create multiple suites with the same
name, meaning that if you created tests &quot;/foo/simple&quot;,
&quot;/bar/simple&quot;, and &quot;/foo/using-bar&quot; in that order, they would get
run in that order (since g_test_run() would run the first &quot;/foo&quot;
suite, then the &quot;/bar&quot; suite, then the second &quot;/foo&quot; suite). As of
2.36, this bug is fixed, and adding the tests in that order would
result in a running order of &quot;/foo/simple&quot;, &quot;/foo/using-bar&quot;,
&quot;/bar/simple&quot;. If this new ordering is sub-optimal (because it puts
more-complicated tests before simpler ones, making it harder to
figure out exactly what has failed), you can fix it by changing the
test paths to group tests by suite in a way that will result in the
desired running order. Eg, &quot;/simple/foo&quot;, &quot;/simple/bar&quot;,
&quot;/complex/foo-using-bar&quot;.

However, you should never make the actual result of a test depend
on the order that tests are run in. If you need to ensure that some
particular code runs before or after a given test case, use
g_test_add(), which lets you specify setup and teardown functions.

If all tests are skipped, this function will return 0 if
producing TAP output, or 77 (treated as &quot;skip test&quot; by Automake) otherwise.

Since: 2.16

</description>
<parameters>
</parameters>
<return> 0 on success, 1 on failure (assuming it returns at all),
0 or 77 if all tests were skipped with g_test_skip()

</return>
</function>

<function name="g_test_run_suite">
<description>
Execute the tests within @suite and all nested #GTestSuites.
The test suites to be executed are filtered according to
test path arguments (`-p testpath` and `-s testpath`) as parsed by
g_test_init(). See the g_test_run() documentation for more
information on the order that tests are run in.

g_test_run_suite() or g_test_run() may only be called once
in a program.

Since: 2.16

</description>
<parameters>
<parameter name="suite">
<parameter_description> a #GTestSuite
</parameter_description>
</parameter>
</parameters>
<return> 0 on success

</return>
</function>

<function name="g_test_set_nonfatal_assertions">
<description>
Changes the behaviour of g_assert_cmpstr(), g_assert_cmpint(),
g_assert_cmpuint(), g_assert_cmphex(), g_assert_cmpfloat(),
g_assert_true(), g_assert_false(), g_assert_null(), g_assert_no_error(),
g_assert_error(), g_test_assert_expected_messages() and the various
g_test_trap_assert_*() macros to not abort to program, but instead
call g_test_fail() and continue. (This also changes the behavior of
g_test_fail() so that it will not cause the test program to abort
after completing the failed test.)

Note that the g_assert_not_reached() and g_assert() are not
affected by this.

This function can only be called after g_test_init().

Since: 2.38

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_skip">
<description>
Indicates that a test was skipped.

Calling this function will not stop the test from running, you
need to return from the test function yourself. So you can
produce additional diagnostic messages or even continue running
the test.

If not called from inside a test, this function does nothing.

Since: 2.38

</description>
<parameters>
<parameter name="msg">
<parameter_description> explanation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_slow">
<description>
Returns %TRUE if tests are run in slow mode.
Exactly one of g_test_quick() and g_test_slow() is active in any run;
there is no &quot;medium speed&quot;.

By default, tests are run in quick mode. In tests that use
g_test_init(), the options `-m quick`, `-m slow` and `-m thorough`
can be used to change this.


</description>
<parameters>
</parameters>
<return> the opposite of g_test_quick()
</return>
</function>

<function name="g_test_subprocess">
<description>
Returns %TRUE (after g_test_init() has been called) if the test
program is running under g_test_trap_subprocess().

Since: 2.38

</description>
<parameters>
</parameters>
<return> %TRUE if the test program is running under
g_test_trap_subprocess().

</return>
</function>

<function name="g_test_suite_add">
<description>
Adds @test_case to @suite.

Since: 2.16

</description>
<parameters>
<parameter name="suite">
<parameter_description> a #GTestSuite
</parameter_description>
</parameter>
<parameter name="test_case">
<parameter_description> a #GTestCase
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_suite_add_suite">
<description>
Adds @nestedsuite to @suite.

Since: 2.16

</description>
<parameters>
<parameter name="suite">
<parameter_description>       a #GTestSuite
</parameter_description>
</parameter>
<parameter name="nestedsuite">
<parameter_description> another #GTestSuite
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_thorough">
<description>
Returns %TRUE if tests are run in thorough mode, equivalent to
g_test_slow().

By default, tests are run in quick mode. In tests that use
g_test_init(), the options `-m quick`, `-m slow` and `-m thorough`
can be used to change this.


</description>
<parameters>
</parameters>
<return> the same thing as g_test_slow()
</return>
</function>

<function name="g_test_timer_elapsed">
<description>
Get the time since the last start of the timer with g_test_timer_start().

Since: 2.16

</description>
<parameters>
</parameters>
<return> the time since the last start of the timer, as a double

</return>
</function>

<function name="g_test_timer_last">
<description>
Report the last result of g_test_timer_elapsed().

Since: 2.16

</description>
<parameters>
</parameters>
<return> the last result of g_test_timer_elapsed(), as a double

</return>
</function>

<function name="g_test_timer_start">
<description>
Start a timing test. Call g_test_timer_elapsed() when the task is supposed
to be done. Call this function again to restart the timer.

Since: 2.16

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_trap_assert_failed">
<description>
Assert that the last test subprocess failed.
See g_test_trap_subprocess().

This is sometimes used to test situations that are formally considered to
be undefined behaviour, like inputs that fail a g_return_if_fail()
check. In these situations you should skip the entire test, including the
call to g_test_trap_subprocess(), unless g_test_undefined() returns %TRUE
to indicate that undefined behaviour may be tested.

Since: 2.16

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_trap_assert_passed">
<description>
Assert that the last test subprocess passed.
See g_test_trap_subprocess().

Since: 2.16

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_test_trap_assert_stderr">
<description>
Assert that the stderr output of the last test subprocess
matches @serrpattern. See  g_test_trap_subprocess().

This is sometimes used to test situations that are formally
considered to be undefined behaviour, like code that hits a
g_assert() or g_error(). In these situations you should skip the
entire test, including the call to g_test_trap_subprocess(), unless
g_test_undefined() returns %TRUE to indicate that undefined
behaviour may be tested.

Since: 2.16

</description>
<parameters>
<parameter name="serrpattern">
<parameter_description> a glob-style [pattern][glib-Glob-style-pattern-matching]
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_trap_assert_stderr_unmatched">
<description>
Assert that the stderr output of the last test subprocess
does not match @serrpattern. See g_test_trap_subprocess().

Since: 2.16

</description>
<parameters>
<parameter name="serrpattern">
<parameter_description> a glob-style [pattern][glib-Glob-style-pattern-matching]
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_trap_assert_stdout">
<description>
Assert that the stdout output of the last test subprocess matches
@soutpattern. See g_test_trap_subprocess().

Since: 2.16

</description>
<parameters>
<parameter name="soutpattern">
<parameter_description> a glob-style [pattern][glib-Glob-style-pattern-matching]
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_trap_assert_stdout_unmatched">
<description>
Assert that the stdout output of the last test subprocess
does not match @soutpattern. See g_test_trap_subprocess().

Since: 2.16

</description>
<parameters>
<parameter name="soutpattern">
<parameter_description> a glob-style [pattern][glib-Glob-style-pattern-matching]
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_trap_fork">
<description>
Fork the current test program to execute a test case that might
not return or that might abort.

If @usec_timeout is non-0, the forked test case is aborted and
considered failing if its run time exceeds it.

The forking behavior can be configured with the #GTestTrapFlags flags.

In the following example, the test code forks, the forked child
process produces some sample output and exits successfully.
The forking parent process then asserts successful child program
termination and validates child program outputs.

|[&lt;!-- language=&quot;C&quot; --&gt; 
static void
test_fork_patterns (void)
{
if (g_test_trap_fork (0, G_TEST_TRAP_SILENCE_STDOUT | G_TEST_TRAP_SILENCE_STDERR))
{
g_print (&quot;some stdout text: somagic17\n&quot;);
g_printerr (&quot;some stderr text: semagic43\n&quot;);
exit (0); // successful test run
}
g_test_trap_assert_passed ();
g_test_trap_assert_stdout (&quot;*somagic17*&quot;);
g_test_trap_assert_stderr (&quot;*semagic43*&quot;);
}
]|

Since: 2.16

Deprecated: This function is implemented only on Unix platforms,
and is not always reliable due to problems inherent in
fork-without-exec. Use g_test_trap_subprocess() instead.

</description>
<parameters>
<parameter name="usec_timeout">
<parameter_description>    Timeout for the forked test in micro seconds.
</parameter_description>
</parameter>
<parameter name="test_trap_flags">
<parameter_description> Flags to modify forking behaviour.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE for the forked child and %FALSE for the executing parent process.

</return>
</function>

<function name="g_test_trap_has_passed">
<description>
Check the result of the last g_test_trap_subprocess() call.

Since: 2.16

</description>
<parameters>
</parameters>
<return> %TRUE if the last test subprocess terminated successfully.

</return>
</function>

<function name="g_test_trap_reached_timeout">
<description>
Check the result of the last g_test_trap_subprocess() call.

Since: 2.16

</description>
<parameters>
</parameters>
<return> %TRUE if the last test subprocess got killed due to a timeout.

</return>
</function>

<function name="g_test_trap_subprocess">
<description>
Respawns the test program to run only @test_path in a subprocess.
This can be used for a test case that might not return, or that
might abort.

If @test_path is %NULL then the same test is re-run in a subprocess.
You can use g_test_subprocess() to determine whether the test is in
a subprocess or not.

@test_path can also be the name of the parent test, followed by
&quot;`/subprocess/`&quot; and then a name for the specific subtest (or just
ending with &quot;`/subprocess`&quot; if the test only has one child test);
tests with names of this form will automatically be skipped in the
parent process.

If @usec_timeout is non-0, the test subprocess is aborted and
considered failing if its run time exceeds it.

The subprocess behavior can be configured with the
#GTestSubprocessFlags flags.

You can use methods such as g_test_trap_assert_passed(),
g_test_trap_assert_failed(), and g_test_trap_assert_stderr() to
check the results of the subprocess. (But note that
g_test_trap_assert_stdout() and g_test_trap_assert_stderr()
cannot be used if @test_flags specifies that the child should
inherit the parent stdout/stderr.) 

If your `main ()` needs to behave differently in
the subprocess, you can call g_test_subprocess() (after calling
g_test_init()) to see whether you are in a subprocess.

The following example tests that calling
`my_object_new(1000000)` will abort with an error
message.

|[&lt;!-- language=&quot;C&quot; --&gt; 
static void
test_create_large_object (void)
{
if (g_test_subprocess ())
{
my_object_new (1000000);
return;
}

// Reruns this same test in a subprocess
g_test_trap_subprocess (NULL, 0, 0);
g_test_trap_assert_failed ();
g_test_trap_assert_stderr (&quot;*ERROR*too large*&quot;);
}

int
main (int argc, char **argv)
{
g_test_init (&amp;argc, &amp;argv, NULL);

g_test_add_func (&quot;/myobject/create_large_object&quot;,
test_create_large_object);
return g_test_run ();
}
]|

Since: 2.38

</description>
<parameters>
<parameter name="test_path">
<parameter_description> Test to run in a subprocess
</parameter_description>
</parameter>
<parameter name="usec_timeout">
<parameter_description> Timeout for the subprocess test in micro seconds.
</parameter_description>
</parameter>
<parameter name="test_flags">
<parameter_description>   Flags to modify subprocess behaviour.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_test_undefined">
<description>
Returns %TRUE if tests may provoke assertions and other formally-undefined
behaviour, to verify that appropriate warnings are given. It might, in some
cases, be useful to turn this off with if running tests under valgrind;
in tests that use g_test_init(), the option `-m no-undefined` disables
those tests, while `-m undefined` explicitly enables them (the default
behaviour).


</description>
<parameters>
</parameters>
<return> %TRUE if tests may provoke programming errors
</return>
</function>

<function name="g_test_verbose">
<description>
Returns %TRUE if tests are run in verbose mode.
In tests that use g_test_init(), the option `--verbose` enables this,
while `-q` or `--quiet` disables it.
The default is neither g_test_verbose() nor g_test_quiet().


</description>
<parameters>
</parameters>
<return> %TRUE if in verbose mode
</return>
</function>

<function name="g_thread_create">
<description>
This function creates a new thread.

The new thread executes the function @func with the argument @data.
If the thread was created successfully, it is returned.

@error can be %NULL to ignore errors, or non-%NULL to report errors.
The error is set, if and only if the function returns %NULL.

This function returns a reference to the created thread only if
@joinable is %TRUE.  In that case, you must free this reference by
calling g_thread_unref() or g_thread_join().  If @joinable is %FALSE
then you should probably not touch the return value.

Deprecated:2.32: Use g_thread_new() instead

</description>
<parameters>
<parameter name="func">
<parameter_description> a function to execute in the new thread
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> an argument to supply to the new thread
</parameter_description>
</parameter>
<parameter name="joinable">
<parameter_description> should this thread be joinable?
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new #GThread on success

</return>
</function>

<function name="g_thread_create_full">
<description>
This function creates a new thread.

Deprecated:2.32: The @bound and @priority arguments are now ignored.
Use g_thread_new().

</description>
<parameters>
<parameter name="func">
<parameter_description> a function to execute in the new thread.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> an argument to supply to the new thread.
</parameter_description>
</parameter>
<parameter name="stack_size">
<parameter_description> a stack size for the new thread.
</parameter_description>
</parameter>
<parameter name="joinable">
<parameter_description> should this thread be joinable?
</parameter_description>
</parameter>
<parameter name="bound">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> ignored
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error.
</parameter_description>
</parameter>
</parameters>
<return> the new #GThread on success.

</return>
</function>

<function name="g_thread_exit">
<description>
Terminates the current thread.

If another thread is waiting for us using g_thread_join() then the
waiting thread will be woken up and get @retval as the return value
of g_thread_join().

Calling g_thread_exit() with a parameter @retval is equivalent to
returning @retval from the function @func, as given to g_thread_new().

You must only call g_thread_exit() from a thread that you created
yourself with g_thread_new() or related APIs. You must not call
this function from a thread created with another threading library
or or from within a #GThreadPool.

</description>
<parameters>
<parameter name="retval">
<parameter_description> the return value of this thread
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_thread_foreach">
<description>
Call @thread_func on all #GThreads that have been
created with g_thread_create().

Note that threads may decide to exit while @thread_func is
running, so without intimate knowledge about the lifetime of
foreign threads, @thread_func shouldn't access the GThread*
pointer passed in as first argument. However, @thread_func will
not be called for threads which are known to have exited already.

Due to thread lifetime checks, this function has an execution complexity
which is quadratic in the number of existing threads.

Since: 2.10

Deprecated:2.32: There aren't many things you can do with a #GThread,
except comparing it with one that was returned from g_thread_create().
There are better ways to find out if your thread is still alive.

</description>
<parameters>
<parameter name="thread_func">
<parameter_description> function to call for all #GThread structures
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> second argument to @thread_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_thread_get_initialized">
<description>
Indicates if g_thread_init() has been called.

Since: 2.20

</description>
<parameters>
</parameters>
<return> %TRUE if threads have been initialized.

</return>
</function>

<function name="g_thread_init">
<description>
If you use GLib from more than one thread, you must initialize the
thread system by calling g_thread_init().

Since version 2.24, calling g_thread_init() multiple times is allowed,
but nothing happens except for the first call.

Since version 2.32, GLib does not support custom thread implementations
anymore and the @vtable parameter is ignored and you should pass %NULL.

&lt;note&gt;&lt;para&gt;g_thread_init() must not be called directly or indirectly
in a callback from GLib. Also no mutexes may be currently locked while
calling g_thread_init().&lt;/para&gt;&lt;/note&gt;

&lt;note&gt;&lt;para&gt;To use g_thread_init() in your program, you have to link
with the libraries that the command &lt;command&gt;pkg-config --libs
gthread-2.0&lt;/command&gt; outputs. This is not the case for all the
other thread-related functions of GLib. Those can be used without
having to link with the thread libraries.&lt;/para&gt;&lt;/note&gt;

Deprecated:2.32: This function is no longer necessary. The GLib
threading system is automatically initialized at the start
of your program.

</description>
<parameters>
<parameter name="vtable">
<parameter_description> a function table of type #GThreadFunctions, that provides
the entry points to the thread system to be used. Since 2.32,
this parameter is ignored and should always be %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_thread_join">
<description>
Waits until @thread finishes, i.e. the function @func, as
given to g_thread_new(), returns or g_thread_exit() is called.
If @thread has already terminated, then g_thread_join()
returns immediately.

Any thread can wait for any other thread by calling g_thread_join(),
not just its 'creator'. Calling g_thread_join() from multiple threads
for the same @thread leads to undefined behaviour.

The value returned by @func or given to g_thread_exit() is
returned by this function.

g_thread_join() consumes the reference to the passed-in @thread.
This will usually cause the #GThread struct and associated resources
to be freed. Use g_thread_ref() to obtain an extra reference if you
want to keep the GThread alive beyond the g_thread_join() call.


</description>
<parameters>
<parameter name="thread">
<parameter_description> a #GThread
</parameter_description>
</parameter>
</parameters>
<return> the return value of the thread
</return>
</function>

<function name="g_thread_new">
<description>
This function creates a new thread. The new thread starts by invoking
@func with the argument data. The thread will run until @func returns
or until g_thread_exit() is called from the new thread. The return value
of @func becomes the return value of the thread, which can be obtained
with g_thread_join().

The @name can be useful for discriminating threads in a debugger.
It is not used for other purposes and does not have to be unique.
Some systems restrict the length of @name to 16 bytes.

If the thread can not be created the program aborts. See
g_thread_try_new() if you want to attempt to deal with failures.

If you are using threads to offload (potentially many) short-lived tasks,
#GThreadPool may be more appropriate than manually spawning and tracking
multiple #GThreads.

To free the struct returned by this function, use g_thread_unref().
Note that g_thread_join() implicitly unrefs the #GThread as well.

Since: 2.32

</description>
<parameters>
<parameter name="name">
<parameter_description> an (optional) name for the new thread
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function to execute in the new thread
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> an argument to supply to the new thread
</parameter_description>
</parameter>
</parameters>
<return> the new #GThread

</return>
</function>

<function name="g_thread_pool_free">
<description>
Frees all resources allocated for @pool.

If @immediate is %TRUE, no new task is processed for @pool.
Otherwise @pool is not freed before the last task is processed.
Note however, that no thread of this pool is interrupted while
processing a task. Instead at least all still running threads
can finish their tasks before the @pool is freed.

If @wait_ is %TRUE, the functions does not return before all
tasks to be processed (dependent on @immediate, whether all
or only the currently running) are ready.
Otherwise the function returns immediately.

After calling this function @pool must not be used anymore.

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GThreadPool
</parameter_description>
</parameter>
<parameter name="immediate">
<parameter_description> should @pool shut down immediately?
</parameter_description>
</parameter>
<parameter name="wait_">
<parameter_description> should the function wait for all tasks to be finished?
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_thread_pool_get_max_idle_time">
<description>
This function will return the maximum @interval that a
thread will wait in the thread pool for new tasks before
being stopped.

If this function returns 0, threads waiting in the thread
pool for new work are not stopped.

Since: 2.10

</description>
<parameters>
</parameters>
<return> the maximum @interval (milliseconds) to wait
for new tasks in the thread pool before stopping the
thread

</return>
</function>

<function name="g_thread_pool_get_max_threads">
<description>
Returns the maximal number of threads for @pool.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GThreadPool
</parameter_description>
</parameter>
</parameters>
<return> the maximal number of threads
</return>
</function>

<function name="g_thread_pool_get_max_unused_threads">
<description>
Returns the maximal allowed number of unused threads.


</description>
<parameters>
</parameters>
<return> the maximal number of unused threads
</return>
</function>

<function name="g_thread_pool_get_num_threads">
<description>
Returns the number of threads currently running in @pool.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GThreadPool
</parameter_description>
</parameter>
</parameters>
<return> the number of threads currently running
</return>
</function>

<function name="g_thread_pool_get_num_unused_threads">
<description>
Returns the number of currently unused threads.


</description>
<parameters>
</parameters>
<return> the number of currently unused threads
</return>
</function>

<function name="g_thread_pool_move_to_front">
<description>
Moves the item to the front of the queue of unprocessed
items, so that it will be processed next.

Since: 2.46

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GThreadPool
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> an unprocessed item in the pool
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the item was found and moved

</return>
</function>

<function name="g_thread_pool_new">
<description>
This function creates a new thread pool.

Whenever you call g_thread_pool_push(), either a new thread is
created or an unused one is reused. At most @max_threads threads
are running concurrently for this thread pool. @max_threads = -1
allows unlimited threads to be created for this thread pool. The
newly created or reused thread now executes the function @func
with the two arguments. The first one is the parameter to
g_thread_pool_push() and the second one is @user_data.

The parameter @exclusive determines whether the thread pool owns
all threads exclusive or shares them with other thread pools.
If @exclusive is %TRUE, @max_threads threads are started
immediately and they will run exclusively for this thread pool
until it is destroyed by g_thread_pool_free(). If @exclusive is
%FALSE, threads are created when needed and shared between all
non-exclusive thread pools. This implies that @max_threads may
not be -1 for exclusive thread pools. Besides, exclusive thread
pools are not affected by g_thread_pool_set_max_idle_time()
since their threads are never considered idle and returned to the
global pool.

@error can be %NULL to ignore errors, or non-%NULL to report
errors. An error can only occur when @exclusive is set to %TRUE
and not all @max_threads threads could be created.
See #GThreadError for possible errors that may occur.
Note, even in case of error a valid #GThreadPool is returned.


</description>
<parameters>
<parameter name="func">
<parameter_description> a function to execute in the threads of the new thread pool
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data that is handed over to @func every time it
is called
</parameter_description>
</parameter>
<parameter name="max_threads">
<parameter_description> the maximal number of threads to execute concurrently
in  the new thread pool, -1 means no limit
</parameter_description>
</parameter>
<parameter name="exclusive">
<parameter_description> should this thread pool be exclusive?
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new #GThreadPool
</return>
</function>

<function name="g_thread_pool_push">
<description>
Inserts @data into the list of tasks to be executed by @pool.

When the number of currently running threads is lower than the
maximal allowed number of threads, a new thread is started (or
reused) with the properties given to g_thread_pool_new().
Otherwise, @data stays in the queue until a thread in this pool
finishes its previous task and processes @data.

@error can be %NULL to ignore errors, or non-%NULL to report
errors. An error can only occur when a new thread couldn't be
created. In that case @data is simply appended to the queue of
work to do.

Before version 2.32, this function did not return a success status.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GThreadPool
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a new task for @pool
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if an error occurred
</return>
</function>

<function name="g_thread_pool_set_max_idle_time">
<description>
This function will set the maximum @interval that a thread
waiting in the pool for new tasks can be idle for before
being stopped. This function is similar to calling
g_thread_pool_stop_unused_threads() on a regular timeout,
except this is done on a per thread basis.

By setting @interval to 0, idle threads will not be stopped.

The default value is 15000 (15 seconds).

Since: 2.10

</description>
<parameters>
<parameter name="interval">
<parameter_description> the maximum @interval (in milliseconds)
a thread can be idle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_thread_pool_set_max_threads">
<description>
Sets the maximal allowed number of threads for @pool.
A value of -1 means that the maximal number of threads
is unlimited. If @pool is an exclusive thread pool, setting
the maximal number of threads to -1 is not allowed.

Setting @max_threads to 0 means stopping all work for @pool.
It is effectively frozen until @max_threads is set to a non-zero
value again.

A thread is never terminated while calling @func, as supplied by
g_thread_pool_new(). Instead the maximal number of threads only
has effect for the allocation of new threads in g_thread_pool_push().
A new thread is allocated, whenever the number of currently
running threads in @pool is smaller than the maximal number.

@error can be %NULL to ignore errors, or non-%NULL to report
errors. An error can only occur when a new thread couldn't be
created.

Before version 2.32, this function did not return a success status.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GThreadPool
</parameter_description>
</parameter>
<parameter name="max_threads">
<parameter_description> a new maximal number of threads for @pool,
or -1 for unlimited
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if an error occurred
</return>
</function>

<function name="g_thread_pool_set_max_unused_threads">
<description>
Sets the maximal number of unused threads to @max_threads.
If @max_threads is -1, no limit is imposed on the number
of unused threads.

The default value is 2.

</description>
<parameters>
<parameter name="max_threads">
<parameter_description> maximal number of unused threads
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_thread_pool_set_sort_function">
<description>
Sets the function used to sort the list of tasks. This allows the
tasks to be processed by a priority determined by @func, and not
just in the order in which they were added to the pool.

Note, if the maximum number of threads is more than 1, the order
that threads are executed cannot be guaranteed 100%. Threads are
scheduled by the operating system and are executed at random. It
cannot be assumed that threads are executed in the order they are
created.

Since: 2.10

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GThreadPool
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GCompareDataFunc used to sort the list of tasks.
This function is passed two tasks. It should return
0 if the order in which they are handled does not matter,
a negative value if the first task should be processed before
the second or a positive value if the second task should be
processed first.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_thread_pool_stop_unused_threads">
<description>
Stops all currently unused threads. This does not change the
maximal number of unused threads. This function can be used to
regularly stop all unused threads e.g. from g_timeout_add().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_thread_pool_unprocessed">
<description>
Returns the number of tasks still unprocessed in @pool.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GThreadPool
</parameter_description>
</parameter>
</parameters>
<return> the number of unprocessed tasks
</return>
</function>

<function name="g_thread_ref">
<description>
Increase the reference count on @thread.

Since: 2.32

</description>
<parameters>
<parameter name="thread">
<parameter_description> a #GThread
</parameter_description>
</parameter>
</parameters>
<return> a new reference to @thread

</return>
</function>

<function name="g_thread_self">
<description>
This function returns the #GThread corresponding to the
current thread. Note that this function does not increase
the reference count of the returned struct.

This function will return a #GThread even for threads that
were not created by GLib (i.e. those created by other threading
APIs). This may be useful for thread identification purposes
(i.e. comparisons) but you must not use GLib functions (such
as g_thread_join()) on these threads.


</description>
<parameters>
</parameters>
<return> the #GThread representing the current thread
</return>
</function>

<function name="g_thread_set_priority">
<description>
This function does nothing.

Deprecated:2.32: Thread priorities no longer have any effect.

</description>
<parameters>
<parameter name="thread">
<parameter_description> a #GThread.
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> ignored
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_thread_supported">
<description>
This macro returns %TRUE if the thread system is initialized,
and %FALSE if it is not.

For language bindings, g_thread_get_initialized() provides
the same functionality as a function.


</description>
<parameters>
</parameters>
<return> %TRUE, if the thread system is initialized
</return>
</function>

<function name="g_thread_try_new">
<description>
This function is the same as g_thread_new() except that
it allows for the possibility of failure.

If a thread can not be created (due to resource limits),
@error is set and %NULL is returned.

Since: 2.32

</description>
<parameters>
<parameter name="name">
<parameter_description> an (optional) name for the new thread
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function to execute in the new thread
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> an argument to supply to the new thread
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new #GThread, or %NULL if an error occurred

</return>
</function>

<function name="g_thread_unref">
<description>
Decrease the reference count on @thread, possibly freeing all
resources associated with it.

Note that each thread holds a reference to its #GThread while
it is running, so it is safe to drop your own reference to it
if you don't need it anymore.

Since: 2.32

</description>
<parameters>
<parameter name="thread">
<parameter_description> a #GThread
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_thread_yield">
<description>
Causes the calling thread to voluntarily relinquish the CPU, so
that other threads can run.

This function is often used as a method to make busy wait less evil.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_time_val_add">
<description>
Adds the given number of microseconds to @time_. @microseconds can
also be negative to decrease the value of @time_.

</description>
<parameters>
<parameter name="time_">
<parameter_description> a #GTimeVal
</parameter_description>
</parameter>
<parameter name="microseconds">
<parameter_description> number of microseconds to add to @time
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_time_val_from_iso8601">
<description>
Converts a string containing an ISO 8601 encoded date and time
to a #GTimeVal and puts it into @time_.

@iso_date must include year, month, day, hours, minutes, and
seconds. It can optionally include fractions of a second and a time
zone indicator. (In the absence of any time zone indication, the
timestamp is assumed to be in local time.)

Since: 2.12

</description>
<parameters>
<parameter name="iso_date">
<parameter_description> an ISO 8601 encoded date string
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a #GTimeVal
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the conversion was successful.

</return>
</function>

<function name="g_time_val_to_iso8601">
<description>
Converts @time_ into an RFC 3339 encoded string, relative to the
Coordinated Universal Time (UTC). This is one of the many formats
allowed by ISO 8601.

ISO 8601 allows a large number of date/time formats, with or without
punctuation and optional elements. The format returned by this function
is a complete date and time, with optional punctuation included, the
UTC time zone represented as &quot;Z&quot;, and the @tv_usec part included if
and only if it is nonzero, i.e. either
&quot;YYYY-MM-DDTHH:MM:SSZ&quot; or &quot;YYYY-MM-DDTHH:MM:SS.fffffZ&quot;.

This corresponds to the Internet date/time format defined by
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt),
and to either of the two most-precise formats defined by
the W3C Note
[Date and Time Formats](http://www.w3.org/TR/NOTE-datetime-19980827).
Both of these documents are profiles of ISO 8601.

Use g_date_time_format() or g_strdup_printf() if a different
variation of ISO 8601 format is required.

If @time_ represents a date which is too large to fit into a `struct tm`,
%NULL will be returned. This is platform dependent, but it is safe to assume
years up to 3000 are supported. The return value of g_time_val_to_iso8601()
has been nullable since GLib 2.54; before then, GLib would crash under the
same conditions.

Since: 2.12

</description>
<parameters>
<parameter name="time_">
<parameter_description> a #GTimeVal
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing an ISO 8601 date,
or %NULL if @time_ was too large

</return>
</function>

<function name="g_time_zone_adjust_time">
<description>
Finds an interval within @tz that corresponds to the given @time_,
possibly adjusting @time_ if required to fit into an interval.
The meaning of @time_ depends on @type.

This function is similar to g_time_zone_find_interval(), with the
difference that it always succeeds (by making the adjustments
described below).

In any of the cases where g_time_zone_find_interval() succeeds then
this function returns the same value, without modifying @time_.

This function may, however, modify @time_ in order to deal with
non-existent times.  If the non-existent local @time_ of 02:30 were
requested on March 14th 2010 in Toronto then this function would
adjust @time_ to be 03:00 and return the interval containing the
adjusted time.

Since: 2.26

</description>
<parameters>
<parameter name="tz">
<parameter_description> a #GTimeZone
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GTimeType of @time_
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a pointer to a number of seconds since January 1, 1970
</parameter_description>
</parameter>
</parameters>
<return> the interval containing @time_, never -1

</return>
</function>

<function name="g_time_zone_find_interval">
<description>
Finds an the interval within @tz that corresponds to the given @time_.
The meaning of @time_ depends on @type.

If @type is %G_TIME_TYPE_UNIVERSAL then this function will always
succeed (since universal time is monotonic and continuous).

Otherwise @time_ is treated as local time.  The distinction between
%G_TIME_TYPE_STANDARD and %G_TIME_TYPE_DAYLIGHT is ignored except in
the case that the given @time_ is ambiguous.  In Toronto, for example,
01:30 on November 7th 2010 occurred twice (once inside of daylight
savings time and the next, an hour later, outside of daylight savings
time).  In this case, the different value of @type would result in a
different interval being returned.

It is still possible for this function to fail.  In Toronto, for
example, 02:00 on March 14th 2010 does not exist (due to the leap
forward to begin daylight savings time).  -1 is returned in that
case.

Since: 2.26

</description>
<parameters>
<parameter name="tz">
<parameter_description> a #GTimeZone
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GTimeType of @time_
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a number of seconds since January 1, 1970
</parameter_description>
</parameter>
</parameters>
<return> the interval containing @time_, or -1 in case of failure

</return>
</function>

<function name="g_time_zone_get_abbreviation">
<description>
Determines the time zone abbreviation to be used during a particular
@interval of time in the time zone @tz.

For example, in Toronto this is currently &quot;EST&quot; during the winter
months and &quot;EDT&quot; during the summer months when daylight savings time
is in effect.

Since: 2.26

</description>
<parameters>
<parameter name="tz">
<parameter_description> a #GTimeZone
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> an interval within the timezone
</parameter_description>
</parameter>
</parameters>
<return> the time zone abbreviation, which belongs to @tz

</return>
</function>

<function name="g_time_zone_get_offset">
<description>
Determines the offset to UTC in effect during a particular @interval
of time in the time zone @tz.

The offset is the number of seconds that you add to UTC time to
arrive at local time for @tz (ie: negative numbers for time zones
west of GMT, positive numbers for east).

Since: 2.26

</description>
<parameters>
<parameter name="tz">
<parameter_description> a #GTimeZone
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> an interval within the timezone
</parameter_description>
</parameter>
</parameters>
<return> the number of seconds that should be added to UTC to get the
local time in @tz

</return>
</function>

<function name="g_time_zone_is_dst">
<description>
Determines if daylight savings time is in effect during a particular
@interval of time in the time zone @tz.

Since: 2.26

</description>
<parameters>
<parameter name="tz">
<parameter_description> a #GTimeZone
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> an interval within the timezone
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if daylight savings time is in effect

</return>
</function>

<function name="g_time_zone_new">
<description>
Creates a #GTimeZone corresponding to @identifier.

@identifier can either be an RFC3339/ISO 8601 time offset or
something that would pass as a valid value for the `TZ` environment
variable (including %NULL).

In Windows, @identifier can also be the unlocalized name of a time
zone for standard time, for example &quot;Pacific Standard Time&quot;.

Valid RFC3339 time offsets are `&quot;Z&quot;` (for UTC) or
`&quot;±hh:mm&quot;`.  ISO 8601 additionally specifies
`&quot;±hhmm&quot;` and `&quot;±hh&quot;`.  Offsets are
time values to be added to Coordinated Universal Time (UTC) to get
the local time.

In UNIX, the `TZ` environment variable typically corresponds
to the name of a file in the zoneinfo database, or string in
&quot;std offset [dst [offset],start[/time],end[/time]]&quot; (POSIX) format.
There  are  no spaces in the specification. The name of standard
and daylight savings time zone must be three or more alphabetic
characters. Offsets are time values to be added to local time to
get Coordinated Universal Time (UTC) and should be
`&quot;[±]hh[[:]mm[:ss]]&quot;`.  Dates are either
`&quot;Jn&quot;` (Julian day with n between 1 and 365, leap
years not counted), `&quot;n&quot;` (zero-based Julian day
with n between 0 and 365) or `&quot;Mm.w.d&quot;` (day d
(0 &lt;= d &lt;= 6) of week w (1 &lt;= w &lt;= 5) of month m (1 &lt;= m &lt;= 12), day
0 is a Sunday).  Times are in local wall clock time, the default is
02:00:00.

In Windows, the &quot;tzn[+|–]hh[:mm[:ss]][dzn]&quot; format is used, but also
accepts POSIX format.  The Windows format uses US rules for all time
zones; daylight savings time is 60 minutes behind the standard time
with date and time of change taken from Pacific Standard Time.
Offsets are time values to be added to the local time to get
Coordinated Universal Time (UTC).

g_time_zone_new_local() calls this function with the value of the
`TZ` environment variable. This function itself is independent of
the value of `TZ`, but if @identifier is %NULL then `/etc/localtime`
will be consulted to discover the correct time zone on UNIX and the
registry will be consulted or GetTimeZoneInformation() will be used
to get the local time zone on Windows.

If intervals are not available, only time zone rules from `TZ`
environment variable or other means, then they will be computed
from year 1900 to 2037.  If the maximum year for the rules is
available and it is greater than 2037, then it will followed
instead.

See
[RFC3339 §5.6](http://tools.ietf.org/html/rfc3339#section-5.6)
for a precise definition of valid RFC3339 time offsets
(the `time-offset` expansion) and ISO 8601 for the
full list of valid time offsets.  See
[The GNU C Library manual](http://www.gnu.org/s/libc/manual/html_node/TZ-Variable.html)
for an explanation of the possible
values of the `TZ` environment variable. See
[Microsoft Time Zone Index Values](http://msdn.microsoft.com/en-us/library/ms912391%28v=winembedded.11%29.aspx)
for the list of time zones on Windows.

You should release the return value by calling g_time_zone_unref()
when you are done with it.

Since: 2.26

</description>
<parameters>
<parameter name="identifier">
<parameter_description> a timezone identifier
</parameter_description>
</parameter>
</parameters>
<return> the requested timezone

</return>
</function>

<function name="g_time_zone_new_local">
<description>
Creates a #GTimeZone corresponding to local time.  The local time
zone may change between invocations to this function; for example,
if the system administrator changes it.

This is equivalent to calling g_time_zone_new() with the value of
the `TZ` environment variable (including the possibility of %NULL).

You should release the return value by calling g_time_zone_unref()
when you are done with it.

Since: 2.26

</description>
<parameters>
</parameters>
<return> the local timezone

</return>
</function>

<function name="g_time_zone_new_utc">
<description>
Creates a #GTimeZone corresponding to UTC.

This is equivalent to calling g_time_zone_new() with a value like
&quot;Z&quot;, &quot;UTC&quot;, &quot;+00&quot;, etc.

You should release the return value by calling g_time_zone_unref()
when you are done with it.

Since: 2.26

</description>
<parameters>
</parameters>
<return> the universal timezone

</return>
</function>

<function name="g_time_zone_ref">
<description>
Increases the reference count on @tz.

Since: 2.26

</description>
<parameters>
<parameter name="tz">
<parameter_description> a #GTimeZone
</parameter_description>
</parameter>
</parameters>
<return> a new reference to @tz.

</return>
</function>

<function name="g_time_zone_unref">
<description>
Decreases the reference count on @tz.

Since: 2.26

</description>
<parameters>
<parameter name="tz">
<parameter_description> a #GTimeZone
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_timeout_add">
<description>
Sets a function to be called at regular intervals, with the default
priority, #G_PRIORITY_DEFAULT.  The function is called repeatedly
until it returns %FALSE, at which point the timeout is automatically
destroyed and the function will not be called again.  The first call
to the function will be at the end of the first @interval.

Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given interval
(it does not try to 'catch up' time lost in delays).

See [memory management of sources][mainloop-memory-management] for details
on how to handle the return value and memory management of @data.

If you want to have a timer in the &quot;seconds&quot; range and do not care
about the exact time of the first call of the timer, use the
g_timeout_add_seconds() function; this function allows for more
optimizations and more efficient system power usage.

This internally creates a main loop source using g_timeout_source_new()
and attaches it to the global #GMainContext using g_source_attach(), so
the callback will be invoked in whichever thread is running that main
context. You can do these steps manually if you need greater control or to
use a custom main context.

The interval given is in terms of monotonic time, not wall clock
time.  See g_get_monotonic_time().


</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
(1/1000ths of a second)
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.
</return>
</function>

<function name="g_timeout_add_full">
<description>
Sets a function to be called at regular intervals, with the given
priority.  The function is called repeatedly until it returns
%FALSE, at which point the timeout is automatically destroyed and
the function will not be called again.  The @notify function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first @interval.

Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given interval
(it does not try to 'catch up' time lost in delays).

See [memory management of sources][mainloop-memory-management] for details
on how to handle the return value and memory management of @data.

This internally creates a main loop source using g_timeout_source_new()
and attaches it to the global #GMainContext using g_source_attach(), so
the callback will be invoked in whichever thread is running that main
context. You can do these steps manually if you need greater control or to
use a custom main context.

The interval given in terms of monotonic time, not wall clock time.
See g_get_monotonic_time().


</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in
the range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
(1/1000ths of a second)
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.
</return>
</function>

<function name="g_timeout_add_seconds">
<description>
Sets a function to be called at regular intervals with the default
priority, #G_PRIORITY_DEFAULT. The function is called repeatedly until
it returns %FALSE, at which point the timeout is automatically destroyed
and the function will not be called again.

This internally creates a main loop source using
g_timeout_source_new_seconds() and attaches it to the main loop context
using g_source_attach(). You can do these steps manually if you need
greater control. Also see g_timeout_add_seconds_full().

Note that the first call of the timer may not be precise for timeouts
of one second. If you need finer precision and have such a timeout,
you may want to use g_timeout_add() instead.

See [memory management of sources][mainloop-memory-management] for details
on how to handle the return value and memory management of @data.

The interval given is in terms of monotonic time, not wall clock
time.  See g_get_monotonic_time().

Since: 2.14

</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in seconds
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="g_timeout_add_seconds_full">
<description>
Sets a function to be called at regular intervals, with @priority.
The function is called repeatedly until it returns %FALSE, at which
point the timeout is automatically destroyed and the function will
not be called again.

Unlike g_timeout_add(), this function operates at whole second granularity.
The initial starting point of the timer is determined by the implementation
and the implementation is expected to group multiple timers together so that
they fire all at the same time.
To allow this grouping, the @interval to the first timer is rounded
and can deviate up to one second from the specified interval.
Subsequent timer iterations will generally run at the specified interval.

Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given @interval

See [memory management of sources][mainloop-memory-management] for details
on how to handle the return value and memory management of @data.

If you want timing more precise than whole seconds, use g_timeout_add()
instead.

The grouping of timers to fire at the same time results in a more power
and CPU efficient behavior so if your timer is in multiples of seconds
and you don't require the first timer exactly one second from now, the
use of g_timeout_add_seconds() is preferred over g_timeout_add().

This internally creates a main loop source using 
g_timeout_source_new_seconds() and attaches it to the main loop context 
using g_source_attach(). You can do these steps manually if you need 
greater control.

The interval given is in terms of monotonic time, not wall clock
time.  See g_get_monotonic_time().

Since: 2.14

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in
the range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in seconds
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="g_timeout_source_new">
<description>
Creates a new timeout source.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed.

The interval given is in terms of monotonic time, not wall clock
time.  See g_get_monotonic_time().


</description>
<parameters>
<parameter name="interval">
<parameter_description> the timeout interval in milliseconds.
</parameter_description>
</parameter>
</parameters>
<return> the newly-created timeout source
</return>
</function>

<function name="g_timeout_source_new_seconds">
<description>
Creates a new timeout source.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed.

The scheduling granularity/accuracy of this timeout source will be
in seconds.

The interval given in terms of monotonic time, not wall clock time.
See g_get_monotonic_time().

Since: 2.14	

</description>
<parameters>
<parameter name="interval">
<parameter_description> the timeout interval in seconds
</parameter_description>
</parameter>
</parameters>
<return> the newly-created timeout source

</return>
</function>

<function name="g_timer_continue">
<description>
Resumes a timer that has previously been stopped with
g_timer_stop(). g_timer_stop() must be called before using this
function.

Since: 2.4

</description>
<parameters>
<parameter name="timer">
<parameter_description> a #GTimer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_timer_destroy">
<description>
Destroys a timer, freeing associated resources.

</description>
<parameters>
<parameter name="timer">
<parameter_description> a #GTimer to destroy.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_timer_elapsed">
<description>
If @timer has been started but not stopped, obtains the time since
the timer was started. If @timer has been stopped, obtains the
elapsed time between the time it was started and the time it was
stopped. The return value is the number of seconds elapsed,
including any fractional part. The @microseconds out parameter is
essentially useless.


</description>
<parameters>
<parameter name="timer">
<parameter_description> a #GTimer.
</parameter_description>
</parameter>
<parameter name="microseconds">
<parameter_description> return location for the fractional part of seconds
elapsed, in microseconds (that is, the total number
of microseconds elapsed, modulo 1000000), or %NULL
</parameter_description>
</parameter>
</parameters>
<return> seconds elapsed as a floating point value, including any
fractional part.
</return>
</function>

<function name="g_timer_new">
<description>
Creates a new timer, and starts timing (i.e. g_timer_start() is
implicitly called for you).


</description>
<parameters>
</parameters>
<return> a new #GTimer.
</return>
</function>

<function name="g_timer_reset">
<description>
This function is useless; it's fine to call g_timer_start() on an
already-started timer to reset the start time, so g_timer_reset()
serves no purpose.

</description>
<parameters>
<parameter name="timer">
<parameter_description> a #GTimer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_timer_start">
<description>
Marks a start time, so that future calls to g_timer_elapsed() will
report the time since g_timer_start() was called. g_timer_new()
automatically marks the start time, so no need to call
g_timer_start() immediately after creating the timer.

</description>
<parameters>
<parameter name="timer">
<parameter_description> a #GTimer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_timer_stop">
<description>
Marks an end time, so calls to g_timer_elapsed() will return the
difference between this end time and the start time.

</description>
<parameters>
<parameter name="timer">
<parameter_description> a #GTimer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_trash_stack_height">
<description>
Returns the height of a #GTrashStack.

Note that execution of this function is of O(N) complexity
where N denotes the number of items on the stack.

Deprecated: 2.48: #GTrashStack is deprecated without replacement

</description>
<parameters>
<parameter name="stack_p">
<parameter_description> a #GTrashStack
</parameter_description>
</parameter>
</parameters>
<return> the height of the stack
</return>
</function>

<function name="g_trash_stack_peek">
<description>
Returns the element at the top of a #GTrashStack
which may be %NULL.

Deprecated: 2.48: #GTrashStack is deprecated without replacement

</description>
<parameters>
<parameter name="stack_p">
<parameter_description> a #GTrashStack
</parameter_description>
</parameter>
</parameters>
<return> the element at the top of the stack
</return>
</function>

<function name="g_trash_stack_pop">
<description>
Pops a piece of memory off a #GTrashStack.

Deprecated: 2.48: #GTrashStack is deprecated without replacement

</description>
<parameters>
<parameter name="stack_p">
<parameter_description> a #GTrashStack
</parameter_description>
</parameter>
</parameters>
<return> the element at the top of the stack
</return>
</function>

<function name="g_trash_stack_push">
<description>
Pushes a piece of memory onto a #GTrashStack.
Deprecated: 2.48: #GTrashStack is deprecated without replacement

</description>
<parameters>
<parameter name="stack_p">
<parameter_description> a #GTrashStack
</parameter_description>
</parameter>
<parameter name="data_p">
<parameter_description> the piece of memory to push on the stack
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tree_destroy">
<description>
Removes all keys and values from the #GTree and decreases its
reference count by one. If keys and/or values are dynamically
allocated, you should either free them first or create the #GTree
using g_tree_new_full(). In the latter case the destroy functions
you supplied will be called on all keys and values before destroying
the #GTree.

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tree_foreach">
<description>
Calls the given function for each of the key/value pairs in the #GTree.
The function is passed the key and value of each pair, and the given
@data parameter. The tree is traversed in sorted order.

The tree may not be modified while iterating over it (you can't 
add/remove items). To remove all items matching a predicate, you need 
to add each item to a list in your #GTraverseFunc as you walk over 
the tree, then walk the list and remove each item.

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each node visited.
If this function returns %TRUE, the traversal is stopped.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tree_height">
<description>
Gets the height of a #GTree.

If the #GTree contains no nodes, the height is 0.
If the #GTree contains only one root node the height is 1.
If the root node has children the height is 2, etc.


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
</parameters>
<return> the height of @tree
</return>
</function>

<function name="g_tree_insert">
<description>
Inserts a key/value pair into a #GTree.

If the given key already exists in the #GTree its corresponding value
is set to the new value. If you supplied a @value_destroy_func when
creating the #GTree, the old value is freed using that function. If
you supplied a @key_destroy_func when creating the #GTree, the passed
key is freed using that function.

The tree is automatically 'balanced' as new key/value pairs are added,
so that the distance from the root to every leaf is as small as possible.

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to insert
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value corresponding to the key
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tree_lookup">
<description>
Gets the value corresponding to the given key. Since a #GTree is 
automatically balanced as key/value pairs are added, key lookup
is O(log n) (where n is the number of key/value pairs in the tree).


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to look up
</parameter_description>
</parameter>
</parameters>
<return> the value corresponding to the key, or %NULL
if the key was not found
</return>
</function>

<function name="g_tree_lookup_extended">
<description>
Looks up a key in the #GTree, returning the original key and the
associated value. This is useful if you need to free the memory
allocated for the original key, for example before calling
g_tree_remove().


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
<parameter name="lookup_key">
<parameter_description> the key to look up
</parameter_description>
</parameter>
<parameter name="orig_key">
<parameter_description> returns the original key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> returns the value associated with the key
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key was found in the #GTree
</return>
</function>

<function name="g_tree_new">
<description>
Creates a new #GTree.


</description>
<parameters>
<parameter name="key_compare_func">
<parameter_description> the function used to order the nodes in the #GTree.
It should return values similar to the standard strcmp() function -
0 if the two arguments are equal, a negative value if the first argument 
comes before the second, or a positive value if the first argument comes 
after the second.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GTree
</return>
</function>

<function name="g_tree_new_full">
<description>
Creates a new #GTree like g_tree_new() and allows to specify functions 
to free the memory allocated for the key and value that get called when 
removing the entry from the #GTree.


</description>
<parameters>
<parameter name="key_compare_func">
<parameter_description> qsort()-style comparison function
</parameter_description>
</parameter>
<parameter name="key_compare_data">
<parameter_description> data to pass to comparison function
</parameter_description>
</parameter>
<parameter name="key_destroy_func">
<parameter_description> a function to free the memory allocated for the key 
used when removing the entry from the #GTree or %NULL if you don't
want to supply such a function
</parameter_description>
</parameter>
<parameter name="value_destroy_func">
<parameter_description> a function to free the memory allocated for the 
value used when removing the entry from the #GTree or %NULL if you 
don't want to supply such a function
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GTree
</return>
</function>

<function name="g_tree_new_with_data">
<description>
Creates a new #GTree with a comparison function that accepts user data.
See g_tree_new() for more details.


</description>
<parameters>
<parameter name="key_compare_func">
<parameter_description> qsort()-style comparison function
</parameter_description>
</parameter>
<parameter name="key_compare_data">
<parameter_description> data to pass to comparison function
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GTree
</return>
</function>

<function name="g_tree_nnodes">
<description>
Gets the number of nodes in a #GTree.


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
</parameters>
<return> the number of nodes in @tree
</return>
</function>

<function name="g_tree_ref">
<description>
Increments the reference count of @tree by one.

It is safe to call this function from any thread.

Since: 2.22

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
</parameters>
<return> the passed in #GTree

</return>
</function>

<function name="g_tree_remove">
<description>
Removes a key/value pair from a #GTree.

If the #GTree was created using g_tree_new_full(), the key and value 
are freed using the supplied destroy functions, otherwise you have to 
make sure that any dynamically allocated values are freed yourself.
If the key does not exist in the #GTree, the function does nothing.


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key was found (prior to 2.8, this function
returned nothing)
</return>
</function>

<function name="g_tree_replace">
<description>
Inserts a new key and value into a #GTree similar to g_tree_insert().
The difference is that if the key already exists in the #GTree, it gets 
replaced by the new key. If you supplied a @value_destroy_func when 
creating the #GTree, the old value is freed using that function. If you 
supplied a @key_destroy_func when creating the #GTree, the old key is 
freed using that function. 

The tree is automatically 'balanced' as new key/value pairs are added,
so that the distance from the root to every leaf is as small as possible.

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to insert
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value corresponding to the key
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tree_search">
<description>
Searches a #GTree using @search_func.

The @search_func is called with a pointer to the key of a key/value
pair in the tree, and the passed in @user_data. If @search_func returns
0 for a key/value pair, then the corresponding value is returned as
the result of g_tree_search(). If @search_func returns -1, searching
will proceed among the key/value pairs that have a smaller key; if
@search_func returns 1, searching will proceed among the key/value
pairs that have a larger key.


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
<parameter name="search_func">
<parameter_description> a function used to search the #GTree
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data passed as the second argument to @search_func
</parameter_description>
</parameter>
</parameters>
<return> the value corresponding to the found key, or %NULL
if the key was not found
</return>
</function>

<function name="g_tree_steal">
<description>
Removes a key and its associated value from a #GTree without calling 
the key and value destroy functions.

If the key does not exist in the #GTree, the function does nothing.


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key was found (prior to 2.8, this function
returned nothing)
</return>
</function>

<function name="g_tree_traverse">
<description>
Calls the given function for each node in the #GTree. 

Deprecated:2.2: The order of a balanced tree is somewhat arbitrary.
If you just want to visit all nodes in sorted order, use
g_tree_foreach() instead. If you really need to visit nodes in
a different order, consider using an [n-ary tree][glib-N-ary-Trees].

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
<parameter name="traverse_func">
<parameter_description> the function to call for each node visited. If this 
function returns %TRUE, the traversal is stopped.
</parameter_description>
</parameter>
<parameter name="traverse_type">
<parameter_description> the order in which nodes are visited, one of %G_IN_ORDER,
%G_PRE_ORDER and %G_POST_ORDER
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tree_unref">
<description>
Decrements the reference count of @tree by one.
If the reference count drops to 0, all keys and values will
be destroyed (if destroy functions were specified) and all
memory allocated by @tree will be released.

It is safe to call this function from any thread.

Since: 2.22

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GTree
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_try_malloc">
<description>
Attempts to allocate @n_bytes, and returns %NULL on failure.
Contrast with g_malloc(), which aborts the program on failure.


</description>
<parameters>
<parameter name="n_bytes">
<parameter_description> number of bytes to allocate.
</parameter_description>
</parameter>
</parameters>
<return> the allocated memory, or %NULL.
</return>
</function>

<function name="g_try_malloc0">
<description>
Attempts to allocate @n_bytes, initialized to 0's, and returns %NULL on
failure. Contrast with g_malloc0(), which aborts the program on failure.

Since: 2.8

</description>
<parameters>
<parameter name="n_bytes">
<parameter_description> number of bytes to allocate
</parameter_description>
</parameter>
</parameters>
<return> the allocated memory, or %NULL
</return>
</function>

<function name="g_try_malloc0_n">
<description>
This function is similar to g_try_malloc0(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.

Since: 2.24

</description>
<parameters>
<parameter name="n_blocks">
<parameter_description> the number of blocks to allocate
</parameter_description>
</parameter>
<parameter name="n_block_bytes">
<parameter_description> the size of each block in bytes
</parameter_description>
</parameter>
</parameters>
<return> the allocated memory, or %NULL
</return>
</function>

<function name="g_try_malloc_n">
<description>
This function is similar to g_try_malloc(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.

Since: 2.24

</description>
<parameters>
<parameter name="n_blocks">
<parameter_description> the number of blocks to allocate
</parameter_description>
</parameter>
<parameter name="n_block_bytes">
<parameter_description> the size of each block in bytes
</parameter_description>
</parameter>
</parameters>
<return> the allocated memory, or %NULL.
</return>
</function>

<function name="g_try_new">
<description>
Attempts to allocate @n_structs elements of type @struct_type, and returns
%NULL on failure. Contrast with g_new(), which aborts the program on failure.
The returned pointer is cast to a pointer to the given type.
The function returns %NULL when @n_structs is 0 of if an overflow occurs.

Since: 2.8

</description>
<parameters>
<parameter name="struct_type">
<parameter_description> the type of the elements to allocate
</parameter_description>
</parameter>
<parameter name="n_structs">
<parameter_description> the number of elements to allocate
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated memory, cast to a pointer to @struct_type
</return>
</function>

<function name="g_try_new0">
<description>
Attempts to allocate @n_structs elements of type @struct_type, initialized
to 0's, and returns %NULL on failure. Contrast with g_new0(), which aborts
the program on failure.
The returned pointer is cast to a pointer to the given type.
The function returns %NULL when @n_structs is 0 or if an overflow occurs.

Since: 2.8

</description>
<parameters>
<parameter name="struct_type">
<parameter_description> the type of the elements to allocate
</parameter_description>
</parameter>
<parameter name="n_structs">
<parameter_description> the number of elements to allocate
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the allocated memory, cast to a pointer to @struct_type
</return>
</function>

<function name="g_try_realloc">
<description>
Attempts to realloc @mem to a new size, @n_bytes, and returns %NULL
on failure. Contrast with g_realloc(), which aborts the program
on failure.

If @mem is %NULL, behaves the same as g_try_malloc().


</description>
<parameters>
<parameter name="mem">
<parameter_description> previously-allocated memory, or %NULL.
</parameter_description>
</parameter>
<parameter name="n_bytes">
<parameter_description> number of bytes to allocate.
</parameter_description>
</parameter>
</parameters>
<return> the allocated memory, or %NULL.
</return>
</function>

<function name="g_try_realloc_n">
<description>
This function is similar to g_try_realloc(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.

Since: 2.24

</description>
<parameters>
<parameter name="mem">
<parameter_description> previously-allocated memory, or %NULL.
</parameter_description>
</parameter>
<parameter name="n_blocks">
<parameter_description> the number of blocks to allocate
</parameter_description>
</parameter>
<parameter name="n_block_bytes">
<parameter_description> the size of each block in bytes
</parameter_description>
</parameter>
</parameters>
<return> the allocated memory, or %NULL.
</return>
</function>

<function name="g_try_renew">
<description>
Attempts to reallocate the memory pointed to by @mem, so that it now has
space for @n_structs elements of type @struct_type, and returns %NULL on
failure. Contrast with g_renew(), which aborts the program on failure.
It returns the new address of the memory, which may have been moved.
The function returns %NULL if an overflow occurs.

Since: 2.8

</description>
<parameters>
<parameter name="struct_type">
<parameter_description> the type of the elements to allocate
</parameter_description>
</parameter>
<parameter name="mem">
<parameter_description> the currently allocated memory
</parameter_description>
</parameter>
<parameter name="n_structs">
<parameter_description> the number of elements to allocate
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the new allocated memory, cast to a pointer to @struct_type
</return>
</function>

<function name="g_tuples_destroy">
<description>
Frees the records which were returned by g_relation_select(). This
should always be called after g_relation_select() when you are
finished with the records. The records are not removed from the
#GRelation.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="tuples">
<parameter_description> the tuple data to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_tuples_index">
<description>
Gets a field from the records returned by g_relation_select(). It
returns the given field of the record at the given index. The
returned value should not be changed.

Deprecated: 2.26: Rarely used API

</description>
<parameters>
<parameter name="tuples">
<parameter_description> the tuple data, returned by g_relation_select().
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the record.
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> the field to return.
</parameter_description>
</parameter>
</parameters>
<return> the field of the record.

</return>
</function>

<function name="g_type_add_class_cache_func">
<description>
Adds a #GTypeClassCacheFunc to be called before the reference count of a
class goes from one to zero. This can be used to prevent premature class
destruction. All installed #GTypeClassCacheFunc functions will be chained
until one of them returns %TRUE. The functions have to check the class id
passed in to figure whether they actually want to cache the class of this
type, since all classes are routed through the same #GTypeClassCacheFunc
chain.

</description>
<parameters>
<parameter name="cache_data">
<parameter_description> data to be passed to @cache_func
</parameter_description>
</parameter>
<parameter name="cache_func">
<parameter_description> a #GTypeClassCacheFunc
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_add_class_private">
<description>
Registers a private class structure for a classed type;
when the class is allocated, the private structures for
the class and all of its parent types are allocated
sequentially in the same memory block as the public
structures, and are zero-filled.

This function should be called in the
type's get_type() function after the type is registered.
The private structure can be retrieved using the
G_TYPE_CLASS_GET_PRIVATE() macro.

Since: 2.24

</description>
<parameters>
<parameter name="class_type">
<parameter_description> GType of an classed type
</parameter_description>
</parameter>
<parameter name="private_size">
<parameter_description> size of private structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_add_interface_check">
<description>
Adds a function to be called after an interface vtable is
initialized for any class (i.e. after the @interface_init
member of #GInterfaceInfo has been called).

This function is useful when you want to check an invariant
that depends on the interfaces of a class. For instance, the
implementation of #GObject uses this facility to check that an
object implements all of the properties that are defined on its
interfaces.

Since: 2.4

</description>
<parameters>
<parameter name="check_data">
<parameter_description> data to pass to @check_func
</parameter_description>
</parameter>
<parameter name="check_func">
<parameter_description> function to be called after each interface
is initialized
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_add_interface_dynamic">
<description>
Adds the dynamic @interface_type to @instantiable_type. The information
contained in the #GTypePlugin structure pointed to by @plugin
is used to manage the relationship.

</description>
<parameters>
<parameter name="instance_type">
<parameter_description> #GType value of an instantiable type
</parameter_description>
</parameter>
<parameter name="interface_type">
<parameter_description> #GType value of an interface type
</parameter_description>
</parameter>
<parameter name="plugin">
<parameter_description> #GTypePlugin structure to retrieve the #GInterfaceInfo from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_add_interface_static">
<description>
Adds the static @interface_type to @instantiable_type.
The information contained in the #GInterfaceInfo structure
pointed to by @info is used to manage the relationship.

</description>
<parameters>
<parameter name="instance_type">
<parameter_description> #GType value of an instantiable type
</parameter_description>
</parameter>
<parameter name="interface_type">
<parameter_description> #GType value of an interface type
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> #GInterfaceInfo structure for this
(@instance_type, @interface_type) combination
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_check_instance">
<description>
Private helper function to aid implementation of the
G_TYPE_CHECK_INSTANCE() macro.


</description>
<parameters>
<parameter name="instance">
<parameter_description> a valid #GTypeInstance structure
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @instance is valid, %FALSE otherwise
</return>
</function>

<function name="g_type_children">
<description>
Return a newly allocated and 0-terminated array of type IDs, listing
the child types of @type.


</description>
<parameters>
<parameter name="type">
<parameter_description> the parent type
</parameter_description>
</parameter>
<parameter name="n_children">
<parameter_description> location to store the length of
the returned array, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> Newly allocated
and 0-terminated array of child types, free with g_free()
</return>
</function>

<function name="g_type_class_add_private">
<description>
Registers a private structure for an instantiatable type.

When an object is allocated, the private structures for
the type and all of its parent types are allocated
sequentially in the same memory block as the public
structures, and are zero-filled.

Note that the accumulated size of the private structures of
a type and all its parent types cannot exceed 64 KiB.

This function should be called in the type's class_init() function.
The private structure can be retrieved using the
G_TYPE_INSTANCE_GET_PRIVATE() macro.

The following example shows attaching a private structure
MyObjectPrivate to an object MyObject defined in the standard
GObject fashion in the type's class_init() function.

Note the use of a structure member &quot;priv&quot; to avoid the overhead
of repeatedly calling MY_OBJECT_GET_PRIVATE().

|[&lt;!-- language=&quot;C&quot; --&gt; 
typedef struct _MyObject        MyObject;
typedef struct _MyObjectPrivate MyObjectPrivate;

struct _MyObject {
GObject parent;

MyObjectPrivate *priv;
};

struct _MyObjectPrivate {
int some_field;
};

static void
my_object_class_init (MyObjectClass *klass)
{
g_type_class_add_private (klass, sizeof (MyObjectPrivate));
}

static void
my_object_init (MyObject *my_object)
{
my_object-&gt;priv = G_TYPE_INSTANCE_GET_PRIVATE (my_object,
MY_TYPE_OBJECT,
MyObjectPrivate);
// my_object-&gt;priv-&gt;some_field will be automatically initialised to 0
}

static int
my_object_get_some_field (MyObject *my_object)
{
MyObjectPrivate *priv;

g_return_val_if_fail (MY_IS_OBJECT (my_object), 0);

priv = my_object-&gt;priv;

return priv-&gt;some_field;
}
]|

Since: 2.4

</description>
<parameters>
<parameter name="g_class">
<parameter_description> class structure for an instantiatable
type
</parameter_description>
</parameter>
<parameter name="private_size">
<parameter_description> size of private structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_class_get_instance_private_offset">
<description>
Gets the offset of the private data for instances of @g_class.

This is how many bytes you should add to the instance pointer of a
class in order to get the private data for the type represented by
@g_class.

You can only call this function after you have registered a private
data area for @g_class using g_type_class_add_private().

Since: 2.38

</description>
<parameters>
<parameter name="g_class">
<parameter_description> a #GTypeClass
</parameter_description>
</parameter>
</parameters>
<return> the offset, in bytes

</return>
</function>

<function name="g_type_class_peek">
<description>
This function is essentially the same as g_type_class_ref(),
except that the classes reference count isn't incremented.
As a consequence, this function may return %NULL if the class
of the type passed in does not currently exist (hasn't been
referenced before).


</description>
<parameters>
<parameter name="type">
<parameter_description> type ID of a classed type
</parameter_description>
</parameter>
</parameters>
<return> the #GTypeClass
structure for the given type ID or %NULL if the class does not
currently exist
</return>
</function>

<function name="g_type_class_peek_parent">
<description>
This is a convenience function often needed in class initializers.
It returns the class structure of the immediate parent type of the
class passed in.  Since derived classes hold a reference count on
their parent classes as long as they are instantiated, the returned
class will always exist.

This function is essentially equivalent to:
g_type_class_peek (g_type_parent (G_TYPE_FROM_CLASS (g_class)))


</description>
<parameters>
<parameter name="g_class">
<parameter_description> the #GTypeClass structure to
retrieve the parent class for
</parameter_description>
</parameter>
</parameters>
<return> the parent class
of @g_class
</return>
</function>

<function name="g_type_class_peek_static">
<description>
A more efficient version of g_type_class_peek() which works only for
static types.

Since: 2.4

</description>
<parameters>
<parameter name="type">
<parameter_description> type ID of a classed type
</parameter_description>
</parameter>
</parameters>
<return> the #GTypeClass
structure for the given type ID or %NULL if the class does not
currently exist or is dynamically loaded

</return>
</function>

<function name="g_type_class_ref">
<description>
Increments the reference count of the class structure belonging to
@type. This function will demand-create the class if it doesn't
exist already.


</description>
<parameters>
<parameter name="type">
<parameter_description> type ID of a classed type
</parameter_description>
</parameter>
</parameters>
<return> the #GTypeClass
structure for the given type ID
</return>
</function>

<function name="g_type_class_unref">
<description>
Decrements the reference count of the class structure being passed in.
Once the last reference count of a class has been released, classes
may be finalized by the type system, so further dereferencing of a
class pointer after g_type_class_unref() are invalid.

</description>
<parameters>
<parameter name="g_class">
<parameter_description> a #GTypeClass structure to unref
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_class_unref_uncached">
<description>
A variant of g_type_class_unref() for use in #GTypeClassCacheFunc
implementations. It unreferences a class without consulting the chain
of #GTypeClassCacheFuncs, avoiding the recursion which would occur
otherwise.

</description>
<parameters>
<parameter name="g_class">
<parameter_description> a #GTypeClass structure to unref
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_create_instance">
<description>
Creates and initializes an instance of @type if @type is valid and
can be instantiated. The type system only performs basic allocation
and structure setups for instances: actual instance creation should
happen through functions supplied by the type's fundamental type
implementation.  So use of g_type_create_instance() is reserved for
implementators of fundamental types only. E.g. instances of the
#GObject hierarchy should be created via g_object_new() and never
directly through g_type_create_instance() which doesn't handle things
like singleton objects or object construction.

The extended members of the returned instance are guaranteed to be filled
with zeros.

Note: Do not use this function, unless you're implementing a
fundamental type. Also language bindings should not use this
function, but g_object_new() instead.


</description>
<parameters>
<parameter name="type">
<parameter_description> an instantiatable type to create an instance for
</parameter_description>
</parameter>
</parameters>
<return> an allocated and initialized instance, subject to further
treatment by the fundamental type implementation
</return>
</function>

<function name="g_type_default_interface_peek">
<description>
If the interface type @g_type is currently in use, returns its
default interface vtable.

Since: 2.4


</description>
<parameters>
<parameter name="g_type">
<parameter_description> an interface type
</parameter_description>
</parameter>
</parameters>
<return> the default
vtable for the interface, or %NULL if the type is not currently
in use
</return>
</function>

<function name="g_type_default_interface_ref">
<description>
Increments the reference count for the interface type @g_type,
and returns the default interface vtable for the type.

If the type is not currently in use, then the default vtable
for the type will be created and initalized by calling
the base interface init and default vtable init functions for
the type (the @base_init and @class_init members of #GTypeInfo).
Calling g_type_default_interface_ref() is useful when you
want to make sure that signals and properties for an interface
have been installed.

Since: 2.4


</description>
<parameters>
<parameter name="g_type">
<parameter_description> an interface type
</parameter_description>
</parameter>
</parameters>
<return> the default
vtable for the interface; call g_type_default_interface_unref()
when you are done using the interface.
</return>
</function>

<function name="g_type_default_interface_unref">
<description>
Decrements the reference count for the type corresponding to the
interface default vtable @g_iface. If the type is dynamic, then
when no one is using the interface and all references have
been released, the finalize function for the interface's default
vtable (the @class_finalize member of #GTypeInfo) will be called.

Since: 2.4

</description>
<parameters>
<parameter name="g_iface">
<parameter_description> the default vtable
structure for a interface, as returned by g_type_default_interface_ref()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_depth">
<description>
Returns the length of the ancestry of the passed in type. This
includes the type itself, so that e.g. a fundamental type has depth 1.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GType
</parameter_description>
</parameter>
</parameters>
<return> the depth of @type
</return>
</function>

<function name="g_type_ensure">
<description>
Ensures that the indicated @type has been registered with the
type system, and its _class_init() method has been run.

In theory, simply calling the type's _get_type() method (or using
the corresponding macro) is supposed take care of this. However,
_get_type() methods are often marked %G_GNUC_CONST for performance
reasons, even though this is technically incorrect (since
%G_GNUC_CONST requires that the function not have side effects,
which _get_type() methods do on the first call). As a result, if
you write a bare call to a _get_type() macro, it may get optimized
out by the compiler. Using g_type_ensure() guarantees that the
type's _get_type() method is called.

Since: 2.34

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GType
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_free_instance">
<description>
Frees an instance of a type, returning it to the instance pool for
the type, if there is one.

Like g_type_create_instance(), this function is reserved for
implementors of fundamental types.

</description>
<parameters>
<parameter name="instance">
<parameter_description> an instance of a type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_from_name">
<description>
Lookup the type ID from a given type name, returning 0 if no type
has been registered under this name (this is the preferred method
to find out by name whether a specific type has been registered
yet).


</description>
<parameters>
<parameter name="name">
<parameter_description> type name to lookup
</parameter_description>
</parameter>
</parameters>
<return> corresponding type ID or 0
</return>
</function>

<function name="g_type_fundamental">
<description>
Internal function, used to extract the fundamental type ID portion.
Use G_TYPE_FUNDAMENTAL() instead.


</description>
<parameters>
<parameter name="type_id">
<parameter_description> valid type ID
</parameter_description>
</parameter>
</parameters>
<return> fundamental type ID
</return>
</function>

<function name="g_type_fundamental_next">
<description>
Returns the next free fundamental type id which can be used to
register a new fundamental type with g_type_register_fundamental().
The returned type ID represents the highest currently registered
fundamental type identifier.


</description>
<parameters>
</parameters>
<return> the next available fundamental type ID to be registered,
or 0 if the type system ran out of fundamental type IDs
</return>
</function>

<function name="g_type_get_instance_count">
<description>
Returns the number of instances allocated of the particular type;
this is only available if GLib is built with debugging support and
the instance_count debug flag is set (by setting the GOBJECT_DEBUG
variable to include instance-count).

Since: 2.44

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GType
</parameter_description>
</parameter>
</parameters>
<return> the number of instances allocated of the given type;
if instance counts are not available, returns 0.

</return>
</function>

<function name="g_type_get_plugin">
<description>
Returns the #GTypePlugin structure for @type.


</description>
<parameters>
<parameter name="type">
<parameter_description> #GType to retrieve the plugin for
</parameter_description>
</parameter>
</parameters>
<return> the corresponding plugin
if @type is a dynamic type, %NULL otherwise
</return>
</function>

<function name="g_type_get_qdata">
<description>
Obtains data which has previously been attached to @type
with g_type_set_qdata().

Note that this does not take subtyping into account; data
attached to one type with g_type_set_qdata() cannot
be retrieved from a subtype using g_type_get_qdata().


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GType
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> a #GQuark id to identify the data
</parameter_description>
</parameter>
</parameters>
<return> the data, or %NULL if no data was found
</return>
</function>

<function name="g_type_get_type_registration_serial">
<description>
Returns an opaque serial number that represents the state of the set
of registered types. Any time a type is registered this serial changes,
which means you can cache information based on type lookups (such as
g_type_from_name()) and know if the cache is still valid at a later
time by comparing the current serial with the one at the type lookup.

Since: 2.36


</description>
<parameters>
</parameters>
<return> An unsigned int, representing the state of type registrations
</return>
</function>

<function name="g_type_init">
<description>
This function used to initialise the type system.  Since GLib 2.36,
the type system is initialised automatically and this function does
nothing.

Deprecated: 2.36: the type system is now initialised automatically

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_type_init_with_debug_flags">
<description>
This function used to initialise the type system with debugging
flags.  Since GLib 2.36, the type system is initialised automatically
and this function does nothing.

If you need to enable debugging features, use the GOBJECT_DEBUG
environment variable.

Deprecated: 2.36: the type system is now initialised automatically

</description>
<parameters>
<parameter name="debug_flags">
<parameter_description> bitwise combination of #GTypeDebugFlags values for
debugging purposes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_interface_add_prerequisite">
<description>
Adds @prerequisite_type to the list of prerequisites of @interface_type.
This means that any type implementing @interface_type must also implement
@prerequisite_type. Prerequisites can be thought of as an alternative to
interface derivation (which GType doesn't support). An interface can have
at most one instantiatable prerequisite type.

</description>
<parameters>
<parameter name="interface_type">
<parameter_description> #GType value of an interface type
</parameter_description>
</parameter>
<parameter name="prerequisite_type">
<parameter_description> #GType value of an interface or instantiatable type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_interface_get_plugin">
<description>
Returns the #GTypePlugin structure for the dynamic interface
@interface_type which has been added to @instance_type, or %NULL
if @interface_type has not been added to @instance_type or does
not have a #GTypePlugin structure. See g_type_add_interface_dynamic().


</description>
<parameters>
<parameter name="instance_type">
<parameter_description> #GType of an instantiatable type
</parameter_description>
</parameter>
<parameter name="interface_type">
<parameter_description> #GType of an interface type
</parameter_description>
</parameter>
</parameters>
<return> the #GTypePlugin for the dynamic
interface @interface_type of @instance_type
</return>
</function>

<function name="g_type_interface_peek">
<description>
Returns the #GTypeInterface structure of an interface to which the
passed in class conforms.


</description>
<parameters>
<parameter name="instance_class">
<parameter_description> a #GTypeClass structure
</parameter_description>
</parameter>
<parameter name="iface_type">
<parameter_description> an interface ID which this class conforms to
</parameter_description>
</parameter>
</parameters>
<return> the #GTypeInterface
structure of @iface_type if implemented by @instance_class, %NULL
otherwise
</return>
</function>

<function name="g_type_interface_peek_parent">
<description>
Returns the corresponding #GTypeInterface structure of the parent type
of the instance type to which @g_iface belongs. This is useful when
deriving the implementation of an interface from the parent type and
then possibly overriding some methods.


</description>
<parameters>
<parameter name="g_iface">
<parameter_description> a #GTypeInterface structure
</parameter_description>
</parameter>
</parameters>
<return> the
corresponding #GTypeInterface structure of the parent type of the
instance type to which @g_iface belongs, or %NULL if the parent
type doesn't conform to the interface
</return>
</function>

<function name="g_type_interface_prerequisites">
<description>
Returns the prerequisites of an interfaces type.

Since: 2.2


</description>
<parameters>
<parameter name="interface_type">
<parameter_description> an interface type
</parameter_description>
</parameter>
<parameter name="n_prerequisites">
<parameter_description> location to return the number
of prerequisites, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a
newly-allocated zero-terminated array of #GType containing
the prerequisites of @interface_type
</return>
</function>

<function name="g_type_interfaces">
<description>
Return a newly allocated and 0-terminated array of type IDs, listing
the interface types that @type conforms to.


</description>
<parameters>
<parameter name="type">
<parameter_description> the type to list interface types for
</parameter_description>
</parameter>
<parameter name="n_interfaces">
<parameter_description> location to store the length of
the returned array, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> Newly allocated
and 0-terminated array of interface types, free with g_free()
</return>
</function>

<function name="g_type_is_a">
<description>
If @is_a_type is a derivable type, check whether @type is a
descendant of @is_a_type. If @is_a_type is an interface, check
whether @type conforms to it.


</description>
<parameters>
<parameter name="type">
<parameter_description> type to check anchestry for
</parameter_description>
</parameter>
<parameter name="is_a_type">
<parameter_description> possible anchestor of @type or interface that @type
could conform to
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is a @is_a_type
</return>
</function>

<function name="g_type_module_add_interface">
<description>
Registers an additional interface for a type, whose interface lives
in the given type plugin. If the interface was already registered
for the type in this plugin, nothing will be done.

As long as any instances of the type exist, the type plugin will
not be unloaded.

Since 2.56 if @module is %NULL this will call g_type_add_interface_static()
instead. This can be used when making a static build of the module.

</description>
<parameters>
<parameter name="module">
<parameter_description> a #GTypeModule
</parameter_description>
</parameter>
<parameter name="instance_type">
<parameter_description> type to which to add the interface.
</parameter_description>
</parameter>
<parameter name="interface_type">
<parameter_description> interface type to add
</parameter_description>
</parameter>
<parameter name="interface_info">
<parameter_description> type information structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_module_register_enum">
<description>
Looks up or registers an enumeration that is implemented with a particular
type plugin. If a type with name @type_name was previously registered,
the #GType identifier for the type is returned, otherwise the type
is newly registered, and the resulting #GType identifier returned.

As long as any instances of the type exist, the type plugin will
not be unloaded.

Since 2.56 if @module is %NULL this will call g_type_register_static()
instead. This can be used when making a static build of the module.

Since: 2.6


</description>
<parameters>
<parameter name="module">
<parameter_description> a #GTypeModule
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name for the type
</parameter_description>
</parameter>
<parameter name="const_static_values">
<parameter_description> an array of #GEnumValue structs for the
possible enumeration values. The array is
terminated by a struct with all members being
0.
</parameter_description>
</parameter>
</parameters>
<return> the new or existing type ID
</return>
</function>

<function name="g_type_module_register_flags">
<description>
Looks up or registers a flags type that is implemented with a particular
type plugin. If a type with name @type_name was previously registered,
the #GType identifier for the type is returned, otherwise the type
is newly registered, and the resulting #GType identifier returned.

As long as any instances of the type exist, the type plugin will
not be unloaded.

Since 2.56 if @module is %NULL this will call g_type_register_static()
instead. This can be used when making a static build of the module.

Since: 2.6


</description>
<parameters>
<parameter name="module">
<parameter_description> a #GTypeModule
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name for the type
</parameter_description>
</parameter>
<parameter name="const_static_values">
<parameter_description> an array of #GFlagsValue structs for the
possible flags values. The array is
terminated by a struct with all members being
0.
</parameter_description>
</parameter>
</parameters>
<return> the new or existing type ID
</return>
</function>

<function name="g_type_module_register_type">
<description>
Looks up or registers a type that is implemented with a particular
type plugin. If a type with name @type_name was previously registered,
the #GType identifier for the type is returned, otherwise the type
is newly registered, and the resulting #GType identifier returned.

When reregistering a type (typically because a module is unloaded
then reloaded, and reinitialized), @module and @parent_type must
be the same as they were previously.

As long as any instances of the type exist, the type plugin will
not be unloaded.

Since 2.56 if @module is %NULL this will call g_type_register_static()
instead. This can be used when making a static build of the module.


</description>
<parameters>
<parameter name="module">
<parameter_description> a #GTypeModule
</parameter_description>
</parameter>
<parameter name="parent_type">
<parameter_description> the type for the parent class
</parameter_description>
</parameter>
<parameter name="type_name">
<parameter_description> name for the type
</parameter_description>
</parameter>
<parameter name="type_info">
<parameter_description> type information structure
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags field providing details about the type
</parameter_description>
</parameter>
</parameters>
<return> the new or existing type ID
</return>
</function>

<function name="g_type_module_set_name">
<description>
Sets the name for a #GTypeModule 

</description>
<parameters>
<parameter name="module">
<parameter_description> a #GTypeModule.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a human-readable name to use in error messages.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_module_unuse">
<description>
Decreases the use count of a #GTypeModule by one. If the
result is zero, the module will be unloaded. (However, the
#GTypeModule will not be freed, and types associated with the
#GTypeModule are not unregistered. Once a #GTypeModule is
initialized, it must exist forever.)

</description>
<parameters>
<parameter name="module">
<parameter_description> a #GTypeModule
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_module_use">
<description>
Increases the use count of a #GTypeModule by one. If the
use count was zero before, the plugin will be loaded.
If loading the plugin fails, the use count is reset to 
its prior value. 


</description>
<parameters>
<parameter name="module">
<parameter_description> a #GTypeModule
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if the plugin needed to be loaded and
loading the plugin failed.
</return>
</function>

<function name="g_type_name">
<description>
Get the unique name that is assigned to a type ID.  Note that this
function (like all other GType API) cannot cope with invalid type
IDs. %G_TYPE_INVALID may be passed to this function, as may be any
other validly registered type ID, but randomized type IDs should
not be passed in and will most likely lead to a crash.


</description>
<parameters>
<parameter name="type">
<parameter_description> type to return name for
</parameter_description>
</parameter>
</parameters>
<return> static type name or %NULL
</return>
</function>

<function name="g_type_next_base">
<description>
Given a @leaf_type and a @root_type which is contained in its
anchestry, return the type that @root_type is the immediate parent
of. In other words, this function determines the type that is
derived directly from @root_type which is also a base class of
@leaf_type.  Given a root type and a leaf type, this function can
be used to determine the types and order in which the leaf type is
descended from the root type.


</description>
<parameters>
<parameter name="leaf_type">
<parameter_description> descendant of @root_type and the type to be returned
</parameter_description>
</parameter>
<parameter name="root_type">
<parameter_description> immediate parent of the returned type
</parameter_description>
</parameter>
</parameters>
<return> immediate child of @root_type and anchestor of @leaf_type
</return>
</function>

<function name="g_type_parent">
<description>
Return the direct parent type of the passed in type. If the passed
in type has no parent, i.e. is a fundamental type, 0 is returned.


</description>
<parameters>
<parameter name="type">
<parameter_description> the derived type
</parameter_description>
</parameter>
</parameters>
<return> the parent type
</return>
</function>

<function name="g_type_plugin_complete_interface_info">
<description>
Calls the @complete_interface_info function from the
#GTypePluginClass of @plugin. There should be no need to use this
function outside of the GObject type system itself.

</description>
<parameters>
<parameter name="plugin">
<parameter_description> the #GTypePlugin
</parameter_description>
</parameter>
<parameter name="instance_type">
<parameter_description> the #GType of an instantiable type to which the interface
is added
</parameter_description>
</parameter>
<parameter name="interface_type">
<parameter_description> the #GType of the interface whose info is completed
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> the #GInterfaceInfo to fill in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_plugin_complete_type_info">
<description>
Calls the @complete_type_info function from the #GTypePluginClass of @plugin.
There should be no need to use this function outside of the GObject 
type system itself.

</description>
<parameters>
<parameter name="plugin">
<parameter_description> a #GTypePlugin
</parameter_description>
</parameter>
<parameter name="g_type">
<parameter_description> the #GType whose info is completed
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> the #GTypeInfo struct to fill in
</parameter_description>
</parameter>
<parameter name="value_table">
<parameter_description> the #GTypeValueTable to fill in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_plugin_unuse">
<description>
Calls the @unuse_plugin function from the #GTypePluginClass of
@plugin.  There should be no need to use this function outside of
the GObject type system itself.

</description>
<parameters>
<parameter name="plugin">
<parameter_description> a #GTypePlugin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_plugin_use">
<description>
Calls the @use_plugin function from the #GTypePluginClass of
@plugin.  There should be no need to use this function outside of
the GObject type system itself.

</description>
<parameters>
<parameter name="plugin">
<parameter_description> a #GTypePlugin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_qname">
<description>
Get the corresponding quark of the type IDs name.


</description>
<parameters>
<parameter name="type">
<parameter_description> type to return quark of type name for
</parameter_description>
</parameter>
</parameters>
<return> the type names quark or 0
</return>
</function>

<function name="g_type_query">
<description>
Queries the type system for information about a specific type.
This function will fill in a user-provided structure to hold
type-specific information. If an invalid #GType is passed in, the
@type member of the #GTypeQuery is 0. All members filled into the
#GTypeQuery structure should be considered constant and have to be
left untouched.

</description>
<parameters>
<parameter name="type">
<parameter_description> #GType of a static, classed type
</parameter_description>
</parameter>
<parameter name="query">
<parameter_description> a user provided structure that is
filled in with constant values upon success
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_register_dynamic">
<description>
Registers @type_name as the name of a new dynamic type derived from
@parent_type.  The type system uses the information contained in the
#GTypePlugin structure pointed to by @plugin to manage the type and its
instances (if not abstract).  The value of @flags determines the nature
(e.g. abstract or not) of the type.


</description>
<parameters>
<parameter name="parent_type">
<parameter_description> type from which this type will be derived
</parameter_description>
</parameter>
<parameter name="type_name">
<parameter_description> 0-terminated string used as the name of the new type
</parameter_description>
</parameter>
<parameter name="plugin">
<parameter_description> #GTypePlugin structure to retrieve the #GTypeInfo from
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> bitwise combination of #GTypeFlags values
</parameter_description>
</parameter>
</parameters>
<return> the new type identifier or #G_TYPE_INVALID if registration failed
</return>
</function>

<function name="g_type_register_fundamental">
<description>
Registers @type_id as the predefined identifier and @type_name as the
name of a fundamental type. If @type_id is already registered, or a
type named @type_name is already registered, the behaviour is undefined.
The type system uses the information contained in the #GTypeInfo structure
pointed to by @info and the #GTypeFundamentalInfo structure pointed to by
@finfo to manage the type and its instances. The value of @flags determines
additional characteristics of the fundamental type.


</description>
<parameters>
<parameter name="type_id">
<parameter_description> a predefined type identifier
</parameter_description>
</parameter>
<parameter name="type_name">
<parameter_description> 0-terminated string used as the name of the new type
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> #GTypeInfo structure for this type
</parameter_description>
</parameter>
<parameter name="finfo">
<parameter_description> #GTypeFundamentalInfo structure for this type
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> bitwise combination of #GTypeFlags values
</parameter_description>
</parameter>
</parameters>
<return> the predefined type identifier
</return>
</function>

<function name="g_type_register_static">
<description>
Registers @type_name as the name of a new static type derived from
@parent_type. The type system uses the information contained in the
#GTypeInfo structure pointed to by @info to manage the type and its
instances (if not abstract). The value of @flags determines the nature
(e.g. abstract or not) of the type.


</description>
<parameters>
<parameter name="parent_type">
<parameter_description> type from which this type will be derived
</parameter_description>
</parameter>
<parameter name="type_name">
<parameter_description> 0-terminated string used as the name of the new type
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> #GTypeInfo structure for this type
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> bitwise combination of #GTypeFlags values
</parameter_description>
</parameter>
</parameters>
<return> the new type identifier
</return>
</function>

<function name="g_type_register_static_simple">
<description>
Registers @type_name as the name of a new static type derived from
@parent_type.  The value of @flags determines the nature (e.g.
abstract or not) of the type. It works by filling a #GTypeInfo
struct and calling g_type_register_static().

Since: 2.12


</description>
<parameters>
<parameter name="parent_type">
<parameter_description> type from which this type will be derived
</parameter_description>
</parameter>
<parameter name="type_name">
<parameter_description> 0-terminated string used as the name of the new type
</parameter_description>
</parameter>
<parameter name="class_size">
<parameter_description> size of the class structure (see #GTypeInfo)
</parameter_description>
</parameter>
<parameter name="class_init">
<parameter_description> location of the class initialization function (see #GTypeInfo)
</parameter_description>
</parameter>
<parameter name="instance_size">
<parameter_description> size of the instance structure (see #GTypeInfo)
</parameter_description>
</parameter>
<parameter name="instance_init">
<parameter_description> location of the instance initialization function (see #GTypeInfo)
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> bitwise combination of #GTypeFlags values
</parameter_description>
</parameter>
</parameters>
<return> the new type identifier
</return>
</function>

<function name="g_type_remove_class_cache_func">
<description>
Removes a previously installed #GTypeClassCacheFunc. The cache
maintained by @cache_func has to be empty when calling
g_type_remove_class_cache_func() to avoid leaks.

</description>
<parameters>
<parameter name="cache_data">
<parameter_description> data that was given when adding @cache_func
</parameter_description>
</parameter>
<parameter name="cache_func">
<parameter_description> a #GTypeClassCacheFunc
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_remove_interface_check">
<description>
Removes an interface check function added with
g_type_add_interface_check().

Since: 2.4

</description>
<parameters>
<parameter name="check_data">
<parameter_description> callback data passed to g_type_add_interface_check()
</parameter_description>
</parameter>
<parameter name="check_func">
<parameter_description> callback function passed to g_type_add_interface_check()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_set_qdata">
<description>
Attaches arbitrary data to a type.

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GType
</parameter_description>
</parameter>
<parameter name="quark">
<parameter_description> a #GQuark id to identify the data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_type_value_table_peek">
<description>
Returns the location of the #GTypeValueTable associated with @type.

Note that this function should only be used from source code
that implements or has internal knowledge of the implementation of
@type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GType
</parameter_description>
</parameter>
</parameters>
<return> location of the #GTypeValueTable associated with @type or
%NULL if there is no #GTypeValueTable associated with @type
</return>
</function>

<function name="g_ucs4_to_utf16">
<description>
Convert a string from UCS-4 to UTF-16. A 0 character will be
added to the result after the converted text.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UCS-4 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length (number of characters) of @str to use. 
If @len &lt; 0, then the string is nul-terminated.
</parameter_description>
</parameter>
<parameter name="items_read">
<parameter_description> location to store number of
bytes read, or %NULL. If an error occurs then the index of the invalid
input is stored here.
</parameter_description>
</parameter>
<parameter name="items_written">
<parameter_description> location to store number
of #gunichar2  written, or %NULL. The value stored here does not include
the trailing 0.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError other than
%G_CONVERT_ERROR_NO_CONVERSION may occur.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a newly allocated UTF-16 string.
This value must be freed with g_free(). If an error occurs,
%NULL will be returned and @error set.
</return>
</function>

<function name="g_ucs4_to_utf8">
<description>
Convert a string from a 32-bit fixed width representation as UCS-4.
to UTF-8. The result will be terminated with a 0 byte.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UCS-4 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length (number of characters) of @str to use. 
If @len &lt; 0, then the string is nul-terminated.
</parameter_description>
</parameter>
<parameter name="items_read">
<parameter_description> location to store number of
characters read, or %NULL.
</parameter_description>
</parameter>
<parameter name="items_written">
<parameter_description> location to store number
of bytes written or %NULL. The value here stored does not include the
trailing 0 byte.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError other than
%G_CONVERT_ERROR_NO_CONVERSION may occur.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a newly allocated UTF-8 string.
This value must be freed with g_free(). If an error occurs,
%NULL will be returned and @error set. In that case, @items_read
will be set to the position of the first invalid input character.
</return>
</function>

<function name="g_uint64_checked_add">
<description>
Performs a checked addition of @a and @b, storing the result in
@dest.

If the operation is successful, %TRUE is returned.  If the operation
overflows then the state of @dest is undefined and %FALSE is
returned.

Since: 2.48

</description>
<parameters>
<parameter name="dest">
<parameter_description> a pointer to the #guint64 destination
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> the #guint64 left operand
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> the #guint64 right operand
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was no overflow
</return>
</function>

<function name="g_uint64_checked_mul">
<description>
Performs a checked multiplication of @a and @b, storing the result in
@dest.

If the operation is successful, %TRUE is returned.  If the operation
overflows then the state of @dest is undefined and %FALSE is
returned.

Since: 2.48

</description>
<parameters>
<parameter name="dest">
<parameter_description> a pointer to the #guint64 destination
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> the #guint64 left operand
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> the #guint64 right operand
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was no overflow
</return>
</function>

<function name="g_uint_checked_add">
<description>
Performs a checked addition of @a and @b, storing the result in
@dest.

If the operation is successful, %TRUE is returned.  If the operation
overflows then the state of @dest is undefined and %FALSE is
returned.

Since: 2.48

</description>
<parameters>
<parameter name="dest">
<parameter_description> a pointer to the #guint destination
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> the #guint left operand
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> the #guint right operand
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was no overflow
</return>
</function>

<function name="g_uint_checked_mul">
<description>
Performs a checked multiplication of @a and @b, storing the result in
@dest.

If the operation is successful, %TRUE is returned.  If the operation
overflows then the state of @dest is undefined and %FALSE is
returned.

Since: 2.48

</description>
<parameters>
<parameter name="dest">
<parameter_description> a pointer to the #guint destination
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> the #guint left operand
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> the #guint right operand
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was no overflow
</return>
</function>

<function name="g_unichar_break_type">
<description>
Determines the break type of @c. @c should be a Unicode character
(to derive a character from UTF-8 encoded text, use
g_utf8_get_char()). The break type is used to find word and line
breaks (&quot;text boundaries&quot;), Pango implements the Unicode boundary
resolution algorithms and normally you would use a function such
as pango_break() instead of caring about break types yourself.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> the break type of @c
</return>
</function>

<function name="g_unichar_combining_class">
<description>
Determines the canonical combining class of a Unicode character.

Since: 2.14

</description>
<parameters>
<parameter name="uc">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> the combining class of the character

</return>
</function>

<function name="g_unichar_compose">
<description>
Performs a single composition step of the
Unicode canonical composition algorithm.

This function includes algorithmic Hangul Jamo composition,
but it is not exactly the inverse of g_unichar_decompose().
No composition can have either of @a or @b equal to zero.
To be precise, this function composes if and only if
there exists a Primary Composite P which is canonically
equivalent to the sequence &lt;@a,@b&gt;.  See the Unicode
Standard for the definition of Primary Composite.

If @a and @b do not compose a new character, @ch is set to zero.

See
[UAX#15](http://unicode.org/reports/tr15/)
for details.

Since: 2.30

</description>
<parameters>
<parameter name="a">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
<parameter name="ch">
<parameter_description> return location for the composed character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the characters could be composed

</return>
</function>

<function name="g_unichar_decompose">
<description>
Performs a single decomposition step of the
Unicode canonical decomposition algorithm.

This function does not include compatibility
decompositions. It does, however, include algorithmic
Hangul Jamo decomposition, as well as 'singleton'
decompositions which replace a character by a single
other character. In the case of singletons *@b will
be set to zero.

If @ch is not decomposable, *@a is set to @ch and *@b
is set to zero.

Note that the way Unicode decomposition pairs are
defined, it is guaranteed that @b would not decompose
further, but @a may itself decompose.  To get the full
canonical decomposition for @ch, one would need to
recursively call this function on @a.  Or use
g_unichar_fully_decompose().

See
[UAX#15](http://unicode.org/reports/tr15/)
for details.

Since: 2.30

</description>
<parameters>
<parameter name="ch">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> return location for the first component of @ch
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> return location for the second component of @ch
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the character could be decomposed

</return>
</function>

<function name="g_unichar_digit_value">
<description>
Determines the numeric value of a character as a decimal
digit.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> If @c is a decimal digit (according to
g_unichar_isdigit()), its numeric value. Otherwise, -1.
</return>
</function>

<function name="g_unichar_fully_decompose">
<description>
Computes the canonical or compatibility decomposition of a
Unicode character.  For compatibility decomposition,
pass %TRUE for @compat; for canonical decomposition
pass %FALSE for @compat.

The decomposed sequence is placed in @result.  Only up to
@result_len characters are written into @result.  The length
of the full decomposition (irrespective of @result_len) is
returned by the function.  For canonical decomposition,
currently all decompositions are of length at most 4, but
this may change in the future (very unlikely though).
At any rate, Unicode does guarantee that a buffer of length
18 is always enough for both compatibility and canonical
decompositions, so that is the size recommended. This is provided
as %G_UNICHAR_MAX_DECOMPOSITION_LENGTH.

See
[UAX#15](http://unicode.org/reports/tr15/)
for details.

Since: 2.30

</description>
<parameters>
<parameter name="ch">
<parameter_description> a Unicode character.
</parameter_description>
</parameter>
<parameter name="compat">
<parameter_description> whether perform canonical or compatibility decomposition
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> location to store decomposed result, or %NULL
</parameter_description>
</parameter>
<parameter name="result_len">
<parameter_description> length of @result
</parameter_description>
</parameter>
</parameters>
<return> the length of the full decomposition.

</return>
</function>

<function name="g_unichar_get_mirror_char">
<description>
In Unicode, some characters are &quot;mirrored&quot;. This means that their
images are mirrored horizontally in text that is laid out from right
to left. For instance, &quot;(&quot; would become its mirror image, &quot;)&quot;, in
right-to-left text.

If @ch has the Unicode mirrored property and there is another unicode
character that typically has a glyph that is the mirror image of @ch's
glyph and @mirrored_ch is set, it puts that character in the address
pointed to by @mirrored_ch.  Otherwise the original character is put.

Since: 2.4

</description>
<parameters>
<parameter name="ch">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
<parameter name="mirrored_ch">
<parameter_description> location to store the mirrored character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @ch has a mirrored character, %FALSE otherwise

</return>
</function>

<function name="g_unichar_get_script">
<description>
Looks up the #GUnicodeScript for a particular character (as defined 
by Unicode Standard Annex \#24). No check is made for @ch being a
valid Unicode character; if you pass in invalid character, the
result is undefined.

This function is equivalent to pango_script_for_unichar() and the
two are interchangeable.

Since: 2.14

</description>
<parameters>
<parameter name="ch">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> the #GUnicodeScript for the character.

</return>
</function>

<function name="g_unichar_isalnum">
<description>
Determines whether a character is alphanumeric.
Given some UTF-8 text, obtain a character value
with g_utf8_get_char().


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an alphanumeric character
</return>
</function>

<function name="g_unichar_isalpha">
<description>
Determines whether a character is alphabetic (i.e. a letter).
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an alphabetic character
</return>
</function>

<function name="g_unichar_iscntrl">
<description>
Determines whether a character is a control character.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is a control character
</return>
</function>

<function name="g_unichar_isdefined">
<description>
Determines if a given character is assigned in the Unicode
standard.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the character has an assigned value
</return>
</function>

<function name="g_unichar_isdigit">
<description>
Determines whether a character is numeric (i.e. a digit).  This
covers ASCII 0-9 and also digits in other languages/scripts.  Given
some UTF-8 text, obtain a character value with g_utf8_get_char().


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is a digit
</return>
</function>

<function name="g_unichar_isgraph">
<description>
Determines whether a character is printable and not a space
(returns %FALSE for control characters, format characters, and
spaces). g_unichar_isprint() is similar, but returns %TRUE for
spaces. Given some UTF-8 text, obtain a character value with
g_utf8_get_char().


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is printable unless it's a space
</return>
</function>

<function name="g_unichar_islower">
<description>
Determines whether a character is a lowercase letter.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is a lowercase letter
</return>
</function>

<function name="g_unichar_ismark">
<description>
Determines whether a character is a mark (non-spacing mark,
combining mark, or enclosing mark in Unicode speak).
Given some UTF-8 text, obtain a character value
with g_utf8_get_char().

Note: in most cases where isalpha characters are allowed,
ismark characters should be allowed to as they are essential
for writing most European languages as well as many non-Latin
scripts.

Since: 2.14

</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is a mark character

</return>
</function>

<function name="g_unichar_isprint">
<description>
Determines whether a character is printable.
Unlike g_unichar_isgraph(), returns %TRUE for spaces.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is printable
</return>
</function>

<function name="g_unichar_ispunct">
<description>
Determines whether a character is punctuation or a symbol.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is a punctuation or symbol character
</return>
</function>

<function name="g_unichar_isspace">
<description>
Determines whether a character is a space, tab, or line separator
(newline, carriage return, etc.).  Given some UTF-8 text, obtain a
character value with g_utf8_get_char().

(Note: don't use this to do word breaking; you have to use
Pango or equivalent to get word breaking right, the algorithm
is fairly complex.)


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is a space character
</return>
</function>

<function name="g_unichar_istitle">
<description>
Determines if a character is titlecase. Some characters in
Unicode which are composites, such as the DZ digraph
have three case variants instead of just two. The titlecase
form is used at the beginning of a word where only the
first letter is capitalized. The titlecase form of the DZ
digraph is U+01F2 LATIN CAPITAL LETTTER D WITH SMALL LETTER Z.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the character is titlecase
</return>
</function>

<function name="g_unichar_isupper">
<description>
Determines if a character is uppercase.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @c is an uppercase character
</return>
</function>

<function name="g_unichar_iswide">
<description>
Determines if a character is typically rendered in a double-width
cell.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the character is wide
</return>
</function>

<function name="g_unichar_iswide_cjk">
<description>
Determines if a character is typically rendered in a double-width
cell under legacy East Asian locales.  If a character is wide according to
g_unichar_iswide(), then it is also reported wide with this function, but
the converse is not necessarily true. See the
[Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)
for details.

If a character passes the g_unichar_iswide() test then it will also pass
this test, but not the other way around.  Note that some characters may
pass both this test and g_unichar_iszerowidth().

Since: 2.12

</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the character is wide in legacy East Asian locales

</return>
</function>

<function name="g_unichar_isxdigit">
<description>
Determines if a character is a hexidecimal digit.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the character is a hexadecimal digit
</return>
</function>

<function name="g_unichar_iszerowidth">
<description>
Determines if a given character typically takes zero width when rendered.
The return value is %TRUE for all non-spacing and enclosing marks
(e.g., combining accents), format characters, zero-width
space, but not U+00AD SOFT HYPHEN.

A typical use of this function is with one of g_unichar_iswide() or
g_unichar_iswide_cjk() to determine the number of cells a string occupies
when displayed on a grid display (terminals).  However, note that not all
terminals support zero-width rendering of zero-width marks.

Since: 2.14

</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the character has zero width

</return>
</function>

<function name="g_unichar_to_utf8">
<description>
Converts a single character to UTF-8.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character code
</parameter_description>
</parameter>
<parameter name="outbuf">
<parameter_description> output buffer, must have at
least 6 bytes of space. If %NULL, the length will be computed and
returned and nothing will be written to @outbuf.
</parameter_description>
</parameter>
</parameters>
<return> number of bytes written
</return>
</function>

<function name="g_unichar_tolower">
<description>
Converts a character to lower case.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character.
</parameter_description>
</parameter>
</parameters>
<return> the result of converting @c to lower case.
If @c is not an upperlower or titlecase character,
or has no lowercase equivalent @c is returned unchanged.
</return>
</function>

<function name="g_unichar_totitle">
<description>
Converts a character to the titlecase.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> the result of converting @c to titlecase.
If @c is not an uppercase or lowercase character,
@c is returned unchanged.
</return>
</function>

<function name="g_unichar_toupper">
<description>
Converts a character to uppercase.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> the result of converting @c to uppercase.
If @c is not an lowercase or titlecase character,
or has no upper case equivalent @c is returned unchanged.
</return>
</function>

<function name="g_unichar_type">
<description>
Classifies a Unicode character by type.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> the type of the character.
</return>
</function>

<function name="g_unichar_validate">
<description>
Checks whether @ch is a valid Unicode character. Some possible
integer values of @ch will not be valid. 0 is considered a valid
character, though it's normally a string terminator.


</description>
<parameters>
<parameter name="ch">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @ch is a valid Unicode character
</return>
</function>

<function name="g_unichar_xdigit_value">
<description>
Determines the numeric value of a character as a hexidecimal
digit.


</description>
<parameters>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> If @c is a hex digit (according to
g_unichar_isxdigit()), its numeric value. Otherwise, -1.
</return>
</function>

<function name="g_unicode_canonical_decomposition">
<description>
Computes the canonical decomposition of a Unicode character.  

Deprecated: 2.30: Use the more flexible g_unichar_fully_decompose()
instead.

</description>
<parameters>
<parameter name="ch">
<parameter_description> a Unicode character.
</parameter_description>
</parameter>
<parameter name="result_len">
<parameter_description> location to store the length of the return value.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string of Unicode characters.
@result_len is set to the resulting length of the string.

</return>
</function>

<function name="g_unicode_canonical_ordering">
<description>
Computes the canonical ordering of a string in-place.  
This rearranges decomposed characters in the string 
according to their combining classes.  See the Unicode 
manual for more information. 

</description>
<parameters>
<parameter name="string">
<parameter_description> a UCS-4 encoded string.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length of @string to use.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unicode_script_from_iso15924">
<description>
Looks up the Unicode script for @iso15924.  ISO 15924 assigns four-letter
codes to scripts.  For example, the code for Arabic is 'Arab'.
This function accepts four letter codes encoded as a @guint32 in a
big-endian fashion.  That is, the code expected for Arabic is
0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).

See
[Codes for the representation of names of scripts](http://unicode.org/iso15924/codelists.html)
for details.

Since: 2.30

</description>
<parameters>
<parameter name="iso15924">
<parameter_description> a Unicode script
</parameter_description>
</parameter>
</parameters>
<return> the Unicode script for @iso15924, or
of %G_UNICODE_SCRIPT_INVALID_CODE if @iso15924 is zero and
%G_UNICODE_SCRIPT_UNKNOWN if @iso15924 is unknown.

</return>
</function>

<function name="g_unicode_script_to_iso15924">
<description>
Looks up the ISO 15924 code for @script.  ISO 15924 assigns four-letter
codes to scripts.  For example, the code for Arabic is 'Arab'.  The
four letter codes are encoded as a @guint32 by this function in a
big-endian fashion.  That is, the code returned for Arabic is
0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).

See
[Codes for the representation of names of scripts](http://unicode.org/iso15924/codelists.html)
for details.

Since: 2.30

</description>
<parameters>
<parameter name="script">
<parameter_description> a Unicode script
</parameter_description>
</parameter>
</parameters>
<return> the ISO 15924 code for @script, encoded as an integer,
of zero if @script is %G_UNICODE_SCRIPT_INVALID_CODE or
ISO 15924 code 'Zzzz' (script code for UNKNOWN) if @script is not understood.

</return>
</function>

<function name="g_unix_fd_add">
<description>
Sets a function to be called when the IO condition, as specified by
@condition becomes true for @fd.

@function will be called when the specified IO condition becomes
%TRUE.  The function is expected to clear whatever event caused the
IO condition to become true and return %TRUE in order to be notified
when it happens again.  If @function returns %FALSE then the watch
will be cancelled.

The return value of this function can be passed to g_source_remove()
to cancel the watch at any time that it exists.

The source will never close the fd -- you must do it yourself.

Since: 2.36

</description>
<parameters>
<parameter name="fd">
<parameter_description> a file descriptor
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> IO conditions to watch for on @fd
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> a #GUnixFDSourceFunc
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source

</return>
</function>

<function name="g_unix_fd_add_full">
<description>
Sets a function to be called when the IO condition, as specified by
@condition becomes true for @fd.

This is the same as g_unix_fd_add(), except that it allows you to
specify a non-default priority and a provide a #GDestroyNotify for
@user_data.

Since: 2.36

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the source
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> IO conditions to watch for on @fd
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> a #GUnixFDSourceFunc
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the idle is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source

</return>
</function>

<function name="g_unix_fd_source_new">
<description>
Creates a #GSource to watch for a particular IO condition on a file
descriptor.

The source will never close the fd -- you must do it yourself.

Since: 2.36

</description>
<parameters>
<parameter name="fd">
<parameter_description> a file descriptor
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> IO conditions to watch for on @fd
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GSource

</return>
</function>

<function name="g_unix_open_pipe">
<description>
Similar to the UNIX pipe() call, but on modern systems like Linux
uses the pipe2() system call, which atomically creates a pipe with
the configured flags. The only supported flag currently is
%FD_CLOEXEC. If for example you want to configure %O_NONBLOCK, that
must still be done separately with fcntl().

This function does not take %O_CLOEXEC, it takes %FD_CLOEXEC as if
for fcntl(); these are different on Linux/glibc.

Since: 2.30

</description>
<parameters>
<parameter name="fds">
<parameter_description> Array of two integers
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Bitfield of file descriptor flags, as for fcntl()
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if not (and errno will be set).

</return>
</function>

<function name="g_unix_set_fd_nonblocking">
<description>
Control the non-blocking state of the given file descriptor,
according to @nonblock. On most systems this uses %O_NONBLOCK, but
on some older ones may use %O_NDELAY.

Since: 2.30

</description>
<parameters>
<parameter name="fd">
<parameter_description> A file descriptor
</parameter_description>
</parameter>
<parameter name="nonblock">
<parameter_description> If %TRUE, set the descriptor to be non-blocking
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful

</return>
</function>

<function name="g_unix_signal_add">
<description>
A convenience function for g_unix_signal_source_new(), which
attaches to the default #GMainContext.  You can remove the watch
using g_source_remove().

Since: 2.30

</description>
<parameters>
<parameter name="signum">
<parameter_description> Signal number
</parameter_description>
</parameter>
<parameter name="handler">
<parameter_description> Callback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> Data for @handler
</parameter_description>
</parameter>
</parameters>
<return> An ID (greater than 0) for the event source

</return>
</function>

<function name="g_unix_signal_add_full">
<description>
A convenience function for g_unix_signal_source_new(), which
attaches to the default #GMainContext.  You can remove the watch
using g_source_remove().

Since: 2.30

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the signal source. Typically this will be in
the range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
</parameter_description>
</parameter>
<parameter name="signum">
<parameter_description> Signal number
</parameter_description>
</parameter>
<parameter name="handler">
<parameter_description> Callback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> Data for @handler
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> #GDestroyNotify for @handler
</parameter_description>
</parameter>
</parameters>
<return> An ID (greater than 0) for the event source

</return>
</function>

<function name="g_unix_signal_source_new">
<description>
Create a #GSource that will be dispatched upon delivery of the UNIX
signal @signum.  In GLib versions before 2.36, only `SIGHUP`, `SIGINT`,
`SIGTERM` can be monitored.  In GLib 2.36, `SIGUSR1` and `SIGUSR2`
were added. In GLib 2.54, `SIGWINCH` was added.

Note that unlike the UNIX default, all sources which have created a
watch will be dispatched, regardless of which underlying thread
invoked g_unix_signal_source_new().

For example, an effective use of this function is to handle `SIGTERM`
cleanly; flushing any outstanding files, and then calling
g_main_loop_quit ().  It is not safe to do any of this a regular
UNIX signal handler; your handler may be invoked while malloc() or
another library function is running, causing reentrancy if you
attempt to use it from the handler.  None of the GLib/GObject API
is safe against this kind of reentrancy.

The interaction of this source when combined with native UNIX
functions like sigprocmask() is not defined.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed.

Since: 2.30

</description>
<parameters>
<parameter name="signum">
<parameter_description> A signal number
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GSource

</return>
</function>

<function name="g_unlink">
<description>
A wrapper for the POSIX unlink() function. The unlink() function 
deletes a name from the filesystem. If this was the last link to the 
file and no processes have it opened, the diskspace occupied by the
file is freed.

See your C library manual for more details about unlink(). Note
that on Windows, it is in general not possible to delete files that
are open to some process, or mapped into memory.

Since: 2.6

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
</parameters>
<return> 0 if the name was successfully deleted, -1 if an error 
occurred

</return>
</function>

<function name="g_unsetenv">
<description>
Removes an environment variable from the environment.

Note that on some systems, when variables are overwritten, the
memory used for the previous variables and its value isn't reclaimed.

You should be mindful of the fact that environment variable handling
in UNIX is not thread-safe, and your program may crash if one thread
calls g_unsetenv() while another thread is calling getenv(). (And note
that many functions, such as gettext(), call getenv() internally.) This
function is only safe to use at the very start of your program, before
creating any other threads (or creating objects that create worker
threads of their own).

If you need to set up the environment for a child process, you can
use g_get_environ() to get an environment array, modify that with
g_environ_setenv() and g_environ_unsetenv(), and then pass that
array directly to execvpe(), g_spawn_async(), or the like.

Since: 2.4

</description>
<parameters>
<parameter name="variable">
<parameter_description> the environment variable to remove, must
not contain '='
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_uri_escape_string">
<description>
Escapes a string for use in a URI.

Normally all characters that are not &quot;unreserved&quot; (i.e. ASCII alphanumerical
characters plus dash, dot, underscore and tilde) are escaped.
But if you specify characters in @reserved_chars_allowed they are not
escaped. This is useful for the &quot;reserved&quot; characters in the URI
specification, since those are allowed unescaped in some portions of
a URI. 

Since: 2.16

</description>
<parameters>
<parameter name="unescaped">
<parameter_description> the unescaped input string.
</parameter_description>
</parameter>
<parameter name="reserved_chars_allowed">
<parameter_description> a string of reserved characters that
are allowed to be used, or %NULL.
</parameter_description>
</parameter>
<parameter name="allow_utf8">
<parameter_description> %TRUE if the result can include UTF-8 characters.
</parameter_description>
</parameter>
</parameters>
<return> an escaped version of @unescaped. The returned string should be 
freed when no longer needed.

</return>
</function>

<function name="g_uri_list_extract_uris">
<description>
Splits an URI list conforming to the text/uri-list
mime type defined in RFC 2483 into individual URIs,
discarding any comments. The URIs are not validated.

Since: 2.6

</description>
<parameters>
<parameter name="uri_list">
<parameter_description> an URI list 
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated %NULL-terminated list
of strings holding the individual URIs. The array should be freed
with g_strfreev().

</return>
</function>

<function name="g_uri_parse_scheme">
<description>
Gets the scheme portion of a URI string. RFC 3986 decodes the scheme as:
|[
URI = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ] 
]|
Common schemes include &quot;file&quot;, &quot;http&quot;, &quot;svn+ssh&quot;, etc.

Since: 2.16

</description>
<parameters>
<parameter name="uri">
<parameter_description> a valid URI.
</parameter_description>
</parameter>
</parameters>
<return> The &quot;Scheme&quot; component of the URI, or %NULL on error. 
The returned string should be freed when no longer needed.

</return>
</function>

<function name="g_uri_unescape_segment">
<description>
Unescapes a segment of an escaped string.

If any of the characters in @illegal_characters or the character zero appears
as an escaped character in @escaped_string then that is an error and %NULL
will be returned. This is useful it you want to avoid for instance having a
slash being expanded in an escaped path element, which might confuse pathname
handling.

Since: 2.16

</description>
<parameters>
<parameter name="escaped_string">
<parameter_description> A string, may be %NULL
</parameter_description>
</parameter>
<parameter name="escaped_string_end">
<parameter_description> Pointer to end of @escaped_string, may be %NULL
</parameter_description>
</parameter>
<parameter name="illegal_characters">
<parameter_description> An optional string of illegal characters not to be allowed, may be %NULL
</parameter_description>
</parameter>
</parameters>
<return> an unescaped version of @escaped_string or %NULL on error.
The returned string should be freed when no longer needed.  As a
special case if %NULL is given for @escaped_string, this function
will return %NULL.

</return>
</function>

<function name="g_uri_unescape_string">
<description>
Unescapes a whole escaped string.

If any of the characters in @illegal_characters or the character zero appears
as an escaped character in @escaped_string then that is an error and %NULL
will be returned. This is useful it you want to avoid for instance having a
slash being expanded in an escaped path element, which might confuse pathname
handling.

Since: 2.16

</description>
<parameters>
<parameter name="escaped_string">
<parameter_description> an escaped string to be unescaped.
</parameter_description>
</parameter>
<parameter name="illegal_characters">
<parameter_description> a string of illegal characters not to be
allowed, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> an unescaped version of @escaped_string. The returned string 
should be freed when no longer needed.

</return>
</function>

<function name="g_usleep">
<description>
Pauses the current thread for the given number of microseconds.

There are 1 million microseconds per second (represented by the
#G_USEC_PER_SEC macro). g_usleep() may have limited precision,
depending on hardware and operating system; don't rely on the exact
length of the sleep.

</description>
<parameters>
<parameter name="microseconds">
<parameter_description> number of microseconds to pause
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_utf16_to_ucs4">
<description>
Convert a string from UTF-16 to UCS-4. The result will be
nul-terminated.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-16 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length (number of #gunichar2) of @str to use. 
If @len &lt; 0, then the string is nul-terminated.
</parameter_description>
</parameter>
<parameter name="items_read">
<parameter_description> location to store number of
words read, or %NULL. If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will
be returned in case @str contains a trailing partial character. If
an error occurs then the index of the invalid input is stored here.
</parameter_description>
</parameter>
<parameter name="items_written">
<parameter_description> location to store number
of characters written, or %NULL. The value stored here does not include
the trailing 0 character.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError other than
%G_CONVERT_ERROR_NO_CONVERSION may occur.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a newly allocated UCS-4 string.
This value must be freed with g_free(). If an error occurs,
%NULL will be returned and @error set.
</return>
</function>

<function name="g_utf16_to_utf8">
<description>
Convert a string from UTF-16 to UTF-8. The result will be
terminated with a 0 byte.

Note that the input is expected to be already in native endianness,
an initial byte-order-mark character is not handled specially.
g_convert() can be used to convert a byte buffer of UTF-16 data of
ambiguous endianess.

Further note that this function does not validate the result
string; it may e.g. include embedded NUL characters. The only
validation done by this function is to ensure that the input can
be correctly interpreted as UTF-16, i.e. it doesn't contain
things unpaired surrogates.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-16 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length (number of #gunichar2) of @str to use. 
If @len &lt; 0, then the string is nul-terminated.
</parameter_description>
</parameter>
<parameter name="items_read">
<parameter_description> location to store number of
words read, or %NULL. If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will
be returned in case @str contains a trailing partial character. If
an error occurs then the index of the invalid input is stored here.
</parameter_description>
</parameter>
<parameter name="items_written">
<parameter_description> location to store number
of bytes written, or %NULL. The value stored here does not include the
trailing 0 byte.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError other than
%G_CONVERT_ERROR_NO_CONVERSION may occur.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a newly allocated UTF-8 string.
This value must be freed with g_free(). If an error occurs,
%NULL will be returned and @error set.
</return>
</function>

<function name="g_utf8_casefold">
<description>
Converts a string into a form that is independent of case. The
result will not correspond to any particular case, but can be
compared for equality or ordered with the results of calling
g_utf8_casefold() on other strings.

Note that calling g_utf8_casefold() followed by g_utf8_collate() is
only an approximation to the correct linguistic case insensitive
ordering, though it is a fairly good one. Getting this exactly
right would require a more sophisticated collation function that
takes case sensitivity into account. GLib does not currently
provide such a function.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @str, in bytes, or -1 if @str is nul-terminated.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string, that is a
case independent form of @str.
</return>
</function>

<function name="g_utf8_collate">
<description>
Compares two strings for ordering using the linguistically
correct rules for the [current locale][setlocale].
When sorting a large number of strings, it will be significantly 
faster to obtain collation keys with g_utf8_collate_key() and 
compare the keys with strcmp() when sorting instead of sorting 
the original strings.


</description>
<parameters>
<parameter name="str1">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="str2">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
</parameters>
<return> &lt; 0 if @str1 compares before @str2, 
0 if they compare equal, &gt; 0 if @str1 compares after @str2.
</return>
</function>

<function name="g_utf8_collate_key">
<description>
Converts a string into a collation key that can be compared
with other collation keys produced by the same function using 
strcmp(). 

The results of comparing the collation keys of two strings 
with strcmp() will always be the same as comparing the two 
original keys with g_utf8_collate().

Note that this function depends on the [current locale][setlocale].


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @str, in bytes, or -1 if @str is nul-terminated.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string. This string should
be freed with g_free() when you are done with it.
</return>
</function>

<function name="g_utf8_collate_key_for_filename">
<description>
Converts a string into a collation key that can be compared
with other collation keys produced by the same function using strcmp(). 

In order to sort filenames correctly, this function treats the dot '.' 
as a special case. Most dictionary orderings seem to consider it
insignificant, thus producing the ordering &quot;event.c&quot; &quot;eventgenerator.c&quot;
&quot;event.h&quot; instead of &quot;event.c&quot; &quot;event.h&quot; &quot;eventgenerator.c&quot;. Also, we
would like to treat numbers intelligently so that &quot;file1&quot; &quot;file10&quot; &quot;file5&quot;
is sorted as &quot;file1&quot; &quot;file5&quot; &quot;file10&quot;.

Note that this function depends on the [current locale][setlocale].

Since: 2.8

</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @str, in bytes, or -1 if @str is nul-terminated.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string. This string should
be freed with g_free() when you are done with it.

</return>
</function>

<function name="g_utf8_find_next_char">
<description>
Finds the start of the next UTF-8 character in the string after @p.

@p does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte.

If @end is %NULL, the return value will never be %NULL: if the end of the
string is reached, a pointer to the terminating nul byte is returned. If
@end is non-%NULL, the return value will be %NULL if the end of the string
is reached.


</description>
<parameters>
<parameter name="p">
<parameter_description> a pointer to a position within a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> a pointer to the byte following the end of the string,
or %NULL to indicate that the string is nul-terminated
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the found character or %NULL if @end is
set and is reached
</return>
</function>

<function name="g_utf8_find_prev_char">
<description>
Given a position @p with a UTF-8 encoded string @str, find the start
of the previous UTF-8 character starting before @p. Returns %NULL if no
UTF-8 characters are present in @str before @p.

@p does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte.


</description>
<parameters>
<parameter name="str">
<parameter_description> pointer to the beginning of a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="p">
<parameter_description> pointer to some position within @str
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the found character or %NULL.
</return>
</function>

<function name="g_utf8_get_char">
<description>
Converts a sequence of bytes encoded as UTF-8 to a Unicode character.

If @p does not point to a valid UTF-8 encoded character, results
are undefined. If you are not sure that the bytes are complete
valid Unicode characters, you should use g_utf8_get_char_validated()
instead.


</description>
<parameters>
<parameter name="p">
<parameter_description> a pointer to Unicode character encoded as UTF-8
</parameter_description>
</parameter>
</parameters>
<return> the resulting character
</return>
</function>

<function name="g_utf8_get_char_validated">
<description>
Convert a sequence of bytes encoded as UTF-8 to a Unicode character.
This function checks for incomplete characters, for invalid characters
such as characters that are out of the range of Unicode, and for
overlong encodings of valid characters.

Note that g_utf8_get_char_validated() returns (gunichar)-2 if
@max_len is positive and any of the bytes in the first UTF-8 character
sequence are nul.


</description>
<parameters>
<parameter name="p">
<parameter_description> a pointer to Unicode character encoded as UTF-8
</parameter_description>
</parameter>
<parameter name="max_len">
<parameter_description> the maximum number of bytes to read, or -1 if @p is nul-terminated
</parameter_description>
</parameter>
</parameters>
<return> the resulting character. If @p points to a partial
sequence at the end of a string that could begin a valid 
character (or if @max_len is zero), returns (gunichar)-2; 
otherwise, if @p does not point to a valid UTF-8 encoded 
Unicode character, returns (gunichar)-1.
</return>
</function>

<function name="g_utf8_make_valid">
<description>
If the provided string is valid UTF-8, return a copy of it. If not,
return a copy in which bytes that could not be interpreted as valid Unicode
are replaced with the Unicode replacement character (U+FFFD).

For example, this is an appropriate function to use if you have received
a string that was incorrectly declared to be UTF-8, and you need a valid
UTF-8 version of it that can be logged or displayed to the user, with the
assumption that it is close enough to ASCII or UTF-8 to be mostly
readable as-is.

Since: 2.52

</description>
<parameters>
<parameter name="str">
<parameter_description> string to coerce into UTF-8
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length of @str to use, in bytes. If @len &lt; 0,
then the string is nul-terminated.
</parameter_description>
</parameter>
</parameters>
<return> a valid UTF-8 string whose content resembles @str

</return>
</function>

<function name="g_utf8_next_char">
<description>
Skips to the next character in a UTF-8 string. The string must be
valid; this macro is as fast as possible, and has no error-checking.
You would use this macro to iterate over a string character by
character. The macro returns the start of the next UTF-8 character.
Before using this macro, use g_utf8_validate() to validate strings
that may contain invalid UTF-8.

</description>
<parameters>
<parameter name="p">
<parameter_description> Pointer to the start of a valid UTF-8 character
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_utf8_normalize">
<description>
Converts a string into canonical form, standardizing
such issues as whether a character with an accent
is represented as a base character and combining
accent or as a single precomposed character. The
string has to be valid UTF-8, otherwise %NULL is
returned. You should generally call g_utf8_normalize()
before comparing two Unicode strings.

The normalization mode %G_NORMALIZE_DEFAULT only
standardizes differences that do not affect the
text content, such as the above-mentioned accent
representation. %G_NORMALIZE_ALL also standardizes
the &quot;compatibility&quot; characters in Unicode, such
as SUPERSCRIPT THREE to the standard forms
(in this case DIGIT THREE). Formatting information
may be lost but for most text operations such
characters should be considered the same.

%G_NORMALIZE_DEFAULT_COMPOSE and %G_NORMALIZE_ALL_COMPOSE
are like %G_NORMALIZE_DEFAULT and %G_NORMALIZE_ALL,
but returned a result with composed forms rather
than a maximally decomposed form. This is often
useful if you intend to convert the string to
a legacy encoding or pass it to a system with
less capable Unicode handling.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @str, in bytes, or -1 if @str is nul-terminated.
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the type of normalization to perform.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string, that is the
normalized form of @str, or %NULL if @str is not
valid UTF-8.
</return>
</function>

<function name="g_utf8_offset_to_pointer">
<description>
Converts from an integer character offset to a pointer to a position
within the string.

Since 2.10, this function allows to pass a negative @offset to
step backwards. It is usually worth stepping backwards from the end
instead of forwards if @offset is in the last fourth of the string,
since moving forward is about 3 times faster than moving backward.

Note that this function doesn't abort when reaching the end of @str.
Therefore you should be sure that @offset is within string boundaries
before calling that function. Call g_utf8_strlen() when unsure.
This limitation exists as this function is called frequently during
text rendering and therefore has to be as fast as possible.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> a character offset within @str
</parameter_description>
</parameter>
</parameters>
<return> the resulting pointer
</return>
</function>

<function name="g_utf8_pointer_to_offset">
<description>
Converts from a pointer to position within a string to a integer
character offset.

Since 2.10, this function allows @pos to be before @str, and returns
a negative offset in this case.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> a pointer to a position within @str
</parameter_description>
</parameter>
</parameters>
<return> the resulting character offset
</return>
</function>

<function name="g_utf8_prev_char">
<description>
Finds the previous UTF-8 character in the string before @p.

@p does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte. If @p might be the first
character of the string, you must use g_utf8_find_prev_char() instead.


</description>
<parameters>
<parameter name="p">
<parameter_description> a pointer to a position within a UTF-8 encoded string
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the found character
</return>
</function>

<function name="g_utf8_strchr">
<description>
Finds the leftmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to @len bytes.
If @len is -1, allow unbounded search.


</description>
<parameters>
<parameter name="p">
<parameter_description> a nul-terminated UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length of @p
</parameter_description>
</parameter>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %NULL if the string does not contain the character, 
otherwise, a pointer to the start of the leftmost occurrence
of the character in the string.
</return>
</function>

<function name="g_utf8_strdown">
<description>
Converts all Unicode characters in the string that have a case
to lowercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string changing.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @str, in bytes, or -1 if @str is nul-terminated.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string, with all characters
converted to lowercase.  
</return>
</function>

<function name="g_utf8_strlen">
<description>
Computes the length of the string in characters, not including
the terminating nul character. If the @max'th byte falls in the
middle of a character, the last (partial) character is not counted.


</description>
<parameters>
<parameter name="p">
<parameter_description> pointer to the start of a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the maximum number of bytes to examine. If @max
is less than 0, then the string is assumed to be
nul-terminated. If @max is 0, @p will not be examined and
may be %NULL. If @max is greater than 0, up to @max
bytes are examined
</parameter_description>
</parameter>
</parameters>
<return> the length of the string in characters
</return>
</function>

<function name="g_utf8_strncpy">
<description>
Like the standard C strncpy() function, but copies a given number
of characters instead of a given number of bytes. The @src string
must be valid UTF-8 encoded text. (Use g_utf8_validate() on all
text before trying to use UTF-8 utility functions with it.)

Note you must ensure @dest is at least 4 * @n to fit the
largest possible UTF-8 characters


</description>
<parameters>
<parameter name="dest">
<parameter_description> buffer to fill with characters from @src
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> character count
</parameter_description>
</parameter>
</parameters>
<return> @dest
</return>
</function>

<function name="g_utf8_strrchr">
<description>
Find the rightmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to @len bytes.
If @len is -1, allow unbounded search.


</description>
<parameters>
<parameter name="p">
<parameter_description> a nul-terminated UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length of @p
</parameter_description>
</parameter>
<parameter name="c">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return> %NULL if the string does not contain the character, 
otherwise, a pointer to the start of the rightmost occurrence
of the character in the string.
</return>
</function>

<function name="g_utf8_strreverse">
<description>
Reverses a UTF-8 string. @str must be valid UTF-8 encoded text. 
(Use g_utf8_validate() on all text before trying to use UTF-8 
utility functions with it.)

This function is intended for programmatic uses of reversed strings.
It pays no attention to decomposed characters, combining marks, byte 
order marks, directional indicators (LRM, LRO, etc) and similar 
characters which might need special handling when reversing a string 
for display purposes.

Note that unlike g_strreverse(), this function returns
newly-allocated memory, which should be freed with g_free() when
no longer needed. 

Since: 2.2

</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length of @str to use, in bytes. If @len &lt; 0,
then the string is nul-terminated.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string which is the reverse of @str

</return>
</function>

<function name="g_utf8_strup">
<description>
Converts all Unicode characters in the string that have a case
to uppercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string increasing. (For instance, the
German ess-zet will be changed to SS.)


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @str, in bytes, or -1 if @str is nul-terminated.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string, with all characters
converted to uppercase.  
</return>
</function>

<function name="g_utf8_substring">
<description>
Copies a substring out of a UTF-8 encoded string.
The substring will contain @end_pos - @start_pos characters.

Since: 2.30

</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> a character offset within @str
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> another character offset within @str
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated copy of the requested
substring. Free with g_free() when no longer needed.

</return>
</function>

<function name="g_utf8_to_ucs4">
<description>
Convert a string from UTF-8 to a 32-bit fixed width
representation as UCS-4. A trailing 0 character will be added to the
string after the converted text.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length of @str to use, in bytes. If @len &lt; 0,
then the string is nul-terminated.
</parameter_description>
</parameter>
<parameter name="items_read">
<parameter_description> location to store number of
bytes read, or %NULL.
If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will be
returned in case @str contains a trailing partial
character. If an error occurs then the index of the
invalid input is stored here.
</parameter_description>
</parameter>
<parameter name="items_written">
<parameter_description> location to store number
of characters written or %NULL. The value here stored does not include
the trailing 0 character.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError other than
%G_CONVERT_ERROR_NO_CONVERSION may occur.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a newly allocated UCS-4 string.
This value must be freed with g_free(). If an error occurs,
%NULL will be returned and @error set.
</return>
</function>

<function name="g_utf8_to_ucs4_fast">
<description>
Convert a string from UTF-8 to a 32-bit fixed width
representation as UCS-4, assuming valid UTF-8 input.
This function is roughly twice as fast as g_utf8_to_ucs4()
but does no error checking on the input. A trailing 0 character
will be added to the string after the converted text.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length of @str to use, in bytes. If @len &lt; 0,
then the string is nul-terminated.
</parameter_description>
</parameter>
<parameter name="items_written">
<parameter_description> location to store the
number of characters in the result, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a newly allocated UCS-4 string.
This value must be freed with g_free().
</return>
</function>

<function name="g_utf8_to_utf16">
<description>
Convert a string from UTF-8 to UTF-16. A 0 character will be
added to the result after the converted text.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 encoded string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the maximum length (number of bytes) of @str to use.
If @len &lt; 0, then the string is nul-terminated.
</parameter_description>
</parameter>
<parameter name="items_read">
<parameter_description> location to store number of
bytes read, or %NULL. If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will
be returned in case @str contains a trailing partial character. If
an error occurs then the index of the invalid input is stored here.
</parameter_description>
</parameter>
<parameter name="items_written">
<parameter_description> location to store number
of #gunichar2 written, or %NULL. The value stored here does not include
the trailing 0.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occurring, or %NULL to ignore
errors. Any of the errors in #GConvertError other than
%G_CONVERT_ERROR_NO_CONVERSION may occur.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a newly allocated UTF-16 string.
This value must be freed with g_free(). If an error occurs,
%NULL will be returned and @error set.
</return>
</function>

<function name="g_utf8_validate">
<description>
Validates UTF-8 encoded text. @str is the text to validate;
if @str is nul-terminated, then @max_len can be -1, otherwise
@max_len should be the number of bytes to validate.
If @end is non-%NULL, then the end of the valid range
will be stored there (i.e. the start of the first invalid 
character if some bytes were invalid, or the end of the text 
being validated otherwise).

Note that g_utf8_validate() returns %FALSE if @max_len is 
positive and any of the @max_len bytes are nul.


</description>
<parameters>
<parameter name="str">
<parameter_description> a pointer to character data
</parameter_description>
</parameter>
<parameter name="max_len">
<parameter_description> max bytes to validate, or -1 to go until NUL
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> return location for end of valid data
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the text was valid UTF-8
</return>
</function>

<function name="g_utime">
<description>
A wrapper for the POSIX utime() function. The utime() function
sets the access and modification timestamps of a file.

See your C library manual for more details about how utime() works
on your system.

Since: 2.18

</description>
<parameters>
<parameter name="filename">
<parameter_description> a pathname in the GLib file name encoding
(UTF-8 on Windows)
</parameter_description>
</parameter>
<parameter name="utb">
<parameter_description> a pointer to a struct utimbuf.
</parameter_description>
</parameter>
</parameters>
<return> 0 if the operation was successful, -1 if an error occurred

</return>
</function>

<function name="g_uuid_string_is_valid">
<description>
Parses the string @str and verify if it is a UUID.

The function accepts the following syntax:

- simple forms (e.g. `f81d4fae-7dec-11d0-a765-00a0c91e6bf6`)

Note that hyphens are required within the UUID string itself,
as per the aforementioned RFC.

Since: 2.52

</description>
<parameters>
<parameter name="str">
<parameter_description> a string representing a UUID
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @str is a valid UUID, %FALSE otherwise.
</return>
</function>

<function name="g_uuid_string_random">
<description>
Generates a random UUID (RFC 4122 version 4) as a string.

Since: 2.52

</description>
<parameters>
</parameters>
<return> A string that should be freed with g_free().
</return>
</function>

<function name="g_value_array_append">
<description>
Insert a copy of @value as last element of @value_array. If @value is
%NULL, an uninitialized value is appended.

Deprecated: 2.32: Use #GArray and g_array_append_val() instead.

</description>
<parameters>
<parameter name="value_array">
<parameter_description> #GValueArray to add an element to
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> #GValue to copy into #GValueArray, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GValueArray passed in as @value_array

</return>
</function>

<function name="g_value_array_copy">
<description>
Construct an exact copy of a #GValueArray by duplicating all its
contents.

Deprecated: 2.32: Use #GArray and g_array_ref() instead.

</description>
<parameters>
<parameter name="value_array">
<parameter_description> #GValueArray to copy
</parameter_description>
</parameter>
</parameters>
<return> Newly allocated copy of #GValueArray

</return>
</function>

<function name="g_value_array_free">
<description>
Free a #GValueArray including its contents.

Deprecated: 2.32: Use #GArray and g_array_unref() instead.

</description>
<parameters>
<parameter name="value_array">
<parameter_description> #GValueArray to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_array_get_nth">
<description>
Return a pointer to the value at @index_ containd in @value_array.

Deprecated: 2.32: Use g_array_index() instead.

</description>
<parameters>
<parameter name="value_array">
<parameter_description> #GValueArray to get a value from
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> index of the value of interest
</parameter_description>
</parameter>
</parameters>
<return> pointer to a value at @index_ in @value_array

</return>
</function>

<function name="g_value_array_insert">
<description>
Insert a copy of @value at specified position into @value_array. If @value
is %NULL, an uninitialized value is inserted.

Deprecated: 2.32: Use #GArray and g_array_insert_val() instead.

</description>
<parameters>
<parameter name="value_array">
<parameter_description> #GValueArray to add an element to
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> insertion position, must be &lt;= value_array-&gt;;n_values
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> #GValue to copy into #GValueArray, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GValueArray passed in as @value_array

</return>
</function>

<function name="g_value_array_new">
<description>
Allocate and initialize a new #GValueArray, optionally preserve space
for @n_prealloced elements. New arrays always contain 0 elements,
regardless of the value of @n_prealloced.

Deprecated: 2.32: Use #GArray and g_array_sized_new() instead.

</description>
<parameters>
<parameter name="n_prealloced">
<parameter_description> number of values to preallocate space for
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GValueArray with 0 values

</return>
</function>

<function name="g_value_array_prepend">
<description>
Insert a copy of @value as first element of @value_array. If @value is
%NULL, an uninitialized value is prepended.


Deprecated: 2.32: Use #GArray and g_array_prepend_val() instead.

</description>
<parameters>
<parameter name="value_array">
<parameter_description> #GValueArray to add an element to
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> #GValue to copy into #GValueArray, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GValueArray passed in as @value_array

</return>
</function>

<function name="g_value_array_remove">
<description>
Remove the value at position @index_ from @value_array.

Deprecated: 2.32: Use #GArray and g_array_remove_index() instead.

</description>
<parameters>
<parameter name="value_array">
<parameter_description> #GValueArray to remove an element from
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> position of value to remove, which must be less than
@value_array-&gt;n_values
</parameter_description>
</parameter>
</parameters>
<return> the #GValueArray passed in as @value_array

</return>
</function>

<function name="g_value_array_sort">
<description>
Sort @value_array using @compare_func to compare the elements according to
the semantics of #GCompareFunc.

The current implementation uses the same sorting algorithm as standard
C qsort() function.

Deprecated: 2.32: Use #GArray and g_array_sort().

</description>
<parameters>
<parameter name="value_array">
<parameter_description> #GValueArray to sort
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> function to compare elements
</parameter_description>
</parameter>
</parameters>
<return> the #GValueArray passed in as @value_array

</return>
</function>

<function name="g_value_array_sort_with_data">
<description>
Sort @value_array using @compare_func to compare the elements according
to the semantics of #GCompareDataFunc.

The current implementation uses the same sorting algorithm as standard
C qsort() function.

Deprecated: 2.32: Use #GArray and g_array_sort_with_data().

</description>
<parameters>
<parameter name="value_array">
<parameter_description> #GValueArray to sort
</parameter_description>
</parameter>
<parameter name="compare_func">
<parameter_description> function to compare elements
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> extra data argument provided for @compare_func
</parameter_description>
</parameter>
</parameters>
<return> the #GValueArray passed in as @value_array

</return>
</function>

<function name="g_value_copy">
<description>
Copies the value of @src_value into @dest_value.

</description>
<parameters>
<parameter name="src_value">
<parameter_description> An initialized #GValue structure.
</parameter_description>
</parameter>
<parameter name="dest_value">
<parameter_description> An initialized #GValue structure of the same type as @src_value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_dup_boxed">
<description>
Get the contents of a %G_TYPE_BOXED derived #GValue.  Upon getting,
the boxed value is duplicated and needs to be later freed with
g_boxed_free(), e.g. like: g_boxed_free (G_VALUE_TYPE (@value),
return_value);


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_BOXED derived type
</parameter_description>
</parameter>
</parameters>
<return> boxed contents of @value
</return>
</function>

<function name="g_value_dup_object">
<description>
Get the contents of a %G_TYPE_OBJECT derived #GValue, increasing
its reference count. If the contents of the #GValue are %NULL, then
%NULL will be returned.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue whose type is derived from %G_TYPE_OBJECT
</parameter_description>
</parameter>
</parameters>
<return> object content of @value,
should be unreferenced when no longer needed.
</return>
</function>

<function name="g_value_dup_param">
<description>
Get the contents of a %G_TYPE_PARAM #GValue, increasing its
reference count.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue whose type is derived from %G_TYPE_PARAM
</parameter_description>
</parameter>
</parameters>
<return> #GParamSpec content of @value, should be unreferenced when
no longer needed.
</return>
</function>

<function name="g_value_dup_string">
<description>
Get a copy the contents of a %G_TYPE_STRING #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_STRING
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated copy of the string content of @value
</return>
</function>

<function name="g_value_dup_variant">
<description>
Get the contents of a variant #GValue, increasing its refcount. The returned
#GVariant is never floating.

Since: 2.26

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_VARIANT
</parameter_description>
</parameter>
</parameters>
<return> variant contents of @value (may be %NULL);
should be unreffed using g_variant_unref() when no longer needed

</return>
</function>

<function name="g_value_fits_pointer">
<description>
Determines if @value will fit inside the size of a pointer value.
This is an internal function introduced mainly for C marshallers.


</description>
<parameters>
<parameter name="value">
<parameter_description> An initialized #GValue structure.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @value will fit inside a pointer value.
</return>
</function>

<function name="g_value_get_boolean">
<description>
Get the contents of a %G_TYPE_BOOLEAN #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_BOOLEAN
</parameter_description>
</parameter>
</parameters>
<return> boolean contents of @value
</return>
</function>

<function name="g_value_get_boxed">
<description>
Get the contents of a %G_TYPE_BOXED derived #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_BOXED derived type
</parameter_description>
</parameter>
</parameters>
<return> boxed contents of @value
</return>
</function>

<function name="g_value_get_char">
<description>
Do not use this function; it is broken on platforms where the %char
type is unsigned, such as ARM and PowerPC.  See g_value_get_schar().

Get the contents of a %G_TYPE_CHAR #GValue.  

Deprecated: 2.32: This function's return type is broken, see g_value_get_schar()

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_CHAR
</parameter_description>
</parameter>
</parameters>
<return> character contents of @value
</return>
</function>

<function name="g_value_get_double">
<description>
Get the contents of a %G_TYPE_DOUBLE #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_DOUBLE
</parameter_description>
</parameter>
</parameters>
<return> double contents of @value
</return>
</function>

<function name="g_value_get_enum">
<description>
Get the contents of a %G_TYPE_ENUM #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue whose type is derived from %G_TYPE_ENUM
</parameter_description>
</parameter>
</parameters>
<return> enum contents of @value
</return>
</function>

<function name="g_value_get_flags">
<description>
Get the contents of a %G_TYPE_FLAGS #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue whose type is derived from %G_TYPE_FLAGS
</parameter_description>
</parameter>
</parameters>
<return> flags contents of @value
</return>
</function>

<function name="g_value_get_float">
<description>
Get the contents of a %G_TYPE_FLOAT #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_FLOAT
</parameter_description>
</parameter>
</parameters>
<return> float contents of @value
</return>
</function>

<function name="g_value_get_gtype">
<description>
Get the contents of a %G_TYPE_GTYPE #GValue.

Since: 2.12


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_GTYPE
</parameter_description>
</parameter>
</parameters>
<return> the #GType stored in @value
</return>
</function>

<function name="g_value_get_int">
<description>
Get the contents of a %G_TYPE_INT #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_INT
</parameter_description>
</parameter>
</parameters>
<return> integer contents of @value
</return>
</function>

<function name="g_value_get_int64">
<description>
Get the contents of a %G_TYPE_INT64 #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_INT64
</parameter_description>
</parameter>
</parameters>
<return> 64bit integer contents of @value
</return>
</function>

<function name="g_value_get_long">
<description>
Get the contents of a %G_TYPE_LONG #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_LONG
</parameter_description>
</parameter>
</parameters>
<return> long integer contents of @value
</return>
</function>

<function name="g_value_get_object">
<description>
Get the contents of a %G_TYPE_OBJECT derived #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_OBJECT derived type
</parameter_description>
</parameter>
</parameters>
<return> object contents of @value
</return>
</function>

<function name="g_value_get_param">
<description>
Get the contents of a %G_TYPE_PARAM #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue whose type is derived from %G_TYPE_PARAM
</parameter_description>
</parameter>
</parameters>
<return> #GParamSpec content of @value
</return>
</function>

<function name="g_value_get_pointer">
<description>
Get the contents of a pointer #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_POINTER
</parameter_description>
</parameter>
</parameters>
<return> pointer contents of @value
</return>
</function>

<function name="g_value_get_schar">
<description>
Get the contents of a %G_TYPE_CHAR #GValue.

Since: 2.32

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_CHAR
</parameter_description>
</parameter>
</parameters>
<return> signed 8 bit integer contents of @value
</return>
</function>

<function name="g_value_get_string">
<description>
Get the contents of a %G_TYPE_STRING #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_STRING
</parameter_description>
</parameter>
</parameters>
<return> string content of @value
</return>
</function>

<function name="g_value_get_uchar">
<description>
Get the contents of a %G_TYPE_UCHAR #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_UCHAR
</parameter_description>
</parameter>
</parameters>
<return> unsigned character contents of @value
</return>
</function>

<function name="g_value_get_uint">
<description>
Get the contents of a %G_TYPE_UINT #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_UINT
</parameter_description>
</parameter>
</parameters>
<return> unsigned integer contents of @value
</return>
</function>

<function name="g_value_get_uint64">
<description>
Get the contents of a %G_TYPE_UINT64 #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_UINT64
</parameter_description>
</parameter>
</parameters>
<return> unsigned 64bit integer contents of @value
</return>
</function>

<function name="g_value_get_ulong">
<description>
Get the contents of a %G_TYPE_ULONG #GValue.


</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_ULONG
</parameter_description>
</parameter>
</parameters>
<return> unsigned long integer contents of @value
</return>
</function>

<function name="g_value_get_variant">
<description>
Get the contents of a variant #GValue.

Since: 2.26

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_VARIANT
</parameter_description>
</parameter>
</parameters>
<return> variant contents of @value (may be %NULL)

</return>
</function>

<function name="g_value_init">
<description>
Initializes @value with the default value of @type.


</description>
<parameters>
<parameter name="value">
<parameter_description> A zero-filled (uninitialized) #GValue structure.
</parameter_description>
</parameter>
<parameter name="g_type">
<parameter_description> Type the #GValue should hold values of.
</parameter_description>
</parameter>
</parameters>
<return> the #GValue structure that has been passed in
</return>
</function>

<function name="g_value_init_from_instance">
<description>
Initializes and sets @value from an instantiatable type via the
value_table's collect_value() function.

Note: The @value will be initialised with the exact type of
@instance.  If you wish to set the @value's type to a different GType
(such as a parent class GType), you need to manually call
g_value_init() and g_value_set_instance().

Since: 2.42

</description>
<parameters>
<parameter name="value">
<parameter_description> An uninitialized #GValue structure.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_peek_pointer">
<description>
Returns the value contents as pointer. This function asserts that
g_value_fits_pointer() returned %TRUE for the passed in value.
This is an internal function introduced mainly for C marshallers.


</description>
<parameters>
<parameter name="value">
<parameter_description> An initialized #GValue structure
</parameter_description>
</parameter>
</parameters>
<return> the value contents as pointer
</return>
</function>

<function name="g_value_register_transform_func">
<description>
Registers a value transformation function for use in g_value_transform().
A previously registered transformation function for @src_type and @dest_type
will be replaced.

</description>
<parameters>
<parameter name="src_type">
<parameter_description> Source type.
</parameter_description>
</parameter>
<parameter name="dest_type">
<parameter_description> Target type.
</parameter_description>
</parameter>
<parameter name="transform_func">
<parameter_description> a function which transforms values of type @src_type
into value of type @dest_type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_reset">
<description>
Clears the current value in @value and resets it to the default value
(as if the value had just been initialized).


</description>
<parameters>
<parameter name="value">
<parameter_description> An initialized #GValue structure.
</parameter_description>
</parameter>
</parameters>
<return> the #GValue structure that has been passed in
</return>
</function>

<function name="g_value_set_boolean">
<description>
Set the contents of a %G_TYPE_BOOLEAN #GValue to @v_boolean.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_BOOLEAN
</parameter_description>
</parameter>
<parameter name="v_boolean">
<parameter_description> boolean value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_boxed">
<description>
Set the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_BOXED derived type
</parameter_description>
</parameter>
<parameter name="v_boxed">
<parameter_description> boxed value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_boxed_take_ownership">
<description>
This is an internal function introduced mainly for C marshallers.

Deprecated: 2.4: Use g_value_take_boxed() instead.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_BOXED derived type
</parameter_description>
</parameter>
<parameter name="v_boxed">
<parameter_description> duplicated unowned boxed value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_char">
<description>
Set the contents of a %G_TYPE_CHAR #GValue to @v_char.
Deprecated: 2.32: This function's input type is broken, see g_value_set_schar()

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_CHAR
</parameter_description>
</parameter>
<parameter name="v_char">
<parameter_description> character value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_double">
<description>
Set the contents of a %G_TYPE_DOUBLE #GValue to @v_double.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_DOUBLE
</parameter_description>
</parameter>
<parameter name="v_double">
<parameter_description> double value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_enum">
<description>
Set the contents of a %G_TYPE_ENUM #GValue to @v_enum.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue whose type is derived from %G_TYPE_ENUM
</parameter_description>
</parameter>
<parameter name="v_enum">
<parameter_description> enum value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_flags">
<description>
Set the contents of a %G_TYPE_FLAGS #GValue to @v_flags.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue whose type is derived from %G_TYPE_FLAGS
</parameter_description>
</parameter>
<parameter name="v_flags">
<parameter_description> flags value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_float">
<description>
Set the contents of a %G_TYPE_FLOAT #GValue to @v_float.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_FLOAT
</parameter_description>
</parameter>
<parameter name="v_float">
<parameter_description> float value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_gtype">
<description>
Set the contents of a %G_TYPE_GTYPE #GValue to @v_gtype.

Since: 2.12

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_GTYPE
</parameter_description>
</parameter>
<parameter name="v_gtype">
<parameter_description> #GType to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_instance">
<description>
Sets @value from an instantiatable type via the
value_table's collect_value() function.

</description>
<parameters>
<parameter name="value">
<parameter_description> An initialized #GValue structure.
</parameter_description>
</parameter>
<parameter name="instance">
<parameter_description> the instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_int">
<description>
Set the contents of a %G_TYPE_INT #GValue to @v_int.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_INT
</parameter_description>
</parameter>
<parameter name="v_int">
<parameter_description> integer value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_int64">
<description>
Set the contents of a %G_TYPE_INT64 #GValue to @v_int64.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_INT64
</parameter_description>
</parameter>
<parameter name="v_int64">
<parameter_description> 64bit integer value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_long">
<description>
Set the contents of a %G_TYPE_LONG #GValue to @v_long.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_LONG
</parameter_description>
</parameter>
<parameter name="v_long">
<parameter_description> long integer value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_object">
<description>
Set the contents of a %G_TYPE_OBJECT derived #GValue to @v_object.

g_value_set_object() increases the reference count of @v_object
(the #GValue holds a reference to @v_object).  If you do not wish
to increase the reference count of the object (i.e. you wish to
pass your current reference to the #GValue because you no longer
need it), use g_value_take_object() instead.

It is important that your #GValue holds a reference to @v_object (either its
own, or one it has taken) to ensure that the object won't be destroyed while
the #GValue still exists).

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_OBJECT derived type
</parameter_description>
</parameter>
<parameter name="v_object">
<parameter_description> object value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_object_take_ownership">
<description>
This is an internal function introduced mainly for C marshallers.

Deprecated: 2.4: Use g_value_take_object() instead.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_OBJECT derived type
</parameter_description>
</parameter>
<parameter name="v_object">
<parameter_description> object value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_param">
<description>
Set the contents of a %G_TYPE_PARAM #GValue to @param.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_PARAM
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> the #GParamSpec to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_param_take_ownership">
<description>
This is an internal function introduced mainly for C marshallers.

Deprecated: 2.4: Use g_value_take_param() instead.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_PARAM
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> the #GParamSpec to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_pointer">
<description>
Set the contents of a pointer #GValue to @v_pointer.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_POINTER
</parameter_description>
</parameter>
<parameter name="v_pointer">
<parameter_description> pointer value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_schar">
<description>
Set the contents of a %G_TYPE_CHAR #GValue to @v_char.

Since: 2.32

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_CHAR
</parameter_description>
</parameter>
<parameter name="v_char">
<parameter_description> signed 8 bit integer to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_static_boxed">
<description>
Set the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed.
The boxed value is assumed to be static, and is thus not duplicated
when setting the #GValue.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_BOXED derived type
</parameter_description>
</parameter>
<parameter name="v_boxed">
<parameter_description> static boxed value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_static_string">
<description>
Set the contents of a %G_TYPE_STRING #GValue to @v_string.
The string is assumed to be static, and is thus not duplicated
when setting the #GValue.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_STRING
</parameter_description>
</parameter>
<parameter name="v_string">
<parameter_description> static string to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_string">
<description>
Set the contents of a %G_TYPE_STRING #GValue to @v_string.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_STRING
</parameter_description>
</parameter>
<parameter name="v_string">
<parameter_description> caller-owned string to be duplicated for the #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_string_take_ownership">
<description>
This is an internal function introduced mainly for C marshallers.

Deprecated: 2.4: Use g_value_take_string() instead.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_STRING
</parameter_description>
</parameter>
<parameter name="v_string">
<parameter_description> duplicated unowned string to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_uchar">
<description>
Set the contents of a %G_TYPE_UCHAR #GValue to @v_uchar.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_UCHAR
</parameter_description>
</parameter>
<parameter name="v_uchar">
<parameter_description> unsigned character value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_uint">
<description>
Set the contents of a %G_TYPE_UINT #GValue to @v_uint.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_UINT
</parameter_description>
</parameter>
<parameter name="v_uint">
<parameter_description> unsigned integer value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_uint64">
<description>
Set the contents of a %G_TYPE_UINT64 #GValue to @v_uint64.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_UINT64
</parameter_description>
</parameter>
<parameter name="v_uint64">
<parameter_description> unsigned 64bit integer value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_ulong">
<description>
Set the contents of a %G_TYPE_ULONG #GValue to @v_ulong.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_ULONG
</parameter_description>
</parameter>
<parameter name="v_ulong">
<parameter_description> unsigned long integer value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_set_variant">
<description>
Set the contents of a variant #GValue to @variant.
If the variant is floating, it is consumed.

Since: 2.26

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_VARIANT
</parameter_description>
</parameter>
<parameter name="variant">
<parameter_description> a #GVariant, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_take_boxed">
<description>
Sets the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed
and takes over the ownership of the callers reference to @v_boxed;
the caller doesn't have to unref it any more.

Since: 2.4

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_BOXED derived type
</parameter_description>
</parameter>
<parameter name="v_boxed">
<parameter_description> duplicated unowned boxed value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_take_object">
<description>
Sets the contents of a %G_TYPE_OBJECT derived #GValue to @v_object
and takes over the ownership of the callers reference to @v_object;
the caller doesn't have to unref it any more (i.e. the reference
count of the object is not increased).

If you want the #GValue to hold its own reference to @v_object, use
g_value_set_object() instead.

Since: 2.4

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %G_TYPE_OBJECT derived type
</parameter_description>
</parameter>
<parameter name="v_object">
<parameter_description> object value to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_take_param">
<description>
Sets the contents of a %G_TYPE_PARAM #GValue to @param and takes
over the ownership of the callers reference to @param; the caller
doesn't have to unref it any more.

Since: 2.4

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_PARAM
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> the #GParamSpec to be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_take_string">
<description>
Sets the contents of a %G_TYPE_STRING #GValue to @v_string.

Since: 2.4

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_STRING
</parameter_description>
</parameter>
<parameter name="v_string">
<parameter_description> string to take ownership of
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_take_variant">
<description>
Set the contents of a variant #GValue to @variant, and takes over
the ownership of the caller's reference to @variant;
the caller doesn't have to unref it any more (i.e. the reference
count of the variant is not increased).

If @variant was floating then its floating reference is converted to
a hard reference.

If you want the #GValue to hold its own reference to @variant, use
g_value_set_variant() instead.

This is an internal function introduced mainly for C marshallers.

Since: 2.26

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of type %G_TYPE_VARIANT
</parameter_description>
</parameter>
<parameter name="variant">
<parameter_description> a #GVariant, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_value_transform">
<description>
Tries to cast the contents of @src_value into a type appropriate
to store in @dest_value, e.g. to transform a %G_TYPE_INT value
into a %G_TYPE_FLOAT value. Performing transformations between
value types might incur precision lossage. Especially
transformations into strings might reveal seemingly arbitrary
results and shouldn't be relied upon for production code (such
as rcfile value or object property serialization).


</description>
<parameters>
<parameter name="src_value">
<parameter_description> Source value.
</parameter_description>
</parameter>
<parameter name="dest_value">
<parameter_description> Target value.
</parameter_description>
</parameter>
</parameters>
<return> Whether a transformation rule was found and could be applied.
Upon failing transformations, @dest_value is left untouched.
</return>
</function>

<function name="g_value_type_compatible">
<description>
Returns whether a #GValue of type @src_type can be copied into
a #GValue of type @dest_type.


</description>
<parameters>
<parameter name="src_type">
<parameter_description> source type to be copied.
</parameter_description>
</parameter>
<parameter name="dest_type">
<parameter_description> destination type for copying.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if g_value_copy() is possible with @src_type and @dest_type.
</return>
</function>

<function name="g_value_type_transformable">
<description>
Check whether g_value_transform() is able to transform values
of type @src_type into values of type @dest_type. Note that for
the types to be transformable, they must be compatible or a
transformation function must be registered.


</description>
<parameters>
<parameter name="src_type">
<parameter_description> Source type.
</parameter_description>
</parameter>
<parameter name="dest_type">
<parameter_description> Target type.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the transformation is possible, %FALSE otherwise.
</return>
</function>

<function name="g_value_unset">
<description>
Clears the current value in @value (if any) and &quot;unsets&quot; the type,
this releases all resources associated with this GValue. An unset
value is the same as an uninitialized (zero-filled) #GValue
structure.

</description>
<parameters>
<parameter name="value">
<parameter_description> An initialized #GValue structure.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_builder_add">
<description>
Adds to a #GVariantBuilder.

This call is a convenience wrapper that is exactly equivalent to
calling g_variant_new() followed by g_variant_builder_add_value().

Note that the arguments must be of the correct width for their types
specified in @format_string. This can be achieved by casting them. See
the [GVariant varargs documentation][gvariant-varargs].

This function might be used as follows:

|[&lt;!-- language=&quot;C&quot; --&gt; 
GVariant *
make_pointless_dictionary (void)
{
GVariantBuilder builder;
int i;

g_variant_builder_init (&amp;builder, G_VARIANT_TYPE_ARRAY);
for (i = 0; i &lt; 16; i++)
{
gchar buf[3];

sprintf (buf, &quot;%d&quot;, i);
g_variant_builder_add (&amp;builder, &quot;{is}&quot;, i, buf);
}

return g_variant_builder_end (&amp;builder);
}
]|

Since: 2.24

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GVariantBuilder
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a #GVariant varargs format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments, as per @format_string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_builder_add_parsed">
<description>
Adds to a #GVariantBuilder.

This call is a convenience wrapper that is exactly equivalent to
calling g_variant_new_parsed() followed by
g_variant_builder_add_value().

Note that the arguments must be of the correct width for their types
specified in @format_string. This can be achieved by casting them. See
the [GVariant varargs documentation][gvariant-varargs].

This function might be used as follows:

|[&lt;!-- language=&quot;C&quot; --&gt; 
GVariant *
make_pointless_dictionary (void)
{
GVariantBuilder builder;
int i;

g_variant_builder_init (&amp;builder, G_VARIANT_TYPE_ARRAY);
g_variant_builder_add_parsed (&amp;builder, &quot;{'width', &lt;%i&gt;}&quot;, 600);
g_variant_builder_add_parsed (&amp;builder, &quot;{'title', &lt;%s&gt;}&quot;, &quot;foo&quot;);
g_variant_builder_add_parsed (&amp;builder, &quot;{'transparency', &lt;0.5&gt;}&quot;);
return g_variant_builder_end (&amp;builder);
}
]|

Since: 2.26

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GVariantBuilder
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a text format #GVariant
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments as per @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_builder_add_value">
<description>
Adds @value to @builder.

It is an error to call this function in any way that would create an
inconsistent value to be constructed.  Some examples of this are
putting different types of items into an array, putting the wrong
types or number of items in a tuple, putting more than one value into
a variant, etc.

If @value is a floating reference (see g_variant_ref_sink()),
the @builder instance takes ownership of @value.

Since: 2.24

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GVariantBuilder
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_builder_clear">
<description>
Releases all memory associated with a #GVariantBuilder without
freeing the #GVariantBuilder structure itself.

It typically only makes sense to do this on a stack-allocated
#GVariantBuilder if you want to abort building the value part-way
through.  This function need not be called if you call
g_variant_builder_end() and it also doesn't need to be called on
builders allocated with g_variant_builder_new() (see
g_variant_builder_unref() for that).

This function leaves the #GVariantBuilder structure set to all-zeros.
It is valid to call this function on either an initialised
#GVariantBuilder or one that is set to all-zeros but it is not valid
to call this function on uninitialised memory.

Since: 2.24

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GVariantBuilder
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_builder_close">
<description>
Closes the subcontainer inside the given @builder that was opened by
the most recent call to g_variant_builder_open().

It is an error to call this function in any way that would create an
inconsistent value to be constructed (ie: too few values added to the
subcontainer).

Since: 2.24

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GVariantBuilder
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_builder_end">
<description>
Ends the builder process and returns the constructed value.

It is not permissible to use @builder in any way after this call
except for reference counting operations (in the case of a
heap-allocated #GVariantBuilder) or by reinitialising it with
g_variant_builder_init() (in the case of stack-allocated). This
means that for the stack-allocated builders there is no need to
call g_variant_builder_clear() after the call to
g_variant_builder_end().

It is an error to call this function in any way that would create an
inconsistent value to be constructed (ie: insufficient number of
items added to a container with a specific number of children
required).  It is also an error to call this function if the builder
was created with an indefinite array or maybe type and no children
have been added; in this case it is impossible to infer the type of
the empty array.

Since: 2.24

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GVariantBuilder
</parameter_description>
</parameter>
</parameters>
<return> a new, floating, #GVariant

</return>
</function>

<function name="g_variant_builder_init">
<description>
Initialises a #GVariantBuilder structure.

@type must be non-%NULL.  It specifies the type of container to
construct.  It can be an indefinite type such as
%G_VARIANT_TYPE_ARRAY or a definite type such as &quot;as&quot; or &quot;(ii)&quot;.
Maybe, array, tuple, dictionary entry and variant-typed values may be
constructed.

After the builder is initialised, values are added using
g_variant_builder_add_value() or g_variant_builder_add().

After all the child values are added, g_variant_builder_end() frees
the memory associated with the builder and returns the #GVariant that
was created.

This function completely ignores the previous contents of @builder.
On one hand this means that it is valid to pass in completely
uninitialised memory.  On the other hand, this means that if you are
initialising over top of an existing #GVariantBuilder you need to
first call g_variant_builder_clear() in order to avoid leaking
memory.

You must not call g_variant_builder_ref() or
g_variant_builder_unref() on a #GVariantBuilder that was initialised
with this function.  If you ever pass a reference to a
#GVariantBuilder outside of the control of your own code then you
should assume that the person receiving that reference may try to use
reference counting; you should use g_variant_builder_new() instead of
this function.

Since: 2.24

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GVariantBuilder
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a container type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_builder_new">
<description>
Allocates and initialises a new #GVariantBuilder.

You should call g_variant_builder_unref() on the return value when it
is no longer needed.  The memory will not be automatically freed by
any other call.

In most cases it is easier to place a #GVariantBuilder directly on
the stack of the calling function and initialise it with
g_variant_builder_init().

Since: 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a container type
</parameter_description>
</parameter>
</parameters>
<return> a #GVariantBuilder

</return>
</function>

<function name="g_variant_builder_open">
<description>
Opens a subcontainer inside the given @builder.  When done adding
items to the subcontainer, g_variant_builder_close() must be called. @type
is the type of the container: so to build a tuple of several values, @type
must include the tuple itself.

It is an error to call this function in any way that would cause an
inconsistent value to be constructed (ie: adding too many values or
a value of an incorrect type).

Example of building a nested variant:
|[&lt;!-- language=&quot;C&quot; --&gt;
GVariantBuilder builder;
guint32 some_number = get_number ();
g_autoptr (GHashTable) some_dict = get_dict ();
GHashTableIter iter;
const gchar *key;
const GVariant *value;
g_autoptr (GVariant) output = NULL;

g_variant_builder_init (&amp;builder, G_VARIANT_TYPE (&quot;(ua{sv})&quot;));
g_variant_builder_add (&amp;builder, &quot;u&quot;, some_number);
g_variant_builder_open (&amp;builder, G_VARIANT_TYPE (&quot;a{sv}&quot;));

g_hash_table_iter_init (&amp;iter, some_dict);
while (g_hash_table_iter_next (&amp;iter, (gpointer *) &amp;key, (gpointer *) &amp;value))
{
g_variant_builder_open (&amp;builder, G_VARIANT_TYPE (&quot;{sv}&quot;));
g_variant_builder_add (&amp;builder, &quot;s&quot;, key);
g_variant_builder_add (&amp;builder, &quot;v&quot;, value);
g_variant_builder_close (&amp;builder);
}

g_variant_builder_close (&amp;builder);

output = g_variant_builder_end (&amp;builder);
]|

Since: 2.24

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GVariantBuilder
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GVariantType of the container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_builder_ref">
<description>
Increases the reference count on @builder.

Don't call this on stack-allocated #GVariantBuilder instances or bad
things will happen.

Since: 2.24

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GVariantBuilder allocated by g_variant_builder_new()
</parameter_description>
</parameter>
</parameters>
<return> a new reference to @builder

</return>
</function>

<function name="g_variant_builder_unref">
<description>
Decreases the reference count on @builder.

In the event that there are no more references, releases all memory
associated with the #GVariantBuilder.

Don't call this on stack-allocated #GVariantBuilder instances or bad
things will happen.

Since: 2.24

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GVariantBuilder allocated by g_variant_builder_new()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_byteswap">
<description>
Performs a byteswapping operation on the contents of @value.  The
result is that all multi-byte numeric data contained in @value is
byteswapped.  That includes 16, 32, and 64bit signed and unsigned
integers as well as file handles and double precision floating point
values.

This function is an identity mapping on any value that does not
contain multi-byte numeric data.  That include strings, booleans,
bytes and containers containing only these things (recursively).

The returned value is always in normal form and is marked as trusted.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return> the byteswapped form of @value

</return>
</function>

<function name="g_variant_check_format_string">
<description>
Checks if calling g_variant_get() with @format_string on @value would
be valid from a type-compatibility standpoint.  @format_string is
assumed to be a valid format string (from a syntactic standpoint).

If @copy_only is %TRUE then this function additionally checks that it
would be safe to call g_variant_unref() on @value immediately after
the call to g_variant_get() without invalidating the result.  This is
only possible if deep copies are made (ie: there are no pointers to
the data inside of the soon-to-be-freed #GVariant instance).  If this
check fails then a g_critical() is printed and %FALSE is returned.

This function is meant to be used by functions that wish to provide
varargs accessors to #GVariant values of uncertain values (eg:
g_variant_lookup() or g_menu_model_get_item_attribute()).

Since: 2.34

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a valid #GVariant format string
</parameter_description>
</parameter>
<parameter name="copy_only">
<parameter_description> %TRUE to ensure the format string makes deep copies
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @format_string is safe to use

</return>
</function>

<function name="g_variant_classify">
<description>
Classifies @value according to its top-level type.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return> the #GVariantClass of @value

</return>
</function>

<function name="g_variant_compare">
<description>
Compares @one and @two.

The types of @one and @two are #gconstpointer only to allow use of
this function with #GTree, #GPtrArray, etc.  They must each be a
#GVariant.

Comparison is only defined for basic types (ie: booleans, numbers,
strings).  For booleans, %FALSE is less than %TRUE.  Numbers are
ordered in the usual way.  Strings are in ASCII lexographical order.

It is a programmer error to attempt to compare container values or
two values that have types that are not exactly equal.  For example,
you cannot compare a 32-bit signed integer with a 32-bit unsigned
integer.  Also note that this function is not particularly
well-behaved when it comes to comparison of doubles; in particular,
the handling of incomparable values (ie: NaN) is undefined.

If you only require an equality comparison, g_variant_equal() is more
general.

Since: 2.26

</description>
<parameters>
<parameter name="one">
<parameter_description> a basic-typed #GVariant instance
</parameter_description>
</parameter>
<parameter name="two">
<parameter_description> a #GVariant instance of the same type
</parameter_description>
</parameter>
</parameters>
<return> negative value if a &lt; b;
zero if a = b;
positive value if a &gt; b.

</return>
</function>

<function name="g_variant_dict_clear">
<description>
Releases all memory associated with a #GVariantDict without freeing
the #GVariantDict structure itself.

It typically only makes sense to do this on a stack-allocated
#GVariantDict if you want to abort building the value part-way
through.  This function need not be called if you call
g_variant_dict_end() and it also doesn't need to be called on dicts
allocated with g_variant_dict_new (see g_variant_dict_unref() for
that).

It is valid to call this function on either an initialised
#GVariantDict or one that was previously cleared by an earlier call
to g_variant_dict_clear() but it is not valid to call this function
on uninitialised memory.

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GVariantDict
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_dict_contains">
<description>
Checks if @key exists in @dict.

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GVariantDict
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to lookup in the dictionary
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @key is in @dict

</return>
</function>

<function name="g_variant_dict_end">
<description>
Returns the current value of @dict as a #GVariant of type
%G_VARIANT_TYPE_VARDICT, clearing it in the process.

It is not permissible to use @dict in any way after this call except
for reference counting operations (in the case of a heap-allocated
#GVariantDict) or by reinitialising it with g_variant_dict_init() (in
the case of stack-allocated).

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GVariantDict
</parameter_description>
</parameter>
</parameters>
<return> a new, floating, #GVariant

</return>
</function>

<function name="g_variant_dict_init">
<description>
Initialises a #GVariantDict structure.

If @from_asv is given, it is used to initialise the dictionary.

This function completely ignores the previous contents of @dict.  On
one hand this means that it is valid to pass in completely
uninitialised memory.  On the other hand, this means that if you are
initialising over top of an existing #GVariantDict you need to first
call g_variant_dict_clear() in order to avoid leaking memory.

You must not call g_variant_dict_ref() or g_variant_dict_unref() on a
#GVariantDict that was initialised with this function.  If you ever
pass a reference to a #GVariantDict outside of the control of your
own code then you should assume that the person receiving that
reference may try to use reference counting; you should use
g_variant_dict_new() instead of this function.

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GVariantDict
</parameter_description>
</parameter>
<parameter name="from_asv">
<parameter_description> the initial value for @dict
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_dict_insert">
<description>
Inserts a value into a #GVariantDict.

This call is a convenience wrapper that is exactly equivalent to
calling g_variant_new() followed by g_variant_dict_insert_value().

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GVariantDict
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to insert a value for
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a #GVariant varargs format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments, as per @format_string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_dict_insert_value">
<description>
Inserts (or replaces) a key in a #GVariantDict.

@value is consumed if it is floating.

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GVariantDict
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to insert a value for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to insert
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_dict_lookup">
<description>
Looks up a value in a #GVariantDict.

This function is a wrapper around g_variant_dict_lookup_value() and
g_variant_get().  In the case that %NULL would have been returned,
this function returns %FALSE.  Otherwise, it unpacks the returned
value and returns %TRUE.

@format_string determines the C types that are used for unpacking the
values and also determines if the values are copied or borrowed, see the
section on [GVariant format strings][gvariant-format-strings-pointers].

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GVariantDict
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to lookup in the dictionary
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a GVariant format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to unpack the value into
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a value was unpacked

</return>
</function>

<function name="g_variant_dict_lookup_value">
<description>
Looks up a value in a #GVariantDict.

If @key is not found in @dictionary, %NULL is returned.

The @expected_type string specifies what type of value is expected.
If the value associated with @key has a different type then %NULL is
returned.

If the key is found and the value has the correct type, it is
returned.  If @expected_type was specified then any non-%NULL return
value will have this type.

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GVariantDict
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to lookup in the dictionary
</parameter_description>
</parameter>
<parameter name="expected_type">
<parameter_description> a #GVariantType, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the value of the dictionary key, or %NULL

</return>
</function>

<function name="g_variant_dict_new">
<description>
Allocates and initialises a new #GVariantDict.

You should call g_variant_dict_unref() on the return value when it
is no longer needed.  The memory will not be automatically freed by
any other call.

In some cases it may be easier to place a #GVariantDict directly on
the stack of the calling function and initialise it with
g_variant_dict_init().  This is particularly useful when you are
using #GVariantDict to construct a #GVariant.

Since: 2.40

</description>
<parameters>
<parameter name="from_asv">
<parameter_description> the #GVariant with which to initialise the
dictionary
</parameter_description>
</parameter>
</parameters>
<return> a #GVariantDict

</return>
</function>

<function name="g_variant_dict_ref">
<description>
Increases the reference count on @dict.

Don't call this on stack-allocated #GVariantDict instances or bad
things will happen.

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a heap-allocated #GVariantDict
</parameter_description>
</parameter>
</parameters>
<return> a new reference to @dict

</return>
</function>

<function name="g_variant_dict_remove">
<description>
Removes a key and its associated value from a #GVariantDict.

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a #GVariantDict
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the key was found and removed

</return>
</function>

<function name="g_variant_dict_unref">
<description>
Decreases the reference count on @dict.

In the event that there are no more references, releases all memory
associated with the #GVariantDict.

Don't call this on stack-allocated #GVariantDict instances or bad
things will happen.

Since: 2.40

</description>
<parameters>
<parameter name="dict">
<parameter_description> a heap-allocated #GVariantDict
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_dup_bytestring">
<description>
Similar to g_variant_get_bytestring() except that instead of
returning a constant string, the string is duplicated.

The return value must be freed using g_free().

Since: 2.26

</description>
<parameters>
<parameter name="value">
<parameter_description> an array-of-bytes #GVariant instance
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a pointer to a #gsize, to store
the length (not including the nul terminator)
</parameter_description>
</parameter>
</parameters>
<return>
a newly allocated string

</return>
</function>

<function name="g_variant_dup_bytestring_array">
<description>
Gets the contents of an array of array of bytes #GVariant.  This call
makes a deep copy; the return result should be released with
g_strfreev().

If @length is non-%NULL then the number of elements in the result is
stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.

Since: 2.26

</description>
<parameters>
<parameter name="value">
<parameter_description> an array of array of bytes #GVariant ('aay')
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the result, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an array of strings

</return>
</function>

<function name="g_variant_dup_objv">
<description>
Gets the contents of an array of object paths #GVariant.  This call
makes a deep copy; the return result should be released with
g_strfreev().

If @length is non-%NULL then the number of elements in the result
is stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.

Since: 2.30

</description>
<parameters>
<parameter name="value">
<parameter_description> an array of object paths #GVariant
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the result, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an array of strings

</return>
</function>

<function name="g_variant_dup_string">
<description>
Similar to g_variant_get_string() except that instead of returning
a constant string, the string is duplicated.

The string will always be UTF-8 encoded.

The return value must be freed using g_free().

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a string #GVariant instance
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a pointer to a #gsize, to store the length
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string, UTF-8 encoded

</return>
</function>

<function name="g_variant_dup_strv">
<description>
Gets the contents of an array of strings #GVariant.  This call
makes a deep copy; the return result should be released with
g_strfreev().

If @length is non-%NULL then the number of elements in the result
is stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> an array of strings #GVariant
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the result, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an array of strings

</return>
</function>

<function name="g_variant_equal">
<description>
Checks if @one and @two have the same type and value.

The types of @one and @two are #gconstpointer only to allow use of
this function with #GHashTable.  They must each be a #GVariant.

Since: 2.24

</description>
<parameters>
<parameter name="one">
<parameter_description> a #GVariant instance
</parameter_description>
</parameter>
<parameter name="two">
<parameter_description> a #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @one and @two are equal

</return>
</function>

<function name="g_variant_get">
<description>
Deconstructs a #GVariant instance.

Think of this function as an analogue to scanf().

The arguments that are expected by this function are entirely
determined by @format_string.  @format_string also restricts the
permissible types of @value.  It is an error to give a value with
an incompatible type.  See the section on
[GVariant format strings][gvariant-format-strings].
Please note that the syntax of the format string is very likely to be
extended in the future.

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed,
see the section on
[GVariant format strings][gvariant-format-strings-pointers].

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant instance
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a #GVariant format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments, as per @format_string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_get_boolean">
<description>
Returns the boolean value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_BOOLEAN.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a boolean #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE or %FALSE

</return>
</function>

<function name="g_variant_get_byte">
<description>
Returns the byte value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_BYTE.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a byte #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> a #guchar

</return>
</function>

<function name="g_variant_get_bytestring">
<description>
Returns the string value of a #GVariant instance with an
array-of-bytes type.  The string has no particular encoding.

If the array does not end with a nul terminator character, the empty
string is returned.  For this reason, you can always trust that a
non-%NULL nul-terminated string will be returned by this function.

If the array contains a nul terminator character somewhere other than
the last byte then the returned string is the string, up to the first
such nul character.

g_variant_get_fixed_array() should be used instead if the array contains
arbitrary data that could not be nul-terminated or could contain nul bytes.

It is an error to call this function with a @value that is not an
array of bytes.

The return value remains valid as long as @value exists.

Since: 2.26

</description>
<parameters>
<parameter name="value">
<parameter_description> an array-of-bytes #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return>
the constant string

</return>
</function>

<function name="g_variant_get_bytestring_array">
<description>
Gets the contents of an array of array of bytes #GVariant.  This call
makes a shallow copy; the return result should be released with
g_free(), but the individual strings must not be modified.

If @length is non-%NULL then the number of elements in the result is
stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.

Since: 2.26

</description>
<parameters>
<parameter name="value">
<parameter_description> an array of array of bytes #GVariant ('aay')
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the result, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an array of constant strings

</return>
</function>

<function name="g_variant_get_child">
<description>
Reads a child item out of a container #GVariant instance and
deconstructs it according to @format_string.  This call is
essentially a combination of g_variant_get_child_value() and
g_variant_get().

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed,
see the section on
[GVariant format strings][gvariant-format-strings-pointers].

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a container #GVariant
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the child to deconstruct
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a #GVariant format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments, as per @format_string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_get_child_value">
<description>
Reads a child item out of a container #GVariant instance.  This
includes variants, maybes, arrays, tuples and dictionary
entries.  It is an error to call this function on any other type of
#GVariant.

It is an error if @index_ is greater than the number of child items
in the container.  See g_variant_n_children().

The returned value is never floating.  You should free it with
g_variant_unref() when you're done with it.

This function is O(1).

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a container #GVariant
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the child to fetch
</parameter_description>
</parameter>
</parameters>
<return> the child at the specified index

</return>
</function>

<function name="g_variant_get_data">
<description>
Returns a pointer to the serialised form of a #GVariant instance.
The returned data may not be in fully-normalised form if read from an
untrusted source.  The returned data must not be freed; it remains
valid for as long as @value exists.

If @value is a fixed-sized value that was deserialised from a
corrupted serialised container then %NULL may be returned.  In this
case, the proper thing to do is typically to use the appropriate
number of nul bytes in place of @value.  If @value is not fixed-sized
then %NULL is never returned.

In the case that @value is already in serialised form, this function
is O(1).  If the value is not already in serialised form,
serialisation occurs implicitly and is approximately O(n) in the size
of the result.

To deserialise the data returned by this function, in addition to the
serialised data, you must know the type of the #GVariant, and (if the
machine might be different) the endianness of the machine that stored
it. As a result, file formats or network messages that incorporate
serialised #GVariants must include this information either
implicitly (for instance &quot;the file always contains a
%G_VARIANT_TYPE_VARIANT and it is always in little-endian order&quot;) or
explicitly (by storing the type and/or endianness in addition to the
serialised data).

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> the serialised form of @value, or %NULL

</return>
</function>

<function name="g_variant_get_data_as_bytes">
<description>
Returns a pointer to the serialised form of a #GVariant instance.
The semantics of this function are exactly the same as
g_variant_get_data(), except that the returned #GBytes holds
a reference to the variant data.

Since: 2.36

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return> A new #GBytes representing the variant data

</return>
</function>

<function name="g_variant_get_double">
<description>
Returns the double precision floating point value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_DOUBLE.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a double #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> a #gdouble

</return>
</function>

<function name="g_variant_get_fixed_array">
<description>
Provides access to the serialised data for an array of fixed-sized
items.

@value must be an array with fixed-sized elements.  Numeric types are
fixed-size, as are tuples containing only other fixed-sized types.

@element_size must be the size of a single element in the array,
as given by the section on
[serialized data memory][gvariant-serialised-data-memory].

In particular, arrays of these fixed-sized types can be interpreted
as an array of the given C type, with @element_size set to the size
the appropriate type:
- %G_VARIANT_TYPE_INT16 (etc.): #gint16 (etc.)
- %G_VARIANT_TYPE_BOOLEAN: #guchar (not #gboolean!)
- %G_VARIANT_TYPE_BYTE: #guchar
- %G_VARIANT_TYPE_HANDLE: #guint32
- %G_VARIANT_TYPE_DOUBLE: #gdouble

For example, if calling this function for an array of 32-bit integers,
you might say `sizeof(gint32)`. This value isn't used except for the purpose
of a double-check that the form of the serialised data matches the caller's
expectation.

@n_elements, which must be non-%NULL, is set equal to the number of
items in the array.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant array with fixed-sized elements
</parameter_description>
</parameter>
<parameter name="n_elements">
<parameter_description> a pointer to the location to store the number of items
</parameter_description>
</parameter>
<parameter name="element_size">
<parameter_description> the size of each element
</parameter_description>
</parameter>
</parameters>
<return> a pointer to
the fixed array

</return>
</function>

<function name="g_variant_get_handle">
<description>
Returns the 32-bit signed integer value of @value.

It is an error to call this function with a @value of any type other
than %G_VARIANT_TYPE_HANDLE.

By convention, handles are indexes into an array of file descriptors
that are sent alongside a D-Bus message.  If you're not interacting
with D-Bus, you probably don't need them.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a handle #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> a #gint32

</return>
</function>

<function name="g_variant_get_int16">
<description>
Returns the 16-bit signed integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_INT16.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a int16 #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> a #gint16

</return>
</function>

<function name="g_variant_get_int32">
<description>
Returns the 32-bit signed integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_INT32.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a int32 #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> a #gint32

</return>
</function>

<function name="g_variant_get_int64">
<description>
Returns the 64-bit signed integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_INT64.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a int64 #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> a #gint64

</return>
</function>

<function name="g_variant_get_maybe">
<description>
Given a maybe-typed #GVariant instance, extract its value.  If the
value is Nothing, then this function returns %NULL.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a maybe-typed value
</parameter_description>
</parameter>
</parameters>
<return> the contents of @value, or %NULL

</return>
</function>

<function name="g_variant_get_normal_form">
<description>
Gets a #GVariant instance that has the same value as @value and is
trusted to be in normal form.

If @value is already trusted to be in normal form then a new
reference to @value is returned.

If @value is not already trusted, then it is scanned to check if it
is in normal form.  If it is found to be in normal form then it is
marked as trusted and a new reference to it is returned.

If @value is found not to be in normal form then a new trusted
#GVariant is created with the same value as @value.

It makes sense to call this function if you've received #GVariant
data from untrusted sources and you want to ensure your serialised
output is definitely in normal form.

If @value is already in normal form, a new reference will be returned
(which will be floating if @value is floating). If it is not in normal form,
the newly created #GVariant will be returned with a single non-floating
reference. Typically, g_variant_take_ref() should be called on the return
value from this function to guarantee ownership of a single non-floating
reference to it.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return> a trusted #GVariant

</return>
</function>

<function name="g_variant_get_objv">
<description>
Gets the contents of an array of object paths #GVariant.  This call
makes a shallow copy; the return result should be released with
g_free(), but the individual strings must not be modified.

If @length is non-%NULL then the number of elements in the result
is stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.

Since: 2.30

</description>
<parameters>
<parameter name="value">
<parameter_description> an array of object paths #GVariant
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the result, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an array of constant strings

</return>
</function>

<function name="g_variant_get_size">
<description>
Determines the number of bytes that would be required to store @value
with g_variant_store().

If @value has a fixed-sized type then this function always returned
that fixed size.

In the case that @value is already in serialised form or the size has
already been calculated (ie: this function has been called before)
then this function is O(1).  Otherwise, the size is calculated, an
operation which is approximately O(n) in the number of values
involved.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> the serialised size of @value

</return>
</function>

<function name="g_variant_get_string">
<description>
Returns the string value of a #GVariant instance with a string
type.  This includes the types %G_VARIANT_TYPE_STRING,
%G_VARIANT_TYPE_OBJECT_PATH and %G_VARIANT_TYPE_SIGNATURE.

The string will always be UTF-8 encoded, and will never be %NULL.

If @length is non-%NULL then the length of the string (in bytes) is
returned there.  For trusted values, this information is already
known.  For untrusted values, a strlen() will be performed.

It is an error to call this function with a @value of any type
other than those three.

The return value remains valid as long as @value exists.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a string #GVariant instance
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a pointer to a #gsize,
to store the length
</parameter_description>
</parameter>
</parameters>
<return> the constant string, UTF-8 encoded

</return>
</function>

<function name="g_variant_get_strv">
<description>
Gets the contents of an array of strings #GVariant.  This call
makes a shallow copy; the return result should be released with
g_free(), but the individual strings must not be modified.

If @length is non-%NULL then the number of elements in the result
is stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> an array of strings #GVariant
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the result, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an array of constant strings

</return>
</function>

<function name="g_variant_get_type">
<description>
Determines the type of @value.

The return value is valid for the lifetime of @value and must not
be freed.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return> a #GVariantType

</return>
</function>

<function name="g_variant_get_type_string">
<description>
Returns the type string of @value.  Unlike the result of calling
g_variant_type_peek_string(), this string is nul-terminated.  This
string belongs to #GVariant and must not be freed.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return> the type string for the type of @value

</return>
</function>

<function name="g_variant_get_uint16">
<description>
Returns the 16-bit unsigned integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_UINT16.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a uint16 #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> a #guint16

</return>
</function>

<function name="g_variant_get_uint32">
<description>
Returns the 32-bit unsigned integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_UINT32.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a uint32 #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> a #guint32

</return>
</function>

<function name="g_variant_get_uint64">
<description>
Returns the 64-bit unsigned integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_UINT64.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a uint64 #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> a #guint64

</return>
</function>

<function name="g_variant_get_va">
<description>
This function is intended to be used by libraries based on #GVariant
that want to provide g_variant_get()-like functionality to their
users.

The API is more general than g_variant_get() to allow a wider range
of possible uses.

@format_string must still point to a valid format string, but it only
need to be nul-terminated if @endptr is %NULL.  If @endptr is
non-%NULL then it is updated to point to the first character past the
end of the format string.

@app is a pointer to a #va_list.  The arguments, according to
@format_string, are collected from this #va_list and the list is left
pointing to the argument following the last.

These two generalisations allow mixing of multiple calls to
g_variant_new_va() and g_variant_get_va() within a single actual
varargs call by the user.

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed,
see the section on
[GVariant format strings][gvariant-format-strings-pointers].

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a string that is prefixed with a format string
</parameter_description>
</parameter>
<parameter name="endptr">
<parameter_description> location to store the end pointer,
or %NULL
</parameter_description>
</parameter>
<parameter name="app">
<parameter_description> a pointer to a #va_list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_get_variant">
<description>
Unboxes @value.  The result is the #GVariant instance that was
contained in @value.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a variant #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> the item contained in the variant

</return>
</function>

<function name="g_variant_hash">
<description>
Generates a hash value for a #GVariant instance.

The output of this function is guaranteed to be the same for a given
value only per-process.  It may change between different processor
architectures or even different versions of GLib.  Do not use this
function as a basis for building protocols or file formats.

The type of @value is #gconstpointer only to allow use of this
function with #GHashTable.  @value must be a #GVariant.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a basic #GVariant value as a #gconstpointer
</parameter_description>
</parameter>
</parameters>
<return> a hash value corresponding to @value

</return>
</function>

<function name="g_variant_is_container">
<description>
Checks if @value is a container.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @value is a container

</return>
</function>

<function name="g_variant_is_floating">
<description>
Checks whether @value has a floating reference count.

This function should only ever be used to assert that a given variant
is or is not floating, or for debug purposes. To acquire a reference
to a variant that might be floating, always use g_variant_ref_sink()
or g_variant_take_ref().

See g_variant_ref_sink() for more information about floating reference
counts.

Since: 2.26

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return> whether @value is floating

</return>
</function>

<function name="g_variant_is_normal_form">
<description>
Checks if @value is in normal form.

The main reason to do this is to detect if a given chunk of
serialised data is in normal form: load the data into a #GVariant
using g_variant_new_from_data() and then use this function to
check.

If @value is found to be in normal form then it will be marked as
being trusted.  If the value was already marked as being trusted then
this function will immediately return %TRUE.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @value is in normal form

</return>
</function>

<function name="g_variant_is_object_path">
<description>
Determines if a given string is a valid D-Bus object path.  You
should ensure that a string is a valid D-Bus object path before
passing it to g_variant_new_object_path().

A valid object path starts with '/' followed by zero or more
sequences of characters separated by '/' characters.  Each sequence
must contain only the characters &quot;[A-Z][a-z][0-9]_&quot;.  No sequence
(including the one following the final '/' character) may be empty.

Since: 2.24

</description>
<parameters>
<parameter name="string">
<parameter_description> a normal C nul-terminated string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string is a D-Bus object path

</return>
</function>

<function name="g_variant_is_of_type">
<description>
Checks if a value has a type matching the provided type.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant instance
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the type of @value matches @type

</return>
</function>

<function name="g_variant_is_signature">
<description>
Determines if a given string is a valid D-Bus type signature.  You
should ensure that a string is a valid D-Bus type signature before
passing it to g_variant_new_signature().

D-Bus type signatures consist of zero or more definite #GVariantType
strings in sequence.

Since: 2.24

</description>
<parameters>
<parameter name="string">
<parameter_description> a normal C nul-terminated string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string is a D-Bus type signature

</return>
</function>

<function name="g_variant_iter_copy">
<description>
Creates a new heap-allocated #GVariantIter to iterate over the
container that was being iterated over by @iter.  Iteration begins on
the new iterator from the current position of the old iterator but
the two copies are independent past that point.

Use g_variant_iter_free() to free the return value when you no longer
need it.

A reference is taken to the container that @iter is iterating over
and will be releated only when g_variant_iter_free() is called.

Since: 2.24

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GVariantIter
</parameter_description>
</parameter>
</parameters>
<return> a new heap-allocated #GVariantIter

</return>
</function>

<function name="g_variant_iter_free">
<description>
Frees a heap-allocated #GVariantIter.  Only call this function on
iterators that were returned by g_variant_iter_new() or
g_variant_iter_copy().

Since: 2.24

</description>
<parameters>
<parameter name="iter">
<parameter_description> a heap-allocated #GVariantIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_iter_init">
<description>
Initialises (without allocating) a #GVariantIter.  @iter may be
completely uninitialised prior to this call; its old value is
ignored.

The iterator remains valid for as long as @value exists, and need not
be freed in any way.

Since: 2.24

</description>
<parameters>
<parameter name="iter">
<parameter_description> a pointer to a #GVariantIter
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a container #GVariant
</parameter_description>
</parameter>
</parameters>
<return> the number of items in @value

</return>
</function>

<function name="g_variant_iter_loop">
<description>
Gets the next item in the container and unpacks it into the variable
argument list according to @format_string, returning %TRUE.

If no more items remain then %FALSE is returned.

On the first call to this function, the pointers appearing on the
variable argument list are assumed to point at uninitialised memory.
On the second and later calls, it is assumed that the same pointers
will be given and that they will point to the memory as set by the
previous call to this function.  This allows the previous values to
be freed, as appropriate.

This function is intended to be used with a while loop as
demonstrated in the following example.  This function can only be
used when iterating over an array.  It is only valid to call this
function with a string constant for the format string and the same
string constant must be used each time.  Mixing calls to this
function and g_variant_iter_next() or g_variant_iter_next_value() on
the same iterator causes undefined behavior.

If you break out of a such a while loop using g_variant_iter_loop() then
you must free or unreference all the unpacked values as you would with
g_variant_get(). Failure to do so will cause a memory leak.

Here is an example for memory management with g_variant_iter_loop():
|[&lt;!-- language=&quot;C&quot; --&gt; 
// Iterates a dictionary of type 'a{sv}'
void
iterate_dictionary (GVariant *dictionary)
{
GVariantIter iter;
GVariant *value;
gchar *key;

g_variant_iter_init (&amp;iter, dictionary);
while (g_variant_iter_loop (&amp;iter, &quot;{sv}&quot;, &amp;key, &amp;value))
{
g_print (&quot;Item '%s' has type '%s'\n&quot;, key,
g_variant_get_type_string (value));

// no need to free 'key' and 'value' here
// unless breaking out of this loop
}
}
]|

For most cases you should use g_variant_iter_next().

This function is really only useful when unpacking into #GVariant or
#GVariantIter in order to allow you to skip the call to
g_variant_unref() or g_variant_iter_free().

For example, if you are only looping over simple integer and string
types, g_variant_iter_next() is definitely preferred.  For string
types, use the '&amp;' prefix to avoid allocating any memory at all (and
thereby avoiding the need to free anything as well).

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed.

See the section on
[GVariant format strings][gvariant-format-strings-pointers].

Since: 2.24

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GVariantIter
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a GVariant format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to unpack the value into
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a value was unpacked, or %FALSE if there was no
value

</return>
</function>

<function name="g_variant_iter_n_children">
<description>
Queries the number of child items in the container that we are
iterating over.  This is the total number of items -- not the number
of items remaining.

This function might be useful for preallocation of arrays.

Since: 2.24

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GVariantIter
</parameter_description>
</parameter>
</parameters>
<return> the number of children in the container

</return>
</function>

<function name="g_variant_iter_new">
<description>
Creates a heap-allocated #GVariantIter for iterating over the items
in @value.

Use g_variant_iter_free() to free the return value when you no longer
need it.

A reference is taken to @value and will be released only when
g_variant_iter_free() is called.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a container #GVariant
</parameter_description>
</parameter>
</parameters>
<return> a new heap-allocated #GVariantIter

</return>
</function>

<function name="g_variant_iter_next">
<description>
Gets the next item in the container and unpacks it into the variable
argument list according to @format_string, returning %TRUE.

If no more items remain then %FALSE is returned.

All of the pointers given on the variable arguments list of this
function are assumed to point at uninitialised memory.  It is the
responsibility of the caller to free all of the values returned by
the unpacking process.

Here is an example for memory management with g_variant_iter_next():
|[&lt;!-- language=&quot;C&quot; --&gt; 
// Iterates a dictionary of type 'a{sv}'
void
iterate_dictionary (GVariant *dictionary)
{
GVariantIter iter;
GVariant *value;
gchar *key;

g_variant_iter_init (&amp;iter, dictionary);
while (g_variant_iter_next (&amp;iter, &quot;{sv}&quot;, &amp;key, &amp;value))
{
g_print (&quot;Item '%s' has type '%s'\n&quot;, key,
g_variant_get_type_string (value));

// must free data for ourselves
g_variant_unref (value);
g_free (key);
}
}
]|

For a solution that is likely to be more convenient to C programmers
when dealing with loops, see g_variant_iter_loop().

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed.

See the section on
[GVariant format strings][gvariant-format-strings-pointers].

Since: 2.24

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GVariantIter
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a GVariant format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to unpack the value into
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a value was unpacked, or %FALSE if there as no value

</return>
</function>

<function name="g_variant_iter_next_value">
<description>
Gets the next item in the container.  If no more items remain then
%NULL is returned.

Use g_variant_unref() to drop your reference on the return value when
you no longer need it.

Here is an example for iterating with g_variant_iter_next_value():
|[&lt;!-- language=&quot;C&quot; --&gt; 
// recursively iterate a container
void
iterate_container_recursive (GVariant *container)
{
GVariantIter iter;
GVariant *child;

g_variant_iter_init (&amp;iter, container);
while ((child = g_variant_iter_next_value (&amp;iter)))
{
g_print (&quot;type '%s'\n&quot;, g_variant_get_type_string (child));

if (g_variant_is_container (child))
iterate_container_recursive (child);

g_variant_unref (child);
}
}
]|

Since: 2.24

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GVariantIter
</parameter_description>
</parameter>
</parameters>
<return> a #GVariant, or %NULL

</return>
</function>

<function name="g_variant_lookup">
<description>
Looks up a value in a dictionary #GVariant.

This function is a wrapper around g_variant_lookup_value() and
g_variant_get().  In the case that %NULL would have been returned,
this function returns %FALSE.  Otherwise, it unpacks the returned
value and returns %TRUE.

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed,
see the section on
[GVariant format strings][gvariant-format-strings-pointers].

This function is currently implemented with a linear scan.  If you
plan to do many lookups then #GVariantDict may be more efficient.

Since: 2.28

</description>
<parameters>
<parameter name="dictionary">
<parameter_description> a dictionary #GVariant
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to lookup in the dictionary
</parameter_description>
</parameter>
<parameter name="format_string">
<parameter_description> a GVariant format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the arguments to unpack the value into
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a value was unpacked

</return>
</function>

<function name="g_variant_lookup_value">
<description>
Looks up a value in a dictionary #GVariant.

This function works with dictionaries of the type a{s*} (and equally
well with type a{o*}, but we only further discuss the string case
for sake of clarity).

In the event that @dictionary has the type a{sv}, the @expected_type
string specifies what type of value is expected to be inside of the
variant. If the value inside the variant has a different type then
%NULL is returned. In the event that @dictionary has a value type other
than v then @expected_type must directly match the key type and it is
used to unpack the value directly or an error occurs.

In either case, if @key is not found in @dictionary, %NULL is returned.

If the key is found and the value has the correct type, it is
returned.  If @expected_type was specified then any non-%NULL return
value will have this type.

This function is currently implemented with a linear scan.  If you
plan to do many lookups then #GVariantDict may be more efficient.

Since: 2.28

</description>
<parameters>
<parameter name="dictionary">
<parameter_description> a dictionary #GVariant
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key to lookup in the dictionary
</parameter_description>
</parameter>
<parameter name="expected_type">
<parameter_description> a #GVariantType, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the value of the dictionary key, or %NULL

</return>
</function>

<function name="g_variant_n_children">
<description>
Determines the number of children in a container #GVariant instance.
This includes variants, maybes, arrays, tuples and dictionary
entries.  It is an error to call this function on any other type of
#GVariant.

For variants, the return value is always 1.  For values with maybe
types, it is always zero or one.  For arrays, it is the length of the
array.  For tuples it is the number of tuple items (which depends
only on the type).  For dictionary entries, it is always 2

This function is O(1).

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a container #GVariant
</parameter_description>
</parameter>
</parameters>
<return> the number of children in the container

</return>
</function>

<function name="g_variant_new">
<description>
Creates a new #GVariant instance.

Think of this function as an analogue to g_strdup_printf().

The type of the created instance and the arguments that are expected
by this function are determined by @format_string. See the section on
[GVariant format strings][gvariant-format-strings]. Please note that
the syntax of the format string is very likely to be extended in the
future.

The first character of the format string must not be '*' '?' '@' or
'r'; in essence, a new #GVariant must always be constructed by this
function (and not merely passed through it unmodified).

Note that the arguments must be of the correct width for their types
specified in @format_string. This can be achieved by casting them. See
the [GVariant varargs documentation][gvariant-varargs].

|[&lt;!-- language=&quot;C&quot; --&gt;
MyFlags some_flags = FLAG_ONE | FLAG_TWO;
const gchar *some_strings[] = { &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, NULL };
GVariant *new_variant;

new_variant = g_variant_new (&quot;(t^as)&quot;,
// This cast is required.
(guint64) some_flags,
some_strings);
]|

Since: 2.24

</description>
<parameters>
<parameter name="format_string">
<parameter_description> a #GVariant format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments, as per @format_string
</parameter_description>
</parameter>
</parameters>
<return> a new floating #GVariant instance

</return>
</function>

<function name="g_variant_new_array">
<description>
Creates a new #GVariant array from @children.

@child_type must be non-%NULL if @n_children is zero.  Otherwise, the
child type is determined by inspecting the first element of the
@children array.  If @child_type is non-%NULL then it must be a
definite type.

The items of the array are taken from the @children array.  No entry
in the @children array may be %NULL.

All items in the array must have the same type, which must be the
same as @child_type, if given.

If the @children are floating references (see g_variant_ref_sink()), the
new instance takes ownership of them as if via g_variant_ref_sink().

Since: 2.24

</description>
<parameters>
<parameter name="child_type">
<parameter_description> the element type of the new array
</parameter_description>
</parameter>
<parameter name="children">
<parameter_description> an array of
#GVariant pointers, the children
</parameter_description>
</parameter>
<parameter name="n_children">
<parameter_description> the length of @children
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new #GVariant array

</return>
</function>

<function name="g_variant_new_boolean">
<description>
Creates a new boolean #GVariant instance -- either %TRUE or %FALSE.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #gboolean value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new boolean #GVariant instance

</return>
</function>

<function name="g_variant_new_byte">
<description>
Creates a new byte #GVariant instance.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #guint8 value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new byte #GVariant instance

</return>
</function>

<function name="g_variant_new_bytestring">
<description>
Creates an array-of-bytes #GVariant with the contents of @string.
This function is just like g_variant_new_string() except that the
string need not be valid UTF-8.

The nul terminator character at the end of the string is stored in
the array.

Since: 2.26

</description>
<parameters>
<parameter name="string">
<parameter_description> a normal
nul-terminated string in no particular encoding
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new bytestring #GVariant instance

</return>
</function>

<function name="g_variant_new_bytestring_array">
<description>
Constructs an array of bytestring #GVariant from the given array of
strings.

If @length is -1 then @strv is %NULL-terminated.

Since: 2.26

</description>
<parameters>
<parameter name="strv">
<parameter_description> an array of strings
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @strv, or -1
</parameter_description>
</parameter>
</parameters>
<return> a new floating #GVariant instance

</return>
</function>

<function name="g_variant_new_dict_entry">
<description>
Creates a new dictionary entry #GVariant. @key and @value must be
non-%NULL. @key must be a value of a basic type (ie: not a container).

If the @key or @value are floating references (see g_variant_ref_sink()),
the new instance takes ownership of them as if via g_variant_ref_sink().

Since: 2.24

</description>
<parameters>
<parameter name="key">
<parameter_description> a basic #GVariant, the key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GVariant, the value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new dictionary entry #GVariant

</return>
</function>

<function name="g_variant_new_double">
<description>
Creates a new double #GVariant instance.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #gdouble floating point value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new double #GVariant instance

</return>
</function>

<function name="g_variant_new_fixed_array">
<description>
Constructs a new array #GVariant instance, where the elements are
of @element_type type.

@elements must be an array with fixed-sized elements.  Numeric types are
fixed-size as are tuples containing only other fixed-sized types.

@element_size must be the size of a single element in the array.
For example, if calling this function for an array of 32-bit integers,
you might say sizeof(gint32). This value isn't used except for the purpose
of a double-check that the form of the serialised data matches the caller's
expectation.

@n_elements must be the length of the @elements array.

Since: 2.32

</description>
<parameters>
<parameter name="element_type">
<parameter_description> the #GVariantType of each element
</parameter_description>
</parameter>
<parameter name="elements">
<parameter_description> a pointer to the fixed array of contiguous elements
</parameter_description>
</parameter>
<parameter name="n_elements">
<parameter_description> the number of elements
</parameter_description>
</parameter>
<parameter name="element_size">
<parameter_description> the size of each element
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new array #GVariant instance

</return>
</function>

<function name="g_variant_new_from_bytes">
<description>
Constructs a new serialised-mode #GVariant instance.  This is the
inner interface for creation of new serialised values that gets
called from various functions in gvariant.c.

A reference is taken on @bytes.

Since: 2.36

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
<parameter name="bytes">
<parameter_description> a #GBytes
</parameter_description>
</parameter>
<parameter name="trusted">
<parameter_description> if the contents of @bytes are trusted
</parameter_description>
</parameter>
</parameters>
<return> a new #GVariant with a floating reference

</return>
</function>

<function name="g_variant_new_from_data">
<description>
Creates a new #GVariant instance from serialised data.

@type is the type of #GVariant instance that will be constructed.
The interpretation of @data depends on knowing the type.

@data is not modified by this function and must remain valid with an
unchanging value until such a time as @notify is called with
@user_data.  If the contents of @data change before that time then
the result is undefined.

If @data is trusted to be serialised data in normal form then
@trusted should be %TRUE.  This applies to serialised data created
within this process or read from a trusted location on the disk (such
as a file installed in /usr/lib alongside your application).  You
should set trusted to %FALSE if @data is read from the network, a
file in the user's home directory, etc.

If @data was not stored in this machine's native endianness, any multi-byte
numeric values in the returned variant will also be in non-native
endianness. g_variant_byteswap() can be used to recover the original values.

@notify will be called with @user_data when @data is no longer
needed.  The exact time of this call is unspecified and might even be
before this function returns.

Since: 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a definite #GVariantType
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the serialised data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="trusted">
<parameter_description> %TRUE if @data is definitely in normal form
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when @data is no longer needed
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data for @notify
</parameter_description>
</parameter>
</parameters>
<return> a new floating #GVariant of type @type

</return>
</function>

<function name="g_variant_new_handle">
<description>
Creates a new handle #GVariant instance.

By convention, handles are indexes into an array of file descriptors
that are sent alongside a D-Bus message.  If you're not interacting
with D-Bus, you probably don't need them.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #gint32 value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new handle #GVariant instance

</return>
</function>

<function name="g_variant_new_int16">
<description>
Creates a new int16 #GVariant instance.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #gint16 value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new int16 #GVariant instance

</return>
</function>

<function name="g_variant_new_int32">
<description>
Creates a new int32 #GVariant instance.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #gint32 value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new int32 #GVariant instance

</return>
</function>

<function name="g_variant_new_int64">
<description>
Creates a new int64 #GVariant instance.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #gint64 value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new int64 #GVariant instance

</return>
</function>

<function name="g_variant_new_maybe">
<description>
Depending on if @child is %NULL, either wraps @child inside of a
maybe container or creates a Nothing instance for the given @type.

At least one of @child_type and @child must be non-%NULL.
If @child_type is non-%NULL then it must be a definite type.
If they are both non-%NULL then @child_type must be the type
of @child.

If @child is a floating reference (see g_variant_ref_sink()), the new
instance takes ownership of @child.

Since: 2.24

</description>
<parameters>
<parameter name="child_type">
<parameter_description> the #GVariantType of the child, or %NULL
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child value, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new #GVariant maybe instance

</return>
</function>

<function name="g_variant_new_object_path">
<description>
Creates a D-Bus object path #GVariant with the contents of @string.
@string must be a valid D-Bus object path.  Use
g_variant_is_object_path() if you're not sure.

Since: 2.24

</description>
<parameters>
<parameter name="object_path">
<parameter_description> a normal C nul-terminated string
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new object path #GVariant instance

</return>
</function>

<function name="g_variant_new_objv">
<description>
Constructs an array of object paths #GVariant from the given array of
strings.

Each string must be a valid #GVariant object path; see
g_variant_is_object_path().

If @length is -1 then @strv is %NULL-terminated.

Since: 2.30

</description>
<parameters>
<parameter name="strv">
<parameter_description> an array of strings
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @strv, or -1
</parameter_description>
</parameter>
</parameters>
<return> a new floating #GVariant instance

</return>
</function>

<function name="g_variant_new_parsed">
<description>
Parses @format and returns the result.

@format must be a text format #GVariant with one extension: at any
point that a value may appear in the text, a '%' character followed
by a GVariant format string (as per g_variant_new()) may appear.  In
that case, the same arguments are collected from the argument list as
g_variant_new() would have collected.

Note that the arguments must be of the correct width for their types
specified in @format. This can be achieved by casting them. See
the [GVariant varargs documentation][gvariant-varargs].

Consider this simple example:
|[&lt;!-- language=&quot;C&quot; --&gt; 
g_variant_new_parsed (&quot;[('one', 1), ('two', %i), (%s, 3)]&quot;, 2, &quot;three&quot;);
]|

In the example, the variable argument parameters are collected and
filled in as if they were part of the original string to produce the
result of
|[&lt;!-- language=&quot;C&quot; --&gt; 
[('one', 1), ('two', 2), ('three', 3)]
]|

This function is intended only to be used with @format as a string
literal.  Any parse error is fatal to the calling process.  If you
want to parse data from untrusted sources, use g_variant_parse().

You may not use this function to return, unmodified, a single
#GVariant pointer from the argument list.  ie: @format may not solely
be anything along the lines of &quot;%*&quot;, &quot;%?&quot;, &quot;\%r&quot;, or anything starting
with &quot;%@&quot;.


</description>
<parameters>
<parameter name="format">
<parameter_description> a text format #GVariant
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments as per @format
</parameter_description>
</parameter>
</parameters>
<return> a new floating #GVariant instance
</return>
</function>

<function name="g_variant_new_parsed_va">
<description>
Parses @format and returns the result.

This is the version of g_variant_new_parsed() intended to be used
from libraries.

The return value will be floating if it was a newly created GVariant
instance.  In the case that @format simply specified the collection
of a #GVariant pointer (eg: @format was &quot;%*&quot;) then the collected
#GVariant pointer will be returned unmodified, without adding any
additional references.

Note that the arguments in @app must be of the correct width for their types
specified in @format when collected into the #va_list. See
the [GVariant varargs documentation][gvariant-varargs].

In order to behave correctly in all cases it is necessary for the
calling function to g_variant_ref_sink() the return result before
returning control to the user that originally provided the pointer.
At this point, the caller will have their own full reference to the
result.  This can also be done by adding the result to a container,
or by passing it to another g_variant_new() call.


</description>
<parameters>
<parameter name="format">
<parameter_description> a text format #GVariant
</parameter_description>
</parameter>
<parameter name="app">
<parameter_description> a pointer to a #va_list
</parameter_description>
</parameter>
</parameters>
<return> a new, usually floating, #GVariant
</return>
</function>

<function name="g_variant_new_printf">
<description>
Creates a string-type GVariant using printf formatting.

This is similar to calling g_strdup_printf() and then
g_variant_new_string() but it saves a temporary variable and an
unnecessary copy.

Since: 2.38

</description>
<parameters>
<parameter name="format_string">
<parameter_description> a printf-style format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments for @format_string
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new string
#GVariant instance

</return>
</function>

<function name="g_variant_new_signature">
<description>
Creates a D-Bus type signature #GVariant with the contents of
@string.  @string must be a valid D-Bus type signature.  Use
g_variant_is_signature() if you're not sure.

Since: 2.24

</description>
<parameters>
<parameter name="signature">
<parameter_description> a normal C nul-terminated string
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new signature #GVariant instance

</return>
</function>

<function name="g_variant_new_string">
<description>
Creates a string #GVariant with the contents of @string.

@string must be valid UTF-8, and must not be %NULL. To encode
potentially-%NULL strings, use g_variant_new() with `ms` as the
[format string][gvariant-format-strings-maybe-types].

Since: 2.24

</description>
<parameters>
<parameter name="string">
<parameter_description> a normal UTF-8 nul-terminated string
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new string #GVariant instance

</return>
</function>

<function name="g_variant_new_strv">
<description>
Constructs an array of strings #GVariant from the given array of
strings.

If @length is -1 then @strv is %NULL-terminated.

Since: 2.24

</description>
<parameters>
<parameter name="strv">
<parameter_description> an array of strings
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @strv, or -1
</parameter_description>
</parameter>
</parameters>
<return> a new floating #GVariant instance

</return>
</function>

<function name="g_variant_new_take_string">
<description>
Creates a string #GVariant with the contents of @string.

@string must be valid UTF-8, and must not be %NULL. To encode
potentially-%NULL strings, use this with g_variant_new_maybe().

This function consumes @string.  g_free() will be called on @string
when it is no longer required.

You must not modify or access @string in any other way after passing
it to this function.  It is even possible that @string is immediately
freed.

Since: 2.38

</description>
<parameters>
<parameter name="string">
<parameter_description> a normal UTF-8 nul-terminated string
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new string
#GVariant instance

</return>
</function>

<function name="g_variant_new_tuple">
<description>
Creates a new tuple #GVariant out of the items in @children.  The
type is determined from the types of @children.  No entry in the
@children array may be %NULL.

If @n_children is 0 then the unit tuple is constructed.

If the @children are floating references (see g_variant_ref_sink()), the
new instance takes ownership of them as if via g_variant_ref_sink().

Since: 2.24

</description>
<parameters>
<parameter name="children">
<parameter_description> the items to make the tuple out of
</parameter_description>
</parameter>
<parameter name="n_children">
<parameter_description> the length of @children
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new #GVariant tuple

</return>
</function>

<function name="g_variant_new_uint16">
<description>
Creates a new uint16 #GVariant instance.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #guint16 value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new uint16 #GVariant instance

</return>
</function>

<function name="g_variant_new_uint32">
<description>
Creates a new uint32 #GVariant instance.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #guint32 value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new uint32 #GVariant instance

</return>
</function>

<function name="g_variant_new_uint64">
<description>
Creates a new uint64 #GVariant instance.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #guint64 value
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new uint64 #GVariant instance

</return>
</function>

<function name="g_variant_new_va">
<description>
This function is intended to be used by libraries based on
#GVariant that want to provide g_variant_new()-like functionality
to their users.

The API is more general than g_variant_new() to allow a wider range
of possible uses.

@format_string must still point to a valid format string, but it only
needs to be nul-terminated if @endptr is %NULL.  If @endptr is
non-%NULL then it is updated to point to the first character past the
end of the format string.

@app is a pointer to a #va_list.  The arguments, according to
@format_string, are collected from this #va_list and the list is left
pointing to the argument following the last.

Note that the arguments in @app must be of the correct width for their
types specified in @format_string when collected into the #va_list.
See the [GVariant varargs documentation][gvariant-varargs].

These two generalisations allow mixing of multiple calls to
g_variant_new_va() and g_variant_get_va() within a single actual
varargs call by the user.

The return value will be floating if it was a newly created GVariant
instance (for example, if the format string was &quot;(ii)&quot;).  In the case
that the format_string was '*', '?', 'r', or a format starting with
'@' then the collected #GVariant pointer will be returned unmodified,
without adding any additional references.

In order to behave correctly in all cases it is necessary for the
calling function to g_variant_ref_sink() the return result before
returning control to the user that originally provided the pointer.
At this point, the caller will have their own full reference to the
result.  This can also be done by adding the result to a container,
or by passing it to another g_variant_new() call.

Since: 2.24

</description>
<parameters>
<parameter name="format_string">
<parameter_description> a string that is prefixed with a format string
</parameter_description>
</parameter>
<parameter name="endptr">
<parameter_description> location to store the end pointer,
or %NULL
</parameter_description>
</parameter>
<parameter name="app">
<parameter_description> a pointer to a #va_list
</parameter_description>
</parameter>
</parameters>
<return> a new, usually floating, #GVariant

</return>
</function>

<function name="g_variant_new_variant">
<description>
Boxes @value.  The result is a #GVariant instance representing a
variant containing the original value.

If @child is a floating reference (see g_variant_ref_sink()), the new
instance takes ownership of @child.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant instance
</parameter_description>
</parameter>
</parameters>
<return> a floating reference to a new variant #GVariant instance

</return>
</function>

<function name="g_variant_parse">
<description>
Parses a #GVariant from a text representation.

A single #GVariant is parsed from the content of @text.

The format is described [here][gvariant-text].

The memory at @limit will never be accessed and the parser behaves as
if the character at @limit is the nul terminator.  This has the
effect of bounding @text.

If @endptr is non-%NULL then @text is permitted to contain data
following the value that this function parses and @endptr will be
updated to point to the first character past the end of the text
parsed by this function.  If @endptr is %NULL and there is extra data
then an error is returned.

If @type is non-%NULL then the value will be parsed to have that
type.  This may result in additional parse errors (in the case that
the parsed value doesn't fit the type) but may also result in fewer
errors (in the case that the type would have been ambiguous, such as
with empty arrays).

In the event that the parsing is successful, the resulting #GVariant
is returned. It is never floating, and must be freed with
g_variant_unref().

In case of any error, %NULL will be returned.  If @error is non-%NULL
then it will be set to reflect the error that occurred.

Officially, the language understood by the parser is &quot;any string
produced by g_variant_print()&quot;.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType, or %NULL
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> a string containing a GVariant in text form
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> a pointer to the end of @text, or %NULL
</parameter_description>
</parameter>
<parameter name="endptr">
<parameter_description> a location to store the end pointer, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a %NULL #GError pointer, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a non-floating reference to a #GVariant, or %NULL
</return>
</function>

<function name="g_variant_parse_error_print_context">
<description>
Pretty-prints a message showing the context of a #GVariant parse
error within the string for which parsing was attempted.

The resulting string is suitable for output to the console or other
monospace media where newlines are treated in the usual way.

The message will typically look something like one of the following:

|[
unterminated string constant:
(1, 2, 3, 'abc
^^^^
]|

or

|[
unable to find a common type:
[1, 2, 3, 'str']
^        ^^^^^
]|

The format of the message may change in a future version.

@error must have come from a failed attempt to g_variant_parse() and
@source_str must be exactly the same string that caused the error.
If @source_str was not nul-terminated when you passed it to
g_variant_parse() then you must add nul termination before using this
function.

Since: 2.40

</description>
<parameters>
<parameter name="error">
<parameter_description> a #GError from the #GVariantParseError domain
</parameter_description>
</parameter>
<parameter name="source_str">
<parameter_description> the string that was given to the parser
</parameter_description>
</parameter>
</parameters>
<return> the printed message

</return>
</function>

<function name="g_variant_parser_get_error_quark">
<description>
Same as g_variant_error_quark().

Deprecated: Use g_variant_parse_error_quark() instead.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_variant_print">
<description>
Pretty-prints @value in the format understood by g_variant_parse().

The format is described [here][gvariant-text].

If @type_annotate is %TRUE, then type information is included in
the output.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
<parameter name="type_annotate">
<parameter_description> %TRUE if type information should be included in
the output
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string holding the result.

</return>
</function>

<function name="g_variant_print_string">
<description>
Behaves as g_variant_print(), but operates on a #GString.

If @string is non-%NULL then it is appended to and returned.  Else,
a new empty #GString is allocated and it is returned.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> a #GString, or %NULL
</parameter_description>
</parameter>
<parameter name="type_annotate">
<parameter_description> %TRUE if type information should be included in
the output
</parameter_description>
</parameter>
</parameters>
<return> a #GString containing the string

</return>
</function>

<function name="g_variant_ref">
<description>
Increases the reference count of @value.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return> the same @value

</return>
</function>

<function name="g_variant_ref_sink">
<description>
#GVariant uses a floating reference count system.  All functions with
names starting with `g_variant_new_` return floating
references.

Calling g_variant_ref_sink() on a #GVariant with a floating reference
will convert the floating reference into a full reference.  Calling
g_variant_ref_sink() on a non-floating #GVariant results in an
additional normal reference being added.

In other words, if the @value is floating, then this call &quot;assumes
ownership&quot; of the floating reference, converting it to a normal
reference.  If the @value is not floating, then this call adds a
new normal reference increasing the reference count by one.

All calls that result in a #GVariant instance being inserted into a
container will call g_variant_ref_sink() on the instance.  This means
that if the value was just created (and has only its floating
reference) then the container will assume sole ownership of the value
at that point and the caller will not need to unreference it.  This
makes certain common styles of programming much easier while still
maintaining normal refcounting semantics in situations where values
are not floating.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return> the same @value

</return>
</function>

<function name="g_variant_store">
<description>
Stores the serialised form of @value at @data.  @data should be
large enough.  See g_variant_get_size().

The stored data is in machine native byte order but may not be in
fully-normalised form if read from an untrusted source.  See
g_variant_get_normal_form() for a solution.

As with g_variant_get_data(), to be able to deserialise the
serialised variant successfully, its type and (if the destination
machine might be different) its endianness must also be available.

This function is approximately O(n) in the size of @data.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> the #GVariant to store
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the location to store the serialised data at
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_take_ref">
<description>
If @value is floating, sink it.  Otherwise, do nothing.

Typically you want to use g_variant_ref_sink() in order to
automatically do the correct thing with respect to floating or
non-floating references, but there is one specific scenario where
this function is helpful.

The situation where this function is helpful is when creating an API
that allows the user to provide a callback function that returns a
#GVariant.  We certainly want to allow the user the flexibility to
return a non-floating reference from this callback (for the case
where the value that is being returned already exists).

At the same time, the style of the #GVariant API makes it likely that
for newly-created #GVariant instances, the user can be saved some
typing if they are allowed to return a #GVariant with a floating
reference.

Using this function on the return value of the user's callback allows
the user to do whichever is more convenient for them.  The caller
will alway receives exactly one full reference to the value: either
the one that was returned in the first place, or a floating reference
that has been converted to a full reference.

This function has an odd interaction when combined with
g_variant_ref_sink() running at the same time in another thread on
the same #GVariant instance.  If g_variant_ref_sink() runs first then
the result will be that the floating reference is converted to a hard
reference.  If g_variant_take_ref() runs first then the result will
be that the floating reference is converted to a hard reference and
an additional reference on top of that one is added.  It is best to
avoid this situation.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return> the same @value
</return>
</function>

<function name="g_variant_type_copy">
<description>
Makes a copy of a #GVariantType.  It is appropriate to call
g_variant_type_free() on the return value.  @type may not be %NULL.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> a new #GVariantType

</return>
</function>

<function name="g_variant_type_dup_string">
<description>
Returns a newly-allocated copy of the type string corresponding to
@type.  The returned string is nul-terminated.  It is appropriate to
call g_free() on the return value.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> the corresponding type string

</return>
</function>

<function name="g_variant_type_element">
<description>
Determines the element type of an array or maybe type.

This function may only be used with array or maybe types.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> an array or maybe #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> the element type of @type

</return>
</function>

<function name="g_variant_type_equal">
<description>
Compares @type1 and @type2 for equality.

Only returns %TRUE if the types are exactly equal.  Even if one type
is an indefinite type and the other is a subtype of it, %FALSE will
be returned if they are not exactly equal.  If you want to check for
subtypes, use g_variant_type_is_subtype_of().

The argument types of @type1 and @type2 are only #gconstpointer to
allow use with #GHashTable without function pointer casting.  For
both arguments, a valid #GVariantType must be provided.

Since 2.24

</description>
<parameters>
<parameter name="type1">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
<parameter name="type2">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type1 and @type2 are exactly equal

</return>
</function>

<function name="g_variant_type_first">
<description>
Determines the first item type of a tuple or dictionary entry
type.

This function may only be used with tuple or dictionary entry types,
but must not be used with the generic tuple type
%G_VARIANT_TYPE_TUPLE.

In the case of a dictionary entry type, this returns the type of
the key.

%NULL is returned in case of @type being %G_VARIANT_TYPE_UNIT.

This call, together with g_variant_type_next() provides an iterator
interface over tuple and dictionary entry types.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a tuple or dictionary entry #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> the first item type of @type, or %NULL

</return>
</function>

<function name="g_variant_type_free">
<description>
Frees a #GVariantType that was allocated with
g_variant_type_copy(), g_variant_type_new() or one of the container
type constructor functions.

In the case that @type is %NULL, this function does nothing.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_variant_type_get_string_length">
<description>
Returns the length of the type string corresponding to the given
@type.  This function must be used to determine the valid extent of
the memory region returned by g_variant_type_peek_string().

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> the length of the corresponding type string

</return>
</function>

<function name="g_variant_type_hash">
<description>
Hashes @type.

The argument type of @type is only #gconstpointer to allow use with
#GHashTable without function pointer casting.  A valid
#GVariantType must be provided.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> the hash value

</return>
</function>

<function name="g_variant_type_is_array">
<description>
Determines if the given @type is an array type.  This is true if the
type string for @type starts with an 'a'.

This function returns %TRUE for any indefinite type for which every
definite subtype is an array type -- %G_VARIANT_TYPE_ARRAY, for
example.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is an array type

</return>
</function>

<function name="g_variant_type_is_basic">
<description>
Determines if the given @type is a basic type.

Basic types are booleans, bytes, integers, doubles, strings, object
paths and signatures.

Only a basic type may be used as the key of a dictionary entry.

This function returns %FALSE for all indefinite types except
%G_VARIANT_TYPE_BASIC.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is a basic type

</return>
</function>

<function name="g_variant_type_is_container">
<description>
Determines if the given @type is a container type.

Container types are any array, maybe, tuple, or dictionary
entry types plus the variant type.

This function returns %TRUE for any indefinite type for which every
definite subtype is a container -- %G_VARIANT_TYPE_ARRAY, for
example.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is a container type

</return>
</function>

<function name="g_variant_type_is_definite">
<description>
Determines if the given @type is definite (ie: not indefinite).

A type is definite if its type string does not contain any indefinite
type characters ('*', '?', or 'r').

A #GVariant instance may not have an indefinite type, so calling
this function on the result of g_variant_get_type() will always
result in %TRUE being returned.  Calling this function on an
indefinite type like %G_VARIANT_TYPE_ARRAY, however, will result in
%FALSE being returned.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is definite

</return>
</function>

<function name="g_variant_type_is_dict_entry">
<description>
Determines if the given @type is a dictionary entry type.  This is
true if the type string for @type starts with a '{'.

This function returns %TRUE for any indefinite type for which every
definite subtype is a dictionary entry type --
%G_VARIANT_TYPE_DICT_ENTRY, for example.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is a dictionary entry type

</return>
</function>

<function name="g_variant_type_is_maybe">
<description>
Determines if the given @type is a maybe type.  This is true if the
type string for @type starts with an 'm'.

This function returns %TRUE for any indefinite type for which every
definite subtype is a maybe type -- %G_VARIANT_TYPE_MAYBE, for
example.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is a maybe type

</return>
</function>

<function name="g_variant_type_is_subtype_of">
<description>
Checks if @type is a subtype of @supertype.

This function returns %TRUE if @type is a subtype of @supertype.  All
types are considered to be subtypes of themselves.  Aside from that,
only indefinite types can have subtypes.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
<parameter name="supertype">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is a subtype of @supertype

</return>
</function>

<function name="g_variant_type_is_tuple">
<description>
Determines if the given @type is a tuple type.  This is true if the
type string for @type starts with a '(' or if @type is
%G_VARIANT_TYPE_TUPLE.

This function returns %TRUE for any indefinite type for which every
definite subtype is a tuple type -- %G_VARIANT_TYPE_TUPLE, for
example.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is a tuple type

</return>
</function>

<function name="g_variant_type_is_variant">
<description>
Determines if the given @type is the variant type.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is the variant type

</return>
</function>

<function name="g_variant_type_key">
<description>
Determines the key type of a dictionary entry type.

This function may only be used with a dictionary entry type.  Other
than the additional restriction, this call is equivalent to
g_variant_type_first().

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a dictionary entry #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> the key type of the dictionary entry

</return>
</function>

<function name="g_variant_type_n_items">
<description>
Determines the number of items contained in a tuple or
dictionary entry type.

This function may only be used with tuple or dictionary entry types,
but must not be used with the generic tuple type
%G_VARIANT_TYPE_TUPLE.

In the case of a dictionary entry type, this function will always
return 2.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a tuple or dictionary entry #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> the number of items in @type

</return>
</function>

<function name="g_variant_type_new">
<description>
Creates a new #GVariantType corresponding to the type string given
by @type_string.  It is appropriate to call g_variant_type_free() on
the return value.

It is a programmer error to call this function with an invalid type
string.  Use g_variant_type_string_is_valid() if you are unsure.

Since: 2.24

</description>
<parameters>
<parameter name="type_string">
<parameter_description> a valid GVariant type string
</parameter_description>
</parameter>
</parameters>
<return> a new #GVariantType

</return>
</function>

<function name="g_variant_type_new_array">
<description>
Constructs the type corresponding to an array of elements of the
type @type.

It is appropriate to call g_variant_type_free() on the return value.

Since 2.24

</description>
<parameters>
<parameter name="element">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> a new array #GVariantType

</return>
</function>

<function name="g_variant_type_new_dict_entry">
<description>
Constructs the type corresponding to a dictionary entry with a key
of type @key and a value of type @value.

It is appropriate to call g_variant_type_free() on the return value.

Since 2.24

</description>
<parameters>
<parameter name="key">
<parameter_description> a basic #GVariantType
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> a new dictionary entry #GVariantType

</return>
</function>

<function name="g_variant_type_new_maybe">
<description>
Constructs the type corresponding to a maybe instance containing
type @type or Nothing.

It is appropriate to call g_variant_type_free() on the return value.

Since 2.24

</description>
<parameters>
<parameter name="element">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> a new maybe #GVariantType

</return>
</function>

<function name="g_variant_type_new_tuple">
<description>
Constructs a new tuple type, from @items.

@length is the number of items in @items, or -1 to indicate that
@items is %NULL-terminated.

It is appropriate to call g_variant_type_free() on the return value.

Since 2.24

</description>
<parameters>
<parameter name="items">
<parameter_description> an array of #GVariantTypes, one for each item
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @items, or -1
</parameter_description>
</parameter>
</parameters>
<return> a new tuple #GVariantType

</return>
</function>

<function name="g_variant_type_next">
<description>
Determines the next item type of a tuple or dictionary entry
type.

@type must be the result of a previous call to
g_variant_type_first() or g_variant_type_next().

If called on the key type of a dictionary entry then this call
returns the value type.  If called on the value type of a dictionary
entry then this call returns %NULL.

For tuples, %NULL is returned when @type is the last item in a tuple.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType from a previous call
</parameter_description>
</parameter>
</parameters>
<return> the next #GVariantType after @type, or %NULL

</return>
</function>

<function name="g_variant_type_peek_string">
<description>
Returns the type string corresponding to the given @type.  The
result is not nul-terminated; in order to determine its length you
must call g_variant_type_get_string_length().

To get a nul-terminated string, see g_variant_type_dup_string().

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> the corresponding type string (not nul-terminated)

</return>
</function>

<function name="g_variant_type_string_is_valid">
<description>
Checks if @type_string is a valid GVariant type string.  This call is
equivalent to calling g_variant_type_string_scan() and confirming
that the following character is a nul terminator.

Since 2.24

</description>
<parameters>
<parameter name="type_string">
<parameter_description> a pointer to any string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type_string is exactly one valid type string

</return>
</function>

<function name="g_variant_type_string_scan">
<description>
Scan for a single complete and valid GVariant type string in @string.
The memory pointed to by @limit (or bytes beyond it) is never
accessed.

If a valid type string is found, @endptr is updated to point to the
first character past the end of the string that was found and %TRUE
is returned.

If there is no valid type string starting at @string, or if the type
string does not end before @limit then %FALSE is returned.

For the simple case of checking if a string is a valid type string,
see g_variant_type_string_is_valid().

Since: 2.24

</description>
<parameters>
<parameter name="string">
<parameter_description> a pointer to any string
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> the end of @string, or %NULL
</parameter_description>
</parameter>
<parameter name="endptr">
<parameter_description> location to store the end pointer, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a valid type string was found

</return>
</function>

<function name="g_variant_type_value">
<description>
Determines the value type of a dictionary entry type.

This function may only be used with a dictionary entry type.

Since 2.24

</description>
<parameters>
<parameter name="type">
<parameter_description> a dictionary entry #GVariantType
</parameter_description>
</parameter>
</parameters>
<return> the value type of the dictionary entry

</return>
</function>

<function name="g_variant_unref">
<description>
Decreases the reference count of @value.  When its reference count
drops to 0, the memory used by the variant is freed.

Since: 2.24

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GVariant
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_vasprintf">
<description>
An implementation of the GNU vasprintf() function which supports 
positional parameters, as specified in the Single Unix Specification.
This function is similar to g_vsprintf(), except that it allocates a 
string to hold the output, instead of putting the output in a buffer 
you allocate in advance.

`glib/gprintf.h` must be explicitly included in order to use this function.

Since: 2.4

</description>
<parameters>
<parameter name="string">
<parameter_description> the return location for the newly-allocated string.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice
[string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> the list of arguments to insert in the output.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes printed.

</return>
</function>

<function name="g_vfprintf">
<description>
An implementation of the standard fprintf() function which supports 
positional parameters, as specified in the Single Unix Specification.

`glib/gprintf.h` must be explicitly included in order to use this function.

Since: 2.2

</description>
<parameters>
<parameter name="file">
<parameter_description> the stream to write to.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice 
[string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> the list of arguments to insert in the output.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes printed.

</return>
</function>

<function name="g_vprintf">
<description>
An implementation of the standard vprintf() function which supports 
positional parameters, as specified in the Single Unix Specification.

`glib/gprintf.h` must be explicitly included in order to use this function.

Since: 2.2

</description>
<parameters>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice 
[string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> the list of arguments to insert in the output.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes printed.

</return>
</function>

<function name="g_vsnprintf">
<description>
A safer form of the standard vsprintf() function. The output is guaranteed
to not exceed @n characters (including the terminating nul character), so 
it is easy to ensure that a buffer overflow cannot occur.

See also g_strdup_vprintf().

In versions of GLib prior to 1.2.3, this function may return -1 if the 
output was truncated, and the truncated string may not be nul-terminated.
In versions prior to 1.3.12, this function returns the length of the output 
string.

The return value of g_vsnprintf() conforms to the vsnprintf() function 
as standardized in ISO C99. Note that this is different from traditional 
vsnprintf(), which returns the length of the output string.

The format string may contain positional parameters, as specified in 
the Single Unix Specification.


</description>
<parameters>
<parameter name="string">
<parameter_description> the buffer to hold the output.
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> the maximum number of bytes to produce (including the 
terminating nul character).
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice 
string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> the list of arguments to insert in the output.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes which would be produced if the buffer 
was large enough.
</return>
</function>

<function name="g_vsprintf">
<description>
An implementation of the standard vsprintf() function which supports 
positional parameters, as specified in the Single Unix Specification.

`glib/gprintf.h` must be explicitly included in order to use this function.

Since: 2.2

</description>
<parameters>
<parameter name="string">
<parameter_description> the buffer to hold the output.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a standard printf() format string, but notice 
[string precision pitfalls][string-precision]
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> the list of arguments to insert in the output.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes printed.

</return>
</function>

<function name="g_wakeup_acknowledge">
<description>
Acknowledges receipt of a wakeup signal on @wakeup.

You must call this after @wakeup polls as ready.  If not, it will
continue to poll as ready until you do so.

If you call this function and @wakeup is not signaled, nothing
happens.

Since: 2.30

</description>
<parameters>
<parameter name="wakeup">
<parameter_description> a #GWakeup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_wakeup_free">
<description>
Frees @wakeup.

You must not currently be polling on the #GPollFD returned by
g_wakeup_get_pollfd(), or the result is undefined.

</description>
<parameters>
<parameter name="wakeup">
<parameter_description> a #GWakeup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_wakeup_get_pollfd">
<description>
Prepares a @poll_fd such that polling on it will succeed when
g_wakeup_signal() has been called on @wakeup.

@poll_fd is valid until @wakeup is freed.

Since: 2.30

</description>
<parameters>
<parameter name="wakeup">
<parameter_description> a #GWakeup
</parameter_description>
</parameter>
<parameter name="poll_fd">
<parameter_description> a #GPollFD
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_wakeup_new">
<description>
Creates a new #GWakeup.

You should use g_wakeup_free() to free it when you are done.

Since: 2.30

</description>
<parameters>
</parameters>
<return> a new #GWakeup

</return>
</function>

<function name="g_wakeup_signal">
<description>
Signals @wakeup.

Any future (or present) polling on the #GPollFD returned by
g_wakeup_get_pollfd() will immediately succeed until such a time as
g_wakeup_acknowledge() is called.

This function is safe to call from a UNIX signal handler.

Since: 2.30

</description>
<parameters>
<parameter name="wakeup">
<parameter_description> a #GWakeup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_warn_if_fail">
<description>
Logs a warning if the expression is not true.

Since: 2.16

</description>
<parameters>
<parameter name="expr">
<parameter_description> the expression to check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_warn_if_reached">
<description>
Logs a warning.

Since: 2.16

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_warn_message">
<description>

</description>
<parameters>
<parameter name="domain">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="warnexpr">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_warning">
<description>
A convenience function/macro to log a warning message. The message should
typically *not* be translated to the user's language.

This is not intended for end user error reporting. Use of #GError is
preferred for that instead, as it allows calling functions to perform actions
conditional on the type of error.

You can make warnings fatal at runtime by setting the `G_DEBUG`
environment variable (see
[Running GLib Applications](glib-running.html)):

|[
G_DEBUG=fatal-warnings gdb ./my-program
]|

Any unrelated failures can be skipped over in
[gdb](https://www.gnu.org/software/gdb/) using the `continue` command.

If g_log_default_handler() is used as the log handler function,
a newline character will automatically be appended to @..., and
need not be entered manually.

If structured logging is enabled, this will use g_log_structured();
otherwise it will use g_log(). See
[Using Structured Logging][using-structured-logging].

</description>
<parameters>
<parameter name="Varargs">
<parameter_description> format string, followed by parameters to insert
into the format string (as with printf())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_weak_ref_clear">
<description>
Frees resources associated with a non-statically-allocated #GWeakRef.
After this call, the #GWeakRef is left in an undefined state.

You should only call this on a #GWeakRef that previously had
g_weak_ref_init() called on it.

Since: 2.32

</description>
<parameters>
<parameter name="weak_ref">
<parameter_description> location of a weak reference, which
may be empty
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_weak_ref_get">
<description>
If @weak_ref is not empty, atomically acquire a strong
reference to the object it points to, and return that reference.

This function is needed because of the potential race between taking
the pointer value and g_object_ref() on it, if the object was losing
its last reference at the same time in a different thread.

The caller should release the resulting reference in the usual way,
by using g_object_unref().

Since: 2.32

</description>
<parameters>
<parameter name="weak_ref">
<parameter_description> location of a weak reference to a #GObject
</parameter_description>
</parameter>
</parameters>
<return> the object pointed to
by @weak_ref, or %NULL if it was empty

</return>
</function>

<function name="g_weak_ref_init">
<description>
Initialise a non-statically-allocated #GWeakRef.

This function also calls g_weak_ref_set() with @object on the
freshly-initialised weak reference.

This function should always be matched with a call to
g_weak_ref_clear().  It is not necessary to use this function for a
#GWeakRef in static storage because it will already be
properly initialised.  Just use g_weak_ref_set() directly.

Since: 2.32

</description>
<parameters>
<parameter name="weak_ref">
<parameter_description> uninitialized or empty location for a weak
reference
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_weak_ref_set">
<description>
Change the object to which @weak_ref points, or set it to
%NULL.

You must own a strong reference on @object while calling this
function.

Since: 2.32

</description>
<parameters>
<parameter name="weak_ref">
<parameter_description> location for a weak reference
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a #GObject or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_win32_check_windows_version">
<description>
Returns whether the version of the Windows operating system the
code is running on is at least the specified major, minor and
service pack versions.  See MSDN documentation for the Operating
System Version.  Software that needs even more detailed version and
feature information should use the Win32 API VerifyVersionInfo()
directly.

Successive calls of this function can be used for enabling or
disabling features at run-time for a range of Windows versions,
as per the VerifyVersionInfo() API documentation.

Since: 2.44

</description>
<parameters>
<parameter name="major">
<parameter_description> major version of Windows
</parameter_description>
</parameter>
<parameter name="minor">
<parameter_description> minor version of Windows
</parameter_description>
</parameter>
<parameter name="spver">
<parameter_description> Windows Service Pack Level, 0 if none
</parameter_description>
</parameter>
<parameter name="os_type">
<parameter_description> Type of Windows OS
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the Windows Version is the same or greater than
the specified major, minor and service pack versions, and
whether the running Windows is a workstation or server edition
of Windows, if specifically specified.

</return>
</function>

<function name="g_win32_error_message">
<description>
Translate a Win32 error code (as returned by GetLastError() or
WSAGetLastError()) into the corresponding message. The message is
either language neutral, or in the thread's language, or the user's
language, the system's language, or US English (see docs for
FormatMessage()). The returned string is in UTF-8. It should be
deallocated with g_free().


</description>
<parameters>
<parameter name="error">
<parameter_description> error code.
</parameter_description>
</parameter>
</parameters>
<return> newly-allocated error message
</return>
</function>

<function name="g_win32_get_command_line">
<description>
Gets the command line arguments, on Windows, in the GLib filename
encoding (ie: UTF-8).

Normally, on Windows, the command line arguments are passed to main()
in the system codepage encoding.  This prevents passing filenames as
arguments if the filenames contain characters that fall outside of
this codepage.  If such filenames are passed, then substitutions
will occur (such as replacing some characters with '?').

GLib's policy of using UTF-8 as a filename encoding on Windows was
designed to localise the pain of dealing with filenames outside of
the system codepage to one area: dealing with commandline arguments
in main().

As such, most GLib programs should ignore the value of argv passed to
their main() function and call g_win32_get_command_line() instead.
This will get the &quot;full Unicode&quot; commandline arguments using
GetCommandLineW() and convert it to the GLib filename encoding (which
is UTF-8 on Windows).

The strings returned by this function are suitable for use with
functions such as g_open() and g_file_new_for_commandline_arg() but
are not suitable for use with g_option_context_parse(), which assumes
that its input will be in the system codepage.  The return value is
suitable for use with g_option_context_parse_strv(), however, which
is a better match anyway because it won't leak memory.

Unlike argv, the returned value is a normal strv and can (and should)
be freed with g_strfreev() when no longer needed.

Since: 2.40

</description>
<parameters>
</parameters>
<return> the commandline arguments in the GLib
filename encoding (ie: UTF-8)

</return>
</function>

<function name="g_win32_get_package_installation_directory">
<description>
Try to determine the installation directory for a software package.

This function is deprecated. Use
g_win32_get_package_installation_directory_of_module() instead.

The use of @package is deprecated. You should always pass %NULL. A
warning is printed if non-NULL is passed as @package.

The original intended use of @package was for a short identifier of
the package, typically the same identifier as used for
`GETTEXT_PACKAGE` in software configured using GNU
autotools. The function first looks in the Windows Registry for the
value `#InstallationDirectory` in the key
`#HKLM\Software\@package`, and if that value
exists and is a string, returns that.

It is strongly recommended that packagers of GLib-using libraries
for Windows do not store installation paths in the Registry to be
used by this function as that interfers with having several
parallel installations of the library. Enabling multiple
installations of different versions of some GLib-using library, or
GLib itself, is desirable for various reasons.

For this reason it is recommeded to always pass %NULL as
@package to this function, to avoid the temptation to use the
Registry. In version 2.20 of GLib the @package parameter
will be ignored and this function won't look in the Registry at all.

If @package is %NULL, or the above value isn't found in the
Registry, but @dll_name is non-%NULL, it should name a DLL loaded
into the current process. Typically that would be the name of the
DLL calling this function, looking for its installation
directory. The function then asks Windows what directory that DLL
was loaded from. If that directory's last component is &quot;bin&quot; or
&quot;lib&quot;, the parent directory is returned, otherwise the directory
itself. If that DLL isn't loaded, the function proceeds as if
@dll_name was %NULL.

If both @package and @dll_name are %NULL, the directory from where
the main executable of the process was loaded is used instead in
the same way as above.

Deprecated: 2.18: Pass the HMODULE of a DLL or EXE to
g_win32_get_package_installation_directory_of_module() instead.

</description>
<parameters>
<parameter name="package">
<parameter_description> You should pass %NULL for this.
</parameter_description>
</parameter>
<parameter name="dll_name">
<parameter_description> The name of a DLL that a package provides in UTF-8, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the installation directory for
@package. The string is in the GLib file name encoding,
i.e. UTF-8. The return value should be freed with g_free() when not
needed any longer. If the function fails %NULL is returned.

</return>
</function>

<function name="g_win32_get_package_installation_directory_of_module">
<description>
This function tries to determine the installation directory of a
software package based on the location of a DLL of the software
package.

@hmodule should be the handle of a loaded DLL or %NULL. The
function looks up the directory that DLL was loaded from. If
@hmodule is NULL, the directory the main executable of the current
process is looked up. If that directory's last component is &quot;bin&quot;
or &quot;lib&quot;, its parent directory is returned, otherwise the directory
itself.

It thus makes sense to pass only the handle to a &quot;public&quot; DLL of a
software package to this function, as such DLLs typically are known
to be installed in a &quot;bin&quot; or occasionally &quot;lib&quot; subfolder of the
installation folder. DLLs that are of the dynamically loaded module
or plugin variety are often located in more private locations
deeper down in the tree, from which it is impossible for GLib to
deduce the root of the package installation.

The typical use case for this function is to have a DllMain() that
saves the handle for the DLL. Then when code in the DLL needs to
construct names of files in the installation tree it calls this
function passing the DLL handle.

Since: 2.16

</description>
<parameters>
<parameter name="hmodule">
<parameter_description> The Win32 handle for a DLL loaded into the current process, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a string containing the guessed installation directory for
the software package @hmodule is from. The string is in the GLib
file name encoding, i.e. UTF-8. The return value should be freed
with g_free() when not needed any longer. If the function fails
%NULL is returned.

</return>
</function>

<function name="g_win32_get_package_installation_subdirectory">
<description>
This function is deprecated. Use
g_win32_get_package_installation_directory_of_module() and
g_build_filename() instead.

Deprecated: 2.18: Pass the HMODULE of a DLL or EXE to
g_win32_get_package_installation_directory_of_module() instead, and
then construct a subdirectory pathname with g_build_filename().

</description>
<parameters>
<parameter name="package">
<parameter_description> You should pass %NULL for this.
</parameter_description>
</parameter>
<parameter name="dll_name">
<parameter_description> The name of a DLL that a package provides, in UTF-8, or %NULL.
</parameter_description>
</parameter>
<parameter name="subdir">
<parameter_description> A subdirectory of the package installation directory, also in UTF-8
</parameter_description>
</parameter>
</parameters>
<return> a string containing the complete path to @subdir inside
the installation directory of @package. The returned string is in
the GLib file name encoding, i.e. UTF-8. The return value should be
freed with g_free() when no longer needed. If something goes wrong,
%NULL is returned.

</return>
</function>

<function name="g_win32_get_windows_version">
<description>
This function is deprecated. Use
g_win32_check_windows_version() instead.

Deprecated: 2.44: Be aware that for Windows 8.1 and Windows Server
2012 R2 and later, this will return 62 unless the application is
manifested for Windows 8.1/Windows Server 2012 R2, for example.
MSDN stated that GetVersion(), which is used here, is subject to
further change or removal after Windows 8.1.

</description>
<parameters>
</parameters>
<return> The version information.

</return>
</function>

<function name="g_win32_getlocale">
<description>
The setlocale() function in the Microsoft C library uses locale
names of the form &quot;English_United States.1252&quot; etc. We want the
UNIXish standard form &quot;en_US&quot;, &quot;zh_TW&quot; etc. This function gets the
current thread locale from Windows - without any encoding info -
and returns it as a string of the above form for use in forming
file names etc. The returned string should be deallocated with
g_free().


</description>
<parameters>
</parameters>
<return> newly-allocated locale name.
</return>
</function>

<function name="g_win32_locale_filename_from_utf8">
<description>
Converts a filename from UTF-8 to the system codepage.

On NT-based Windows, on NTFS file systems, file names are in
Unicode. It is quite possible that Unicode file names contain
characters not representable in the system codepage. (For instance,
Greek or Cyrillic characters on Western European or US Windows
installations, or various less common CJK characters on CJK Windows
installations.)

In such a case, and if the filename refers to an existing file, and
the file system stores alternate short (8.3) names for directory
entries, the short form of the filename is returned. Note that the
&quot;short&quot; name might in fact be longer than the Unicode name if the
Unicode name has very short pathname components containing
non-ASCII characters. If no system codepage name for the file is
possible, %NULL is returned.

The return value is dynamically allocated and should be freed with
g_free() when no longer needed.

Since: 2.8

</description>
<parameters>
<parameter name="utf8filename">
<parameter_description> a UTF-8 encoded filename.
</parameter_description>
</parameter>
</parameters>
<return> The converted filename, or %NULL on conversion
failure and lack of short names.

</return>
</function>

<function name="gboolean">
<description>
A standard boolean type.
Variables of this type should only contain the value
%TRUE or %FALSE.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gchar">
<description>
Corresponds to the standard C char type.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gchararray">
<description>
A C representable type name for #G_TYPE_STRING.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gconstpointer">
<description>
An untyped pointer to constant data.
The data pointed to should not be changed.

This is typically used in function prototypes to indicate
that the data pointed to will not be altered by the function.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdouble">
<description>
Corresponds to the standard C double type.
Values of this type can range from -#G_MAXDOUBLE to #G_MAXDOUBLE.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gfloat">
<description>
Corresponds to the standard C float type.
Values of this type can range from -#G_MAXFLOAT to #G_MAXFLOAT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gint">
<description>
Corresponds to the standard C int type.
Values of this type can range from #G_MININT to #G_MAXINT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gint16">
<description>
A signed integer guaranteed to be 16 bits on all platforms.
Values of this type can range from #G_MININT16 (= -32,768) to
#G_MAXINT16 (= 32,767).

To print or scan values of this type, use
%G_GINT16_MODIFIER and/or %G_GINT16_FORMAT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gint32">
<description>
A signed integer guaranteed to be 32 bits on all platforms.
Values of this type can range from #G_MININT32 (= -2,147,483,648)
to #G_MAXINT32 (= 2,147,483,647).

To print or scan values of this type, use
%G_GINT32_MODIFIER and/or %G_GINT32_FORMAT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gint64">
<description>
A signed integer guaranteed to be 64 bits on all platforms.
Values of this type can range from #G_MININT64
(= -9,223,372,036,854,775,808) to #G_MAXINT64
(= 9,223,372,036,854,775,807).

To print or scan values of this type, use
%G_GINT64_MODIFIER and/or %G_GINT64_FORMAT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gint8">
<description>
A signed integer guaranteed to be 8 bits on all platforms.
Values of this type can range from #G_MININT8 (= -128) to
#G_MAXINT8 (= 127).

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gintptr">
<description>
Corresponds to the C99 type intptr_t,
a signed integer type that can hold any pointer.

To print or scan values of this type, use
%G_GINTPTR_MODIFIER and/or %G_GINTPTR_FORMAT.

Since: 2.18

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="glib__private__">
<description>
Do not call this function; it is used to share private
API between glib, gobject, and gio.

</description>
<parameters>
<parameter name="arg">
<parameter_description> Do not use this argument
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="glib_binary_age">
<description>
The binary age of the GLib library.
Defines how far back backwards compatibility reaches.

An integer variable exported from the library linked
against at application run time.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="glib_check_version">
<description>
Checks that the GLib library in use is compatible with the
given version. Generally you would pass in the constants
#GLIB_MAJOR_VERSION, #GLIB_MINOR_VERSION, #GLIB_MICRO_VERSION
as the three arguments to this function; that produces
a check that the library in use is compatible with
the version of GLib the application or module was compiled
against.

Compatibility is defined by two things: first the version
of the running library is newer than the version
@required_major.required_minor.@required_micro. Second
the running library must be binary compatible with the
version @required_major.required_minor.@required_micro
(same major version.)

Since: 2.6

</description>
<parameters>
<parameter name="required_major">
<parameter_description> the required major version
</parameter_description>
</parameter>
<parameter name="required_minor">
<parameter_description> the required minor version
</parameter_description>
</parameter>
<parameter name="required_micro">
<parameter_description> the required micro version
</parameter_description>
</parameter>
</parameters>
<return> %NULL if the GLib library is compatible with the
given version, or a string describing the version mismatch.
The returned string is owned by GLib and must not be modified
or freed.

</return>
</function>

<function name="glib_gettext">
<description>
Returns the translated string from the glib translations.
This is an internal function and should only be used by
the internals of glib (such as libgio).


</description>
<parameters>
<parameter name="str">
<parameter_description> The string to be translated
</parameter_description>
</parameter>
</parameters>
<return> the transation of @str to the current locale
</return>
</function>

<function name="glib_interface_age">
<description>
The interface age of the GLib library.
Defines how far back the API has last been extended.

An integer variable exported from the library linked
against at application run time.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="glib_major_version">
<description>
The major version of the GLib library.

An integer variable exported from the library linked
against at application run time.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="glib_mem_profiler_table">
<description>
Used to be a #GMemVTable containing profiling variants of the memory
allocation functions, but this variable shouldn't be modified anymore.

Deprecated: 2.46: Use other memory profiling tools instead

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="glib_micro_version">
<description>
The micro version number of the GLib library.

An integer variable exported from the library linked
against at application run time.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="glib_minor_version">
<description>
The minor version number of the GLib library.

An integer variable exported from the library linked
against at application run time.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="glib_pgettext">
<description>
This function is a variant of glib_gettext() which supports
a disambiguating message context. See g_dpgettext() for full
details.

This is an internal function and should only be used by
the internals of glib (such as libgio).


</description>
<parameters>
<parameter name="msgctxtid">
<parameter_description> a combined message context and message id, separated
by a \004 character
</parameter_description>
</parameter>
<parameter name="msgidoffset">
<parameter_description> the offset of the message id in @msgctxid
</parameter_description>
</parameter>
</parameters>
<return> the translation of @str to the current locale
</return>
</function>

<function name="glong">
<description>
Corresponds to the standard C long type.
Values of this type can range from #G_MINLONG to #G_MAXLONG.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="goffset">
<description>
A signed integer type that is used for file offsets,
corresponding to the POSIX type `off_t` as if compiling with
`_FILE_OFFSET_BITS` set to 64. #goffset is always 64 bits wide, even on
32-bit architectures.
Values of this type can range from #G_MINOFFSET to
#G_MAXOFFSET.

To print or scan values of this type, use
%G_GOFFSET_MODIFIER and/or %G_GOFFSET_FORMAT.

Since: 2.14

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gpointer">
<description>
An untyped pointer.
#gpointer looks better and is easier to use than void*.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gshort">
<description>
Corresponds to the standard C short type.
Values of this type can range from #G_MINSHORT to #G_MAXSHORT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gsize">
<description>
An unsigned integer type of the result of the sizeof operator,
corresponding to the size_t type defined in C99.
This type is wide enough to hold the numeric value of a pointer,
so it is usually 32 bit wide on a 32-bit platform and 64 bit wide
on a 64-bit platform. Values of this type can range from 0 to
#G_MAXSIZE.

To print or scan values of this type, use
%G_GSIZE_MODIFIER and/or %G_GSIZE_FORMAT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gssize">
<description>
A signed variant of #gsize, corresponding to the
ssize_t defined on most platforms.
Values of this type can range from #G_MINSSIZE
to #G_MAXSSIZE.

To print or scan values of this type, use
%G_GSSIZE_MODIFIER and/or %G_GSSIZE_FORMAT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="guchar">
<description>
Corresponds to the standard C unsigned char type.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="guint">
<description>
Corresponds to the standard C unsigned int type.
Values of this type can range from 0 to #G_MAXUINT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="guint16">
<description>
An unsigned integer guaranteed to be 16 bits on all platforms.
Values of this type can range from 0 to #G_MAXUINT16 (= 65,535).

To print or scan values of this type, use
%G_GINT16_MODIFIER and/or %G_GUINT16_FORMAT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="guint32">
<description>
An unsigned integer guaranteed to be 32 bits on all platforms.
Values of this type can range from 0 to #G_MAXUINT32 (= 4,294,967,295).

To print or scan values of this type, use
%G_GINT32_MODIFIER and/or %G_GUINT32_FORMAT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="guint64">
<description>
An unsigned integer guaranteed to be 64-bits on all platforms.
Values of this type can range from 0 to #G_MAXUINT64
(= 18,446,744,073,709,551,615).

To print or scan values of this type, use
%G_GINT64_MODIFIER and/or %G_GUINT64_FORMAT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="guint8">
<description>
An unsigned integer guaranteed to be 8 bits on all platforms.
Values of this type can range from 0 to #G_MAXUINT8 (= 255).

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="guintptr">
<description>
Corresponds to the C99 type uintptr_t,
an unsigned integer type that can hold any pointer.

To print or scan values of this type, use
%G_GINTPTR_MODIFIER and/or %G_GUINTPTR_FORMAT.

Since: 2.18

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gulong">
<description>
Corresponds to the standard C unsigned long type.
Values of this type can range from 0 to #G_MAXULONG.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gunichar">
<description>
A type which can hold any UTF-32 or UCS-4 character code,
also known as a Unicode code point.

If you want to produce the UTF-8 representation of a #gunichar,
use g_ucs4_to_utf8(). See also g_utf8_to_ucs4() for the reverse
process.

To print/scan values of this type as integer, use
%G_GINT32_MODIFIER and/or %G_GUINT32_FORMAT.

The notation to express a Unicode code point in running text is
as a hexadecimal number with four to six digits and uppercase
letters, prefixed by the string &quot;U+&quot;. Leading zeros are omitted,
unless the code point would have fewer than four hexadecimal digits.
For example, &quot;U+0041 LATIN CAPITAL LETTER A&quot;. To print a code point
in the U+-notation, use the format string &quot;U+\%04&quot;G_GINT32_FORMAT&quot;X&quot;.
To scan, use the format string &quot;U+\%06&quot;G_GINT32_FORMAT&quot;X&quot;.

|[
gunichar c;
sscanf (&quot;U+0041&quot;, &quot;U+%06&quot;G_GINT32_FORMAT&quot;X&quot;, &amp;c)
g_print (&quot;Read U+%04&quot;G_GINT32_FORMAT&quot;X&quot;, c);
]|

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gunichar2">
<description>
A type which can hold any UTF-16 code
point&lt;footnote id=&quot;utf16_surrogate_pairs&quot;&gt;UTF-16 also has so called
&lt;firstterm&gt;surrogate pairs&lt;/firstterm&gt; to encode characters beyond
the BMP as pairs of 16bit numbers. Surrogate pairs cannot be stored
in a single gunichar2 field, but all GLib functions accepting gunichar2
arrays will correctly interpret surrogate pairs.&lt;/footnote&gt;.

To print/scan values of this type to/from text you need to convert
to/from UTF-8, using g_utf16_to_utf8()/g_utf8_to_utf16().

To print/scan values of this type as integer, use
%G_GINT16_MODIFIER and/or %G_GUINT16_FORMAT.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gushort">
<description>
Corresponds to the standard C unsigned short type.
Values of this type can range from 0 to #G_MAXUSHORT.

</description>
<parameters>
</parameters>
<return></return>
</function>

</root>
